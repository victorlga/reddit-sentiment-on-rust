{
  "summary": {
    "positive": 2413,
    "negative": 195
  },
  "units": [
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 93.99093,
      "arousal": 69.274376,
      "dominance": 78.117914,
      "text": "Rust success story that killed Rust usage in a company"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 67.19191089795919,
      "arousal": 55.41672459183673,
      "dominance": 59.577028020408164,
      "text": "Someone posted an AI generated Reddit post on r/rustjerk titled [Why Our CTO Banned Rust After One Rewrite](https://www.reddit.com/r/rustjerk/comments/1koe69y/why_our_cto_banned_rust_after_one_rewrite/?share_id=gEZ9ry4zpFIEQlU8xKvvN&utm_content=1&utm_medium=ios_app&utm_name=ioscss&utm_source=share&utm_term=1). It's obviously a fake, but I have a story that bears resemblance to parts of the AI slop in relation to Rust's project success being its' death in a company. Also, I can't sleep, I'm on painkillers, after a surgery a few days ago, so I have some time to kill until I get sleepy again, so here it goes.\n\nA few years ago I've been working at a unicorn startup that was growing extremely fast during the pandemic. The main application was written in Ruby on Rails, and some video tooling was written in Node.js, but we didn't have any usage of a fast compiled language like Rust or Go. A few months after I joined we had to implement a real-time service that would allow us to get information who is online (ie. a green dot on a profile), and what the users are doing (for example: N users are viewing presentation X, M users is in are in a marketing booth etc). Not too complex, but with the expected growth we were aiming at 100k concurrent users to start with. Which again, is not \\*that\\* hard, but most of the people involved agreed Ruby is not the best choice for it.\n\nA discussion to choose the language started. The team tasked with writing the service chose Rust, but the management was not convinced, so they proposed they would write a few proof of concept services, one in a different language: Elixir, Rust, Ruby, and Node.js. I'm honestly not sure why Go wasn't included as I was on vacation at the time, and I think it could have been a viable choice. Anyways, after a week or so the proof of concepts were finished and we've benchmarked them. I was not on the team doing them, but I was involved with many performance and observability related tasks, so I was helping with benchmarking the solutions. The results were not surprising: Rust was the fastest, with the lowest memory footprint, then was Elixir, Node.js, and Ruby. With a caveat that the Node.js version would have to be eventually distributed cause of the single threaded runtime, which we were already maxing on a relatively small servers. Another interesting thing is that the Rust version had an issue caused by how the developer was using async futures sending messages to clients - it was looping through all of the clients to get the list of channels to send to, which was blocking the runtime for a few seconds under heavy load. Easy to fix, if you know what you're doing, but a beginner would get it right in Go or Elixir more likely than in Rust. Although maybe not a fair point cause other proof of concepts were all written by people with prior language experience, only the Rust PoC was written by a first-time Rust developer.\n\nAfter discussing the benchmarks, ergonomics of the languages, the fit in the company, and a few other things, the team chose Rust again. Another interesting thing - the person who wrote the Rust PoC was originally voting for Elixir as he had prior Elixir experience, but after the PoC he voted for Rust. In general, I think the big part of the reason why Rust has been chosen was also its' versatility. Not only the team viewed it as a good fit for networking and web services, but also we could have potentially used it for extending or sharing code between Node.js, Ruby, and eventually other languages we might end up with (like: at this point we knew there are talks about acquiring a startup written in Python). We were also discussing writing SDKs for our APIs in multiple langauges, which was another potentially interesting use case - write the core in Rust, add wrappers for Ruby, Python, Node.js etc.\n\nThe proof of concepts took a bit of time, so we were time pressed, and instead of the original plan of the team writing the service, I was asked to do that as I had prior Rust experience. I was working with the Rust PoC author, and I was doing my best to let him write as much code as possible, with frequent pair programming sessions.\n\nBecause of the time constraints I wanted to keep things as simple as possible, so I proposed a database-like solution. With a simple enough workload, managing 100k connections in Rust is not a big deal. For the MVP we also didn't need any advanced features: mainly ask if a user with a given id is online and where they are in the app. If user disconnects, it means they're offline. If the service dies, we restart it, and let the clients reconnect. Later on we were going to add events like \"user\\_online\" or \"user\\_entered\\_area\" etc, but that didn't sound like a big deal either. We would keep everything in memory for real-time usage, and push events to Kafka for later processing. So the service was essentially a WebSocket based API wrapping a few hash maps in memory.\n\nWe had a first version ready for production in two weeks. We deployed it after one or two weeks more, that we needed for the SRE team to prepare the infrastructure. Two servers with a failover - if the main server fails we switch all of the clients to the secondary. In the following month or so we've added a few more features and the service was running without any issues at expected loads of <100k users.\n\nUnfortunately, the plans within the company changed, and we've been asked to put the service into maintenance mode as the company didn't want to invest more into real time features. So we checked the alerting, instrumentation etc, left the service running, and grudgingly got back to our previous teams, and tasks. The service was running uninterrupted for the next few months. No errors, no bugs, nothing, a dream for the infrastructure team.\n\nAfter a few months the company was preparing for a big event with expected peak of 500k concurrent users. As me and the other author of the service were busy with other stuff, the company decided to hire 3 Rust developers to bring the Rust service up to expected performance. The new team got to benchmarking and they found a few bottlenecks. Outside the service. After a bit of kernel settings tweaking, changing the load balancer configuration etc. the service was able to handle 1M concurrent users with p99=10ms, and 2M concurrent users with p99=25ms or so. I don't remember the exact numbers, but it was in this ballpark, on a 64 core (or so) machine.\n\nThat's where the problems started. When the leadership made the decision to hire the Rust developers, the director responsible for the decision was in favour of expanding Rust usage, but when a company grows from 30 to 1000 people in a year, frequent reorgs, team changes, and title changes are inevitable. The new director, responsible for the project at the time it was evaluated for performance, was not happy with it. His biggest problem? If there was no additional work needed for the service, we had three engineers with nothing to do!\n\nNow, while that sounds like a potential problem, I've seen it as an opportunity. A few other teams were already interested in starting to use Rust for their code, with what I thought were legitimately good use cases for Rust usage, like for example processing events to gather analytics, or a real time notification service. I need to add, two out of the three Rust devs were very experienced, with background in fin-tech and distributed systems. So we've made a case for expanding Rust usage in the company. Unfortunately the director responsible for the decision was adamant. He didn't budge at all, and shortly after the discussion started he told the Rust devs to better learn Ruby or Node.js or start looking for a new job. A huge waste, in my opinion, as they all left not long after, but there was not much we could do.\n\nNow, to be absolutely fair, I understand some of the arguments behind the decision, like, for example, Rust being a relatively niche language at that time (2020 or so), and we had way more developers knowing Node.js and Ruby than Rust. But then there were also risks involved in banning Rust usage, like, what to do with the sole Rust service? With entire teams eager to try Rust for their services, and with 3 devs ready to help with the expansion, I know what would be my answer, but alas that never came to be.\n\nWhat's the funniest part of the story, and the part that resembles the main point of the AI slop article, is that if the Rust service wasn't as successful, the company would have probably kept the Rust team. If, let's say, they had to spend months on optimising the service, which was the case in a lot of the other services in the company, no one would have blinked an eye. Business as usual, that's just how things are. And then, eventually, new features were needed, but the Rust team never get that far (which was also an ongoing problem in the company - we need a feature X, it would be easiest to implement it in the Rust service, but the Rust service has no team... oh well, I guess we will hack around it with a sub-optimal solution that would take considerably more time and that would be considerably more complex than modifying the service in question).\n\nNow a small bonus, what happened after? Shortly after the decision about banning Rust for any new stuff, the decision was also made to rewrite the Rust service into Node.js in order to allow existing teams to maintain it. There was one attempt taken that failed. Now, to be completely fair, I am aware that it \\*is\\* possible to write such a service in Node.js. The problem is, though, a single Node.js process can't handle this kind of load cause of the runtime characteristics (single thread, with limited ability to offload tasks to service workers, which is simply not enough). Which also means, the architecture would have to be changed. No longer a single process, single server setup, but multiple processes synced through some kind of a service, database, or a queue. As far as I remember the person doing the rewrite decided to use a hosted service called Ably, to not have to handle WebSocket connections manually, but unfortunately after 2 months or so, it turned out the solution was not nearly performant enough. So again, I know it's doable, but due to the more complex architecture being required, not a simple as it was in Rust. So the Rust service was just running in production, being brought up mainly on occassions when there was a need to expand it, but without a team it was always ending up either abandoning new features or working around the fact that Rust service is unmaintained."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's a painful read. Thanks for sharing the story!"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.224489500000004,
      "arousal": 45.011337999999995,
      "dominance": 56.746032,
      "text": "I had a situation where I rewrote a service from php to rust and it had a similar problem. It never needed maintenance so no devs ever needed to work on it. As the only rust service in the org it became a problem.\n\nBut what can you do? Quiet successes are hard for management to account for."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.172336,
      "arousal": 46.712018,
      "dominance": 59.750567,
      "text": "I am Elixir dev + Phoenix Web framework.  \nAt least, market for rust dev is better than elixir! You can see it as a positive point!"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.963719,
      "arousal": 56.292517000000004,
      "dominance": 65.9863945,
      "text": "wow, what a read. thank you for sharing.\n\nI was almost in the same situation, except I was one of the devs who were hired after success.\n\nI expanded the main gateway service to handle batching, but the thing is, this service was part of the cloud infra, while I was in the team that was handling the much lower level stuff and picked up this service only because madlad architect instead of focusing on architectural issues implemented this service himself and went to other company.\n\nso effectively I was torn between infra and device level services and 1.5 meetings I needed to go before that.\n\nit ended similarly: infra team was designing a node.js based solution with a whole bunch of complicated cloud setup to at least keep up with the load rust service was handling like nothing."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "What the company actually should have done is hire Rust consultants, for this specific project and to unblock bottlenecks. It wasn't necessary to hire full time engineers yet when there was still trepidation in the company."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.4399095,
      "arousal": 57.7097505,
      "dominance": 61.8480725,
      "text": "I’d hardly blame Rust’s success in your company for killing its usage. This is much more obviously (as written) the fault of an individual that failed to see the benefit or opportunity.\n\nWho knows what the actual story was; sometimes things are not as clear in reality as when they are shared from an individual’s perspective. It’s believable, though. A lot of decision makers often become resistant to technologies they don’t understand, especially when they aren’t flashy new buzzword technologies like “AI”."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "how were you handling redundancy?"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "One of the best reads about rust experience so for. Thanks for sharing! 🙏🏽"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.43310650000001,
      "arousal": 63.8322,
      "dominance": 62.0181405,
      "text": "Hope your recovery is going well. I’m just curious why in all of this you folks didn’t evaluate Kotlin, or any JVM language for that matter.\n\nSeems like the organizational problem you ran into was expanding Rust usage within the org enough to support hiring more devs. The implication being that it was harder to justify Rust for less performance sensitive services where developer productivity is more important.\n\nKotlin seems like a best of both worlds blend of performance and developer productivity."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.09750600000001,
      "arousal": 60.941043,
      "dominance": 65.3061225,
      "text": "TLDR: Rust's success in a startup's real-time service led to the Rust team being dissolved for lack of work, hindering further use and complicating replacement."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "> As me and the other author of the service were busy with other stuff, the company decided to hire 3 Rust developers to bring the Rust service up to expected performance. \n\nI don’t get this part. So you’re Ruby/Nodejs shop, and instead of hiring Nodejs/Ruby devs to help with that “other stuff” and move you and the author to the Rust service they decided to hire Rust devs? How is that reasonable?"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.587868625,
      "arousal": 58.98526075,
      "dominance": 58.134920625,
      "text": ">had to implement a real-time service that would allow us to get information who is online (ie. a green dot on a profile),\n\nHave not read the rest yet (I will), but I can already see where this is going.\n\nSo many times I have seen engineers tie themselves in knots over trying to something in \"real time\". You are very rarely ACTUALLY on such a hot path as that, and an eventually consistent update is almost always good enough -- just throw the updates into a queue, or cache them in Redis or whatever, and the consuming service can update whenever it wants.\n\nThese patterns don't have anything to do with the speed of the language itself either, I'd bet money it could have been done in Ruby with no problem.\n\nEDIT: That was a saga. I am still hung up on how the whole thing even started. \n\n>A discussion to choose the language started.\n\nWhy??\n\nSounds like the engineering strategy was very unclear. For a technology org to run well, at some point things as fundamental as what language you are using needs to be \"settled science\" - so it's not a surprise to me that management got frustrated.\n\nIf there was a burning need for a fast compiled language in your tech stack, that decision should probably have been made at a higher level.\n\nThe director was correct in that three people were hired to work on something with zero plan for what they would work on afterwards. That's not fair on anyone involved - but especially it is not fair on the engineers - the director then had to deal with this problem (I am assuming these decisions were made without their involvement).\n\nIt sounds like the engineers were at least given the chance to work on other things though (in Ruby or Nodejs) which sounds fair in the circumstances IMO"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.33601318181819,
      "arousal": 60.616367636363634,
      "dominance": 63.533292,
      "text": "Typical. Different companies, same problems. \n\nMy friend works at a unicorn 🦄, founded by a Harvard graduate where middle management derives self-importance by having something to bring to The Escalation Meeting. My friend never has anything that needs to be escalated, and his peers think he's weird for it. But his team delivers feature after feature and never misses a deadline. Incidentally, this company spends $500k/year PER DEVELOPER on development environments because they built a monolithic turd.\n\nI'm a consultant that's been helping the same company for 10 years (with some minor stints elsewhere). The only reason I've been with them so long is they made a habit of hiring (a) only from the top 10 computer science schools in the country (b) only and I mean only, hiring these people as interns. When I showed up 10 years ago, the whole system was barely functioning, and everything looked like it was some incomplete, half done in the oven, CS200 programming assignment. I actually didn't know why at first people were writing their own Queue data structures, etc. It was honestly the most confusing and confounding experience of my whole career. To top it off, the Director of Engineering (homegrown) apparently was sleeping with all the female interns, but they couldn't fire him right away because he had built up a decade of key man risk. Since the organization lacked real technical leadership, nobody had any documentation on any projects he had done. They literally stopped using self-hosted Confluence because the server was so shitty and slow that everyone agreed it wasn't worth keeping.\n\nAnyway. Go Rust ❤️ 💙 💜 💖 💗 💘 ❤️"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is the perfect followup to that post on r/rustjerk."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.05139866666667,
      "arousal": 61.75359,
      "dominance": 71.995465,
      "text": "In my experience, the success of any new technology has (sadly) more to do with marketing than actual results.\n\nOnce something works well, the best path to success is to find someone in the company with enough authority / visibility to market it to their peers. Then there will be new request, etc ..."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A great drama film"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ugh 😑"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "This is just a good story. Thank you for sharing!"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 68.253968,
      "dominance": 75.623583,
      "text": "Reminds me of (my) old RESF problem meme: https://www.reddit.com/r/rustjerk/comments/fhqmny/resf_problems/ . It was inspired by a little not-very important service I wrote at $job in Rust."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sorry but I don't understand: Why the manager had to ban Rust usage? Is that because only the Rust team and the three developers know it, or the manager just want to use Node.js?"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.1791385,
      "arousal": 66.836735,
      "dominance": 46.882086,
      "text": "I hope you are feeling better after your surgery"
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53288,
      "arousal": 46.485261,
      "dominance": 60.884354,
      "text": "https://m.youtube.com/watch?v=RFrKffrKCeU\n\nReminds me of this talk."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I guest while they leaved this company, they would get higher salary in next company they applied, just said \"I am one of three people who makes an application work well with hundred thousand users without problem\"."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.756614000000006,
      "arousal": 59.10808766666667,
      "dominance": 60.88435366666667,
      "text": "It might be off-topic, but your story somehow inspires me on being good at my language so that someone fired me bc my system works too stable. Sounds insane, but a nice target to aim at."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.716553000000005,
      "arousal": 63.5487525,
      "dominance": 54.138322,
      "text": ">  if the Rust service wasn't as successful, the company would have probably kept the Rust team\n\nI suspect this is exactly why Python and Node jobs are so plentiful - it takes an army of developers to maintain the mess, if it works at all."
    },
    {
      "post_title": "Rust success story that killed Rust usage in a company",
      "created_utc": 1747527105.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You say the caveat for the nodejs version was that it would have to be distributed eventually, but all the solutions would have to be distributed because of redundancy and scaling. I don't really see the choice of language having an impact on performance here at all, architecture is where the performance comes from. Rust can run the database or Redis query in 10 microseconds, Nodejs in 50, who cares?"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What is \"bad\" about Rust?"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 54.98866233333333,
      "arousal": 47.883598,
      "dominance": 51.43613,
      "text": "Hello fellow Rustaceans,\n\nI have been using Rust for quite a while now and am making a programming language in Rust. I pondered for some time about what Rust is bad about (to try to fix them in my language) and got these points:\n\n1. Verbose Syntax\n2. Slow Compilation Time\n3. Inefficient compatibility with C. (Yes, I know ABI exists but other languages like Zig or C3 does it better)\n\nPlease let me know the other \"bad\" or \"difficult\" parts about Rust.  \nThank you!\n\n**EDIT:** May I also know how would I fix them in my language."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 41.269841,
      "arousal": 58.276644,
      "dominance": 50.453515,
      "text": "The inability to partially borrow self has been a persistent thorn in the language. Discussion and various solutions in\n\nhttps://github.com/rust-lang/rfcs/issues/1215"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "Sometimes, my brain just can’t figure out complex traits and i hate it"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.98715033333333,
      "arousal": 55.55555533333333,
      "dominance": 62.055933333333336,
      "text": "treatment yam attraction simplistic door nose pocket deserve party decide\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.725624,
      "arousal": 59.807255999999995,
      "dominance": 65.873016,
      "text": "The language runs on traits. There is a vocabulary of important traits that you have to learn to become productive. I wish there was a list of must-know traits."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "Lifetimes hell"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "The standard library being precompiled and distributed in compiled form already causes a huge amount of problems, because it prevents people from customizing codegen flags for it. You really want something like cargo -Zbuild-std instead.\n\nAdditionally, the compilation model is inefficient in general (compile times and run times). Compiling non-generic and not-#[inline] functions in their crates means they can't be inlined, causing slower run times, while generic and #[inline] functions are instantiated many times, causing slower compile times."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.06905781818182,
      "arousal": 60.52360336363636,
      "dominance": 62.40981245454545,
      "text": "Working in rust for 6 years\n\nThe biggest actual productivity problems I feel with the language are:\n\n1. It is hard to customize the behavior of foreign types to quickly solve a problem. The best approach is usually wrapper types but this can result in large refactors and cognitive overload as wrapper types proliferate.\n2. There are some weaknesses at language level around how you make extensible and powerful APIs without proliferation of user facing types. Most libraries use “builder pattern” to initialize things that are “complex”. But when generics and defaults get involved then the builder pattern can become extremely complex.\n\nThe biggest productivity problems I see in the ecosystem are:\n\n3. Many parts of the crates io ecosystem still have experimental feel, so often you may start a project and after a while decide to change to other libraries or framework. Within these libraries, community is still figuring out things like “how should errors work”, “how should we use async”. There’s a lot of churn over years and it can be hard for a new dev coming to an older project to navigate and make sense of all that.\n\n4. The error situation in particular is really unfortunate. std::error has been there for years but didn’t work on no std for a long time, and most of it was deprecated and redesigned at various points. Now there is big push to use it (and this error, anyhow, eyre, etc) but it still feels incomplete. Can an error not have multiple independent causes? Really guys? Can there not be n different reasons why a json object could not be deserialized? I usually avoid std error and all related stuff like the plague, it’s going to be years more before it is in a stable happy place and not a source of pain.\n\n5. For a lot of common needs, like “I need a throwaway web app, with simple auth and db”, there’s nothing as mature as Django or rails, or even close. For projects that are in between that and the “sweet spot” for rust, it’s hard to judge when using rust will help you more than slow you down. Most people working in rust are not thinking like “I wish this framework could autogenerate simple db migrations”, they are usually focused on much more low level issues. So the question “should I use rust for this” is always kinda complicated to answer."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.874716625,
      "arousal": 65.57539675,
      "dominance": 62.103174625,
      "text": "I like the more verbose syntax. The whole thing that was the rage a decade or two ago was the scripting languages like PHP, Python, Ruby, and JavaScript picked up steam. Now we came full circle back to heavy typing with TypeScript, PHP and Python and AFAIK Ruby is the only one that hasn't introduced typing yet. Because it's overall good when you're past simple applications. Rust's type system is overall quite good if verbose at time, but it can also guarantee correctlness in a lot of cases and that's why it's loved. If Rust compiled it's also very likely it'll also run perfectly too."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.89795960000001,
      "arousal": 54.240362600000005,
      "dominance": 62.086168,
      "text": "Very minor, but I wish we had `.&`, `.&mut`, and especially `.*` as trailing operations. Deref coercion mostly alleviates the first two, but it would still be nice to have since it flows better with how you think, left to right imo. But trailing dereference would be huge. So often I have these nice chains of operations interrupted by deference operators like `(*(*foo.bar()).baz()).quux()`. It would be much nicer to have `foo.bar().*.baz().*.quux()` imo.\n\nI recall reading a thread a while back that said this was difficult to implement because of parsing ambiguities with float literals and multiplication (`15. * .3f32` vs `var15.*.foo()`) so idk how reasonable it would be to implement for your language."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "There are some fundamental choices in Rust that I think would have better off different. The lack of a Move auto trait is one, and I always think it’s weird that returning “impl T” can leak auto traits like Send and Sync for the underlying type. Some people also want a full on effect system in Rust so that you could be generic over const/async etc. (though I have my doubts). The orphan rule is also an annoyance though it has its benefits too. \n\nAlso I wouldn’t call C compatibility “inefficient” - unergonomic maybe, buts it’s definitely efficient"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.122449,
      "arousal": 42.970522,
      "dominance": 60.997732,
      "text": "Rust destroys metal and it's a carrier of tetanus."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.69614533333333,
      "arousal": 54.195011666666666,
      "dominance": 60.770975,
      "text": "My biggest bugbear is the lack of HKT / Higher Kinded Types. In almost any Rust project I eventually run into this verbose code soup where GATs work but are more complex or just can't be expressive enough at all. Its been an issue for almost a decade now but it holds back Rust from some of the dopamine hits that really clever Haskell can have if your brain operates in the 15th dimension to actually comprehend what its saying.\n\nThe fact the async impl sucks / is tacked on is a blemish too, but like, whatever, every language worth using has blemishes because its actually useful and grew over time. Any sucessor language I'd hope would incoporate async and parallel concepts fundamentally but attempts to do so in the past always burnt out too fast from the onboarding complexity that imposes to a newcomer."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Here's a response I wrote to this same question **ten years** ago: https://www.reddit.com/r/rust/comments/2zu3eo/comment/cpmobc9/"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.7256235,
      "arousal": 58.347505874999996,
      "dominance": 55.49886625,
      "text": "1. Result and Option are AMAZING but it makes the \"throw/catch\"-ness of panic!() THAT MUCH MORE FRUSTRATING! (Someone sets panic to abort and suddenly all the catches stop working)\n2. Error handling inside of Iterator combinators usually require allocating into a \"fail-early\" `Result<Vec<_>,_>` which completely messes with the flow of the lazy iterator.\n3. For library maintainers, semver breakage is extremely hard to track... cargo-semver-checks gets you 99.999% of the way there, but some of these semver breaks are very weird and hard to wrap your head around. It feels like an unintiuitive minefield... it would be nice if cargo-semver-checks could integrate with IDEs and show you when a semver breakage occurs.\n4. (this is not really rust to be fair) rust-analyzer is leaps and bounds better than the old alternative... but it struggles with large projects and it's hard to toggle between stuff like features."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Compilation times"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.767411571428575,
      "arousal": 51.66828628571428,
      "dominance": 62.52024614285715,
      "text": "In production:\n\n * Sticking to a specific `rustc` version (for whatever reason) is unjustifiably painful. Adding more dependencies is a question of luck - I don't understand why so many crate developers choose unreasonably new version of Rust as the MSRV.\n\n And no, fixing transitive dependencies this way is no easy task (sometimes impossible) especially since the compiler toolchain doesn't show which version *would* be compatible nor do the crates tag specific Rust versions against their releases.\n\n This is the biggest painpoint in my opinion.\n\n * `async` is still a bit of a hassle. `async` traits have been mostly standardised, but there still remains a lot to be desired.\n\n * The lack of specialisation of traits.\n\n * `const` generics are mostly okay, but still not as powerful as they could be.\n\n * The unbearably slow build times (especially when building crates which wrap around C++ libraries - not really Rust's fault in this specific scenario).\n\n * The constant state of churn (read: deprecation and lack of maintenance) of crates, much worse than even `npm` world in many cases."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.4784585,
      "arousal": 55.612245,
      "dominance": 67.9705215,
      "text": "Generic programming is not as convenient as in Scala. Making really nice, generic abstractions is more difficult, I think what I'm missing is HKTs and GADTs. Rust can do a lot but somehow I end up missing the few final steps.\n\nBasic constructs are more verbose. For good reason, but still, more verbose as you have to add in `into_iter` and `iter` and `collect`.\n\nImplementing various standard traits for your types can get tedious."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.0952382,
      "arousal": 54.5124718,
      "dominance": 61.51927439999999,
      "text": "I'd like proc macros to be orders of magnitude easier to write, or alternatively, just have a proper reflection system. Currently we're forced to reparse over and over again the same code slowing down compilation times. Most of the time, I just need to identify what entries a struct has and a few tags for each member! This should be easy to write and not require a full independent program.\n\nThe lack of inheritance with virtual functions makes the language kinda hard to sell in bigger teams, as it basically necessitates not only a full re-write but also a redesign of the architecture. As such, once you're on the >1M loc territory, the transition becomes intractable. This addition would be enough to currently push over some teams I know. I know that this feature as is implemented in C++ wouldn't fly, but I think that a better alternative to either a macro mess that is needed to implement an AST or just doing composition when clearly that is not the right intent would be ideal.\n\nThe lifetime of `self` cannot be easily split to its parts to make parts of it shared and parts of it mutable. This has caused in more than one occasion the need to pass all members of the struct as separate parameters so they could be treated individually. I know that treating this problem might require analysis over the hole set of member functions of a struct in order to identify how each function would need the self parameter to be split, and I know this would not match with my previous comment about inheritance as there explicitly you can't know all the member functions of a struct due to some being virtual.\n\nTraits are an objective downgrade compared to C++ templates, making you jump through tons of hoops to get anything done. I wish there was a proper generic function implementation. I do think that traits are amazing to represent interfaces though!\n\nThe async functionality, at least last time I tried it, was really, really clunky once you start wanting to use member functions and traits. I am aware that this is a WIP, but it feels like a tucked on feature that didn't consider the rest of the language."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the functionality of `const` and `const fn` pales in comparison to c++'s `constexpr` and `comptime` in zig. This will get better in the future but right now you're better of just not doing it at all"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "async"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.98941766666667,
      "arousal": 66.70445933333333,
      "dominance": 70.143613,
      "text": "1. The borrow checker can not prove all correct programs are correct. Therefore Rust prohibits many programs despite their correctness.\n2. Rust generics are at-times strictly worst than C++ templates. They can become impossibly verbose.\n3. Rust macros are powerful but outrageously ugly and complex. This can be done much much better.\n\nEdit: those downvotes are irritating. I love Rust. But it's not perfect! Getting downvoting for calling out some valid shortcomings of Rust is quite annoying."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The proliferation of unnamable types is a big problem for me. For example, you can’t if/else return one of two closures, because they can never have the same type."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The worst thing about rust is that it exists to put other languages to shame :). On a real note rust made me not want to program in any other language."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.01814040000001,
      "arousal": 54.8979591,
      "dominance": 59.14965980000001,
      "text": "three things I can come to dislike when programming in rust. 1. The borrow checker. 2. Manual memory management. 3. Hundreds of dependencies \n\nThings I like about rust. 1. The borrow checker 2. Manual memory management. 3. Lots of libraries.\n\nJust depends on how I’m feeling. No manual memory management and borrow checkers means I can be relaxed in my designs and focus on expressing my self in logic vs keeping track of issues in the code. But I come to miss it especially in applications where allocation patterns and gc latency can be a significant factor. And plenty of libraries means you can do a lot easily but also, dependencies are scary. Dependencies need to be kept up to date for security reasons. Dependencies can change, become abandon, and disappear. And borrow checker ensure my massively multithreaded spaghetti code is memory access correct assuming you can read and modify it.\n\nThe compilation time doesnt affect me much. It’s fast enough to get most programs done and bigger programs take more time fits suitably in my mind. I want differential compilation updates to be fast and it is for me. And I don’t have the fastest computer in the world."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 65.873016,
      "dominance": 56.9161,
      "text": "So you're making Python 4 eh? Hope it's got curly braces"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.9297055,
      "arousal": 45.69161,
      "dominance": 55.0453515,
      "text": "rust compilation time is fine.\n\ncompare with Typescript check/eslint/Babel/tree shaker/minimizer/bundler/hack support for old JS runtimes on non trivial project about 2500 npm dependencies."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.15419475,
      "arousal": 50.70861675,
      "dominance": 53.59977325,
      "text": "The trait SAT inscriptions are not the most easiest to undestand.\n\nThe main part of the language is really neat and fine. It's okay with generics (but already start to `<be<kinda,ugly>>`).\n\nThe worst thing is trait bounds. As soon as you start writing it, you basically switch from Rust (main) syntax to some other prolog-like alien moonspeak without control flow (purely declarative), and interspread across the main syntax in a very convoluted way.\n\nI also very much dislike the way lifetime variables are introduced. If you have a structure with a lifetime attached, and you make a generic impl for this structure with a function which has a lifetime parameter, where is the declaration and where is the use of the lifetime variable? It all is completely unergonomic, and 'Item' for higher order is even more confusing.\n\nI don't know how to make it better, but I feel that current form is looks like arkane invocations (Perl grade) instead of well-articulated the rest of the Rust syntax."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.59807275,
      "arousal": 56.575963625,
      "dominance": 52.097505625000004,
      "text": "* non-const mut statics. Yes I know about global hell in C++ and how these kind of objects are a nightmare for a compiler, especially in Rust, but when I have a single threaded application that needs fast access to a used-all-the-time variable (like a cache), then I really wish I didn't have to wrap it in lazystatic<Mutex>. I could pass it around to all functions that need it but it's way too verbose imho.\n* slow compilation time & binary size, and by association the discouragement of dynamic linking. Compiling a big C project from scratch in 1 minute on my 3600X that won't even weigh that much in MiB thanks to dynamically linking the dependencies, I kinda miss that in Rust.\n* Error handling. I just need a code & string for all my errors, but instead I have to deal with multiple error types (like std::io::Error and other custom errors from various crates, as well as Options that need to be treated as errors when they're None). When you handle them in a single function it's kinda bad, unless you go the Box<dyn Error> way.\n* Mutable borrowing of self in situations where you are not modifying the same fields is always tricky."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "\\> to try to fix them in my language\n\nIf I writing one, I would not use special syntax for Optional and Result type. It seem convenience but I love the way Haskell do it by not give specialize syntax for any data type (except monad and arrows which you can op-out by not use them)\n\nAlso I love how Haskell unified sum and product type to single construct (ADT)."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.1632653,
      "arousal": 72.0294786,
      "dominance": 58.33333330000001,
      "text": "I don't think the syntax is verbose, and even then, I don't think that is a contra for a static language. \n\n1. I hate the syntax, I really hate the use of <T> for type parameters. And the :: sometimes makes me uncomfortable (when there are a lot of them). To be fair, I think I began to prefer the lambda syntax of rust over the one in Haskell.\n2. In Haskell if I have a very long type that the system suggested to me, I can copy paste to the file and everything is ok. There was one time that Rust said to me \"this is too big, I don't want to handle this long type\".\n3. I hate the lack of \"panic\" signals in the documentation and lsp. Like, people put them manually, that's an accident waiting to happen. \n4. I have been writing derive macros recently and I hate debugging it. \n5. I'm not sure about the traits hierarchy. It's a complex problem to find a good way to do it. I mean, scala, Idris, purescript, Haskell, koka, Coq, all of them are still struggling with it. Basically, If you have a trait T that is a super trait for T2 and you have multiple possible definitions of T, you end with multiple newtypes, one for every T and that has a possible T2. But now you have to wrap/unwrap constantly. But if you allow multiple trait impls for a single type, then you need to manage them with care and is very verbose and error prone to say:  the impl A2 of T2 requires explicitly the implementation B of T .\n\n\nOf course there are a lot of things I love from rust, but the question wasn't about that."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.56916116000001,
      "arousal": 60.64852608,
      "dominance": 60.87074828,
      "text": "Lots of good suggestions in this thread already for the pain points in Rust 🙂 Since you're looking for things to fix in your language, I wanted to give some \"food for thought\" on language design.\n\nDesigning a programming language is all about trade-offs! Rust even ended up with the \"bad\" points you listed above because it was about balancing trade-offs:\n\n1. Verbose syntax - Rust is a low-level language, so unlike e.g. Python, Rust tries to make it clear which parts of your program are expensive at the syntax level. Also, IIRC it was designed to be (somewhat) familiar for C++ developers.\n2. Slow compilation time - This is a huge pain point for me! But it came about because runtime performance and compile-time safety were a higher priority. I believe trait solving and monomorphization are two big pain points here: it'd be hard to get huge wins without reconsidering one of those first.\n3. Inefficient compatibility with C - C interop is  a very complicated topic (e.g. Zig handles this by using `libclang` internally, which is a pretty hefty dependency!). TL;DR for Rust is it's designed to be \"C-free\" at the language level, but exposes just enough features so interop can be handled at the library level (see: the `libc` and `bindgen` crates)\n\nMaybe this is obvious advice, but basically... if you're interested in fixing problems with Rust, it's _really_ important to think about what trade-offs you're willing to make. Or better yet, what kind of objectives / goals you have for your language, and which you're willing to drop from Rust's goals.\n\nFinally, instead of giving some bad parts about Rust, I'll twist it a bit and give a few possible major changes you could consider for a new Rust-like language. None of these are earth-shattering, but could lead to some interesting options when mixed with Rust's formula (I wouldn't consider these all together, it's more fun to think about them one-by-one):\n\n- Use a runtime\n    - Pros: greatly simplifies async, garbage collection, and probably lots of other features\n    - Cons: bad for systems programming (embedded devices, OSes, etc), bad for interop with other languages\n- Use reference counting and/or garbage collection instead of lifetimes / dropping\n    - Pros: easier to learn, more expressive\n    - Cons: slower at runtime, need to handle cleanup of other types of resources some other way (closing files and network connections, etc)\n- Don't use LLVM, and instead compile directly into another language (such as C)\n    - Pros: better interop, get portability \"for free\", re-use lots of good existing tooling, gives more flexibility to choose between fast runtime / fast compile time\n    - Cons: much harder to get good error messages / debug info, locks you in to problems with the underlying language somewhat\n- Use Lisp-like syntax\n    - Pros: more consistent, very easy to write a parser for, simplifies macros a ton\n    - Cons: less familiar for existing developers, harder for new programmers to transfer skills, can get noisy with lots of nesting"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.58201033333333,
      "arousal": 55.97127750000001,
      "dominance": 62.717309166666666,
      "text": "A gripe that has been bothering me recently is that it’s very annoying to work with uninitialized structures. \n\nLike, if I make an array, its size is known at compile time. It *feels* like it shouldn’t be too hard for the compiler to throw an error if I try to read any portion of it that hasn’t been initialized yet. And maybe that does happen, but I always end up having to initialize it to a default value before working with it anyway.\n\nThe thing that comes to mind most recently is that I had an array of 50 bools to check if a certain thing had happened in the last 50 ticks. The vast majority of times, the entire array would be filled. But it also doesn’t make sense to use a default value because no ticks have occurred. It also feels bad to split it into two types, one having option and one not, because it almost always doesn’t need that. \n\nThere are quite a few ergonomic holes like this in rut. I appreciate the safety the language provides and it’s certainly better than having no guardrails. And I also appreciate that the problem is hard and the thing that *feels* possible may not always be. \n\nBut there’s definitely room for improvement."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "Macros.\n\nI really like the syntax for using macros, but actually making them is living hell."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "In what sense do you feel the syntax is verbose?"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.362244875,
      "arousal": 62.72675725,
      "dominance": 54.620181375,
      "text": "Interesting. I don't mind the syntax (coming from Python, even), and I find C compatibility using bindgen just fine. Yes it's no direct interop like Zig or C++, but in terms of an actual FFI I think it's quite good.\n\nCompile times, especially in CI pipelines, are a pain, though.\n\nFor me it's the rather small stdlib. I know, it's a tradeoff, and that it can be seen as a feature, and it is strongly mitigated by the excellent dependency management provided by cargo. But relying on crates for rather basic things makes me just a bit paranoid. \"Will this be maintained for the foreseeable future? Should I rather roll my own?\"\n\nDon't get me wrong, I don't want to come across as an entitled brat and I know that putting a lot of things in the standard library is both a colossal amount of work and also pain in terms of maintenance that someone needs to put up with. But in direct comparison to Go, or for some things even C++, having a battery or two would be nice.\n\nAs for async or lifetime hell, usually this just brings forward issues that just lead to nasty runtime bugs in other languages and makes me question my design. If you are really sure, there is always Arc, RefCell or unsafe :-)"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "The worst part about Rust is how often this question gets reposted. \n\nThe easiest way to figure this out would be to either try it yourself or read the many posts that we've had discussing this exact same thing."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.403628,
      "arousal": 67.460317,
      "dominance": 66.666667,
      "text": "Testing. Dear god testing. Manual mocks. Everywhere."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "The lack of stable generic const expressions. This is particularly painful if you'd like to compute array sizes at compile time. Currently the only workarounds that I'm aware of are either using nightly or using the [const_arithmetic crate](https://crates.io/crates/const-arithmetic)."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm really annoyed by the fact that even in debug builds lots of local variables are still optimized away. I don't want debug to be fast, I want it to be debuggable."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.19803466666667,
      "arousal": 57.105064,
      "dominance": 52.04081633333334,
      "text": "When I am trying to implement the tree structure using rust, It’s a terrible dev experience for the starters!\nRust is a memory safety programming language but it did not mean no cost"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "Huge disk space used by debug builds and binaries."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.02569933333334,
      "arousal": 60.67649283333333,
      "dominance": 64.62585016666667,
      "text": "Rust isn’t verbose.  It’s just … not.  \nIt’s a language that doesn’t obfuscate what most non-systems langs do so what you’re describing is just more involved because it’s not hidden.\n\nYou could try to remove that but then you have a language that handicaps the learning and understanding of its users. (A cruel trick to play on “beginners”.)\n\nIf you want to help beginners  then what’s needed are visualization tools, strong suggestions for how to do things, and improved docs for various popular libraries that explain the *why* of the design.\n\nRust has done a tremendous job of removing bs complexity, while retaining real complexity.  But it’s aimed at people that understand systems programming and uses fp concepts.\n\nWhat rust needs are aids to get started — ide programs.  Libraries that expose the “common” methods from std and popular libraries, etc.\n\nI’d consider working in that direction rather than making a new language. Languages without extensive tooling are handicapped. What we (programmers/ the world) need is more good tooling to visualize and understand what’s being done — rather than someone’s text to machine preferences the add opinions by obscuring options."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.70219233333334,
      "arousal": 58.04988666666666,
      "dominance": 60.77097533333333,
      "text": "\\- For me lack of learning resources about lifetimes because the one in the book is pretty basic.\n\n\\- I wish they could make the compiling on different platforms much easier like in Golang."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.0997735,
      "arousal": 61.621314999999996,
      "dominance": 54.251701,
      "text": "Considering the \"requirement list\" for Rust you will find that pretty much everything in the language makes sense and there's very little \"baggage\". However, it would be interesting to explore a more pure FP variant of Rust using either HKT's + monads (a la Haskell) or effect types (a la [Koka](https://koka-lang.github.io/koka/doc/index.html)) for mutation, IO, error handling and async."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.102041,
      "arousal": 64.909297,
      "dominance": 63.888889,
      "text": "For tasks that are very quick and dirty, you don't really care about hidden allocations, conversions, performance or perfect correctness."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think error management, dynamical traits, and borrow checker could be improved to introduce more dynamic patterns. some times it feels like the compiler can do the heavy work by itself"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not enough support for some things in the crates ecosystem."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "I would really like to see better support for tuples in generics. Let's say you write a serializer library and want to provide serialization impls for basic types, including tuples. Right now you usually would write a macro that generates like 20 impls for tuples of various lengths (and hope that nobody wants to use a tuple of length 21). Would be really cool to be able to just have proper language support for this and allow arbitrary length tuples in generics."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You think more about satisfying compiler than about your program features, correctness or logic."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.11791360000001,
      "arousal": 50.83900200000001,
      "dominance": 62.69841280000001,
      "text": "Rust actually prevents a lot of otherwise memory-safe behaviour due to its explicit borrowing rules, does it not? For example holding and even writing to two mutable references to the same object is perfectly safe as long as a) the writes are not simultaneous and do not result in a data race, b) the writes do not change the memory layout of the reference (i.e. change the length of a slice, or changing enum variants etc), and in both cases c) the other reference is not read/written to afterwards.\n\nIt might be possible to enforce that a) no mutable reference may be provided across thread or concurrent boundaries, b) no mutable reference can be made if the object is referenced across thread boundaries, and c) no layout changes may be made to the object if there is more than one reference pointing to it or its subfields. This would remain a “safe” language if you bunched every violation of this into unsafe code. The problem would, of course, be implementing this into a borrow checker in a performant way.\n\nSomeone please correct me if I’m wrong here, cause I very likely am."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.993197,
      "arousal": 67.800454,
      "dominance": 80.15873,
      "text": "Not necessarily bad but stuff that could be researched/explored in newer languages:\n\n\n1.Better versioning that help/guide developers keep stability but avoid stagnation\n\nImagine for example if everything in crate is versioned (structs, impls, etc..) and when you update a crate only internals which changed are updated, so for example if data layout of struct didn’t change you could still use it with older versions (etc..). Or perhaps an automatic versioning tooling.\n\n1.a if version was easier, maybe std can be larger as you can now more comfortable have small breaking changes but keep interoperability.\n\n2.Type inference that doesn’t hold back evolution of the language, for example inference.lock file (Read this somewhere) \n\n3.Support interoperability with as different programming languages as much as possible with better ergonomics (Even if it cost performance) \n\n4.More static checks in the language and std\n\nE.g: A file that is open in read only and later calling write will fail in runtime\n\n5.Better deadlock detecting"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.3492064,
      "arousal": 49.1496599,
      "dominance": 59.0929704,
      "text": "Hey the creator of a now archived programming language! [https://github.com/wyst-lang/wyst/tree/legacy](https://github.com/wyst-lang/wyst/tree/legacy)\n\nfirst i'll mention my specific problems then i will explain how you can implement what other people mentioned.\n\n# Use Rust macros instead of making your own parser\n\nThis may seem a bit weird or will conflict with the **Slow Comp-time** Issue but in the end i think it might be worth it. In rust you can make macros that output code (but more importantly you can define your own syntax as the input). What you can do is define a recursive rust macro for parsing something like a function and output the rust code. and even better it offers code completions. **I can make a proof of concept**\n\n# LSP (language server)\n\nA language server is how your IDE can do it's fancy magic, like variable completions, goto, etc. Sadly making one (especially for a custom language) is hard. Tutorials and documentation exist, but you're on your own. A workaround to a LSP is **Using rust macros** instead of your own parser and the rust-analyzer does the rest for you.\n\n# Expandable structs\n\nIn some other languages, there are trait-like definitions but instead of functions it's struct fields. This can be plenty useful in modularity cases. here is an example in TypeScript\n\n    interface BaseType {\n      name: string;\n      age: number;\n    }\n    \n    interface ExtendedType extends BaseType {\n      email: string;\n    }\n    \n    // ExtendedType is equivalent to:\n    // {\n    //   name: string;\n    //   age: number;\n    //   email: string;\n    // }\n\nCurrently in rust this can only be done using attribute macros. The way you can implement it is by making a attribute macro that takes an argument (the `BaseType`) and extends `ExtendedType.`\n\n# Lifetime syntax\n\nWe can all agree on this one, In code generation, simply make the lifetime and add a phantom data to ensure that it's being \"used\", When you get a reference, per say `&str` convert it to `&'a str`, Simple as that."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I heard forced refactoring makes it difficult to quickly test out new ideas when programming games. Apparently, a positive feature of a language can be the negative feature in a certain scenario."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.2721088,
      "arousal": 58.34467119999999,
      "dominance": 73.5600906,
      "text": "in my experience, rust is good for when you want to set something in stone. it is easy to commit to a fundamental design in rust that makes very strong guarantees, and while it is easy to change an implementation within the same structure, changing the structure or the guarantees is very difficult.\n\nwhat this means in practice is, rust is crap for rapid prototyping and excellent for engineering.\n\nwhat I long for is a way to gradually introduce these constraints without having to decide on them from the start. to let myself have implicit clones or rcs or whatever, to program like I would in lisp, until I have settled on a structure and I know it won't change in a hurry, and then I can have it thoroughly borrow checked and manually memory managed and all that.\n\nbut, that said, I think there is definite value in throwing away your prototype, rather than iterating the prototype into the final product. so maybe this limitation isn't a problem at all, but a benefit in disguise."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 31.5759635,
      "arousal": 58.843537,
      "dominance": 50.623582999999996,
      "text": "My biggest gripe with Rust is how ugly the syntax is."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.497354666666666,
      "arousal": 57.294028999999995,
      "dominance": 51.20937266666667,
      "text": "i think optional and named arguments would be great. sometimes functions can't avoid taking a lot of arguments, and for cases like those, instead of having to write hundreds of lines of builder boilerplate (often needing to do runtime checks), or have a macro generate hundreds of lines of builder boilerplate, and needing to avoid adding arguments to functions in fear of breaking api compatibility, it would be nice to just be able to have this feature as part of the language."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "Weak support for immutability.  \nIf something is immutable I should not be bothered with borrowing, lifetimes or \"moving\" ever again. Immutable data by definition is safe to share, look at, copy, etc."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.882086,
      "arousal": 53.911564999999996,
      "dominance": 50.283446999999995,
      "text": "Sometimes the documentation is just insufficient for my understanding. Might be a me problem.\n\nTrying to figure things out by stumbling around blind with auto generated trait definition docs is not very profitable, but the alternative path is hard to find when that's all you have."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the constant wanking with iterators"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.8276645,
      "arousal": 62.755101999999994,
      "dominance": 55.215419499999996,
      "text": "The debugging tools are pretty garbage"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "When things go wrong in async, they often go wrong at runtime, not compile time."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.111111,
      "arousal": 73.015873,
      "dominance": 58.673469499999996,
      "text": "Because the compiler is pretty weighty, I have had trouble compiling certain crates on lightweight systems, like a Raspberry Pi.\n\nSure, cross compilation is a thing but it's not as trivial to set up"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.068027,
      "arousal": 48.185941,
      "dominance": 58.2199545,
      "text": "- slow compilation\n- no binary libraries ecosystem (which could alleviate previous problem)\n- error handling relies on external libraries beyond basic cases\n- async runtimes and partial language support \n- having to redesign data structures to be borrow checker friendly"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think C++ lambda syntax is better and I prefer being able to define explicit capture"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I feel like the rules about traits and implementing traits push me to write much larger modules than I would prefer."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.6258505,
      "arousal": 65.759637,
      "dominance": 70.2380955,
      "text": "Ive been writing a lot of Java recently (making a Minecraft mod) and have really fallen in love with overloading and varargs, those are the two that I most want in Rust. \n\n\nWhile I dont want full-on inheritance, I do really wish there was some way to declare a \"template struct\" that could not be constructed directly, but could be inherited from. Basically just a way to write more complex shared behavior between structs with less boilerplate than traits."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 47.590703,
      "arousal": 51.1621315,
      "dominance": 47.760771,
      "text": "\n> 1) Verbose Syntax\n\nI would argue against this being a real con.  It's a statically typed, system language, so you have to compare against similar languages.  I would put it at average, given the syntax is C-like, but it also has niceties like terse names for common types (i32/u32, str, u8, Vec, etc), and has type inference.  It does have stricter rules because of lifetimes and borrow checking which might make it seem wordier, and it's no lisp.\n\nIf you're referring to the prototyping usability of the language, I would put that less on the syntax and more on it being a statically typed, strict language, and lean on your point #2:\n\n> 2) Slow Compilation Time\n\nFair.  The slower compile-debug cycle and the learning curve are probably the biggest gripes against the language.  It does make up for it by catching more errors at compile time, and having great tooling and compile errors (when you're not in macro/lifetime hell).\n\n> 3) Inefficient compatibility with C. (Yes, I know ABI exists but other languages like Zig or C3 does it better)\n\nI would say this is a neutral point.  Rust has great support for cross-ABI compatibility, and because it doesn't just submit itself to being a C ABI, it gains other benefits.\n\nThere are languages that have great C ABI compatibility, but there are also languages with much worse compatibility (e.g. look at the entire Java ecosystem, or try to interact with C++ from most other languages)."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Lack of ergonomic syntax shortcuts for hash maps."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 55.933484666666665,
      "dominance": 71.579743,
      "text": "Rust is not verbose.  Pascal-like languages are more verbose but cleaner/clearer.  For a reason.  It is unambiguous, easy to parse and reason about. \n\nRust is dyslexic with all these mut, fn, impl, etc. and a lot of symbols.  Of course, a programmer can get used to it. \n\nA \"bad\" thing is there is no good story for implementation reuse.  In OOP inheritance provides implementation reuse.  Go utilizes struct embedding to automatically delegate methods for implementation reuse.  In Rust you have generics.  But it duplicates the code during reification.  Macros, another candidate, is also code duplication, not reuse.  In my opinion, that is a fundamental deficiency of Rust.  Not fatal.  There are workarounds and ways to reduce the duplication effect.  But a deficiency still."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I would like inheritence and also to be able to make methods directly in the struct instead of having a separate impl block.\n\nSome day I dreamt someone would make rust++, a rust with classes, similar to how C++ is C with classes."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.684807500000005,
      "arousal": 55.045351499999995,
      "dominance": 60.770975,
      "text": "Honestly, I thought you guys called each other \"Rusties\" or perhaps even \"Rustics\".  Crustaceans sounds like a dirty gopher spinoff 🦀"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.30007533333333,
      "arousal": 46.749811,
      "dominance": 59.523809666666665,
      "text": "The borrow checker. The fact codes allowed in rust are only a subset of safe codes. That unsafe doesn't go around the borrow checker too. Bunch of stuff that either makes it very hard to write code or makes it very slow and/or unreadable"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 37.301587,
      "arousal": 60.430839,
      "dominance": 44.217687,
      "text": "My own personal notes on this topic I keep in bullet point form in a text file. It's >30 KB at this point."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.641723,
      "arousal": 68.253968,
      "dominance": 76.643991,
      "text": "-> async is still in a work-in-progress state"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like simple languages like C.  Not that I don’t like Rust I really do but it’s complexities really throw me off after so many years with simpler procedural languages.  I have no doubt rust will mature to something really great."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async and waiting for compilation"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 57.086168,
      "dominance": 62.585034,
      "text": "Global iteration/prototyping frictions due to language constains. Comp time is a big issue for me.\nThe more I use rust the more it looks like a very good language for codebases/known systems rewrites, not to developp something substantially new."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.85563133333333,
      "arousal": 49.39531399999999,
      "dominance": 60.12849566666667,
      "text": "Verbose is by design. the best part of rust is you get what you ask for. it does nothing behind your back.\nyou won't find yourself in(ususaly performance) issue becouse you are suposed to know your language doing wizardry behind your back to keep the illusion of being in a hardware that doesn't exist\nand the fact that it is actualy not specialy more verbose than C++ shows how good is the design of the language\n\ni will say that Async is the worse part of Rust right now"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.57078085714285,
      "arousal": 56.57596371428571,
      "dominance": 65.51668285714285,
      "text": "Some Rust features are wide as an ocean, but deep as a puddle.\n\n  \n\\- \"Higienic macros\" - you get TokenStream and must return TokenStream - to write anything at all you must use external crate. Other languages (like Scala) are providing and expecting structs.\n\n\\- Error handling - Rust errors by default are \"File cannot be opened. Code 2\", to add context information - external crates and macros (if I want Java-like stacktrace with file names and lines). You want to enforce adding context in your app? Too bad - you can't add custom clippy lints.\n\n\\- Multithreading - async is still work in progress. And still you have to use Tokio muxes, because standard one does not work. Just make Tokio standard async runtime already.\n\n\\- Community obsesed with corporations - \"If AWS uses Rust that means it's good for everyone else\". Except whole ecosystem is riddled with 0.X libraries - FAANG can use assembly and they will make it look good.\n\n\\- RFC limbo - a lot of RFCs were accepted many years ago and nothing was done since then"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.05668933333334,
      "arousal": 56.76492833333333,
      "dominance": 64.47467866666666,
      "text": "I find the lack of std added cognitive load.\n\nI was looking at crypto and there were several options. I picked rustcrypto. It's modularized to heck so it was confusing which trait from which crate I should use.\n\nAlso looking at http primitives. Just found it hard to pick one to build around. It seems like you have to write wrappers for different http clients as they use their own types.\n\nSometimes there is a defacto winner, sometimes there are competing libraries and you kind of have to roll the dice and hope that you picked the right one to bet on."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "working with public non object safe traits and trying to allow the user to use multiple of those inside a structure."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.2681404375,
      "arousal": 56.6751701875,
      "dominance": 64.66836725,
      "text": "Overall - it's a bit underdeveloped in the fine areas, both in ecosystem and in the language itself. The language and fundamental crates (game engine, GUI) are changing extremely quickly in some areas, and in some areas, not fast enough. \n\nSome of this results in libraries like embedded-hal pursuing an awkward error handling scheme *right* before they hit 1.0.0 and now it's hard to fix it without breaking all the drivers written against it.\n\nSome of this results in your ecosystem being fragmented as people quickly spin up new crates to try ideas that get abandoned a few months later. Like - with `bevy` - there's not really any good GUI option, and there's lots of random GUI framework integration crates that got quickly abandoned. Imagine starting a project with one of these - and then suddenly you're forced to maintain the entire integration layer.\n\nThe lack of a \"winning\" GUI solution is a massive painpoint in my opinion. There's also platforms like `wgpu` which are a bit immature of a project at this point - they work great on the most common platforms, but the moment you step outside to like - an embedded GPU - it falls apart.\n\nOtherwise\n\n- Writing things that can be either sync or async is difficult\n- Difficult to port between different async runtimes (embedded/desktop)\n- Partial borrowing in the borrow checker\n- The coherence constraints imposed that prevent you from implementing traits for foreign types. (this is why every single crate has a `serde` feature flag). I've run into this a surprising amount. Like - reflection in `bevy` needs you to derive something - which is really hard. And I can't really fix the error handling in embedded-hal by implementing From<weird error>\n- Lifetimes are tricky.\n- Compilation times are long.\n\n\nBut I see a ton of promising progress here. I think the only thing that isn't really fundamentally fixable is lifetimes - but that's where there's a bit of an argument to be made that if you're dealing with lifetimes a lot - your application may be better suited with a different architecture. That's part of the reason I jumped to `bevy` and ECS - it just makes dealing with a bunch of essentially globally mutable data fairly clean, painfree, and performant. There's also always the option of using a lot of Box<>/Arc<> - which is a bit verbose but ends up feeling kinda like you're just taking one step towards a language like C#/C++ with smart pointers."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just a minor inconvenience: `rust-fmt` sometimes gives up with unclear reasons. Usually, with long string literals or deeply nested code. Then you have to go back and start randomly splitting code until you find where it's failing."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The syntax is awful. Just because it's a low level language doesn't mean you have to design it and its keywords like it's 1980."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.07331833333333,
      "arousal": 57.18065000000001,
      "dominance": 61.18669666666667,
      "text": "Most of everything people say here are mere symptoms that can be summarised in one word: complexity. \n\nUnfortunately, in recent years, that has shot up exponentially and without control. Rust is an excellent first-generation product and a huge step up from C++ and the like. So I'll be keen to see the core successful parts of Rust drive further innovation with subsequent streamlined language design iterations, be it a new major version or another language entirely, such as hylo.\n\nFor the record,  my personal list would be: \n- the 'novel' module system and the compilation model. \n- async/await and coloured functions in general. Rust fell into the same trap here as C++ by prioritising 'expert opinions' and failing to adhere to the 80/20 rule. \n- ditto for macros and const functions. (The effect generics and related ideas are an incredibly idiotic path to take)\n- a lot of complexity and confusion for new users comes from areas where Rust employs non-trivial algorithms: when can you drop semicolons, which impls are in scope, coherence. I'd remove all of this in favour of explicit, obvious,  user-controlled behaviours.\n- DSTs. While theoretically they looked very nice, they added an unnecessary dimension of complexity. A subset of Dyn* would help (makes the fat pointer more explicit)"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.235179714285714,
      "arousal": 60.009718142857146,
      "dominance": 54.14642042857143,
      "text": "To me the worst thing in Rust is not the language itself but the ecosystem with so many breaking changes at each release, is terrible for a beginner finding a tutorial (and in some cases like wgpu is hard to find more than 5) and see that everything changed from the tutorial version to current, another thing, a automatic documentation is a terrible idea for many cases, a documentation should be much more than a brief commentary about function and structs.\n\nBut about language itself, compilation time (but is still easier to test than in C++ with cmake even with Rust taking more time) and the verbose sintax but its not a big deal after got used to it, another thing and maybe is a skill issue but I would prefer if the modules source files having the module's name and not [mod.rs](http://mod.rs) (but if it mean more breaking changes, I prefer stay how it is)"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.301587,
      "arousal": 60.31746,
      "dominance": 70.748299,
      "text": "Sometimes, Rust is less verbose than Go, especially when it comes to error handling. To be honest, I like the syntax a lot, but that might be because I mainly code using existing high-level libraries."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.61904775,
      "arousal": 63.548753,
      "dominance": 61.6780045,
      "text": "Steep learning curve.\n\nMemory safety without GC is a dev-time tradeoff that requires more use of standard library functions to do simple things. The clearest example of this is the \".split\\_at\\_mut()\" function sometimes needed if you need to access 2 elements of a slice at the same time, which has no reason to exist in other languages.\n\nBelow a certain project size, C or C++ can be more productve. A lot of skiilled C++ programmers get put off because it genuinely takes writing a relatively large critical mass of rust code before they get a productivity win from it."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.394558,
      "arousal": 68.367347,
      "dominance": 48.072562,
      "text": "I like how explicit the syntax is though!\n\nAnd I'm ok with the compile times because I remember the old days of compiling c++/c lol\n\nAlthough it's not bad but I'm still confused about multiple lifetimes 😂"
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.3809525,
      "arousal": 45.521542,
      "dominance": 50.9070295,
      "text": "I personally don't find the compiler that slow anymore. I maintain a reasonably [large project](https://writewithharper.com) whose full compile + test workflow takes \\~6 minutes. The Rust portion actually takes a surprisingly small amount of that time."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "Coming from kotlin, I mostly hate how there is no such thing as default function arguments and function overloading. Also no way to easily do structured concurrency."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "Unpin. Pinning would be fine if it weren't for that damn Unpin trait. I understand that it's useful for async functions, but it also makes the Pin type very difficult to use correctly for anything other than async functions. If it were up to me, I'd get rid of Unpin, and instead have a separate unpinning feature specifically for futures."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.639455999999996,
      "arousal": 67.30158739999999,
      "dominance": 53.786848,
      "text": "Error handling.\n\nPanics are great—they don’t give you a stack trace by default, but you can always get one from them if you need it. But non-panic errors are just horrible. First, they are unnecessarily verbose. Not only is Display a prerequisite for the Error trait, but there is no keyword to throw an error (yet). You have to `return Err(ErrorType)` instead. Errors also complicate your return types, which is arguably a good thing but still adds verbosity. Second, it’s impossible to get a stack trace from non-panic errors. I hear that people are working on this, and I KNOW how difficult it is to add this into the language as it currently stands, but this is basic functionality in every other language. From the outside, it looks like an extremely odd omission. Third, it is weirdly difficult to handle errors from multiple sources at once. Suppose you’re writing a library function with two dependencies and you need to expose errors from both dependencies to your user. To do this in Java you’d just add those error types to the “throws” keyword in the function definition. In Rust you have to create a whole new Error type (and define a corresponding Result type), and probably implement some boilerplate From traits. It’s super awkward, for both you and your users."
    },
    {
      "post_title": "What is \"bad\" about Rust?",
      "created_utc": 1735454840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Turbofish"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Migrating away from Rust."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "«Migrating from Bevy to Unity»"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.61094914285715,
      "arousal": 60.204081714285714,
      "dominance": 63.556851,
      "text": "IMHO there’s a reason unity is written in C++, but you write the actual games in C#. Rust would be a great choice if someone wanted to replace the C++ part of Unity: that low level control and performance would really be an asset. A game engine needs great low level performance .. but most game logic really doesn’t.\n\nSo whilst you certainly *can* write the actual game itself in rust .. something like C# is a lot easier for rapid prototyping, especially for those new to programming.\n\nOf course using a well known, well established engine is also likely to be a huge productivity win. Not a surprise at all.\n\nI say this as someone who loves rust and has the fortune to write Rust code for a living. Once you get used to rust you do get a lot quicker in it. But the language really forces you to think about all sorts of problems that you just don’t have to worry about in a language like C#."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.643990800000005,
      "arousal": 53.6054424,
      "dominance": 55.147392,
      "text": "I think all the gamedev experiences migrating off of Rust point to a fundamental mismatch in expectations of the language versus the experience of using it. I'm curious how Rust can evolve to recapture this segment. I feel like Bevy or a game engine like it would be necessary to provide the necessary high level abstractions to make this possible.\n\nI'm also a bit sad to hear that LLM capabilities played a part in making this decision, since LLMs are more familiar with Unity than with Bevy 😔 that said, if the author is around, did you consider stabilizing on an older version of Bevy instead of trying to keep up with the latest release?"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.82539683333333,
      "arousal": 54.0249435,
      "dominance": 66.8745275,
      "text": "No surprise here, there's a big yellow warning on the Bevy quick start page:\n\n>Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released approximately once every 3 months. We provide migration guides, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.\n\n>If you are currently trying to pick an engine for your Next Big Project™, we recommend that you check out Godot Engine. It is currently much more feature-complete and stable. And it is also free, open-source, and scriptable with Rust!"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 60.31746,
      "dominance": 59.637188,
      "text": "Small world - I used to work with these brothers at Valve"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.46636466666666,
      "arousal": 58.163265333333335,
      "dominance": 61.03552533333334,
      "text": "It looks like the right choice here, but its worth noting that rewrite comparisons - from or to rust - don't really provide insightful accounting because they're apples and oranges. \n\nThe first time you build you're exploring, the second time you're not. \n\neg, the 3 days success seems possible in Rust/Bevy as well when you already have a clear picture of your goal."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.51322766666668,
      "arousal": 61.073318,
      "dominance": 64.17233533333334,
      "text": "It’s nice that they tried to make a game with bevy. One point they mention is mod-ability and I think the bevy_mod_scripting crate is an excellent way to integrate a scripting language which seems like the best bet to make a mod-able bevy game."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.53741500000001,
      "arousal": 55.045351499999995,
      "dominance": 59.2403625,
      "text": "This is specifically about the Bevy ecosystem for game dev, which is imo a whole separate thing compared to Rust as a language. \n\nI also find it interesting that part of the reason to migrate away is because AI gives better responses for other languages. I guess that's valid, but something about it being a central point of the article comes across really weird to me."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.32123966666667,
      "arousal": 60.090703,
      "dominance": 61.22448966666667,
      "text": "Hey this is really still underground and I'm actively but heavily developing this, but i'm working on a Unity style game engine in Rust.\n\nhttps://github.com/Kek5chen/syrillian\n\nIt's a completely different approach to how we do things and by far not idiomatic Rust, though it is pretty neat to work with, from an implementor perspective talking."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.65759650000001,
      "arousal": 63.888889,
      "dominance": 74.43310650000001,
      "text": "Great read. Love the thought process illustrated."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.75920523809525,
      "arousal": 63.49746223809524,
      "dominance": 65.66785423809523,
      "text": "Rust game dev here.\n\nFirst I have to say: Well, duh, a complete game engine can be more productive than an in-progress incomplete one.\n\n(By the way, personally I would have gone with Godot instead of Unity because I deeply mistrust the company behind Unity. Especially for a 2D game, Godot kicks ass, and I daresay its GDScript Python-like language would have been friendlier to programming newcomers than C#. And, yes, Godot also supports C#.)\n\nSpecifically I want to address the challenge of implementing high-level game logic with what the author calls a \"low-level\" language like Rust. First, I'm not sure I agree with that adjective: Rust has some very, very high-level features (I call it a dual-level language). But, sure, I agree that Rust + Bevy would be challenging to newbie programmers for various reasons.\n\nThe solution for many of us is to integrate a scripting language. There are indeed several scripting languages for Rust that are specifically made with game development in mind! I personally prefer to go with Wasm, because I also want to enable community modding via the same mechanism, but setting up Wasm is its own can of worms, as the Component Model is also a work in progress.\n\nWhatever scripting solution you choose, I would say that it's a joy to fully control its integration. I can create scripting hooks for any kind of data or system I want, exposing exactly what I want and how I want, to make sure the script author only has to provide logic. There are so many things that are specific to my game and no generic solution would be able to handle them elegantly. The result is extremely tight, readable, and maintainable game logic coding.\n\nI'm happy for the author that they managed to rewrite the whole game and stay productive, but I hope other devs in the same boat consider scripting as a way to have your cake and eat it. This is not some kind of pipe dream, it's what many of us are using successfully right now."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.00453519999999,
      "arousal": 61.1564626,
      "dominance": 70.9070292,
      "text": "> Learning - Over the past year my workflow has changed immensely, and I regularly use AI to learn new technologies, discuss methods and techniques, review code, etc. The maturity and vast amount of stable historical data for C# and the Unity API mean that tools like Gemini consistently provide highly relevant guidance. While Bevy and Rust evolve rapidly - which is exciting and motivating - the pace means AI knowledge lags behind, reducing the efficiency gains I have come to expect from AI assisted development. This could change with the introduction of more modern tool-enabled models, but I found it to be a distraction and an unexpected additional cost.\n\nThis is absolutely dire. People are actively moving away from learning things or being able to learn things in favour of begging their stochastic parrots and making actual real decisions based on if something is in the learnset. Grim."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Personally, I don't like learning another language for the scripting purpose. It's another layer of overhead to me. Just using one language for everything fits me better."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.4376418,
      "arousal": 58.5487526,
      "dominance": 66.21315200000001,
      "text": "I'm not game developer. However I enjoyed reading the write up. Very smooth flow of information.\n\nAll the respect for your courage to rewrite a project in a different technology in short time frame. And all the respect for not being religious about a specific language, and making the decision to switch based on practical trade offs."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The problem with Bevy is that EVERYTHING is built with ECS. In Unity, ECS is a feature you can choose to use with just what is needed."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.312925,
      "arousal": 62.471655,
      "dominance": 83.673469,
      "text": "The results here are an absolute slam dunk for Unity, it was very surprising.\n\nI haven't tried it in years (as the editor kinda sucks on Linux compared to Godot), but for C# it seems like it is still king.\n\nPersonally I found https://loglog.games/blog/leaving-rust-gamedev/ to be more in line with my own experiences trying out Bevy only a little and using more gdext in Godot."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.031746,
      "arousal": 56.235828,
      "dominance": 63.151927,
      "text": "People are missing on Godot with Rust GDExtension. You get rapid prototyping with Gdscript and Rust for everything else, also is open source, so you can even customize the engine if needed.\n\nGodot will pull a Blender."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It’s crazy how things work. Just yesterday I found out about Bevy while looking for Rust things to do… and this article and thread sort of summarizes what I was worried about. Appreciate this"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested in what happened to their ECS-oriented code?  \nThere are a multiple ECS options in Unity, but it looks like they dropped ECS completely after their transition.\n\nu/xmBQWugdxjaA could you please elaborate on that a bit more?"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.648526,
      "arousal": 48.412698,
      "dominance": 54.081633,
      "text": "I mean what does any one expect trying to use bevy in production. It doesn’t have a stable api as far as I know. \n\nOdd choice going to unity tho."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have you considered using Fyrox instead? It is much more stable and very similar to Unity."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "I hope Bevy will release its own scripting language for the future. I think this will solve many problems."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.22826891666666,
      "arousal": 60.978835833333335,
      "dominance": 67.24300808333334,
      "text": "Can someone answer me this: why doesn't Unreal/C++ also run into the same prototyping problems that Rust/Bevy does? Unreal uses C++ for both the engine *and* the game logic right?\n\nHow does Unreal make it easy to prototype? But Bevy runs into issues. Is it the ECS? Or are the extra compiler checks truly that devastating to the early game development process?\n\nI'm curious because I want to experiment making a game. I'm a Java web developer currently learning Rust (via a hobby web project atm). I also wanted to eventually try my hand at a game. But I don't want to touch C# because of M$. And I'm not computer-science educated so I don't have enough base-knowledge of super low-level programming concepts to feel confident jumping into C++"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.53370445454545,
      "arousal": 59.79179545454545,
      "dominance": 58.09111536363636,
      "text": "I truly wish them well... my friend's studio went bankrupt cuz they went with that engine. \n\nIt's great to prototype quickly, and you can onboard rapidly, but when it comes to deep stabilized releases, you can be in for a world of pain. \n\nEven simple things like smooth collision detection is broken. It's easy in, but hard to get the last 10%, whereas other engines are harder to get in, but stable from there.\n\nAgain I wish em the best."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "I wish AI never learns Rust properly. I abhor it so much."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Has literally nothing to do with Rust."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.00566875,
      "arousal": 66.978458,
      "dominance": 57.22789125,
      "text": "> I started this project with my brother. While he's sharp and eager, he's new to coding.\n\n\nWhy Rust? Sounds like the author is looking for trouble. I wouldn't start with anything other than Python/JavaScript, maybe Java if they are really motivated.\n\n\n\nFor game development, using anything other than Unity (C#) for a beginner is delusional.\n\n\nEdit: to cowards who downvote me without leaving a comment: bring your arguments, or I am in the right."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.4217688,
      "arousal": 57.687074800000005,
      "dominance": 66.23582760000001,
      "text": "Good choice. If you can't answer the question of \"Would I write that in C++\", then Rust would probably not be the best tool for the project. From my perspective, the game on the screenshot does not seem technically challenging enough for Unity to not be able to handle it.\n\nC# is nice too."
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 42.517007,
      "arousal": 55.895692,
      "dominance": 53.854875,
      "text": "Blasphemy"
    },
    {
      "post_title": "Migrating away from Rust.",
      "created_utc": 1745868987.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Really nice write up. Thanks for sharing it!"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust Language (@rustlang) left Twitter, joined Bluesky"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "@rust-lang.org on Bluesky: https://bsky.app/profile/rust-lang.org/post/3lm2r6kfgns2u"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can read the thread here if you don't have a Twitter account:  \nhttps://nitter.net/rustlang/status/1908479478159818903  \nbut it's mostly the expected complaining.\n\n(Also, the fact that you can't read Twitter threads without a Twitter account is for me a great reason to not spend a lot of effort on there.)"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.394558,
      "arousal": 68.367347,
      "dominance": 48.072562,
      "text": "@rustlang seems to be a random user on Bluesky with 11 followers (if anyone else confused its @rust-lang.org instead)"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.004535,
      "arousal": 56.462585,
      "dominance": 67.006803,
      "text": "Mastodon link: https://mastodon.social/@rust@social.rust-lang.org"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "We had a solid discussion about leaving Twitter over in Bevy land. We landed on doing both Bluesky and Mastodon.\n\n* Part 1: https://github.com/bevyengine/bevy/discussions/18150\n* Part 2: https://github.com/bevyengine/bevy/discussions/18302"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703,
      "arousal": 58.61678,
      "dominance": 52.154195,
      "text": "Should have happened sooner because no one should be expected to have an account on any site to get news from Rust.\n\nF Twitter."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Based"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why not be on both?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Twitter is a cesspool. I'm glad that significant channels are choosing to upsticks and move."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.004535,
      "arousal": 56.462585,
      "dominance": 67.006803,
      "text": "If you too would like to leave established corporate social media for greener pastures, there is a Rust community at https://programming.dev/c/rust which runs Lemmy, a Reddit alternative.\n\nIf you praise the official account moving from Twitter to Mastodon, maybe you should consider whether _you_ should move from Reddit to Lemmy (or anywhere else on the fediverse)."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 30.272109,
      "arousal": 47.165533,
      "dominance": 59.410431,
      "text": "They’ll be back. They always come back.\n\nBlueSky is trash."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "lots of copium and seethium is going on in comments\n\nThat said, Rust should've left xitter much earlier"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.351474,
      "arousal": 51.7006805,
      "dominance": 65.929705,
      "text": "I've seen some rust projects (eg. ratatui and Bevy) conglomerate around bluesky, so I suppose this makes sense? Quitting twitter entirely might be a bit much, but every time I go there I'm reminded why I and others don't bother with that site anymore.\n\nMastodon is cool, but not nearly as easy/\"intuitive\" to navigate as bluesky.\n\nEdit: I see this thread went about as well as expected, stay classy folks."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 84.693878,
      "dominance": 69.274376,
      "text": "Surprised they were still on Twitter."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there an unofficial mirror in X to follow?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can also follow on Mastodon. You don't have to use Bluesky."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "About time!!"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.6575965,
      "arousal": 60.2040815,
      "dominance": 75.3968255,
      "text": "Good! My respect and admiration for the rust team is elevated after this decision."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.244897800000004,
      "arousal": 59.1156462,
      "dominance": 59.7278912,
      "text": "So much hate for just leaving a platform but that makes sense given Twitter is a hateful space. Tech brus showing their allegience to a Nazi-wannabe is indicative of that industry’s intolerance and white male dominated space."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Fuck BlueSky, glad they’re also posting on Mastodon"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 84.693878,
      "dominance": 69.274376,
      "text": "I think someone has to state the obvious here. The content you get on any of these platforms is literally what the algorithm thinks you’re going to engage with based on your previous interactions. If you don’t like what you see, look inward not at the platform or the algorithm. It’s like subbing to a bunch of porn subreddits and then being surprised that you get a bunch of it on your feed lol"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.31216933333333,
      "arousal": 54.346182999999996,
      "dominance": 58.73015866666666,
      "text": "Came for the comments, and not disappointed. A+\n\nAs we all know, the only way to keep politics out of Rust is to continue using a platform owned by the richest man in the world, who is part of the US government and actively promoting the extreme right in several other countries."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.979592,
      "arousal": 46.7687075,
      "dominance": 61.394558,
      "text": "Should have happened sooner. The Rust foundation and many of its members were very vocal in supporting BLM, which is good. But why is every one quiet now that the USA is being torn apart and that DEI is removed in all big tech companies and government? Is class warfare and resisting populism not just as important?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I strongly disagree. Just post to all of them. I will not make a Bluesky account or Mastodon to see Rust announcements. So unless someone else posts them here, I just wont see them anymore.\n\nThis is driven solely by their ideology, not engagement metrics, followers or anything else."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Programming should have been apolitical, but there we are."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well that's mildly inconvenient. I'm guessing all the important posts get cross posted here too?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well done. \n\nIt's shocking / disappointing some of the big names that are still on Nazi Xitter."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.40136050000001,
      "arousal": 63.8321995,
      "dominance": 64.62585,
      "text": "I really don't understand this trend of people leaving twitter entirely. It only makes it inconvenient for the rest of the world since they have to open three different websites just to see posts from both camps of americans. Can't you just have accounts on both websites and cross-post?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "about time :)"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 22.675737,
      "arousal": 66.439909,
      "dominance": 46.258503,
      "text": "I'm only upset that it took this long."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.004535,
      "arousal": 56.462585,
      "dominance": 67.006803,
      "text": "Why? The posts can be automated to both anyway - why stop posting on X which has a larger audience. There's no technical reason for this.\n\nI really dislike this \"everythingism\", I don't want the programming language I use to be telling me what social media platform I should use."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hmmm"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That site took like 15 seconds to load."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cool, leaving github for gitlab/codeberg exclusively when?"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.022676,
      "arousal": 63.378685,
      "dominance": 60.0340135,
      "text": "I'm a little confused by the decision. To the extent this account is used to publish updates about the language, why are they leaving the platform with the largest population of active monthly users among the three at issue? Couldn't they automate posts to each platform (posting to the X API is free at least), turn off replies, and be done with it?\n\n(Maybe I'm bitter because I like getting my NBA Twitter and programming threads in the same place :') )"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 26.190476,
      "arousal": 53.514739,
      "dominance": 33.786848,
      "text": "What a stupid thing to do? Can’t they keep politics out of a programming language jeez"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Followed!"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.421769,
      "arousal": 68.5941045,
      "dominance": 77.60771,
      "text": "It would be good if a project of such power is not involving itself into politics and stay independent."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'll take my programming languages without the politics thx."
    },
    {
      "post_title": "Rust Language (@rustlang) left Twitter, joined Bluesky",
      "created_utc": 1743864358.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 87.188209,
      "arousal": 63.8888885,
      "dominance": 68.99092999999999,
      "text": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I don't want reddit to use my posts to feed AI"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We use Rust at AWS (in my org) for every new project that would have previously been written in c++."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.059713,
      "arousal": 57.728646999999995,
      "dominance": 64.3424035,
      "text": "I am not a Rust fan, my heart is somewhere else, however...\n\nGoogle, Microsoft, Amazon to name only these are talking and \"pushing\" Rust in a sense they are saying they are using it and how good it is.\n\nNot long ago, Google mentioned that the Rust team was as performant as the Go team.\n\nOf course, Rust is kind of new, but I believe it has the momentum to get the critical mass that you are referring to.\n\nA company will not just go full Rust in a week just \"because\". It takes time.\n\nC# took forever to catch up. I think it's only since dotnet core that it is taken seriously...\n\nAnyway, good luck for your new assignment!"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.18075785714286,
      "arousal": 55.442176857142854,
      "dominance": 58.454810571428574,
      "text": "No-one can foresee the future, but I don't share your pessimism regarding Rust for a couple of reasons:\n\n* There *are* big companies pushing for Rust adoption: Google, MS, Amazon etc. Heck, even the US government recommends replacing C and C++ with memory safe languages (and Rust is the primary alternative)\n* C++ is almost 40 years old. Rust is not even 10 years old. Adoption takes time, and C++ wasn't very popular in the beginning either.\n\nWill Rust replace languages like JavaScript, Java, C#, Go, Python etc.? Probably not, and that's not the prime objective, but my guess is that it will play a crucial part in building tomorrows operating systems, device drivers, Internet/network services/protocols, web browsers and other low level components with high safety and performance requirements."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.60073269230769,
      "arousal": 63.83219969230769,
      "dominance": 70.42560607692307,
      "text": "I feel like I'm just reiterating at this point but...\n\n**You probably won't be seeing Rust jobs for a while.**\n\nIf you take a look at the ecosystem of companies, you'll find:\n\n - Start-ups (small): in the absence of existing codebases, they may start directly with Rust, but they won't be advertising much. You don't hire strangers when there's only a handful of people, you hire people you _already_ trust. The jobs are advertised via personal networks.\n - Start-ups (larger): supposing they started in Rust, networking doesn't work any longer to bring in new folks. Those are the ones that will advertise.\n - Established companies: even if they adopt Rust, retraining known good employees is much cheaper, has a much more certain outcome, than hiring. Even if they _do_ hire, they're likely to chuck new hires on the _old_ projects, as there's always a trove of known good employees wishing to move to the new greenfield projects, and it's in the interest of the company to keep them happy.\n\nSo, if you're looking for jobs on job aggregators, chances are the few Rust jobs you'll find come from the larger, and still growing, start-ups. They didn't sprout up overnight -- it takes time to grow -- so they started a while ago, when Rust was even less known/less of a certain thing. This probably means technology enthusiasts, and technology enthusiasts a handful of years ago were all in on crypto-currencies... so those are the jobs that are advertised.\n\nMeanwhile, Amazon, Google, & Microsoft all have a growing number of engineers they train for Rust, and are putting out project after project in the language. Embedded companies (Volvo) are similarly training their employees for Rust as they need. Et caetera. Those companies will only start recruiting for Rust when they've exhausted (or are close to exhausting) their employees, and that'll take a while.\n\nSo, you want a job in Rust?\n\nForget Linked-in, you need networking instead. You need to meet people who work in Rust:\n\n - Check out former colleagues you had a good relationship with, those are the best references.\n - Go the nearby Rust meet-ups/conferences, make a good impression -- present something! -- and let it be known you'd love to switch to working in Rust.\n - Get hired for a company which already uses Rust, even if they don't advertise it, then after proving yourself, try to see how to switch project. Do be careful to pick a company pivoting to Rust, and preferably with an already sizeable -- relatively speaking -- Rust codebase. The larger the Rust share, the easier the switch will be... and vice-versa.\n\nIf you stick to mainstream recruiting platforms, you'll get mainstream ads from large established companies. They won't be mentioning Rust, and the chances to pivot to Rust will likely be very low."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.641723,
      "arousal": 68.253968,
      "dominance": 76.643991,
      "text": "At the rates Rust is gaining popularity and C++ is getting safer, I definitely expect  Rust to gain critical mass before C++ gains critical safety. Rust isn't growing _that_ fast, but C++ progress on safety guarantees is sputtering at best."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.94331085714285,
      "arousal": 53.12601228571429,
      "dominance": 62.98995785714286,
      "text": "Counterpoint: my current role and last two roles have all had Rust as a daily driver. But I don't work for big companies, I work mostly in startups or small companies. The domains are pretty diverse too: industrial robotics, smart home, and sports data tracking. However, I didn't find any of these jobs on a stickied subreddit post or LinkedIn, I went looking for people who worked in Rust and then checked if their companies had open positions on their careers page or had an email to send a resume to.\n\n\nYou have your foot in the door, but it's not a good job market. You may find you need to change up your job search strategy to find the role you're after."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.27513233333333,
      "arousal": 67.271353,
      "dominance": 72.562358,
      "text": ">I don't see that many strong sponsors firmly behind Rust and pushing for adoption by customers.\n\nPeople within major companies have been using it for new things. Google, Microsoft, even Volvo. I think as more new code gets written, we will eventually see most of it written in Rust, as long as people think it's the right language. And I think it's the right language.\n\nSo basically, I believe it is on a trajectory to reach critical mass, even if it hasn't yet."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Let's revisit this in 10 years..."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Comparing Rust to Esperanto was a bridge too far. How dare you."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "> And the problem with Rust is that it just doesn't have critical mass and, frankly, I don't think it will ever have.\n\nHard disagree, given that I'm sitting here writing Rust in a job that for the past 10 years has has had me writing exclusively C, and having spent all of October running internal Rust courses to bring 40 C and C++ engineers up to speed with the language."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\\>  yeah, I know I'll be downvoted to oblivion because every sub-reddit is meant to be a circlejerk\n\nsigh. it's so whiny. everyone keeps doing this. it's a public forum. take the down- or upvotes and just accept them. You don't have to preempt anything."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Your reference to Torvalds is strange to me because rust is in the linux kernel. It's in windows too, at what point is there a critical mass?"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.3537415,
      "arousal": 57.355442249999996,
      "dominance": 55.909863875,
      "text": "If you want a job today and can choose between C++ and Rust, then it's C++. It's not even a contest.\n\nWill this change in the long term? I'd wager a \"Yes\". C++ has 'lost' a lot of users over the past 20 years, simply because other languages fit the bill better for that particular nieche. That's why banking apps are written in Java, Web apps in TypeScript and things adjacent to that in Go.\n\nYou know the nieche of C++? It's mostly embedded, it's mostly in fields where you need to squeeze out as much performance as possible from your chips, and it's fields where you absolutely want a *predictable* execution with as much safety built-in as is SOTA. That niche isn't web apps (Although I love using Rust for this!).\n\nAnd those are niches that are slow-moving (For good reasons) and are longing for stability. Rust is just starting to achieve that, simply by being supported over a long amount of time and by having a robust ecosystem.\n\nYou may have used Rust for years, but for these companies Rust is still really modern. It will take time for these companies to make the switch. On the other hand, we're seeing Google and Microsoft already employing thousands of Rust developers today (Who've mostly been C++ devs before).\n\nDon't forget about Rust. Do what pays your bills and keep roughly up with movements in the Rust ecosystem. That's my bet."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.068594125,
      "arousal": 66.38322012500001,
      "dominance": 72.76077075,
      "text": "I don't disagree with your _point_, but I do disagree with the valence.\n\nI'm not a fan of career-driven learning; I don't _want_ the things I love to be the commercial ones, and I don't want to work with the sort of people whose choice of tools was based on \"what can I get a job in?\" rather than on whether they enjoyed using them, just as I don't want to work with the sort of people who chose to be programmers because the pay is good rather than because they already loved writing code.\n\nRust is great. People love using it, it has some solid advantages for some very important domains. Is it the best tool for all jobs? No, obviously not, but that's normal for any technology. Is it the most employable skill? No, also obviously not, but that's fine."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Multiple FAANG/MANGA people I met at Rustconf talked about having 5000+ Rust devs at each separate company, and putting hundreds more through Rust training courses every week. I was a bit shocked, actually: I still think of Rust as the scrappy upstart that will get wide adoption some day. \n\nThis is a degree of momentum that I don't think Lisp or Haskell ever obtained. \n\nYes, there's a large mass of C and C++ that can't be thrown out or rewritten overnight."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.8321996,
      "arousal": 46.7346938,
      "dominance": 57.7097504,
      "text": "/me Reads your post.  \nLooks at my spreadsheet of job offers for 2024.  \nRe-reads your post.\n\nGoes WTElf.\n\nBetween 2024-01-01 and 2024-11-28 (today)  \nI had 187 job (== contract) offers, 113 asking for rust skills.  \nThat is the highest bias towards a technology I have seen in my career.\n\nAnd none of that was hyper specialised.  \nMy recruiters are well aware that I stay out of all the hype & scams, e.g. blockchain & AI.\n\nThose offers where from all across the board. Tech, Role, Industry, Company Size.  \nFirmware, Kernel, Backend, Toolchain, SDKs & APIs, Tools, Apps.  \nSenior to CTO -- I am sure there are more junior jobs out there, but I only work through recruiters/agencies.  \nBanking, Insurance, Medical, Gaming, Media, Industrial, Automotive.  \n1 person indie to Fortune 500 to Big 5.\n\nYou make an offhand comment about knowing Rust at any Meetup,  \nand have swarms of people trying to hire you.\n\n  \nTo lazy to go through my sheets for the last 10 years,  \nbut my first offer for a rust focused job was Jan 20th 2016;  \nThe latest one was yesterday."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.807256,
      "arousal": 65.1927435,
      "dominance": 55.442177,
      "text": "I feel you, but I think your presenting your experience with a bit too much main character syndrome. \n\nThose subreddit job threads don't even come close to representing 0.1% of hires world wide for python / c++ etc."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.70748325,
      "arousal": 55.9807255,
      "dominance": 62.910997625,
      "text": "Just a note from the responsible moderator: We *always* have a jobs page, and it's visible from the subreddit info. We also try stickying it every now and then, but we only get 2 stickied threads, and the questions thread should be stickied all the time, so the jobs thread is competing with the weekly activity thread and This Week in Rust.\n\nAnd I agree that there should be more rust jobs, especially for junior devs. But let's face it, we have a bimodal job market for now, with senior positions (as you stated often with deep domain knowledge requirements) being somewhat highly sought (as a datapoint of one, I get 1-2 cold offers a week), while junior jobs are few. I think that's because big companies will rather retrain a junior they already employ than hiring another who already knows the language, and startups need to make it to the market, so they usually cannot afford training juniors.\n\nAnd let's face it, the programming language is only one of many factors in choosing a new job. So good luck with your new position!"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.61602416666666,
      "arousal": 65.26832966666667,
      "dominance": 61.545729333333334,
      "text": "The thing I find curious is the \"TLDR\" is because jobs. No position I've ever been in specifies a language, and I've never applied because of a language. I hear it all the time but never in my career have I been in the position of being an \"X developer\", for X being some programming language. \n\nI write this comment as I am involved with several projects at work, one in C99 with all static allocation, one in C++17, another in Rust, and another in Python with full mypy type annotation.\n\nHowever, I just get tired arguing with C++ people. It's just so much easier to work with Rust and Rust people. You just get it done, it works faster, it works better,and you move on with your life."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "Isn't it normal that newer languages take a while to reach adoption in industries that move slow and avoid risk? I think it's too early to make a call on the beta Max comparison. Rust has a lot of intrinsic qualities that make it appealing to experienced programmers"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.77475433333333,
      "arousal": 57.25623566666667,
      "dominance": 58.91912333333334,
      "text": "As a previous heavy contributor to Scala, I hear your argument.\n\nHowever, I think the momentum behind rust is pretty high.  I am seeing companies like MSFT focus efforts more on rust and withdrawal from other languages (e.g. previous .net/c# leads moving to lead efforts in rust).\n\nI think your assessment is accurate today, but I'm also seeing way more movement behind rust with a clear niche to take over with.  That is \"memory safety\".  Regardless of whether you find that term accurate, it's \"sticking\", and one of the key things needed to displace other technologies.\n\nI guess my short comment is I hear what you're saying.  It's a risk to rust adoption.  But signs are still pointing towards rust surmounting that challenge with a clear message"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "Rust's sponsorship and momentum is far beyond Python's sponsorship and momentum at the same time its lifecycle."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.79516233333334,
      "arousal": 61.111111,
      "dominance": 66.66666666666667,
      "text": "I’m a c++ developer with maybe fifteen years experience who started learning Rust a week ago, but it’s been years since I’ve seen the writing on the wall that c++’s dominance will come to an end within the lifetime of my career. (In no small part because of exactly the points you raised!)\n\nA poll given 7 years ago said 5% of cpp devs also used Rust. The same poll 2 years ago put the number at 25%.\n\nThere might be more c++ jobs, but of course there are. But I think the situation is going to look significantly different in ten years. I sent some happy Thanksgiving messages to some old coworkers and learned they’re also learning Rust… adoption is taking off. It will take years and years but Rust seems to have a clear and nearly certain path to mass adoption.\n\nMaybe I’ve got rose colored glasses, but that’s my take. Go with the cpp job if you like it or to pay the bills, but betting against Rust for the long term seems like a bad idea to me."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 65.079365,
      "dominance": 76.417234,
      "text": "We use Rust in Azure, and in many areas we are moving from C++ and C# to Rust. Critical mass has arrived my friend."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.86281175,
      "arousal": 64.88095224999999,
      "dominance": 58.871882,
      "text": ">you'll never be hired for knowing Rust well but for knowing well the domain.\n\nI have an increasingly furious amount of rejections because I know the domain but haven't used Rust professionally. It's goddamn embedded C, I've seen shit half the IT world wouldn't even think about, and a good chunk of these could've been avoided with Clippy going mad at us.\n\nBut no, 8 years of this hell is not enough, they need someone who wrote smart contracts for two years.\n\n/rant, I guess"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Three years ago, we developed a data warehouse project(Databend) using Rust and open-sourced it on GitHub. If we had chosen to use C++ for the development, the project would have progressed much more slowly. Therefore, I want to emphasize that Rust has significantly accelerated our workflow."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.53363577777777,
      "arousal": 61.02292755555556,
      "dominance": 67.88863677777778,
      "text": "The software industry moves slowly. Let's say someone secretly developed a new programming language for years in their basement and it turned out to be the \"perfect\" language. As safe as Rust, but way easier to learn. As powerful as C++, but without all the baggage. For some reason it would be faster than any existing programming language. Everybody agrees that the syntax makes it a joy to write and read.\n\nEven in that case it would take a decade+ until that imaginary language actually starts to supersede existing languages. Most companies earn their money with old code. Additionally, people have to actually know about the language, learn it. It all takes time."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "Sounds like cope. You are trying to reason yourself into taking a job where you work with suboptimal tools (in your own opinion) because you found a job using C++ and not Rust. Just take the job don't diss rust because you didn't get a job using it. Many if not all of the largest companies cloud companies use it and that's just the beginning."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.333333,
      "arousal": 61.961451,
      "dominance": 55.612245,
      "text": "Rust is actually the dominant language taught at my university in the computer engineering department (Delft university of technology). Occasionally I get C(++) or python but mostly rust."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.5782315,
      "arousal": 45.3798185,
      "dominance": 60.770975,
      "text": "> My point is that you'll never be hired for knowing Rust well but for knowing well the domain.\n\nWhen I hire, I have several \"nice-to-haves\", e.g. on my current team:\n\n* Rust\n* streaming video\n* sports\n* distributed computing concepts\n* AWS services\n* on-call\n* a CS degree\n* some frontend tech (e.g. TypeScript, React, MUI)\n\n...but I'm hiring good software engineers first of all. There's nothing on that list that the whole team came in with, and there's no one on the team (including myself) who came in with all of these things.\n\nI suppose once in a while you need that one solid domain expert to be the anchor of the team, but in general it seems very weird to come in with very specific \"must-have\"s. Software engineers are supposed to be versatile. If they're not, they're doomed in a few years. Some concepts stay the same (not that unusual to find there's a 40-year-old paper describing the algorithm you need) but enough changes that the ability to adapt is key."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 64.512472,
      "dominance": 67.23356,
      "text": "I agree with you. There is also little business incentive to rewrite things in Rust, so many programs will stay in C++ (or other languages). To maintain those projects you need C++ programmers, so why not also do the new projects in C++?\n\nMaybe the US government pushing Rust will help?"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Hey, so... There actually _is_ a monthly rust jobs thread on this sub I keep forgetting to post to, but if you want to work pretty much exclusively in rust and program robots, we're hiring: https://jobs.ashbyhq.com/MaticRobots\n\nI certainly wouldn't be here if not for getting to program in rust. I don't think it's crazy to select where you want to work based on language/tech stack. The last place I worked was a Haskell shop.\n\nI know you just started a new job, but if you're as lukewarm about it as this post makes it seem, you might consider applying anyway?"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.57369625,
      "arousal": 53.0612245,
      "dominance": 60.572562500000004,
      "text": "FWIW: my company is SaaS and has serious production experience with Go, JS/TS, and Haskell. \n\ndespite that we chose Rust for our new web services, workers, and CLIs. we haven't looked back once- everyone on the team is much happier with it and more productive. we've also had no issue training new hires on how to use it: we've noted about the same ramp up time for Rust as for Go for _production ready_ code (critically, this is distinct from \"hello world\" or throwaway code, where of course Go appears to be more productive).\n\nyour post makes it sound like there's no reason to adopt rust in domains where go exists, but that's simply not true. we have experienced a clear advantage to using rust over go and have no plans to go back."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.90702937500001,
      "arousal": 56.731859125,
      "dominance": 67.573696125,
      "text": "Nah. First, the fact that Rust actually competes with Go on Go's home turf of server backends is quite remarkable. Go is a GC language with a strong focus on concurrency and should be preferred to a non-GC language by default and by a huge margin. That we even discuss Rust vs Go is a testament to Rust's strength.\n\nAs for C and C++, I think the compliance issues around memory safety will be very real very soon, and Rust has an (almost* - see below) USP as a memory-safe language that gets by without a GC. C++ could have saved itself, but the committee seems to be rallying behind \"profiles\", which look like too little, too late at this point.\n\nSo while there are still more C++ jobs right now (disclaimer: I work one, currently), I think the writing is on the wall.\n\nRust also does have quite a bit of support from sections of Google, Microsoft, AWS and sees the occasional heavy use in other companies such as cloudflare.\n\nRust might get competition*, though. Mojo (the second noteworthy non-GC MSL) is targeting the heterogeneous computing / HPC / AI domain, where C++ is still king and Rust is not as strong as it could be. So the non-GC niche might become more splintered in the future, but contenders will probably look quite Rusty, and I strongly doubt that the future will be C++."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "it will take rust many years to get to C++.  I see rust is still evolving which is a problem for most companies.   As rust continues to evolve c++ will continue to as well.  Let's see where we end up."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Yeah, I love rust. We don't really use it at the company I am working. Used it for some smaller internal stuff.   \nAnd in germany I dont see much jobs seeking for rust developers."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.28416273684211,
      "arousal": 59.99522610526316,
      "dominance": 58.067788578947365,
      "text": "When I was at school, I hated history. The stupidity of youth! Today, I realise that history is as important as a language and maths.\n\nHistory informs us of past stupid human behaviour.\n\nI remember reading that the Arpnet could of been created 13-14 years before its creation. Why? Well, they needed the analogue guys from AT&T to either retire or die, because they would of been hell bent in trying to destroy a digital project.\n\nOr take myself. I was programming in Python over 20+ years ago. We worked alongside a large, well-known consultancy beginning with A. They told us 20 years ago that we had to ditch the open source crap of Python and Gzip and move to TCL and Unix compress if we wanted to work with their clients. 10 years later, I got asked for an interview with them saying they love open source python etc. Did they change themselves? Of course not, the market dictated.\n\nIf people using rust think C/C++ has not been challenged before it has been. Ada is used in safety critical systems ( the euro fighter jet is 95% ada code). Yet the C/C++ fought it off (there is more to it, obviously). I heard about university professors refusing to teach a language that was created by the government man.... used in weapons... not cool.\n\nThe funny thing in IT is that most people i find are scientific in belief. Best tool for the job, believe in the numbers, evolution of tools etc. Yet when it boils down to it, human behaviour kicks in, aka feeling threatened or can't be bothered to learn something new.\n\nMy opinion. For too long, we have been using unsafe programming languages and just blaming the end user, aka the programmer. I hear statements such as  'I would never make mistakes as I am too intelligent blah blah'. Well, in the real world, that is bollocks. Mistakes are normal human behaviour."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "We are approaching [Trough of Disillusionment](https://en.wikipedia.org/wiki/Gartner_hype_cycle) is Rust adoption, which, essentially, means that it's time to take it seriously – but also means in the near future there wouldn't be any Rust-cntric jobs (till be reach Slope on Enlightenment)."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You don't apply for a Rust job, you get in a big software company and then reach the top 0.1% then you get to work with Rust or you introduce it where it solve a problem.    \n\n\n If you are a web developer or you don't have at least 8 years of experience...  just forget it. \n\n\nRust is everywhere but it's not for everyone and for everything."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If someone is starting a new project in C++ instead of rust today, they are probably doing something very wrong"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.426304,
      "arousal": 58.730159,
      "dominance": 43.764172,
      "text": ">it has a gentler learning curve\n\nThis is always the thing. The simplest technology will always be the most widely used. The only reason C and C++ are still used so much is because they're entrenched and \"everybody\" knows at least some parts of those languages. They've been so widely used since the 80's and 90's, for 40 years, that it's become almost impossible to replace them.\n\nIMHO, the only reason Go gained any traction is because it is basically \"easier C for the internet.\" However, Go made the capital mistake to still include \"nil\" / \"null\", which means I won't write any code in it except if I get paid to do so."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why do you use C++ then? Use Javascript. It is definitively the most written-in language."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.08087666666667,
      "arousal": 56.36810283333333,
      "dominance": 61.073318,
      "text": "I think you're the only one accountable for your destiny from the beginning to the end, and nobody wiser than you to determine what's best for you. \nI only disagree with your comparison of Betamax & VHS. Irrespective of which one is superior, something is playing in C++'s favor today that will play in Rust's favor tomorrow: time.\nC++ still enjoys an ample base of ongoing projects in the same amount that C++ built it in the 80s and 90s when COBOL was the king, thanks to IBM's exclusive sponsorship.\nNow, the US administration put a deadline on its providers to come up with an exit plan from memory-unsafe technologies toward safety.\nI think you made the right move, starting a job on C++ while it's still around. I think it would be a mistake to ditch Rust forever.\n\nDisclaimer: I work on C++ and I'm learning Rust because I don't want to soon become a software maintainer if I can still be a software developer. I saw how COBOL maintainers ended and nobody wiser than me to determine what's best for my career."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "I should remark that rust is being used in undergraduate systems programming class at my uni. Kinda think and hope that rust is different."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.37868475,
      "arousal": 63.860544250000004,
      "dominance": 71.79705225000001,
      "text": "Sure, in fact I deeply understand rust, and I have written several tens of thousand of words about rust from the assembly language perspective, for example memory model, ownership, lifetime, closure and so on. But I have to say that until now c++ is still my favorite language just because it is free and I love freedom.Even I prefer java over rust."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.8752834,
      "arousal": 54.2630386,
      "dominance": 61.972789,
      "text": "So my team primarily makes small batch, critical safety, embedded electronics for government customers. We normally do straight bare metal C. The Whitehouse issued guidance a while back to please stop using c/c++ and switch to memory safe languages, of which Rust was the only suggestion suitable for embedded.\n\nWe just spend a bunch of our internal development dollars to get our whole team on a Rust intro training (a decent chunk of change). We came away fairly impressed with the language and were fairly set on using it for our next project. I started exploring the tooling and support for various microcontrollers we were interested in. It was only at that point that I became uncomfortable with the reliance on “reverse engineered” this and “half baked OSS implementation” of that. We had to abort and are going back to C for this project.\n\nThat being said, if we were not working in the embedded niche or we didn’t need to make critical safety assurances, I have no doubt we would all be slinging Rust right now. And even for our niche, I still have hope, I just think we were a little premature."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.2721088,
      "arousal": 62.154195,
      "dominance": 65.03401360000001,
      "text": "Buddy at Google told me 3 days ago there’s an adjacent dev team using Rust in production today.\n\nIBM’s Qiskit optimization is written in rust and it’s by far the most user friendly quantum software package (albeit still in python for the bulk).\n\nI hear you. I love it, but will it overtake C++, not sure. We all hope so but dinosaurs still roam the software earth."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.860544250000004,
      "arousal": 56.150793500000006,
      "dominance": 54.5351475,
      "text": "> in communication technologies, adoption and critical mass are 90% of the game and the other 10% are bikeshedding, at best\n\nIn programming this is dangerously untrue.  Exploitable bugs are monetized by criminal gangs.  Programs are tools, not:\n\n> means to communicate ideas to other programmers\n\nYikes man.\n\nI think you buried the lede:\n\n> Rust is almost irrelevant for finding jobs\n\nThis is probably true, and unfortunate, but doesn't change the underlying reality.\n\nI write C++ for my day job, and I think Rust has some issues, but you're putting the cart before the horse."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "Like Luke Skywalker told Kyle Ren, “Every word of what you just said was wrong”\n\nNot even a rust programmer here (maybe I will at some point): \n\nI think the future of Rust is solid and \n it will continue to grow. C++, which currently is my preferred language, will continue to exist but I can see with all the push for safety, Rust is vey likely to become very strong."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703,
      "arousal": 58.61678,
      "dominance": 52.154195,
      "text": "Well I do get your point, though I have just started learning and provided more effective efforts because I heard and got to see in the news that Big companies are investing huge amounts and efforts in it. \n\n1. Google invests 1M USD and plus updating their codebase on many things i.e., infrastructure things : https://www.securityweek.com/google-contributes-1-million-to-rust-says-it-prevented-hundreds-of-android-vulnerabilities/\n\n2. same for Microsoft: https://www.linkedin.com/posts/max-chason-077828141_rust-rustfoundation-microsoft-activity-7127685193326321664-AtLS/\n- https://opensource.microsoft.com/blog/2021/02/08/microsoft-joins-rust-foundation/"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.786848,
      "arousal": 71.882086,
      "dominance": 62.244898,
      "text": "At our Platform as a Service startup, we use Rust for all our Kubernetes Operators, the heart of all our automation. We also use Rust for local developer tooling."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "Don't say \"never\" and don't say \"I know I'll be downvoted to oblivion\".\n\nI think Rust will replace C and C++ just of bare necessity. And Go momentum has nowhere to go: once microservices space is all explored, Go is not great for anything else."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "I mean, the US government is pushing Rust.  \nMozilla, Linux Kernel and Windows API too.\n\n>I don't see that many strong sponsors firmly behind Rust and pushing for adoption by customers.\n\nis just wrong"
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At Cloudflare, Rust is super important. New projects for edge services are written in rust, and existing projects are being ported over."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.4024945,
      "arousal": 60.5725625,
      "dominance": 57.114512500000004,
      "text": "> Go offers faster iteration cycles than Rust because it has a gentler learning curve and better compile times.\n\nThis is sad in Rust. I can't say that writing backend in Rust is much harder than in Go, but every time I go back to old projects, I have to remember what methods to use and what to do to satisfy the type system (I use axum mostly). In Go it's a lot easier with this, usually simple and quick how to work with http server / handler, even when the project hasn't been touched for a year. Maybe just the API in Go is better, it's pretty \"spartan\"."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.84127,
      "arousal": 50.340136,
      "dominance": 58.276644,
      "text": "its like burgers. there are high end burger places which cook with healthy sustainable superior ingrdients. but you still go to mcdonalds. because it is everywhere and it is open 24/7."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.3764171923077,
      "arousal": 58.974358961538464,
      "dominance": 65.46310830769231,
      "text": "Good luck to you. I hope you keep learning about both languages and keep hanging around.\n\nMay I ask what field your new job is in? You mention common web stack apps and certain advanced data processing fields. But I don't see that as Rust's killer niche for initial adoption.\n\nRegardless of whether Rust code replaces much C++ code, the native no-GC space has more ideas and tooling work being done thanks to the Rust project. So if some safe C++ subset becomes dominant (and some people are trying to introduce that) then Rust knowledge will still be useful in that language and the Rust project will still have made a positive difference.\n\nWith that out of the way, I think most of your other arguments don't hold up, because they attempt to predict the future with false analogies.\n\nNone of your tech examples provide qualitative step change advantages for one over the other, rather they are close substitutes. VHS can do basically the same job as Betamax, from what I understand; then VHS was replaced by DVD, which had numerous qualitative advantages over VHS and therefore was worth the investment.\n\nThe safety offered by Rust today is a significant advancement in the state of the art for native code, which is why (contrary to what you wrote) all the biggest tech companies in the world are pouring resources into it, including: Amazon, Google, Microsoft, Facebook, Baidu.\n\n> And the problem with Rust is that it just doesn't have critical mass\n\nCritical mass does not mean dominance. In nuclear physics, critical mass means approximately \"enough stuff for the reaction to be self-sustaining and expanding rather than fizzling out to nothing\". Which Rust is at this stage, as it is growing even despite its original sponsor Mozilla sadly dying rapidly.\n\n> and, frankly, I don't think it will ever have\n\nThis is the argument from incredulity fallacy. Just because you can't imagine it will have some quality (not critical mass, because it already has that), doesn't mean it will not have. If you want to prove your point (not that you have to, you're entitled to your opinion), you would need to provide a better argument.\n\n> Recently, Linus Torvalds complained somewhere that old C dinosaurs don't want to learn Rust.\n\nYes, and yet Rust is in the kernel mainline anyway. Rust in the Linux and Windows kernels is evidence that it offers qualitative advantages that C++ never had.\n\n> For higher level stuff (e.g.: web backends) Go offers faster iteration cycles than Rust because it has a gentler learning curve and better compile times.\n\nYour iteration cycles are only faster assuming the extra bugs that Rust catches won't significantly speed up development over Go. Depending on the app, I suspect either could win here.\n\n> Yes, Rust adoption is rising but competing technologies are also getting better (e.g.: safer C++ with better linting tools, JIT JavaScript and WASM engines getting faster) or rising faster (Go).\n\nThis seems like a version of the slippery slope fallacy. Even if C++ is getting safer incrementally (citation needed, I've seen calls to add major chunks oghe language to support Rust semantics), that doesn't mean that C++ will overtake Rust in safety; there may be a limit from its existing semantics.\n\nLikewise JavaScript engines have plateaued at several times slower in throughput than native code, because of course GC has a throughput overhead. And that's not to talk about the latency problems of GC, heroic efforts have not brought low pause time GC's into the same category as native code.\n\n> rising faster (Go).\n\nEven if Go remains more popular than Rust forever, it doesn't mean Rust hasn't succeeded or made an impact, and especially in performance and safety critical fields.\n\nFor example, in the 2010s, a lot of open source systems software was being writting in Java: Cassandra, Hadoop, Kafka. JVM constraints, especially with large heap sizes, led to all of these gaining wire-compatible C++ rewrites from companies wanting to offer more performance, e.g.: SycllaDB, Red Panda. In the 2020s, many of the new databases I see coming out are written in Rust, including internal AWS data store components for S3.\n\n> There is an huge junkyard of technologies that failed to gain broad acceptance, many of them far more revolutionary than Rust (e.g.: Lisp, Smalltalk). I don't see why those technologies' story can be avoided.\n\nWe shall see if they are avoided, but again the argument from incredulity is a fallacy. From memory, Lisp and Smalltalk were promoted on being faster to develop in that C++ or Java (and others) while being more safe than C++ and somewhat worse runtime performance than both. Rust is not offering the same value proposition. The only other languages I know of offering native level performance and memory safety are a) Rust clones and b) prototypes.\n\n> I don't see that many strong sponsors firmly behind Rust and pushing for adoption by customers.\n\nAs I stated above, many big name companies and government agencies are pushing Rust and stopping new projects in C and C++.\n\nAdoption by customers: almost all programming languages on the rise now are open-source and ecosystems are more modular than ever before. So we don't need a Sun, or an IBM, or a Microsoft, or a Google to push anything in the way they may have used to with proprietary or single company open-source technology (e.g. Golang, .NET, COBOL, Java).\n\nIf you do still want a Rust IDE, JetBrains has one, and rust-analyzer can add the features you need to many editors via LSP."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.628118,
      "arousal": 48.5827665,
      "dominance": 52.947846,
      "text": "I've been working primarily in Rust at a large tech company for almost four years now. During that time, Rust adoption at the company has exploded while Go has been stagnant over the same period. In fact, Rust is one of the officially recommended languages at the company for new projects and is used in several pieces of critical infrastructure."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "35 years of c++, and also many other languages, I tried using rust... and I didn't understand the point, except for memory security, the rest... n It's not at all suited to my needs, no object programming already, and it quickly becomes complicated for not much. So I'm not convinced by this language. Another fashionable language, which will disappear like many others before it."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.10781272727273,
      "arousal": 57.359307181818174,
      "dominance": 62.51288390909092,
      "text": "As Bjarne often says, there are programming languages people complain about (e.g. C++) and the ones nobody uses.\n\nMicrosoft, Google and Amazon or US government inclining on Rust or so called memory safe languages is just an opinionated stance. Good luck to them. They don't represent the entire world or software ecosystem. There is world beyond FAANGS or USA.\n\nC++ in its modern forms has all capabilities to remain the top choice for high performance computing in foreseeable future; C++ is already memory safe in the right hands and is the only full spectrum language from low latency use cases to full-fledged operating systems. \n\nAs far as tooling is concerned, modern C++ ecosystem is already rich and thriving. It does not need to follow others, just stay humble and sane. And it will keep flourishing and keep fueling the engines of software systems in the world and that is the only thing which matters.\n\nThose predicting the future of C++ are largely those tribes who spend most of their times in meeting rooms reading/writing mails or planning things for others and have little to do with real life programming."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All companies adopting Rust will regret it later on. "
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.048267,
      "arousal": 57.580174928571424,
      "dominance": 62.12342078571429,
      "text": "Some thoughts / speculation from somebody working in a related field of software:\n\nAnecdotally, I am starting to see Rust come up more in our sales conversations around time travel debugging (I'm CTO at https://undo.io), so it feels like the market is slowly moving now.  I don't feel I can predict yet how big this shift is going to be amongst our (largely C++ customers).\n\nMost of Undo's biggest fans, to date, have been C++ developers with big, legacy codebases running on commodity servers.  These companies are generally doing mission-critical stuff with their C++ and so bugs are really challenging for them.  Generally, the problems seen with their C++ code are:\n\n * Lots of hairy code - dating back a long time.\n * The original authors might not be available anymore.\n * Race conditions and memory bugs (corruptions, memory management issues, etc).\n * It's not tractable to \"just learn the code\" because of how large it is.\n * It's not tractable to \"just rewrite\" for the same reason.\n\nAs you'd expect, many of them are mentioning Rust in commercial conversations because it can help (at least partially) with these problems.  Those conversations feel quite new to me, though.  We're geeks and have been aware of Rust for the past 10+ years.  My perception is that, within the past couple of years, large C++-oriented organisations have just started to seriously think about using Rust.\n\nIf they are successful enough with this change, then they'll be building large, complex Rust codebases.  Hopefully this all means more large employers gradually posting more Rust jobs over time, especially as the original authors of the code leave and need replacing.  Whatsmore, people with C++ *and* Rust experience should be pretty useful if that transition process picks up."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "I disagree on Go being easier necessarily, Rust is higher-level than Go in many ways. Rust with a GC and built-in async would be much nicer than some of the strange decisions in Go to keep it as \"simple\" as possible.\n\nBut I agree with you overall, it's been about 5 years since I learnt Rust and there's still no jobs. Java and Typescript are still the best languages to learn overall."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.957672,
      "arousal": 51.28495833333333,
      "dominance": 63.07634166666667,
      "text": "Rust is great, but a company switching an established stack is a monumental task.\n\nI doubt most companies are going to undertake that task without some push from the government (more than just the White House recommendation).\n\nMy company is currently actually converting to Rust, but it was at a time when we had to rewrite most of the stack anyway for other reasons and I was able to convince them to go Rust along with it."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53288,
      "arousal": 51.7006805,
      "dominance": 58.2199545,
      "text": "> Betamax was better than VHS\n\nBetamax was mmmaybe a little better in image quality, but had worse play time, was more expensive, betamax VCRs had much fewer and worse features than VHS VCRs. Overall VHS delivered a much better experience to consumers."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.6774375,
      "arousal": 56.3492065,
      "dominance": 62.103174625,
      "text": "> TL,DR: Because jobs.\n\nYep. Sorry.\n\nI'm currently using Rust at my job, but only because the business is open to using the right tool for the job -- and most of the time Rust is *not* that tool. But sometimes it is, and because I'm an advocate for it, we use it, and very successfully.\n\nOtherwise, I use Rust for personal projects, open-source, and the like.\n\n> It is like \"the first rule of Rust jobs is that no one talks about Rust jobs\".\n\nWell, its the one thing frankly many of us can't do anything about, so what's to talk about?\n\n> There is an huge junkyard of technologies that failed to gain broad acceptance, many of them far more revolutionary than Rust (e.g.: Lisp, Smalltalk). I don't see why those technologies' story can be avoided.\n\nEvery technology that did gain broad acceptance was, at one time, _not_ widely accepted. We don't know what the future holds. Rust is still young; if, in 15 years, Rust is rarely used, then yeah I'd say it is unlikely Rust will ever be popular. However, the next 10 years will be interesting I think; Rust still has a chance to make an impact, and if it does, it needs to happen within the next 10 years or it never will."
    },
    {
      "post_title": "Goodbye, Rust. I wish you success but I'm back to C++ (sorry, it is a rant)",
      "created_utc": 1732717876.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "sounds like skill issue"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.32594281481481,
      "arousal": 56.84051403703703,
      "dominance": 61.81657837037037,
      "text": "First of all, \\*thank you very much\\* for taking the time to write this post. People who leave Rust usually \\*don't\\* write about the issues they have, and that's a huge problem for us, because it means we mostly hear from the people who had problems that \\*weren't\\* serious enough to drive them away. \\*Thank you\\*, seriously, for caring enough to explain the issues you had in detail.\n\nI also have huge sympathies and sorrow for what sounds like \\*numerous\\* occurrences of being told that problems were your fault for not Doing Rust Right, or for being shamed for using \\`Arc\\` or similar, or any other time that you were made to feel guilty for not writing code in whatever way the complainer thought most optimal. \\*People should not do this, and I'm sad that people still do.\\*\n\n(Relatedly: could you give some idea of where you've been getting that kind of condescension? I don't see it in the Rust spaces I frequent, but it's clearly happening and I regularly see complaints about it, and I wish it didn't happen. We try, sometimes, to provide some official messaging discouraging this kind of condescension, but perhaps there's something more we can do.)\n\nI have a sticker on my laptop for \"Keep Calm and Call Clone\", and the same goes for \\`Arc\\` and similar, \\*especially\\* when you're trying to optimize for prototyping speed and iteration speed. \\*Quick hacks to get things working are fine.\\*\n\nMany of the issues you bring up here are real problems with the Rust language or with patterns commonly found in ecosystem libraries.\n\nFor instance, the orphan rule is \\*absolutely\\* a problem. It affects ecosystem scaling in multiple ways. It means that if you have a library A providing a trait and a library B providing a type, either A has to add optional support for B or B has to add optional support for A, or someone has to hack around that with a newtype wrapper. Usually, whichever library is less popular ends up adding optional support for the more popular library. This is, for instance, one reason why it's \\*really really hard\\* to write a replacement for serde: you'd have to get every crate currently providing optional serde support to provide optional support for your library as well.\n\nIn other ecosystems, you'd either add quick-and-dirty support in your application, or you'd write (and perhaps publish) an A-B crate that implements support for using A and B together. This should be possible in Rust.\n\nThere are a few potential language solutions to that. The simplest, which would likely be fairly easy and would help many applications, would be \"there can only be one implementation of a trait for a type\", giving a compiler error if there's more than one.\n\nA slightly more sophisticated rule would be \"Identical implementations are allowed and treated as a single implementation\". This would be really convenient in combination with some kind of \"standalone deriving\" mechanism, which would generate identical implementations wherever it was used.\n\nAnd hey, look, we've arrived at another of the very reasonable complaints here, namely the macro system versus having some kind of reflection. We should provide enough support to implement a standalone \\`derive Trait for Type\\` mechanism. It doesn't have to be \\*perfect\\* to be good enough for many useful purposes.\n\nSome of the other issues here might be solvable as well, and it's worth us trying to figure out what it would it take to solve them.\n\nIn any case, thank you again for writing this. I intend, with my lang hat on, to try to address some of these issues, and to encourage others to read this."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.98715041666667,
      "arousal": 63.728269000000004,
      "dominance": 66.96900975,
      "text": "I want to highlight \"Generalized systems don't lead to fun gameplay\" because I think there's a really useful idea here that the dev doesn't do a brilliant job of explaining. Emergent gameplay is often a good source of fun and it arises from interactions which are understandable and yet weren't explicitly coded. So you want to write behaviours which can interact, but not go through having to enumerate and implement each such interaction - it should be possible to watch somebody else play your game and be *surprised* by what happens *in the game you wrote*.\n\nI think Mario Maker shows this off really well. Nintendo's team will have hand written each of the things each part in the game can do, they should know it all, but of course the interactions between things rapidly spiral beyond what can be understood in this way, the behaviour which emerges was not specifically planned even though it's mechanical."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.30725625,
      "arousal": 55.527211,
      "dominance": 65.98639425,
      "text": "Holy crap, this post is basically reading with my mind when it comes to all the frustration I felt trying to make non-trivial games with Rust, Bevy, or even just Raylib+hecs. Even the part that I thought I’d have issues with (ECS; turns out it’s just about its overuse to solve borrowchk problems) is absolutely spot on.\n\nSadly, I expect this post to go down like a lead balloon in this community, because it will be too abstract to many, and only echo experiences of people who were _really_ affected by the issues described.\n\n*Edit*: I’m glad to be proven wrong :)"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.7857145,
      "arousal": 62.07483,
      "dominance": 64.8526075,
      "text": "> People who tend to have neatly designed systems that operate in complete generality tend to have games that aren't really games, they're simulations that will eventually become a game, where often something like \"I have a character that moves around\" is considered gameplay\n\nI came here for a good time and frankly I'm feeling attacked"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.41165192307692,
      "arousal": 63.753706538461536,
      "dominance": 65.62009392307692,
      "text": "This is a very important article. Because it echoes lots of issues people have with Rust, besides game development.\n\nThe Rust purist in me obviously shys away. Global state bad! But that purist then insists there must be a way to have our cake and eat it too. Let's be real, that's what Rust is all about.\n\nIf these things can be fixed, even normal dev work in Rust should be better.\n\nBut for if I do any game dev, I'll take the advice of using Godot to heart. For now.\n\nOne of the biggest weaknesses in e.g. the JavaScript ecosystem is needing to cobble all of these \"custom\" pieces together. There needs to be an out of the box experience that lets you just focus on game dev. Like how the Rust language itself is, which is one of many reasons why we like it.\n\nI mean seriously, does anyone else actually work a programming job? I love trying to get all the perfect tools and libraries, incredibly much so, but if I put my business hat on, we need to deliver value. Which is letting other people develop value.\n\nEngines and tools and libraries that don't get out of the way and don't let you focus on the thing you're trying to do, your business logic, those are no good to use.\n\nIt continues to be the case that Rust is meh for GUI and game dev. This needs fixing."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.88510966666666,
      "arousal": 54.53514766666666,
      "dominance": 64.85260766666666,
      "text": "The best part of this article is the list of various patterns.\n\nI think with Rust there is an emergent set of patterns and tools for solving various problems within the safety restrictions of Rust.\n\nI would love a book with a compilation of these patterns, along with demonstrations of what problems they solve and how, in various programming arenas."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.56916079999999,
      "arousal": 73.8321992,
      "dominance": 70.06802739999999,
      "text": "In general this is a well written article... but the recurring idea that X technology does or doesn't lead to fun games is really suspect.\n\n8 bit NES games were written by small teams using languages and compile/test cycles that were much worse than anything discussed here.  And the best of those games were more fun than anything that anyone discussing this article has made or will ever make in their entire career. The worst of those games were buggy unplayable garbage. Technology is not a determinative factor of fun either way."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.1148905,
      "arousal": 55.82010566666667,
      "dominance": 66.47770233333334,
      "text": "Rust was not originally, and has become less and less over its design evolution, a good language for prototyping or \"rapid iteration\". It's just not. It's a good language for building a system you basically already know how to build, maybe have already built a few times, and just want to build a reliable version of in a way that is less of a pile of bugs than usual, and still performs well.\n\n(And also one that's already got a strong tree-structured decomposition of its memory and control, not a giant ball of everything-points-to-everything and everything-calls-everything)"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.286848,
      "arousal": 58.90022675,
      "dominance": 60.912698250000005,
      "text": "> As far as a game is concerned, there is only one audio system, one input system, one physics world, one deltaTime, one renderer, one asset loader. \n\nI'm very curious: do you write unit tests for your games?"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.3061224,
      "arousal": 59.319728,
      "dominance": 66.0544216,
      "text": "I believe this blog summarizes the experiences many people have with Rust yet didn't have the enough background to justify or back their position, nor the time to do such an extensive post.\n\nMy position is quite similar, I think that the main issue with rust is that the set of rules it tries to impose as code correctness are absolutely great in principle. But it lacks flexibility, as there are no ways to work around them. \n\nThe saying about C++: \"it gives a rope and lets you hang yourself with it\" is true, and is the oposite position. You can do what ever you want with it, but it allows the developer to have a caveat and do what ever they want at some point. Accepting the risk, you have to know when you should or can bend the rules, or even how to minimize the risk. \n\nIn rust, if the rules are completely enforced by the compiler you have no way to do so. So there's been a few times in which I felt like the code correctness is placed above developer judgement, leaving you with a single option to follow. Removing any freedom of choice on what to do right or wrong, there's a single way to do stuff.\n\n  \nI come from the embedded world, and the fact that you cannot create a singleton out of a HW interface annoys me like fuck. And the fact that you need to jump through loops and hoops to make one, like using a library, is double the annoyance."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This comment made last August's debacle more meaningful in light of the recent xz supply-chain attacks:\n\n> here's also the case where the author of syn is also the author of serde, a popular Rust serialization crate, which at some point last year started shipping a binary blob with its installation in a patch release, rejecting the community backlash."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.054421500000004,
      "arousal": 53.8548755,
      "dominance": 60.714286,
      "text": "> Dynamic borrow checking causes unexpected crashes after refactorings\n\nWell yes, that's a choice on the rust side. C++ just lets you do it and it works until it doesn't.\n\n  \nI think ECS has been pushed too hard, and Fyrox has gotten further than bevy because they avoid the architecture moonshot. You are 100% correct on that area.\n\n  \nBut lifetimes, etc, well, that's just preventing crashes waiting to happen. Lots of stories about last minute hacky patches to get something to run stably enough to ship."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.5294785,
      "arousal": 61.309523999999996,
      "dominance": 60.856009,
      "text": "I love the section about ECS. Really nailed it on the head, I think. Nobody told me I \\*had\\* to use ECS, but it was so pervasive, I though I was making a mistake not using it. The reasoning you had about Generalized Systems and boring gameplay was ultimately why I decided to go without it.\n\nI was pretty excited for Comfy when I first heard about, it, but I ended up switching back to Macroquad. There were just things I couldn't do in Comfy without trying to rip the engine apart.\n\nI'm going to keep using Rust for games, but it's more of a hobby for me. I definitely don't judge the switch to Godot."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.10317465,
      "arousal": 59.56349205,
      "dominance": 63.333333249999995,
      "text": "As someone who has released a game with Rust and is currently working on another, this post echoes a lot of my own experiences.  I'm not throwing in the towel like the author, but I'd be lying if I said I wasn't keeping my eyes open for alternatives.\n\nThe root of most of the issues with the borrow checker is that there's only one first-class way to refer to a memory object in Rust: a reference with static lifetimes; every other way is a second-class citizen that requires more typing, so you're naturally guided into using them, even though game objects virtually always have dynamic lifetimes and need to refer to one another.\n\nLike the author, I found ECS to be surprisingly unfriendly to routine refactoring work.  A lot of ECS crates use `Rc<RefCell<...>>` or equivalent for component storage internally, so moving code around often leads to surprise runtime panics.  In my current game I abandoned ECS in favor of a big context struct, which seems to work okay as long as I mostly access things from the root context and minimize borrows, i.e. `ctx.foo.bar.baz = ...`.  I agree that flexibility here could be improved; I think that partial borrows of structs would be an decent ergonomic win here, for example.\n\nHere's one of my own pet peeves: Rust is strangely insistent on lifetime annotations where they could be left out.  Here's a function signature from the game I'm working on right now:\n\n    fn show_status_change(&mut self, mctx: &mut ModeContext<'_, '_>, msg: &str)\n\nThe `ModeContext` here has a couple of lifetime parameters, but the only purpose of lifetime annotations in a function signature is to relate the lifetimes of inputs to the lifetimes of outputs.  Not only are there no output lifetimes here, there isn't even an output at all, so I shouldn't have to type `<'_, '_>` at all either!  It seems small here, but I've had to type this out more than a few times over the course of development, and it adds up.\n\nUsing `Rc<RefCell<...>>` for shared mutable ownership feels clumsy with having to use `borrow` and `borrow_mut` everywhere.   If you know you only access the data within from one thread at a time and you're brave, you can use `Rc<UnsafeCell<...>>` instead and use custom `Deref` and `DerefMut` trait implementations to save on typing, plus you get to pass around proper references instead of `Ref`/`RefMut` pseudo-borrows.\n\nClosing out, I'll second the opinion that Miniquad/Macroquad and Fyrox seem useful and largely overlooked; I'm using Miniquad right now and I like its bare-bones, no-nonsense approach and minimal dependencies."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.29964385714285,
      "arousal": 62.90897314285714,
      "dominance": 63.84839628571429,
      "text": "I'm trying out doing some small games with Macroquad in my spare time, and I agree with the article about the usefulness of having hot reloading, and I'm surprised at how many people don't see the value.\n\nI found a post by Faster Than Lime about hot reloading rust, and with a few other resources I managed to hot reload Macroquad with custom dylib reloading (using dlopen manually with \\`unsafe\\`s). [https://jmmut.github.io/2023/03/17/Hot-reloading-Rust-and-Macroquad.html](https://jmmut.github.io/2023/03/17/Hot-reloading-Rust-and-Macroquad.html)\n\nOne of the games I'm writing has this idea implemented, and while it sometimes crashes when you change a public struct, and the code around the dylib interface could be cleaner, it is so nice to \"only\" have to wait 0.5 seconds to recompile the lib and see my changes live without restarting the game.\n\nWhile I don't fully agree with all the points in this article, I'm glad I read it, it has so many valuable insights."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.579743,
      "arousal": 62.679516166666666,
      "dominance": 64.94708983333334,
      "text": ">Rust on the other hand often feels like when you talk to a teenager about their preference about anything. What comes out are often very strong opinions and not a lot of nuance. Programming is a very nuanced activity, where one has to often make suboptimal choices to arrive at a result in a timely manner. The prevalence of perfectionism and obsession with \"the correct way\" in the Rust ecosystem often makes me feel that the language attracts people who are newer to programming, and are easily impressionable.\n\nHe's right. The people in this community don't know programming or Rust well. They definitely don't know other languages. It's wild how much cheerleading they do. Oh and they never write documentation, just thousand line examples with no comments."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.5147395,
      "arousal": 55.5555555,
      "dominance": 64.909297,
      "text": "> But here we get slapped on the wrist, did I actually think I could get away with passing self around while also borrowing a field on self?\n\nI get bit by this a lot too when trying to refactor GUI code (...and other code). I think it is one of Rust's biggest flaws (not supporting some way of doing disjoint partial borrows at least).\n\nThanks for the thorough and thoughtful write-up, I agree with a lot of it."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.594104,
      "arousal": 54.724111666666666,
      "dominance": 63.41647766666667,
      "text": "I have been using Rust as a hobby for about 6 years now and still have problems with the borrow checker. Many of the same problems that the article mentions. There are solutions for these borrow checker errors, e.g. using RefCell, arenas or context structs, but often I don't like the solution.\n\nOn the other hand, Rust is very innovative language. Lifetimes and borrow checker sounds a great idea at first. So I believed in Rust and believed that I just need to get more experience.\n\nBut even with these problems with Rust, I don't know any better alternative that can also be used for low level programming, other languages have different issues."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.37566133333333,
      "arousal": 53.590325166666666,
      "dominance": 58.182161666666666,
      "text": "Thank you for making me feel vindicated about wanting [partial borrows](https://github.com/rust-lang/rfcs/issues/1215) for many years.\n\nMost of the time, the response I got was \"partial borrows would be not worth their weight\", and \"you are not splitting your structs up enough\".\n\nI feel like partial borrows would help alleviate some of the issues in this article, especially with the \"pass down a context struct\" approach.\n\nI know it's a hard problem to solve, but I feel like it's not even a feature that's wanted by a large part of the community, because they feel like it's the developer's fault if they need partial borrows.\n\nAt this point, I would even be happy with a solution like putting an attribute on a function that marks it partial, and the borrow checker would have to look through the entire call chain and split up the borrows.\n\nAnd just disallow this attribute on public functions, because of semver concerns."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.19022422222222,
      "arousal": 61.148903888888896,
      "dominance": 55.24061455555555,
      "text": "I was going to post a long winded post about the negatives and positives, but to be honest, this post goes over so many legitimate pain points in rust and the rust community, that I'm not sure it's even worth doing anything but to amplify the post.  The only two \"negative\" things I was going to mention basically boil down to:\n\n\n* they clearly aren't comparing rust to C++, so while people rightly point out many of these are issues in C++ as well or are worse (hence why you traditionally pair a scripting language with c++) OP clearly was comparing against Gdscript, C#, and other game scripting languages.\n\n\n\n* They are dead wrong about context objects and \"only needing one X system\", but the frustrations that lead to this wrong conclusion come from very real pain-points in *rust* specifically, and certain types of context object patterns can't be used in rust easily due to interior mutability issues (context objects are also the default in other engines, they just don't realize it because they are writing methods for said objects in those engines)"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.1889645,
      "arousal": 56.557067499999995,
      "dominance": 68.40513966666667,
      "text": "I think there is an issue how Rust is taught which encourages users to shoot themselves in the foot.\n\nNamely that because it's possible to write perfect code you should. Perfect is the enemy of good.\n\nRust would be an easy and perfectly manageable high level language if you just used Rc<> + Box<> types to ignore the borrow checker and dyn traits to improve compile times.  Yes it would be less efficient at runtime but you would be way more efficient at writing code that doesn't need to be fast.\n\nAnd because of the 80/20 rule you can write that 20% of code that has 80% of your actual performance impact with \"proper\" rust design or go unsafe when necessary.\n\nThen you would get the best of both worlds, a high level simple layer for being productive and a low level layer for hard problems, and both of these levels would be better at their jobs than C++ is at both. But people would rather switch to C# or Lua for high level code than write inefficient Rust."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.47089940000001,
      "arousal": 58.10657596666667,
      "dominance": 64.16855626666667,
      "text": "The author's perspective is on the \"short here/short now\" line. There is nothing wrong with that, it's the same perspective that many business owners have by necessity. You have bills to pay right now, you have deadlines for clients to meet right now.\n\nMy perspective as a game developer of more than 12 years is that the [\"long here/long now\"](https://notes-on-haskell.blogspot.com/2007/08/rewriting-software.html) line is more favorable. The author wants to optimize their effort in the short term, whereas I want to optimize my success in the long term. It's a sliding scale, to be sure, but the author's perspective is diametrically opposed to my own.\n\nThey want rapid iteration and \"set-it-and-forget-it\" style of coding to see if a spur of the moment idea will work, as in prototyping. I want to be assured that code I write has as few bugs as reasonably possible, including sanely handling edge cases and error conditions. In the former, a language like Lua is good enough and many gamedevs use it for this reason. In the latter, a language like Rust is good enough, and many engineers concerned with long term maintainability are attracted to it.\n\nI have written games in JavaScript, Python, and Lua, often with the same cavalier mentality, where I would just hack something together now and *maybe* revisit it later. It is quite good for getting something done for immediate gratification. But it is the bane of my existence if I'm on the hook for fixing bugs in that code later. ~~If you can make maintenance someone else's problem, it's the perfect selfish development strategy.~~ (Edit: This was unnecessary color commentary that I included about myself. It was not meant as projection or directed to anyone else.) I look back on all of the chaotic code in my old projects, and it's literally untouchable. Lua and friends do not lend themselves to fixing bugs without breaking something else.\n\nOn the other hand, I appreciate Rust for its constraints. The language makes it hard to shoot yourself in the foot. It forces you to think about mutability. Because if you don't think about it, that's a bug you just introduced. A bug that Rust would have forbidden. Rust requires you to handle the edge cases. So that your code doesn't plow ahead blindly when an error occurs, or when the wrong assumptions were made.\n\nIn direct criticism with what was written, I get a very strong sense of cognitive dissonance between the need to \"just *move on for now* and solve my problem and fix it later\" and \"fast and efficient code\". (Edit: Cognitive dissonance is normal! I'm guilty, too. I love animals but I eat meat. Some amount of cognitive dissonance is inescapable.) Using Rust because you want a game that runs fast even on moderately slow hardware but expect that \"fast code\" should be free and you can ignore details like copying or cloning vs pointers (including static, heap-allocated, and reference-counted pointer variants).\n\nThe \"better code\" and \"game faster\" continuum is something you have to navigate based on your short-term and long-term goals. Maybe Lua is the sweet spot for you? Maybe it's JVM or CLR. Maybe it's a web browser. Of all available options right now, it's Rust for me. Garbage collection is not on the table. And because I have the \"long here/long now\" mentality, I'm confident that something else in the future will be an even better fit for me than Rust is at the moment.\n\nAnother example to point out is that they specifically take note that some problems are \"self-inflicted\", and later on opine that global state makes things easier than using bevy's ECS implementation. And that might be true from some perspective, but it ignores all of the bugs that global state inevitably leads to. Usually, mutable aliasing bugs like the unsoundness mentioned in `macroquad` or the more general problem as articulated in [The Problem With Single-threaded Shared Mutability - In Pursuit of Laziness (manishearth.github.io)](https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/).\n\nBut the real problem is that drawing a line between \"global state vs ECS state\" is a completely artificial (even self-inflicted) limitation. A game can use both global state and ECS together, it isn't a matter of one or the other. That doesn't mean it will be easy. In fact, sharing mutable state is hard, regardless of whether it is local or global, and regardless of what the implementation language is.\n\nThey are absolutely right that Rust is not \"just a tool to get things done\". It's a tool to do things correctly with high performance. There are plenty of other languages to \"get things done\". They just come at the expense of correctness, performance, or both."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I didn't read the entire article but I don't see a single mention of using a scripting language on top of rust (rune/rhai/dyon/lua?).\n\nWhich could help with the more rapid prototyping quite a bit ?"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.512472,
      "arousal": 53.77928966666667,
      "dominance": 57.671957666666664,
      "text": "What a great article, that - as a long time gamedev, but newbie Rust dev - is definitely going to save me some time and frustration. I still want to try it, but knowing what to expect (and some things you discussed were a confirmation of concerns I already had!).\n\nI just bought Unrelaxing Quacks to say thanks (and congrats for the release!)"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.748299,
      "arousal": 53.854875,
      "dominance": 59.977324,
      "text": "I'm using Piston/Dyon as my productivity combo and never looked back. If I need a special designed format, I use Piston-Meta. Meta-parsing works excellent (this was how the first modern computer was developed in late 60s).\n\nHaven't tried Bevy and never needed ECS for anything. Fyrox looks interesting, though."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": ">During the two years of developing what would become Comfy the renderer was rewritten from [OpenGL](https://docs.rs/glow) to [wgpu](https://docs.rs/glow) to OpenGL to wgpu again.\n\nThis kinda makes me curious. Why the back and forth?"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Crazy how dotnet hotreloading apparently works with game dev in unity when it doesn't even work (for me) with Microsoft's own Blazor web framework."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.7800455,
      "arousal": 67.2902495,
      "dominance": 76.643991,
      "text": "Rust just isn’t a good language for gamedev. Games are giant balls of mutable state with unknown lifetimes. \n\nI love Rust. It’s a great language. But it’s not a great language for games. It probably never will be. And that’s ok."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 65.53288,
      "dominance": 61.337868,
      "text": "Regarding the debugging point: Personally my biggest problem with debugging Rust is that enum variants and some core data structures like VecDeque or basic iterators are not properly understood any debuggers I know (currently using vscode+lldb). The rust expression evaluation of lldb is also very limited compared to what's possible for c/c++. I am hopeful that these tools can be improved though."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "If a system is complicated, then it is a given that it will be hard to modify correctly.\n\nConsider a complicated specification A and a perfect compiler, if I make any changes to A, it will likely break A.\n\nIf you are planning on making lots of changes and that imperfections are mostly funny bugs, then Rust is simply not for you.\n\nI use and prefer Rust BECAUSE it will not let me get away with half ass fixes/changes. And I would rather keep the language that way. I don't want Rust to get even more complicated and more implicit than it already is because it wants to cater to every single use case."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 65.8163265,
      "dominance": 61.961451499999995,
      "text": "I think maybe that re-writing it in rust is good, but writing it in rust can be challenging.\n\nAs you mentioned, rust forces more iterations, but mandates when those iterations happen. Contrast this to say JavaScript, you can replace the duct tape whenever you want and at the end of the day, the only valuable metric is working software (not perfect software).\n\nI’ve taken to prototyping ideas in python, and after I’ve got the logic down, I’ll rewrite it in rust to achieve peak performance. While this isn’t always ideal for large projects, it can sometimes be helpful to control *when* the iteration happens.\n\nRust requires you to be smart. I’ve consistently found, despite numerous attempts to prove otherwise, that I’m not as smart as I think."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.648526,
      "arousal": 56.09410425,
      "dominance": 66.18480725,
      "text": "I am a Rust user both as a hobbyist and a professional. I've written the standard backend server for production use and the usual \"let me quickly try this one thing\" physics simulation in Rust. And I have to disagree on the niceness of enums in the language.\n\n\nConsider this typescript code:\n\n\n    type AB = 'A' | 'B';\n    type CD = 'C' | 'D';\n    type ABCD = AB | CD;\n\n\nThe best thing I can come up with to emulate this in Rust is:\n\n\n    enum AB { A, B }\n    enum CD { C, D }\n    enum ABCD { AB(AB), CD(CD) }\n\n\nWhich means if I want to use the superset, I now have to deal with annoying nesting everywhere. I believe the primary culprit here to be the fact that enum variants aren't proper types and thus not first class citizens. This could be due to Rust's legacy in OCaml where you need a type constructor for every element of every sum type. Even in everyone's most favourite hated language, Java, you could nowadays do something like:\n\n\n    sealed interface AB permits A, B {}\n    sealed interface CD permits C, D {}\n    interface ABCD extends AB, CD {}\n\n\n(Not enums though; Java enums are just collections of typed constants, more akin to Erlang atoms than Rust enums) Zig has similar functionality but relegates it to its special kind \"error\" (Zig has the kinds type and error while Rust has type and lifetime) for some unknown reason, as it is really useful outside of error handling as well. But then, this is the reason for the humongous god error enums I see in every nontrivial Rust project.\n\n\n\nI might be missing something here too, because googling the thing is really hard when what you want is en union of two enums and Rust has a language construct called union as well."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.69906057142857,
      "arousal": 62.52024614285715,
      "dominance": 61.24068657142857,
      "text": "I am confused. Hope someone can enlighten me. If you require to be productive over having fun why would you choose a language with an immature ecosystem for game development? Do other languages make game engine development an order of magnitude easier?"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.36894770588235,
      "arousal": 60.94437764705882,
      "dominance": 61.07776429411765,
      "text": "Writing code for UI (or games) is really not something you want to do in a systems language. \n\nThis is true of C++ as well. The fact that games are written in C++ today is mostly a legacy thing. C++ is (or was) the only portable language available that also compiles away all of its abstractions. It means you could write your demanding physics engine and get every ounce out of CPU as possible.\n\nToday though, all of that stuff has been written and shipped into games. So as someone or some team trying to build a new game, your budget and time are limited and every second of that needs to be on gameplay. Any time spent fussing with compiler rules or policies is time spent away from making a fun game. How would you even know the game will make the money back while you're stuck, 50% of your time, writing very low-level code.\n\nUnity is such a popular platform because its whole value proposition is that you take pre-built assets and compose them together and spend your time running your game. \n\nYou might think, what about Unreal, but there's so little C++ you NEED to write that it's basically Unity with C++ instead of C# at this point.\n\nAlso, there's nothing preventing you from using Rust for the parts of the game that need to squeeze out performance. It will happily provide all the safety you need in sections of your game that actually need that. Since, honestly, the real performance work in a game will likely be done for the GPU in shaders, something you wouldn't use Rust for anyway.\n\n  \nAnyway, thanks OP for taking the time to articulate your frustrations. You definitely bring up interesting use cases that the core team should at least have answers for, even if the answer would be, \"we don't want to support that.\""
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.72869147058823,
      "arousal": 55.815659411764706,
      "dominance": 58.47005447058824,
      "text": "I am very close to leave Rust behind as well. Especially the partial borrowing and global state issues just suck.\n\nNow I just use some big global state `World` object in all of my projects to keep it bearable. I just call `world_init()` once and then in my gameplay code e.g. `World.delta_time()`, `World.draw_sprite(...)`, `World.camera.pos.x = ...`\n\n```rust\n\npub struct World;\n\nimpl std::ops::Deref for World {\n    type Target = ThreadLocalWorld;\n    fn deref(&self) -> &Self::Target { thread_world() }\n}\nimpl std::ops::DerefMut for World {\n    fn deref_mut(&mut self) -> &mut Self::Target { thread_world() }\n}\n\nthread_local! {\n    static WORLD: UnsafeCell<MaybeUninit<ThreadLocalWorld>> = const { UnsafeCell::new(MaybeUninit::uninit())};\n}\n\nfn thread_world() -> &'static mut ThreadLocalWorld {\n    WORLD.with(|e| {\n        let maybe_unitit: &mut MaybeUninit<ThreadLocalWorld> = unsafe { &mut *e.get() };\n        unsafe { maybe_unitit.assume_init_mut() }\n    })\n}\n\nfn world_init(window: Window) {\n    let world = ThreadLocalWorld::new(window);\n    WORLD.with(|e| {\n        let maybe_unitit: &mut MaybeUninit<ThreadLocalWorld> = unsafe { &mut *e.get() };\n        maybe_unitit.write(world);\n    });\n}\n\npub struct ThreadLocalWorld {\n    window: Window,\n    rt: tokio::runtime::Runtime,\n    device: wgpu::Device,\n    ...\n}\n\n```"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.80638423076923,
      "arousal": 57.858015230769226,
      "dominance": 61.18088261538462,
      "text": "While I'm sad to see you had a bad experience and want to move on, nobody can possibly fault you for arriving at that decision. In general I think I agree with your sentiment, that Rust is primarily made by and for framework developers, rather than application devs. My hope (foolish or otherwise) is that with frameworks like Bevy, Serde, GGRS, etc., we will reach a point where the hard problems of the Rust language itself are gone. I don't say solved here because what I mean is that, for example, Bevy will become \"so good\" that the need for Arc or Refcell won't exist at the end-user site.\n\n\nMy other hope, more of a gamble really, is that Rust has a solid foundation in security, safety, and performance, at the expense of ergonomics, but the ergonomics can be patched in as the language develops. C++ is kinda in the reverse position of trying to patch in safety, and they're failing to put it bluntly. I think developer ergonomics is something more social and fashionable than fundamental (e.g., Async is a fairly new concept for languages), and Rust letting the language grammar (and more) change with any edition should help.\n\n\nAnyway, thank you for taking so much time to write out your thoughts! I really hope you and your Dev team find success in whatever technology you choose. And I hope one day Rust will improve enough for you to come back!"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "Thanks for writing this article, I spent half a day reading it and looking up stuff, it was very interesting and a lot of fun!"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.096372,
      "arousal": 56.2358275,
      "dominance": 62.13151925,
      "text": "> Rust being great at big refactorings solves a largely self-inflicted issues with the borrow checker\n\nThai is very true. I spent over 3-months building ESP32 firmware in the Embassy codebase and the HAL is built off the Espressif IDF. Every the HAL gets upgrades and I want to upgrade my “app” code, uh yeah, breakage is a puzzle game. Which I enjoyed at the time.\n\nThat’s because I really wanted to learn. I’ve shifted to Embassy with STM32 and this has a slower pace so let’s see."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thank you for your effort in writing this and answering our questions."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.99773242857143,
      "arousal": 50.76125685714286,
      "dominance": 57.66115971428571,
      "text": "There is a religious adoration around Rust. I like Rust's original concepts, but I've been looking for some criticism of the language to get an alternative point of view before diving into it. Recently I read great post by a BITGUN developer (written in 2022), and I was wondering how his further experience with Rust turned out... And today I finally found THIS article and in the middle I realized that it is you again, the BITGUN developer. :) There seems to be little criticism of Rust and your contribution is noticeable. Thank you very much.\n\nThere are interesting arguments. The static nature of Rust can hinder rapid and agile prototyping. But maybe it is not a problem for some games? For example, point&click adventures have quite standard abstractions and mechanics, and they will only benefit from reliable code, but prototyping should take place in dynamic scenario scripts (not in Rust).\n\nRust pushes towards a certain code philosophy. My impression is that a lot of your problems with Rust are because you were struggling with it instead of accepting it. For example, you preferred global state. If developer tries to follow Rust's way, the experience can be more positive. But you tried (and you described problems with conveying context), so I understand your point here.\n\nWhat do you think about SwiftGodot? Here's a video of Miguel de Icaza (Mono developer and well-known C# promoter) criticizing C# (mostly because of garbage collector) and praising Swift:  \n[https://www.youtube.com/watch?v=tzt36EGKEZo](https://www.youtube.com/watch?v=tzt36EGKEZo)"
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.96749825,
      "arousal": 54.402872333333335,
      "dominance": 58.79629633333334,
      "text": "As a guy who's learning Rust by going through the rust programming language book, and as a guy who wants to make a 2D top-down RPG with tile graphics, (after building an ascii rouge-like)...\n\n  \nGod _damn_, I've spent way too much time reading the comments here after reading the article. \n\nIt's honestly a bit disheartening knowing that I might be wasting time learning Rust as a language for possible game development. But reading comments written by @kodewerx, @sephg, and others also made me realize that no language is perfect either.\n\nThat said I'll probably find other uses for Rust in the future. I'm a frontend web dev of 8 years, coming from Javascript / Typescript, and some Python, so learning things like lifetimes and more about mutability and ownership are all new to me. I've been wanting to learn a backend language for some time anyway, and I didn't like Java, and PHP / Laravel has always been a hassle.\n\nC# is my second choice, and is probably (arguably) a bit of a better choice for me. But I've enjoyed learning Rust so far. Don't know what it is, but maybe part of it is the book. I've found that I can kinda understand certain things like the lifetimes thing and ownership, simply because of how the book explains it. \n\nEh, anyways, I'm going off on a tangent here. Think it's my ADHD brain kicking in again. Oh look, a crab."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I completely agree with your thoughts on the orphan rule (for end-user crates), that thing needs to go."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.57445200000001,
      "arousal": 64.62585033333333,
      "dominance": 67.195767,
      "text": "The worst of rust is not the language but rather the community that keeps selling people on these lies. Trying to pretend like there are no things that other languages do better than rust will leave a bad taste in people’s mouths when they actually try it. "
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.931973,
      "arousal": 62.9818595,
      "dominance": 53.45805,
      "text": "And exactly this is how you end up with technical debt: “just move on for now and solve my problem and fix it later was what was truly hurting my ability to write good code.” And we all know “later” most likely is not going to happen."
    },
    {
      "post_title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
      "created_utc": 1714150331.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.22272611111111,
      "arousal": 63.70622311111111,
      "dominance": 60.40564366666667,
      "text": "I agree with many points mentioned in the article. Gamedev does have some special requirements compared to other software projects:\n\n* Games in general tend to have crazy amounts of state\n* You want to mutate that state all the time in many places\n* You want to iterate fast, prototype ideas and throw some of those away\n\n  \nI tried using very simple \"game engines\" like bindings to SDL2 or Raylib, basically just something which lets me draw stuff on the screen. That is something that works great in other languages, for example recently I tried Zig + Raylib and I was able to move fast and had great results. Doing the same thing in Rust will lead to an epic battle with the borrow checker and in my case, the borrow checker won.\n\n  \nHowever: For me bevy actually solved ALL of that. I can have as much state as I want in basically a highly efficient in-memory database. And when I write a system, I just need to specify what I need as a `Query`. This effectively means I can access anything anywhere I want while basically ignoring all the required Rust rituals when dealing with mutable state. I don't need `Arc`, `Rc`, I don't need any lifetime annotations, I don't need `clone`. I just specify what I want and the ECS gives it to me.\n\nYou are right that you still run into problems when mutating lots of different things in one system. So yes, in that case you have to refactor; something which you may not have to do in Unity or another language.\n\nBut keep in mind that bevy is still < 1.0. It is not production ready and I think UI is one of the main pain points. Every game needs at least some UI... some games require lots of UI. In any case, implementing anything remotely complex is a gigantic pain right now. Personally I am also undecided if ECS is the correct foundation for UI in general. But I have trust in the leadership of bevy coming up with a good solution."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's it. That's the post. Then I go back and fix it later. Sometimes I don't."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've found that my simple self imposed paradigm of functions taking references as arguments and returning owned values has removed 95% of my `.clone ()` usage."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.80158725,
      "arousal": 54.50680275,
      "dominance": 66.55328825,
      "text": "That's the beautiful thing about Rust. If you are building for performance, know what you're doing, but want tools to assist in doing it safely, Rust has you covered. If you're working on stuff that doesn't need the performance and not in your wheelhouse, but you want to take advantage of other nice attributes Rust brings to your project, that is perfectly fine. And your project will still likely be a lot faster than if you had written it in a different language."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good! That's what half of C++ code is doing anyway, implicitly. I swear so much of the growing pains of rust are just feeling bad about calling clone when you wouldn't feel bad about passing by value in the same place in C++, which has identical semantics to calling clone."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Whenever I feel bad about this, I remind myself how often other languages do this implicitly."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.403628,
      "arousal": 67.460317,
      "dominance": 66.666667,
      "text": "As God intended"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ask if the function needs to own the data? If not, then only take it by reference. That right there removes like half of all clones."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Cloning is often a good solution. And it isn't always very costly. I use [bytes](https://github.com/tokio-rs/bytes) and [bytestring](https://crates.io/crates/bytestring) a lot to greatly reduce the cloning costs for performance-sensitive codepaths. And `Rc` and `Arc`, of course, are great tools.\n\nI once proved to somebody their non-cloning solution, which required mutexes and other protections, performed significantly worse than a straightforward cloning-based solution.\n\nIt's also good to remember that many programming languages clone very frequently and often perform very well."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.95540433333333,
      "arousal": 56.65154966666666,
      "dominance": 73.696145,
      "text": "Pretty sure a lot of performance issues come from devs not being able to keep track of everything because of all the rules more often than they actually come from not using The Best(™️) way to do it. \nOne advice from Andre Bogus' talk about Easy Mode Rust (https://llogiq.github.io/2024/03/28/easy.html) that stuck with me as a way to be able to use Rust without mastering everything (that would be an awful first step) is to just wrap whatever you're trying to pass around in an Arc<>, rather than try to play with lifetimes. And then you can clone all you like at basically no cost"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Almost the same. I &borrow everything until it compiles"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Well, it's better to learn to avoid it, but if it's fine for you - it's... fine.\n\n90% of the code can be unoptimized without great consequences."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Coming from c++ I only could say that in rust clone in explicit but in C++ often is implicit"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's just C++ with extra steps"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.5600905,
      "arousal": 35.8843535,
      "dominance": 56.122449,
      "text": "I actually like that rust has made me a better programmer by not letting me be lazy and really think about what lifespan is required and not just hanging on to ‘global’ structures/values that I only needed at initialization— etc. \n\nNow my colleagues think I’m a tight a** because I refuse to use usize when u8 is all I need.  But they still drink milk so blah."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Small brain: Use borrow.\n\nBig Brain: `.clone()` everything.\n\nGalaxy Brain: `Copy` all the things."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I do that to prototype and move to references as I prepare for production"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I did as well but now Clippy catches unnecessary clones for me automatically"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just use `Arc`, then you can clone without guilt :)"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I just ask myself how many times I’m going to call this function and make a decision on the magnitude. If it’s once at the beginning, sure, run a .clone(). If it’s in the middle of a really hot loop I’m going to run a million times, it’s worth it to deal with references and Arc."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.054422,
      "arousal": 50.566893,
      "dominance": 67.460317,
      "text": "Now this is the kind of vibe coding i can get down with"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ain't nothing wrong with it 😉"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "clone-gang represent!\n\ni have dreamed of an easy mode rust that automatically clones kinda like dereferences"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Realest post I've ever seen on Reddit"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Skill issue \\\\s"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ragebait"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "This is the way, until you need to optimize, and then add refs at that time..."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102049999999,
      "arousal": 67.23356,
      "dominance": 64.7959185,
      "text": "When your app is causing churn go fix it. \n\nIn the mean time to look at borrowing and pass by reference vs pass by value. It’s fun to try to get rust as speedy as possible!!"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Which is totally fair and fine, provided that you don’t want to go for performance first (which you shouldn’t).\n\nIn the end, if you were programming in other languages, the compiler would chug it up and you would have problems down the road. Like this, the compiler tells you “hey buddy this variable is already taken, but you can read it, so clone it up”.\n\nNot bad to have a look at how to use references though. No need to rush it or make it complicated, but may simplify the design of parts of your code :)"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 64.512472,
      "dominance": 68.93424,
      "text": "This is always the best way when coding, do it in iterations. If you know what you need to code, then get the logic down without losing your flow, then go back with several iterations to improve it. Almost no one writes readable and performant code on the first try."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Yea, I think rust is special in it does not create good rust programmers by writing rust. I hardly ever find a use case for a macro or unsafe. Usually I find a crate. Since it keeps working without or by finding crates, I don't do it and by now I wouldn't remember how. \n\n\nSame thing as clone. It keeps working. "
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I do a lot of async and usually to prototype quickly I just use arc and clone everywhere. Then I optimize hotpaths if needed. For me this is the perfect tradeoff."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 69.954649,
      "dominance": 71.315193,
      "text": "Omg, 2 yr old Rust lover over here. Pls stop cloning everything lol, use references and if doing threading just Arc your inner structs. Rust is so beautiful 😍"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 61.111111,
      "dominance": 71.315193,
      "text": "That’s basically how Swift does it (for struct and enum) and it works very well"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.25623553333334,
      "arousal": 57.422524466666665,
      "dominance": 58.004535133333334,
      "text": "Depending on parallelism requirements. In DSP you don‘t want to do that. In DSP you even don‘t want to clone. You bump allocate memory in and unsafely use pointers to write to specific locations in memory and even the receiving end does not copy the memory, if possible. Ownership therefore might be global/shared and the way to prevent data corruption is careful pointer artihmetic (aka calculating slice position and size). The only way around this is using Atomics, but they are more expensive. Call me an idiot but I get extreme performance with this approach and with carefully taking memory alignment and memory bandwith congestion (calc the sensible defaults for L1 / L2 cache size, flatten your data, use vector intrinsics manually or unroll loops) into consideration. My code is readable still, but one has to understand how computers work at low level to get it. Anyway, the default speed for dot product with a baseline impl. of dot product on vectors with f32 and 1024 elements each is 1-2 GFLOPS and it’s single core when compiled to WebAssembly on an M3, 16 GB. I get 25 GFLOPS multicore in the browser and I‘m not even done with optimization. Would I use copy, my metrics would drop to 3 GFLOPS max. People often talk about the significance of overhead in multicore, but it‘s often multicore done wrong. If you rwlock/mutex sync with memory ownership, memory congestion is not cared for or heap copying happens with any parallelism, you certainly have a massive overhead and it bites away large parts of multicore potential. In „simple“ cases, where you do, let‘s say, some cheap glue code implementation (copying and transforming small objects of data, calling a few APIs and calling it a day), everything I wrote is unimportant. And to be honest, this is the case for the majority of projects. However, if you‘re working on algorithms that need to be fast to be useful, then everything you do should be aligned with the majority of target hardware. Copy and even intermitted/frequent malloc is the devil in those cases. So yes, use copy() as you like, but you will run into wall at high speed the moment you‘re trying to achieve peak performance (say you‘re building a VM, or audio or video DSP) - in those cases you‘d suddenly have to rewrite your whole codebase if it is not architected for performance from the very beginning. Excuse my English pls"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.88133066666666,
      "arousal": 63.000755999999996,
      "dominance": 59.07029466666666,
      "text": "I have a similar problem: just keep making changes until the lsp no longer flags anything.\n\nSo I'm pursuing this strategy to fix it:\n\n- code without an lsp, one function at a time (leetcode's editor doesn't have an lsp so you can do this there)\n- write all the code myself, good or bad\n- when it doesn't compile, give it to an LLM and ask it to explain why my first attempt didn't compile\n- get it working, and then\n- delete it and write the correct version from scratch\n\nIf I make any mistakes I delete all the code and start over. I don't let myself move on until I wrote the function correctly in one go. I don't even let myself get away with stuff like a missing semicolon, or using `and` instead of `&&`.\n\nIt's a bit brutal, but it's working."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I have tried rust several times before and always found mylsef fighting with compiler so much, never liked it because of it. When started writing smartcontracts few months ago - never had such issues again. I like it more and more now."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I too clone those sweet sweet Arc/Rc objects"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 63.45427066666667,
      "dominance": 66.74225233333334,
      "text": "Well, in many situations that is also a very good solution. Sure, people can go on about performance and so on, but by cloning or even copying, one avoids all problems with concurrency right from the start. Also it just sucks to not be able to use a variable later, because ownership has been passed to another function. Though one could argue, that Rust is made to enable one to do concurrency on shared memory safely."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "And you're making this in the right way. Telling this as a go dev."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Y'all people need to check out `std::mem`."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It makes sense, most of the programming languages pass by value (so, they make a copy) parameters to functions, unless passing references"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Lol. Is \"&\" forbidden to use?"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ".unrwap() on everything until it compiles here"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.23129266666666,
      "arousal": 60.430839,
      "dominance": 65.00377933333333,
      "text": "Gotta man up, bro. Obviously, in places where a clone of a light weight value avoids a bunch of data ownership issues and it's not going to be a performance concern, do it. It makes perfect sense.\n\nBut the real trick is learning how to avoid the need for either borrowing or cloning where it can be avoided. In a lot of cases, treating threads/tasks as independent entities that just communicate via queue, channel, socket, etc... is a perfectly reasonable approach that just avoids a lot of issues. As long as it avoids considerably more complications that it introduces, and again isn't an unmanageable performance burden, it's a good approach.\n\nSeparate mutable and immutable data, since the immutable data doesn't require any synchronization. \n\nIf it makes practical sense, use interior mutability and provide an immutable public interface, which also doesn't require the outside world to do any synchronization, so a simple Arc allows it to be shared and mutated.\n\nUse static immutable data where you can, which can be shared anywhere without limitations."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "wtf bro. rust is a language that  provides moves, ownership, borrowing to eliminate copying data at all."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's not just you. Best practices exist, and intense perfectionism might not be one of them."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ThePrimeagen Take?"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.91383200000001,
      "arousal": 60.367850777777775,
      "dominance": 57.16805244444444,
      "text": "The point is I think you’re wrong on usize. \n\nIn most every language, the int or usize in rust is the size of the data-word or architecture. So 64 bits in most current systems. Not the size of a register but the size required to address all locations in memory. Which is not 8 bits. \n\nAdditionally, (though less frequent today) if you wrote you application on 32 bits and it was great and someone ported it to a 64 bit system. All of your usize variables just doubled their memory consumption since it was not defined with a confined scope. \n\nAnd even rust wastes space by allocating a full byte, u8 I think, for each Boolean. \n\nSo if you allocate a usize for an index counter ( I know I would use an iterator too ) that only counted to 10 in a loop. You would waste 56bits on the stack.  \n\nTo young developers, they say so what. When you multiply that space by millions when you take an app from lab to scale. That’s when you overflow stacks or in my story’s case heap and swap. As he tried to process millions of records in memory without optimization of data types and yeah. His python app crashed a 512GB memory server because he couldn’t be bothered to ETL his data for optimal performance and resource utilization."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.88057450000001,
      "arousal": 53.57142883333333,
      "dominance": 65.13605416666667,
      "text": "I don't get why this is upvoted so much.\n\nYes, you can make \"Attack of The Clones\" in Rust. It's well known, see https://llogiq.github.io/2024/03/28/easy.html or https://blog.sdf.com/p/fast-development-in-rust-part-one and many advice here over the years.\n\nThat won't help you understand lifetimes or read docs or library code or whatever. It's OK if you don't need to. \n\nEverything depends on what you use Rust for and what are your goals, just like with any tool. Wanna things that just work for you? Sure, clone everything. Wanna write better code (esp.for libs) and improve reading and grasping Rust? Step up and take your time to learn."
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Listen, why is that a big deal? Clone pointer types all day! Clone arcs all day! Clone rcs all day! Make your own types which implement cheap cloning (no data copying). \n\nThere is no reason to dislike clone. You need to actually understand where cloning can go wrong, and then find alternatives when shit can go wrong. \n\nWhat are you gonna do, not clone a pointer to a shared resource? Not clone your database pool handle? Not clone your network client pointer?\n\nTriggered"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "OP forgot: TC 690K"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.23960699999999,
      "arousal": 50.982615333333335,
      "dominance": 62.58503400000001,
      "text": "I have a project with 10+ loc, webserver, async. \n\nI have several dozen `.clone()` calls and they are made intentionally when it is necessary to create a copy of the data (for example, when implementing trait `Add`).\n\nThis takes some skill. But over time it becomes completely natural and comfortable.\n\nAs an advantage, I get a very clear data flow. The need to use `.clone()` comes from the top, architectural level.\n\n(I didn't include tests and procedural macros)"
    },
    {
      "post_title": "I've been writing Rust for 5 years and I still just .clone() everything until it compiles",
      "created_utc": 1751401062.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.99622066666667,
      "arousal": 61.37566133333333,
      "dominance": 69.84127,
      "text": "Don't worry, it's far better than - as in other languages - passing references without any caution.\n\nDecades ago I've written a service thing in C++, and I've implemented my own container (see also: inventing the wheel), which had a template parameter (it would be a simple flag, whaterver): should the content `free()`\\-d by the container upon destroying the container, or not, leave thos task to the caller. I've created a working, but far not complete solution for the *ownership* problem. I was very happy when 1. Rust came up with a full solution 2. and I've also learned from Rust that this problem is not trivial, if you don't dig into it, you won't solve it, you can just create something workaround-y, as I did with my container."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Media] I built my first rust app"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 88.51096,
      "arousal": 70.18140566666666,
      "dominance": 75.547997,
      "text": "Hey everyone. I’m a web developer and I recently started learning rust to expand my skillset and knowledge of programming. I built this simple little calculator using Tauri. I used Rust/Tauri for the logic and SolidJS for the UI. I know it’s really simple but it was fun and a good learning experience. "
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "valve will hire you after this"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "why are there two 4s"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I know this is an educational project, but writing a calculator using a browser and Rust is hilarious :D"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think you fourgot to add a 3 button :D"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "You could make this into a game lol. The goal would be to use the calculator to produce a specific number, but each level has some missing buttons or numbers like the '3' or '+' on a different level"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.2585035,
      "arousal": 50.9070295,
      "dominance": 64.22902500000001,
      "text": "Color palette name?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Wow! Nice to hear you made an app using Tauri! The framework is really a masterpiece."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.3809525,
      "arousal": 50.2267575,
      "dominance": 71.3151925,
      "text": "Nice. Tauri makes Rust GUI so easy. Especially if you have html experience."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Pretty"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "u/MadThad762 source code?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Calculator dependency in 2024: web browser. \n\nJokes aside, keep shipping! Good start!"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "SolidJS is the goat of JS frameworks 😆"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.473167,
      "arousal": 58.42781566666667,
      "dominance": 65.79743,
      "text": "I love the rainbow super nice touch"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 65.8163265,
      "dominance": 61.961451499999995,
      "text": "That’s super legit! I may try something similar. Just recently started out by converting some python stuff to rust. This may be a good next step. Thanks for sharing"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Super cool. Source?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Share source code please, it looks awesome"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you working at Valve??????"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am learning too. Can you give me the github link ?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well you made a calculator. Something which apple couldn't achieve on their IPads in 15 years."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.42252466666666,
      "arousal": 56.72713533333333,
      "dominance": 63.45427066666667,
      "text": "Congrats! Though I really don’t think Tauri is a good idea for lightweight desktop apps. It’s a pity that native desktop GUI frameworks are vanishingly few these days."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.004535,
      "arousal": 56.462585,
      "dominance": 67.006803,
      "text": "Umm My guess is that the missing 3 is a social trigger. The button is so much visible in the viewport and come on it's not some unnoticed bug."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice! Thats a great first project to get yourself started! 😎"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "This is awesome good job"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice work! Welcome to the community!"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Looks nice"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, that's a really clean and polished UI"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cleannnn"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a calculator... it's basically all UI. Why didn't you do it entirely in Rust? That would have been far more educational. So you just call out to Rust to do 2+2? Weird."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 55.102041,
      "dominance": 60.090703,
      "text": "Lack of 3 can obviously be blamed on art."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> [...] rust app\n\n*Looks at Source code* - 78% Typescript uhmmmm...."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How? dividing by zero is considered `unsafe`"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Source code please"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Memory safety can’t help with that one but everyone starts with more bugs than functions"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice!!!"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "You've done more than what 96% of what Node.js Developers who say they want to learn Rust will every accomplish.\n\nYou are the 4%"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.3809525,
      "arousal": 60.7142855,
      "dominance": 65.759637,
      "text": "Want to share the code? What lessons did you learn? What did you like? What did you struggle with? Looking guard to more rust in the world"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "What ui library is that? Was thinking of learning rust over C++ but would like a good ui library"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Lmaooo Better than building an Os"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 69.954649,
      "dominance": 71.315193,
      "text": "That's beautiful"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Hi! What resources did you use to learn Rust?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Could you share your GitHub"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.13000766666666,
      "arousal": 62.77399866666667,
      "dominance": 71.05064266666666,
      "text": "Love the color palette, hope this will be your detox"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Consider trying out Leptos after your experience with Solid JS. Afaik, it's basically Solid JS but in Rust. You'd still use Tauri, it's just that the UI code would be WASM instead of JS."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "nice!"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ui in rust scares me :((("
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That’s super cool"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "geh bg and a 3 that identifies as a 4 ..."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cool!\n\nCan you suggest some learning resources for Tauri ?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.827664,
      "arousal": 35.600907,
      "dominance": 67.23356,
      "text": "Thats some secure ass calculator"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You are hired"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A great example of what happens when you skip writing tests "
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "Gabe Newell moment"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What exactly is it used for?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice but lower the LGBT"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice but it's actually JavaScript. As I told rust is not yet a complete language"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.591837,
      "arousal": 53.628118,
      "dominance": 69.954649,
      "text": "i think we have the same background, is it the dsotm cover with gruvbox color pallette?"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "FOR THE SAKE OF OPEN SOURCE GIVE THE CODE !!!!"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "can anyone suggest me course/ yt playlist to learn rust in depth? without downvoting me..."
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The background really solidifies that its Rust"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53288,
      "arousal": 46.485261,
      "dominance": 60.884354,
      "text": "https://m.youtube.com/watch?v=Fl2xvIc3MLk"
    },
    {
      "post_title": "[Media] I built my first rust app",
      "created_utc": 1709980287.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What UI frameworks did you use?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is \"Written in Rust\" actually a feature?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 63.038548500000005,
      "arousal": 47.2789115,
      "dominance": 56.00907050000001,
      "text": "I’ve been seeing more and more projects proudly lead with “Written in Rust”—like it’s on the same level as “offline support” or “GPU acceleration”.\n\nI’ve never written a single line of Rust. Not against it, just haven’t had the excuse yet. But from the outside looking in, I can’t tell if:\n\nIt’s genuinely a user-facing benefit (better stability, less RAM use, safer code, etc.)\n\nIt’s mostly a developer brag (like \"look how modern and safe we are\")\n\nOr it’s just the 2025 version of “now with blockchain” "
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.48677266666668,
      "arousal": 52.07860933333334,
      "dominance": 65.94860133333333,
      "text": "The Fish shell [completed a rewrite from C++ to Rust](https://fishshell.com/blog/rustport/), and the primary reason they cite is community involvement. They wanted to continue to attract new developers, and a lot of newer generation devs like working in Rust (as did many on the existing Fish team). I always see \"written in Rust\" on open source projects as a hopeful invitation to contributors who are usually more enthusiastic about Rust projects. In fact, I can't think of a closed-source software product advertising that."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I feel like it's often directed to the Rust community itself, because I find that Rust developers like to use stuff written in Rust. Whether that be to simply support the language or to potentially contribute one day."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.99773233333334,
      "arousal": 65.91080866666667,
      "dominance": 61.30007533333333,
      "text": "Keep in mind that open source projects are not just advertising themselves to users but also contributors. As a contributor, \"written in rust\" can absolutely be a desirable feature. It's the same reason you see some projects advertise themselves as \"written in 100% ANSI C\". It's suggesting that the code base isn't going to be a huge pain in the ass to work with if you need to patch something. I get that most users aren't developers, but usually the maintainers are both users and developers, and they're the most important people to appeal to."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's 5%: \"This App is more stable\" and 95% \"Hey I like working with Rust, and would like to promote it\""
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.456916,
      "arousal": 58.64512475000001,
      "dominance": 61.621315,
      "text": "As someone who writes software, seeing its written in rust signals that the software is going to be fast and low memory. \n\nFor the average user its meaningless. \n\nAs to your comparison, offline support is the same. Completely irrelevant to the average user but definitely a plus point to people who understand it means no code path is hitting the network to slow you down. \n\nBlockchain was, at best, a completely different paradigm that lacked a compelling reason for average people to put in the required work to use its properties."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.80045333333334,
      "arousal": 50.415721999999995,
      "dominance": 65.419501,
      "text": "To me it’s an indication that at least in one respect, the developer likes and values the same things I do. That does make me more likely to have a look. \n\nIf it’s in a role that is security, reliability or performance critical, I think Rust itself also really adds something, but if it’s just some cool CLI tool for local use, that is not really part of the equation for me. Then it just reverts to the preferences and values."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It means I can install it with Cargo on Windows without any issues :D"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.2517005,
      "arousal": 64.1723355,
      "dominance": 53.174603000000005,
      "text": "People will say that “this is mostly dependent on the developer.” Sure, but if you’re writing idiomatic Rust, you ARE that developer. Who the hell writes an app in an all-encompassing unsafe block?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "I like app that is written in Rust, because it usually implies that the app is probably well maintain and of high quality. Higher level of entry leads to higher average or something like that."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "> Or it’s just the 2025 version of “now with blockchain”\n\nPeople have been asking about this since 2015. And before that it was \"Written in Go.\" And before that it was \"Written in Node.js.\" And before that it was \"Written in Ruby.\"\n\nSome people do care what language their software is written in, for whatever reason. For example, maybe you want to be able to fix bugs in the software someday.\n\nYou don't have to care if you don't want to."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "For me it is the warranty that I will be able to compile it myself without trying to setup a complex tool chain if it was C or C++"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 39.266818,
      "arousal": 59.03250166666667,
      "dominance": 48.904006,
      "text": "For libraries it makes sense to advertise the language it's for (for obvious reasons, I think).\n\nFor end applications, I can see Rust being a feature in security-sensitive contexts (assuming minimal/no unsafe code), as it effectively rules out an entire class of critically exploitable bugs.\n\nFor end applications without security implications, it could be any of:\n\n1. It's very likely not as much of a pain in the ass to build as a C or C++ project.\n2. It's not as slow and bloated as an electron app.\n3. It's less likely to need containerization infrastructure to actually get up and running in a reasonable way.\n4. Partly due to points 1 and 3, it's a nicer invitation to contribute.\n5. Pointless hype.\n\nNotably, all of these numbered points also apply to Go.  I tend to view apps written in either Go or Rust favorably for those reasons (point 5 excluded).  I'm also starting to feel that way about Zig apps, although I'll feel moreso once they hit 1.0."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.409863875,
      "arousal": 55.41383225,
      "dominance": 58.61678,
      "text": "One of its big advantages is the things Rust enforces at compile time.\n\n\nNamely the memory safety (one of the biggest sources of vulnerability today) and things around it, error handling, thread safety, data races, and such. \n\n\nAll of it can be bypassed, but Rust is stricter by default. So, unless someone goes out of their way to break it or are just really sloppy, there is a higher stability to Rust code out of the door. \n\n\nIt's not a best for everything tool, but Google had good results with increased efficiency most of the time:\n\nEdit: replaced article due to 404.\n\n\nhttps://www.theregister.com/2024/03/31/rust_google_c/\n\n\nThe new article also cites the memory vulnerability claim :\nhttps://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.5532876,
      "arousal": 60.9070294,
      "dominance": 60.74829939999999,
      "text": "If it's written in C, that means i don't need to worry about runtime versions like i would for Java, Python, or C#. Plus going to run faster, take less disk space, and be more memory efficient\n\nFor most practical purposes, it's equivalent to Go or C. Caddy is great, but it's annoying to rebuild it to add plugins, which is because of Go not having dynamic linking (and that's a feature in my mind still because of Go's design goals!). Not a big deal really \n\nAnd honestly, it's really hard to justify writing anything in C over Rust \n\nBasically I feel like you need to explain why you aren't writing in Rust"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yes, yes and yes."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.38851083333334,
      "arousal": 55.555555500000004,
      "dominance": 70.18140566666666,
      "text": "As with everything software related you have two sides:  \n\\- Business  \n\\- Tech\n\nBusiness sees it as a buzzword: \"I heard it's fast!\" \"I heard it's safe!\" \"I heard it has less downtime!\" and let's be honest, a lot of the buzz around it is true.\n\nTech sees it as something else:  \n\\- People like me work on this, people who like programming for programming  \n\\- It's modern, not antiquated   \n\\- It has hopefully learned from previous tech mistakes of other languages  \n\\- It is actively maintained   \n\\- It is easy to setup   \n\\- It is fast enough and safe enough  \n\\- It has an active, welcoming community\n\n... etc ...\n\nIn the end? It's marketing - always has been."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I strongly prefer software written in rust"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not a feature at all, honestly.\n\n\nFrom a user-facing perspective all it means is \"I can probably just Cargo install it to compile and get it working if there's no installer.\"\n\n\nFor anyone else I think the creators are mainly mentioning it for potential contributors."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.8956916,
      "arousal": 59.047619,
      "dominance": 63.9455784,
      "text": "Rust is almost always gonna be be smaller, faster and more parallelized than languages like Python, and more memory safe than anything written in C++ or C. That's two straight up features. I personally also find that applications and libraries written in rust are far more bug free and have nicer APIs. I think that this has to do with the selection bias. Not everyone who is skilled writes rust, but those who writes rust tend to be more skilled. It's also a lot more of a modern ecosystem written with modern developer best practices. I don't buy the \"Its bragging\" narrative.\n\nRust isn't necessary nor sufficient for good products, but it sure seems correlated."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "Having entire classes of common bugs be, for the most part, impossible to create is definitely a feature."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.08163250000001,
      "arousal": 64.39909300000001,
      "dominance": 63.775510000000004,
      "text": "1. App is more stable\n2. Devs can probably turn out better support / more features more quickly\n3. Lots of people like contributing to Rust projects\n4. Isn't prone to critical memory safety issues some other languages are"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.789116,
      "arousal": 56.689342,
      "dominance": 62.018141,
      "text": "Saying a program is written in Rust tells you exactly where the bar of minimum rigor lies.\n\nShould you ever decide to write in Rust, then you will notice that a tremendous amount of care has gone into the design of the language to optimize for user-facing confidence.\n\nThe language and tooling enforce rigor by steering the programmer clear of known weak patterns and pitfalls where it can."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "having worked across a few languages. Rust, Go or CPP mostly means you can just get a binary for most things. Apart from speed, lower resource util it just means its a simple install without having to manage pip, or npm nightmares. \n\nAlso having worked in rust, the typical rust crate is significantly better architected and written than in other languages so anything built on top just carries this."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.88057450000001,
      "arousal": 54.97921399999999,
      "dominance": 64.45578216666667,
      "text": "I'm a big believer in the relationship between the \"quality\" of a language and the \"quality\" of applications that are built with it. (quality in quotes to indicate that there are obviously multiple dimensions to what is good software and many complexities I am skipping over.)\n\nI first became interested in Rust after using ripgrep, which blew my socks off as someone who had only ever used grep, without thinking about it much.\n\nAnd `rg` is far from alone, there are a slew of CLI applications built in rust that are faster, more featureful, and more intuitive to use than alternatives.\n\nWhen I see \"written in rust\" I'm expecting several things right off the bat:\n\n- it's fast\n- probably multi-threaded where needed, as this is relatively easy to do safely in rust (e.g. add rayon and switch `.iter()` to `.par_iter()`)\n- if a CLI application, it will have a nice `--help` menu\n- the code will generally have a higher quality than if I came across the same kind of thing in say, the python ecosystem (just true on average in my experience, obviously not in every case)\n- will be easy to build from source (I have spent multiple hours failing to build C++ projects on several occasions)\n\nso, yeah, those are pretty important things to me."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.45804966666667,
      "arousal": 49.659863666666666,
      "dominance": 63.22751333333334,
      "text": "I feel like being written in a memory safe, type safe language is legitimately a feature, you can expect less crashing, less performance issues, less bugginess on average than if it was written in a language without these features."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.38321975,
      "arousal": 58.163265249999995,
      "dominance": 61.791383249999996,
      "text": "To me it means:\n\n- There is a higher chance that I will be able to easily build it when I want to make modifications. Open source C++ software for example often requires a very specific build environment, so it's open source only in the literal sense. Still not as easy as for example Go though.\n\n- Because of the learning curve high code quality is somewhat more likely.\n\n\n- I can expect certain behaviors, like the way that command line parameters are parsed or the way it handles networking. For example Node.js-based software often has problems resolving IPv6 addresses and older Python software often has issues with string encoding.\n\n\n- And of course when it's written in Rust then it's not written in Haskell or Erlang or any other language that I don't speak."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's not, the end user doesn't care the language the app is written."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.777778,
      "arousal": 56.17913849999999,
      "dominance": 68.31065749999999,
      "text": "Many of the programs that advertise \"written in rust\" are actually coding or infrastructure programs ( editor, IDE, terminal emulators). So, their target audience know about Rust and associate good software quality to the fact that Rust is chosen as development language. It is like they say : \"we care about robustness, performance, low footprint, maintainability\".  \n\nI agree that using Rust does not mean that the software will automatically have these qualities, but hey, this is Advertisement."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nowadays if it’s not rust it’s probably written in Node or Java and those are usually slower and use more resources."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Small binary.  Multithreaded ez mode. If you divided up your crates like a stamp collector, fast compile times."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.7120184,
      "arousal": 58.321995400000006,
      "dominance": 61.76870759999999,
      "text": "In my experience, compared to a random non-rust project, it means it has a slightly better chance of being free of segfaults, being fast, and being available cross-platform.\n\nNeither necessary nor sufficient for any of that.\n\nIt virtually guarantees that the project was written in the last decade.\n\nFor me, it means that I know ahead of time that I might be able to contribute to or maintain the project if it goes under. It saves me a few clicks to figure out what language a project is written in, and I wish more languages would follow suit. I tend to avoid investing in new / unestablished projects written in languages that I am unwilling to learn."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.4195012,
      "arousal": 54.68253969999999,
      "dominance": 60.44217690000001,
      "text": "Copying my answer from [last time this was asked](https://www.reddit.com/r/rust/comments/1di33ye/comment/l910u58/)\n\nMy general impression has been 2 things:\n\n- Because Rust compiles to native assembly and doesn't use tracing garbage collection, it *on average* tends to produce higher performance code for a given problem, especially when that problem isn't bound by network i/o. Slower rust code also seems to have more low-hanging-fruit potential for easy speedups; there are countless stories of a 2x speed improvement because of an easy removal of allocations in a hot loop.\n- Because of Rust's nature as a language, it tends to attact developers who are much more obsessed with robust and correct code, relative to what we might call the median. Often this obsession comes at the cost of perfectionism or \"unreasonable time-to-ship\", but when combined with Rust's policy of \"ship a whole static binary that only dynamically links to libc\", it means that ON AVERAGE you tend to find that a particular random rust project is more likely to have fewer bugs and continue working correctly with minimal maintenence than an equivelent in a random other language (no fighting with virtual environments 2 years later, for example).\n\nIt's worth noting that both of these impressions are entirely anecdotal, and I have no data to backup my impressions of either rust software or rust developers. But since your question was about Rust's  reputation, these are my impressions of why the reputation arises."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.855631,
      "arousal": 59.90173833333333,
      "dominance": 57.87351966666667,
      "text": "It's definitely not the 2025 version of \"now with blockchain\" because \"written in rust\" does have some benefits.\n\nIn a world where so many things are Electron apps, I think it's definitely a benefit to have an app that isn't going to be 200MB and grab tons of RAM just for a hello-world.\n\nI think there's lots of things that offer a better user experience if they aren't garbage collected. GC pauses can be really annoying when you're using an app. GCs have gotten quite good, but they still aren't ideal.\n\nThere's a huge class of bugs and security vulnerabilities that exist in many languages that don't exist in Rust. This can be very important for some apps (and arguably all apps).\n\nRust is fast. All things being equal, a Rust app is likely to be faster than most languages like Go, C#, Java, or JS. It might not beat C/C++, but it will often match it while being substantially safer.\n\n----------\n\nIf an app is written in C/C++, it might have subtle bugs, memory leaks, and security vulnerabilities from using an unsafe language.\n\nIf an app is written in C#, Java, or JS, it's going to be larger, grab more RAM, and memory will be garbage collected. Go doesn't grab as much RAM, but it still grabs more and it still faces GC tradeoffs.\n\nYes, it is genuinely a user-facing benefit. It might not matter for some apps. You might not care that your Electron-using chat app is gobbling up memory, taking 500MB of disk space, and sometimes becoming momentarily unresponsive as the GC kicks in. However, those are all worse experiences."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.24943316666666,
      "arousal": 52.26757383333333,
      "dominance": 60.54421766666667,
      "text": "Also I'd argue that \"made with rust\" has some beneficial advantages for users as well:\n\n* Better CLI. Most of Rust cli applicaitions use clap for command line argument parsing, which is significantly more user friendly compared to anything from C/C++ land. I've only seen some applications written in Go that tended to have similar polish.\n\n* More modern/less abandoned. Since Rust is relatively new language, applications written in Rust tend to be more modern: the authors have decades of experience to draw upon (see [zellij](https://zellij.dev/tutorials/basic-functionality/) for example; the closest alternative in C/C++ land is tmux). \n\n* Furthermore, because adding new crates to projects is so easy, you can relatively easily add new functionality to your projects. As a result, applications written in Rust might be more featureful.\n\n* Rust TUI applications tend to look plain better compared to alternatives, most likely thanks to availability of high quality TUI crates (see [dua](https://github.com/Byron/dua-cli) or [yazi](https://github.com/sxyazi/yazi)).\n\n* Rust applications are easier to install. `cargo install` is typically all you need. Most of the time you don't need to play with `apt install` to find the right dependencies for project to compile. Once installed, the application is most likely a single binary that lives in `~/.cargo/bin` that has no external dependencies. Thus if you upgrade your OS you don't have to worry about dependencies getting broken as everything in Rust is mostly statically linked.\n\n* Great performance."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.72008066666666,
      "arousal": 61.17409922222222,
      "dominance": 61.36306388888889,
      "text": "I just decided to put time and effort into learning rust because of a few things.  I am not claiming any of this is accurate.  Microsoft pulled python support, therefore I don't think it'll have the same effort going forward into speed.  Companies are beginning to use rust in the pipeline to accelerate AI rather than python, etc.  LLMs can help with syntax errors in seconds so I don't see a reason to use a slower language.  I am not getting into a conversation of how the code is, etc because thats an entire episode which can go either way.  It is pretty secure in comparison and near C speed... so I decided to port some of my stuff that I have experience with to it first, and continue to learn from there.. just my reasoning behind the choice..  I see it as a good investment for future regarding newer technologies (AI/LLM), and any company that wants to assume higher security standards with new projects. Oh yeah, and there are crates for everything!  Python packages for everything was an initial reason I had decided to learn that as well."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.340136,
      "arousal": 58.390022599999995,
      "dominance": 65.6462584,
      "text": "It's mostly #3, to be honest, although I wouldn't say \"2025\", more like 2020-2024.  That's how you got noticed on HN.  Now it's on to *agentic coding*.\n\nI've been a systems coder for 20 years.  The memory safety benefits of Rust are good but taken way out of proportion by non-coders or less experienced engineers.\n\nThe world runs on old, boring languages.  Most of them have survived because they are the most useful in the dimensions that matter to businesses."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "At least for CLI apps, there's a trend of the rust rewrite having a \"much saner\" defaults & syntaxes which leads to better user experience. There's nothing specific to rust about this of course, it's ultimately just the benefits of being able to start from a clean slate and a good package management system that makes reusing code not hellish."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.89918038461539,
      "arousal": 59.90755269230769,
      "dominance": 59.253445000000006,
      "text": "My company is small, and the programming team is just me and two other people. After decades of C++, we switched to Rust. It was supposed to be a small program with a specific use case, but over the past two years, it has worked so well, the program has ended up being the foundation for most of the products we make. We've stopped C++ development and are just transitioning features to the rust program.\n\nI was skeptic at first, and I certainly voiced some frustrated complaints on Reddit and other forums. I am firmly against the constant creation of new language just because some programmer got frustrated with an esoteric feature of a mature language or because some vendor (Microsoft or Apple) wants to lock in developers. I think your post is asking the right questions.\n\nThinking only from the perspective of the end-user, what I've learned from five years doing Rust development is:\n1. Rust actually solves problems that few other languages are solving. Most of our programs are asynchronous or multi-threaded, and Rust has eliminated most of the bugs we see in the field. Better stability, less RAM use, safer code; we see all this.\n2. We roll out more features into a program at a better pace because we're not burning half of our time chasing support issues.\n3. While it's possible that someday C or C++ could start integrating the \"safety\" features of Rust... they won't. They just won't. And while I'm generally opposed to junking existing codebases, I don't think anyone should be deluding themselves that C/C++ will ever improve the language to the safety level of Rust.\n4. We see far better performance with Rust than with C# (which I kicked out of the building a few years ago), and -- speaking only anecdotally -- I believe the Rust versions of our software are out-performing the C++ versions. \n5. OPINION ALERT: I think the way that Rust is governed and freely available is a benefit not just to programmers but also to users because the language is going to be focused on features and stability, not business decisions. \n\nI have a lot of reasons that developers should start transitioning to Rust, and I highly recommend companies hiring young, inexperienced talent just out of college to strongly consider migrating to Rust. We did a trial run of this over the summer. Having to train a new hire on CMake, cross-platform, cross-compilation issues (things they don't teach in college)... the training time is impractical. With Rust and Cargo, a project went scratch to published in three weeks. It was a small utility program, but the programmer had never used Rust before and getting him up and running was a fast and smooth experience."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.2774,
      "arousal": 54.87528366666667,
      "dominance": 62.69841266666666,
      "text": "It's for the people who think that just because something is written in Rust it's bug free, obviously false."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 47.845805,
      "dominance": 58.61678,
      "text": "Whenever I’ve seen “Written in Rust” it’s usually in the context of, it’s faster than the competition"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "It's cool but I seriously don't think it's a feature. I've used shitty programs written in Rust, and good programs written in C. It's cool to mention it but I get really annoyed when it takes priority over the actual features. If I see one more \"blazingly fast XYZ written in Rust\" I will cry"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.73858085714286,
      "arousal": 54.940071428571436,
      "dominance": 60.139293714285714,
      "text": "It is indeed a marketing thing, but there are reasons people do it. The first is that a lot of tools are written with slower languages like Python and TypeScript, which makes for a bit of lag when starting up the tool, or longer overall runtime if it's computationally heavy (like type checkers, linters, etc), but I can reasonably expect this tool to be fast since it's a compiled tool. You can still make it slow, but it's less likely. My rust-written tools usually feel 'instant' in a way that my interpreted language tools don't.\n\nThe second thing is that I can expect a large portion (up to all of it) to be verified correct in a way that's not likely to result in a memory corruption bug, which are some of the biggest security issues. There's limits to this, such as any unsafe code/calls to C libs that may have issues, but I'd expect that to be quite the minority case.\n\nThe third is that I'm more likely to be able to contribute to it since Rust is something I know, and even if I didn't, it's easier to use than something like C, which is simple in spec but requires a great deal of savvy to avoid its pitfalls."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.85116463636363,
      "arousal": 53.669346545454545,
      "dominance": 63.553906454545455,
      "text": "It's not more stable or safer. It just makes it more likely that the code is of higher quality **if you don't trust the developer**. I certainly wouldn't consider any random rust code to be better than John Carmack's C++ or the Linux kernel's C. But if I have absolutely nothing to go on, it would put my money on the rust code being of higher quality.\n\nI'm sure you've heard it already. Rust compiler is extremely nitpicky relative to other languages, there are rules it applies to your code by default. Sidestepping these rules require explicit declaration, it can easily be detected. It doesn't make rust code better than a comparatively competently developed project in another language, but there is a minimum standard that is hard to go under.\n\nRust code is less likely to have memory safety issues, but otherwise it can have bugs just like any other language. The \"minimum standard\" I mentioned is general across the board, you can't point to a single aspect of rust to be better, or even to any single rust project. It's just generally better.\n\nI personally don't think there's much to brag about though. I still think C devs who manage to work with C in a safe and controlled manner are absolutely incredible. Rust has a steeper learning curve, but it tapers off and becomes gentler while C becomes increasingly arcane.\n\nI'm personally a \"GPLv3 in my free time\" programmer so I'm not too sure. But with so many blockchain web3 stuff in rust, I suppose there's a bit of it."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.60657625,
      "arousal": 55.24376425,
      "dominance": 58.98526075,
      "text": "Wasnt there a period of time where Written in Rust was some kind of absurd license requirement? Like pretty recent?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "No, it's not a feature. It can imply certain things about the software, but it's not going to change the capabilities of that software. You might still want to know what language something is written in, particularly if it's a library or usable as a library since that will determine how easy it is to interface with it."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.1133786,
      "arousal": 63.446712000000005,
      "dominance": 55.328798199999994,
      "text": "Beyond what other people are saying, as a primarily C++ developer, yes, Written in Rust itself can be a feature, it's mostly to say \"This is not a wrapper around a C++/C thing, that's going to complicate the build process\", when something is entirely within Rust, it makes using it *very* simple.  When something *isn't* entirely in rust, it can be a pain to manage the C++/C side of things to properly get it to build, often requiring system dependencies that may be hard to nearly impossible to get.  If I see a large rust project that doesn't have any/many external non rust dependencies, I build it just the same as any other rust project.  If I see a large *C++* project, it invariably needs to have some weird thing/strange dependencies that make actually building it a giant pain."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "For me it is because all rust codebases follow a consistent format. It is easier to read.\n\nThere are following aspects as well: \n1. Don't have to worry about data races and segfaults in safe rust\n2. One package manager => one way of creating a project\n3. No unpredictable behaviour due to gc => deterministic behaviour"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.5578232,
      "arousal": 58.2766442,
      "dominance": 60.1133786,
      "text": "It can be a feature if you want to read and / or contribute to the code.\n\nOtherwise, it's a somewhat positive proxy for other potential features like \n\n- speed\n- quality / lack of bugs\n- memory efficiency\n- thoughtful api\n- portability\n\nThese are actual features and have to be measured on their own but if you don't want to take the time to measure them directly you might see \"written in rust\" and have a bit more hope that the product has these features."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.8435375,
      "arousal": 64.68254,
      "dominance": 76.41723350000001,
      "text": "If it requires speed and safety, sure. \n\nFor example: turbo pack ( compiler ) which I imagine has to do a lot of work turning react or Vue into usable JS. Might be a good case for rust."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.37037033333333,
      "arousal": 60.80876799999999,
      "dominance": 67.76266066666666,
      "text": "The language used by a project does make a real difference on the user experience. Sure it's possible to write bad and good code in any language, but avoiding entire classes of well known bugs is easy in Rust because the compiler spot them for you while in other languages such as Python, you have to be extra careful, very disciplined and know what you're doing.\n\nOn average, a project written in Rust has less bugs."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.396501428571426,
      "arousal": 65.27372857142856,
      "dominance": 49.98380314285714,
      "text": "My stuff written in rust tends to be bulletproof and I am far less likely to f*ck with it in the future. \n\nThis boils down to rust reducing tech debt accumulation. People talk about tech debt, but few understand that suppressing it is the primary goal of anyone building a product. Either you win, or the tech debt wins.\n\nI describe tech debt as the root cause of the first 90% of a project taking 6 months, and the remaining 10% taking 12."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.20537728571429,
      "arousal": 54.14642042857143,
      "dominance": 61.143504857142865,
      "text": "It's as user-centric as GPU-accelerated. End-users don't really care, and many might not even understand the difference, so claiming that something was made using Rust or is GPU-accelerated is irrelevant in that context, meaning you either attribute value to both or you don't attribute value to either.\n\nAs a developer, knowing that something is made in Rust is a selling point for me, because that alone tells me that there's a significantly higher chance of it being safe compared to any other option while retaining a performance comparable to the same implementation in C or C++, and might actually be designed properly both because the compiler enforces some stuff and because the kind of people Rust tends to attract are generally more concerned with correctness from my admittedly limited empirical observation."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.13605425,
      "arousal": 68.537415,
      "dominance": 60.85600925,
      "text": "I think it's a feature.\n\nI use a ton of different command-line tools and I like to keep them all updated, I never have to worry about how feasible that is for an app written in Rust, they have one of a couple of ways of installing them and then updating them.\n\nWith tools written in C you're often told to clone the repo and run Make, with Python it varies a lot but often there's no good way to do it. Even popular apps like copyparty is distributed as a single python file, not a great experience compared to cargo install or brew install."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.28717185714287,
      "arousal": 59.85989632142857,
      "dominance": 64.56511164285715,
      "text": "Directly? No, being written in Rust is _not_ a feature. Oftentimes, people add that to their readme page because they're passionate about Rust, or they're learning it right now, or they _do_ think it is a feature somehow, which is incorrect.\n\nAs an end-user of an application, I don't give a damn what language it is written in, _if_ the application is stable, reliable, functional, has good performance and efficiency, and has the features I want.\n\nHowever, that's not the end of the story, because there _is_ a kernel of truth to this idea -- the language you use to write a program _does_ often have some effects on the program itself and the user experience. Not always, but sometimes.\n\nFor example, if a command-line tool is written in Go, I can expect that tool to be available as a precompiled standalone binary. Which _is_ a nice feature. The reason why I expect that is because its so easy to do that with Go. It is **not** easy to do that if your application is written in, say, JavaScript. Rust also has a similar role in this same feature; while not as easy as Go, its still pretty easy to compile most programs to a standalone binary if its written in pure Rust. So if \"comes as a standalone binary\" is a feature I desire, then the odds of that feature being offered, even if not mentioned, goes up considerably if it is written in Go or Rust.\n\nAnother feature is performance and efficiency. If I am looking for a program and I'd rather it didn't use a ton of memory, then the odds of that go down considerably if I see your application is written in Java. Not because Java _inherently_ requires a lot of memory, but because the way the standard library is designed and most popular Java libraries are implemented, it basically _encourages_ applications to be memory-hungry.\n\nAnother example is applications using the Electron framework, which is somewhat notorious for being memory hungry. _Can_ you write a relatively memory-efficient Electron app? Yes! But it is pretty hard to do, and if you just write the UI like any ordinary heavy modern frontend JavaScript app (like most people) then no, it will be memory hungry. So if I see an app written using Electron, I might avoid it even if \"uses a lot of memory\" isn't written on the readme.\n\nBut if your application is written in Rust, it is probably very low on memory usage. Not guaranteed to be so, but the odds are significantly greater. Once again, \"low memory usage\" may not be written on the readme, but if it is written in Rust, it is likely that this is true."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If it’s open source, yes. Working with and contributing to a Rust codebase is a million times easier than e.g. a C++ codebase, all else being equal, due almost entirely to cargo."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It better be a feature or I might be out of a job."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.79365066666667,
      "arousal": 60.27966733333333,
      "dominance": 53.325775,
      "text": "Lmao, just check zero copy and rkyv, then run benchmarks :) vibe coded redis replacement is 30% faster then redis on arm cpu, nats.io replacement is 11-22x faster etc, and if you rewrite python then it's like 80x times faster, serviio dlna server ram usage 360mb+, my rewrite in rust is 3.5mb :p no java dependency, single binary. If combination of LLMs can rewrite everything we have now, why we need things like python or go?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I write as much code as I can in rust and that \"written in rust\" crap annoys me to no end."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.9047618,
      "arousal": 51.020408200000006,
      "dominance": 61.269841199999995,
      "text": "As many things that other people have said, the best way I've heard it put is:\n\n\"In a vacuum, ceteris paribus, a rust program vs a c++ program, the rust program will likely be more performant and safe.\"\n\nSo, to an engineer it would be a green flag for the most part, but it doesn't entirely mean that the program *will* be better, by safety and performance metrics."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Being faster and having less security bugs on average are features."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.93877549999999,
      "arousal": 59.807256499999994,
      "dominance": 68.027211,
      "text": "being someone who writes rust im biased ofc but atleast to me it implies that the developer gives a shit. of course its not a perfect correlation ive seen plenty of terribly done rust apps as i have good ones, and ive seen plenty of really well done non-rust projects but generally if someone cares enough to want to use a language that many find hard to use it somewhat indicates they care about what they do"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 67.120181,
      "dominance": 70.068027,
      "text": "I consider it to be the equivalent of buying “organic” food. A lot of it is marketing and was a much bigger factor when I feel like Rust was really riding the hype train."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.28571433333333,
      "arousal": 64.51247166666667,
      "dominance": 57.33182166666666,
      "text": "It is a feature. What benefits it brings exactly, as usually, depends on what would be the alternative, among other factors.\n\nRust vs Interpreted languages: interpreted languages require interpreter and that comes with numerous issues with dependency management, distribution, version compatibility and others. \"Download this binary for your os and it will work\" is a benefit.  As a bonus you will get performance and less bugs.\n\nRust vs other natively compiled languages: Rust promotes correctness over convenience, and that is a certain guarantee of being error-free.  Rust libraries and applications are created and mature faster and with a lot less pain than C/C++ (which is also fading into obscurity today). With some more modern alternatives the difference might be smaller, but it is still there.\n\nRust vs Java/.Net: app run faster, use less resources and don't throw null pointer exceptions. Also don't require you to believe that next iteration of gc tweaks voodoo can solve all memory management problems."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.975056800000004,
      "arousal": 58.0498868,
      "dominance": 57.43764180000001,
      "text": ">“GPU acceleration\n\n\nIt is the same. As a user, I shouldn't really care if a program uses GPU or CPU to get results for me. The user-facing feature would be \"it computes very fast\" and using of GPU is an implementation detail. Same as if MISRA were used or not in coding of automatic acceleration system, the real feature is safety.\n\n\nHowever, proficient users can deduce properties of program from overview of implementation details. I can assume that MISRA-certified code wouldn't kill me due to some stupidity, that GPU-driven program would run faster, that Rust written program would be faster and wouldn't crash.\n\n\nIt is similar heuristic to the \"made in Germany\", \"made in China\" and \"made in China (but actually India)\" used for quality estimation of physical goods. It may be inaccurate in some cases but allows to spend less time testing and thinking, which is good."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I always prefer to use stuff written in a language I'm proficient in. This way it's easier for me to check the source code if I need to."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's feels like it's beginning to compete with \"by the way I use arch\", \"I'm a cross-fitter\" and  \"I'm vegan®\""
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a feature if you know rust and want to read/contribute to the project!"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Same experience as you, and I've landed on that it actually might be a \"feature\". A lot of tools I've used that are written in rust have amazing DX, and I think it's because they have great packages (or crates I guess it's called) for creating CLIs. Rust also pushes good standards imo, and a way of thinking that forces you to program in a more consistent and structured way. That reflects through the interfaces to tools written in Rust.\n\nPerformance is also often shockingly fast after rewrites, or compared to alternatives in other languages."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "I moved from Python pandas to Polars.  Written in rust was very much a feature for me."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It is for me"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.29251699999999,
      "arousal": 64.13454300000001,
      "dominance": 70.408163,
      "text": "I mean if something's \"claim to fame\" or the differentiating feature near the top of their readme is \"Written in Rust\" it normally means it's just shitty software.\n\nPeople care about what software can do for them so if the only redeeming quality of yours is being written in Rust it's just bad software."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 55.102041,
      "dominance": 60.090703,
      "text": "I think it is. It usually means your product is blazing fast built out of an state-of-the-art language."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://youtu.be/gMIwT-IBgJQ?si=Mb8Z308IxQwiL7Ew it’s really not"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.809524,
      "arousal": 61.11111125,
      "dominance": 65.589569,
      "text": "Yes! It’s a badge showing likely there will be inherent security and less bugs and so less support and zero garbage collection gives better assurances of a deterministic runtime and resource footprint\n\nRust is great actually when you look at what come for free as more people start to work it out it’s a good badge actually "
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.248677,
      "arousal": 49.281935,
      "dominance": 63.038548666666664,
      "text": "Rust enforces memory safety which means more secure software. Its strict rules encourage higher quality code with fewer bugs and better performance\n\nSo no it's not a blockchain type of buzzword, it's legit"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "job security?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.97392275,
      "arousal": 67.03514725,
      "dominance": 61.5362815,
      "text": "I think it's both of those things, depending on the audience.\n\nRust developers would understand the benefits. But others might misunderstand the point, and indeed this leads to some of the annoying hype around Rust (automagically makes your app faster and safer), which in turn leads to pushback against these claims, which in turn feeds the accusation that Rust is a \"cult\" based on misguided beliefs.\n\nIndeed, simply choosing Rust doesn't automatically make your application faster and safer than, say, a C or C++ or Zig application. Even a Python application can be great. I'm thinking of the Kitty terminal emulator, written in Python, which indeed has a deserved reputation for being fast and stable.\n\nMy conclusion is that it's not a good idea to put \"written in Rust\" front and center. Sure, mention it, but not in the same breath as other actual features."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 49.659864,
      "dominance": 58.049887,
      "text": "More like, Written in Rust so we use excellent build system(Cargo), so we ship more features?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.65889200000001,
      "arousal": 57.734046,
      "dominance": 59.81535478571429,
      "text": "Yes and no.\n\nThe point kinda is, rust is a low level langusge, and youbhave to try hard to fuck it up and introduce memory bugs.\n\nWith java, you (hopefully) won't get memory bugs cause your not allocaring and freeing memory yourself, but you get worse performance due to the jvm (garbage collector + other stuff).\n\nIn C you can get bugs cause you assign (malloc/free) memory manually, but your get near native performance.\n\nIn rust you don't get memory errors, cause you can't access memory our lf sope, you also get near native performance.\n\n\nThis is, imo, one part of the story. The other is that, when you see a rust script, you most likely weed out the script kitties (nothing against em, but they don't always have the fundamentals down perfectly) and the \"near native\" babies won't shoot themselves in the foot with pointers, cause they can't.\n\nImo, the biggest advantage of rudt over day, python or java, is that it attracts decent programmers. And while this is the same for C as well. In C intermediates can make horrebdoes mistskes, while rust disallowed a good portion of these errors."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.90929700000001,
      "arousal": 60.362811799999996,
      "dominance": 70.1360544,
      "text": "Yeah, for me it means I can `git clone` and `cargo build` and it's gonna work. That's a big deal for me that I know it's got a good toolchain that I can easily use, so any modifications I make are going to be easy to make.\n\nI've been writing code for some 25 years and used Linux back when there was almost no software for it. So I'm familiar with the entire song and dance with the various cmake, autotools, and this and that. I don't even mind it that much.\n\nBut I have a young daughter, and only so many hours in the day. So I prefer when I don't have to debug software toolchain to write fast software."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It tells me that’s it’s very likely to not have broad swaths of errors that are common in C, so yes it’s a selling point as a software user!\n\nAs a software programmer it tells me a bit about the developer base who’s working on it, and I do like that."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 60.090703,
      "dominance": 74.943311,
      "text": "In Rust we tRust  :)"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I see it as more of a 'hey, we're using rust! if you know rust, you can come and help!' or something like that."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.42630360000001,
      "arousal": 65.98639460000001,
      "dominance": 64.5578232,
      "text": "One thing I love with Rust from a developer's perspective is the type system. It forces you to structure your app in a sane way, because you have to think about what owns memory, how is it gonna be accessed, and the type system lets you express constraints much better than the typical languages. You can't forget to catch an exception in Rust, you can't forget to check an error, there's just a lot of bad patterns Rust simply won't let you get away with: it forces you to handle or propagate errors properly, and that just eliminates entire classes of problems such as the program failing to load something and keep going in an undefined state.\n\nThat translates into more reliable software for end users. Not that you can't do the same in Python or even JavaScript, there's some solid apps in those languages out there. But Rust puts an inherent lower bound on how bad it can be. And also generally, people that use Rust are better developers because the bad ones are just out there constantly whining about how much the borrow checker gets in your way and how \"hard\" Rust is to develop into."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.14852575,
      "arousal": 56.292516750000004,
      "dominance": 58.928571500000004,
      "text": "Of course a brag/hype thing. That said, I do think there are some benefits to:\n\n- memory safe languages\n- that compile to native binaries (so don't need you to install/update some sort of runtime)\n- that build ~easily using standardized, cross-platform tooling\n\nIn that sense an application \"written in Rust\" is a similar amount of genuine user benefit to \"written in Go\", which is not nothing!\n\nOn the other hand, if we're talking about *libraries*, I think the conversation starts to get more interesting. For various reasons it's almost unheard of for a library written in say Java or Go, to be called from a program written in say Python or JS. But it's common for C and C++ libraries to be used that way, and Rust is a new contender here. So for libraries, \"written in Rust\" can mean something similar to \"written in C\", i.e. that the library is a potential target for bindings in other languages."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a feature provided that your users care about stability and performance"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "No, but we definitely use the phrase at [Searchcraft](https://searchcraft.io/) when speaking to our developer buyers. Makes the conversation much more efficient. If the audience isn’t devs, then definitely not—which we learned quickly."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Assuming that written in Rust makes it better. I like Rust but don't like assumptions."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't claim \"Blazingly Fast\" without it."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a feature because rust is blazing fast."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "It's like a \"Made in Japan\" sticker.\n\nMore expensive and rare, maybe, but usually a sign of quality for prospective users."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.1893425,
      "arousal": 65.433673375,
      "dominance": 63.05272125,
      "text": "There’s an essay from 2004 written by Paul Graham (yes, he’s controversial, but I still think he’s made good points about software) about how Python is a language that attracts smarter programmers than Java. He makes the claim that developers who learn Python do it because they see the merits of the language, and are passionate about programming, meanwhile oftentimes Java programmers learn the language solely to land a job. \n\nHe puts it pretty well: “if a company chooses to write its software in a comparatively esoteric language, they'll be able to hire better programmers, because they'll attract only those who cared enough to learn it”. \n\nI think Rust and other “hippie” languages fit into that same niche of Python from 2004; a language that doesn’t (yet) have a lot of job prospects, but attracts a very passionate crowd, and that passionate crowd tend to care a lot about programming, and ergo make better programmers. \n\n[Here’s the link to the article](https://paulgraham.com/pypar.html)"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.054422,
      "arousal": 50.566893,
      "dominance": 67.460317,
      "text": "One thing I can think of is that on linux, a FOSS command-line program is written in rust means I probably can just install it with \\`cargo install\\`. And in most cases rust programs only relies on libc and nothing else. So, I would say how the program is typically distributed and what kind of environment it could be run in is visible to the end user."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.14512450000001,
      "arousal": 62.698413,
      "dominance": 66.4965985,
      "text": "It is generally safer code, since it enforces a set of rules that make a very annoying and hard to debug class of bug almost impossible to write. A seasoned developer may be able to avoid writing such code on other languages, but it is a far smaller category of people than the one that contains all users of rust."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.4399095,
      "arousal": 43.650793500000006,
      "dominance": 62.3582765,
      "text": "Generally speaking it's \"has a package manager that works\" which is the key feature.\n\nRust isn't a bad language either, IMHO strict languages with less escape hatches means more overall consistency between projects and less culture shock so to speak.\n\nC/C++ project A could be totally different from B even though they both might be providing related business logic.\n\nWith Rust, you have Cargo and you also have (usually) a common standard for project structure (as the module system sorta enforces this) and the language itself has a smaller surface area for varied... ways to sorta go off the rails or be less idiomatic than what the community is pushing towards.\n\nIt being \"Rust\" also generally means it's likely going to be fast (not like C/C++/Zig aren't but I feel projects typically focus down on this).\n\nAs a user... it doesn't REALLY matter though, functionality is often more important than anything Rust provides. For reference fnm exists but I still use nvm, Fish exists but I still use Zsh, and Bevy exists but I still use GoDot, Axum exists but I still prefer SpringBoot.\n\nMostly because these other tools, libraries, frameworks today have the features I want that the Rust alts don't have."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's not a feature of the product. The results of what rust can do are the features."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "For maintenance written in rust is definitely a plus. Security patches you need to do for python / typescript are far more frequent."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.76795166666667,
      "arousal": 65.98639466666667,
      "dominance": 56.85941016666667,
      "text": "It's not, until you find out what C/C++ is and what a segmentation fault is, and then it is.\n\nBefore, the equivalent would have been stuff like .NET or Java, but GC turned out to have performance downsides so people weren't always too happy about that either.\n\nIf you've ever had to use something like Windows 95 or Windows ME you'll remember plenty of lost work that will make you experience a deeply rooted, visceral, hot-blooded hatred of C and people's insistence on using it to write applications."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Safer, more maintainable, fast.\nYes."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.2358275,
      "arousal": 66.89342400000001,
      "dominance": 70.2947845,
      "text": "People like the idea of Rust more than the actual language, and so it advertised similarly"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "There's a few reasons that holds well with any Rust program:\n\nThey are very efficient in terms of binary size, RAM usage and processor usage (assuming the programmer didnt fxxx up completely)\n\nThe likelyhood they contain security vulnerabilities is half of that of any similarly efficient program (I. E. Written in C or C++)\n\nIt's not a quality stamp per se, but you can safely assume the program was written by someone who cares about quality."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It’s the equivalent of saying 「I use arch, BTW」"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Show us where this it's \"written in Rust\" exist?"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All software written in rust I know is stable and fast. To me, it is a huge feature."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "To me it usually means statically linked so no missing dependencies bullsht"
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "New code has a lot less bloat. \n\nThere are less library alternatives so the behavior feels quite standardized and consistent (eg cli long options, colored and standardized log output). It's like a branding similar to GNU cli tools.\n\nThere is a correlation between rust and pleasant user experience."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "I often observe that Python libraries or tools written in Rust are advertised as „blazing fast - written in Rust“.\n\nSo it isn’t just to attract potential contributors, it is also seen as a feature for users. Because Rust is obviously faster than Python."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "I would add that for applications where performance matters (to the consumer), it means about the same thing as \"written in C++\".  Yes, it's possible to write highly performant code in other languages, but a program written in these lower level languages is more likely to be free of language construct overhead."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Written in rust implies  \n\n\nIm not dumb enough to think i can write good C or C++ with no memmory leaks so ->  \nno memmory leaks   \nso its a feature."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.42932733333333,
      "arousal": 55.29100533333334,
      "dominance": 71.95767166666667,
      "text": "I think we’re starting to see more people understand that the choice of language is actually important. Seeing written in rust means it’s likely to be fast efficient and easy to run without having to deal with installing lots of packages and dependencies.  Well, I think this is targeted more for developers now I think the greater population is beginning to understand the need.\n\nPersonally when I’m choosing new software to run at home I look for written go, rust or zig.  At least for the backend. And definitely for the CLI I get this efficiency improvements for developers using interpreted languages, and full stack where they use the same language. But 99 terms out of 100 these are interpreted languages. More stuff can run on our computers if it’s compiled.  It’s better for the environment too."
    },
    {
      "post_title": "Is \"Written in Rust\" actually a feature?",
      "created_utc": 1755089872.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576000000001,
      "arousal": 59.0136055,
      "dominance": 62.8117915,
      "text": "i know next to nothing from both languages and have very little experience with both of them, but i heard someone with alot of experience say that its just so nice to have a package manager, for things he maintains, because the build systems always breaks, and whenever he uses rust he has barely any issues with dependencies.. \n\nthat seems pretty reasonable for me from a maintainers perspective and its something that is not really discussed in this topic."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Media] Introducing eval_macro: A New Way to Write Rust Macros"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.569161,
      "arousal": 53.174603000000005,
      "dominance": 62.188209,
      "text": "This looks so similar to the idea of metaprogramming in zig: plain code instead of macros!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.927438,
      "arousal": 51.643991,
      "dominance": 66.6099775,
      "text": "OT: what color scheme is this? I think it looks nice"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.89652721052632,
      "arousal": 56.444683052631575,
      "dominance": 68.74925410526315,
      "text": "Hey fellow Rustaceans! 🦀\n\nI’m excited to announce the release of **[`eval-macro`](https://crates.io/crates/eval-macro)**, a new crate that brings a fresh approach to writing Rust macros.\n\n---\n\n### 📚 IMPORTANT: Documentation Notice\n\n🚨🚨🚨 **Docs.rs is currently not working for this crate (should be back in 1-2 days). In the meantime, you can read the full documentation and examples here:**  \n👉👉👉 **[https://github.com/wdanilo/eval-macro/blob/main/lib/src/lib.rs](https://github.com/wdanilo/eval-macro/blob/main/lib/src/lib.rs)** 👈👈👈\n\n---\n\n### 🔥 What is `eval-macro`?\n\n`eval-macro` lets you write **inline Rust code** that gets evaluated **at compile time** to generate Rust code. It combines the **power of procedural macros** with the **ease of `macro_rules!`**, giving you a much more flexible and intuitive way to write code-generating macros.\n\n---\n\n### 🛠️ Key Features\n\n- ✅ **As easy to use as `macro_rules!`** — you define `eval!` blocks directly in your files, with no need for separate macro crates.\n- ✅ **More powerful than procedural macros** — `eval-macro` can work with **both regular Rust source code and token streams**.\n- ✅ **Write normal Rust code to generate new code** — use loops, conditionals, and any Rust logic directly in the macro body.\n- ✅ **Inline code generation with `output!`**, supporting variable interpolation for flexible templating.\n- ✅ **Per-macro dependencies and Cargo attributes**, so each `eval!` block can have its own environment.\n- ✅ Designed for in-crate code generation — no need to export or register the macro in `Cargo.toml`.\n\n**In short: `eval-macro` gives you the simplicity of `macro_rules!`, combined with the raw power of procedural macros — and even more flexibility!** However, it is not reusable across modules, making it ideal for in-module (one-shot) code generation.\n\n---\n\n### 📖 Example\n\n```rust\nuse eval_macro::eval;\n\nstruct Position {\n    x: f32,\n    y: f32,\n    z: f32,\n}\n\neval! {\n    let fields = [\"x\", \"y\", \"z\"];\n    for field in &fields {\n        output! {\n            impl Position {\n                pub fn get_{{field}}(&self) -> f32 {\n                    self.{{field}}\n                }\n            }\n        }\n    }\n}\n\n// Use eval! to compute a constant at compile time\nconst MY_NUM: usize = eval! { \n    (std::f32::consts::PI.sqrt() * 10.0).round() as usize \n};\n```\n\n---\n\n### 🪲 Debugging and Diagnostics\n\n`eval-macro` supports **logging, warnings, and errors directly from your macro** during compilation, making debugging generated code much easier than with procedural macros.\n\n---\n\n### 📦 Get Started!\n\n📚 **Crates.io**: [https://crates.io/crates/eval-macro](https://crates.io/crates/eval-macro)  \n📖 **Temporary Docs**: 👉 [https://github.com/wdanilo/eval-macro/blob/main/lib/src/lib.rs](https://github.com/wdanilo/eval-macro/blob/main/lib/src/lib.rs) 👈  \n💻 **GitHub**: [https://github.com/wdanilo/eval-macro](https://github.com/wdanilo/eval-macro)\n\n---\n\nI'd love to hear your thoughts, feedback, and ideas for future improvements! 🎉\n\n---\n\n**❤️❤️❤️ EDIT ❤️❤️❤️** \n\nAfter reading some of the comments, I realized that this macro can be more powerful than I thought. Initially, I thought we can't export it, the same way as we are able to export `macro_rules!`, but we can. Consider this example:\n\n```rust\n#[macro_export]\nmacro_rules gen_fields! {\n    ($struct_name:ident) => {\n        eval_macro::eval! {\n            let fields = [\"x\", \"y\", \"z\"];\n            for field in &fields {\n                output! {\n                    impl $struct_name {\n                        pub fn get_{{field}}(&self) -> f32 {\n                            self.{{field}}\n                        }\n                    }\n                }\n            }\n        }\n    };\n}\n```\n\nThis way we can export the macro to be re-used between crates and modules. I know it's not pretty. I will think for future releases if we can make it easier."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102,
      "arousal": 66.099773,
      "dominance": 81.519274,
      "text": "So powerful, I've always been looking forward to features similar to zig comptime. Can external functions or packages be called within the \\`eval!\\` scope?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "haven’t looked at the code, but it sounds cool. minor nitpick: as i’m a bit colorblind, I cannot read any of the text of the image in this post or on crates.io .."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Fantastic! I would love to see something like this in std if its polished enough. Assuming it does, does it work fully with cargo expand?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "After writing a bunch of proc macros to generate tons of code, I wish this had existed a year ago.   \nI'll have to try it, this looks so great!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This seems great! Though the implementation is a little hacky. Hopefully one day something like this gets added into the language."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.65986375,
      "arousal": 65.27777775,
      "dominance": 66.66666675,
      "text": "This looks amazing, and definitely something I might use in projects from now on (I'm getting sick of writing my own complicated proc-macros for simple tasks). This is a very minor thing, but I'm not sure I love the idea of it creating files in my `~/.cargo` directory. Is there any particular reason you chose this instead of the current `$OUT_DIR` for the project? Really love the simple implementation though!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.7097505,
      "arousal": 67.23356,
      "dominance": 71.93877549999999,
      "text": "At first glance this seems pretty powerful, is there something proc macro can do that it cannot?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's something that what really missing in Rust, thank you.\n\nJust not sure about `eval` keyword for many reasons (known in other languages as unsafe, not explicit about the goal, might be used by Rust in the future, ...) but otherwise this is great."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.41723333333333,
      "arousal": 60.24187466666667,
      "dominance": 66.553288,
      "text": "I think its definitely a useful idea. One thing that rubbed me the wrong way when I skimmed through the code, was the need to create a wohle new cargo project and run it on every eval call. Could you elaborate why this is necessary? I am genuinely curious."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.412698500000005,
      "arousal": 62.528345,
      "dominance": 56.0090705,
      "text": "I read ‘evil’ the whole time.."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Great crate. But it does seem likely to aggravate the long compile time problem :(. Each time it rebuilds the whole temporary project if I understand it correctly. And each eval a separate project. There could be support for incremental build, but that might require caching the evaluated code."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.757369499999996,
      "arousal": 70.068027,
      "dominance": 56.5192745,
      "text": "This is awesome, thank you so much for making this! \n\nI had a similar idea in my backlog, I was hoping to make an extended version of `macro_rules` that supported all the existing syntax but with the major pain points patched out (e.g. unlimited recursion, eager expansion, more designator types, etc...). It sounds like a lot of work but I was just going to yoink this existing parser here: https://github.com/lukaslueg/macro_railroad\n\nYour approach is much simpler and much less convoluted though. Definitely going to be using this a lot."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Holy actual shit! This is great!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "This certainly looks interesting and I’m certainly going to try it out.\n\nOne thing is that it doesn’t seem this actually allows defining a macro so much as performing code generation. How does this interact with macro_rules? Can a macro by example be used to invoke the eval macro to build an actual macro or is the name just a misnomer?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102,
      "arousal": 66.099773,
      "dominance": 81.519274,
      "text": "This looks really really interesting, thanks a lot for making and sharing this crate.\n\nAn often-mentioned challenge with proc-macros are their compile times, do you know how eval macros behave in that regard? Is it something one should rather use sparingly (e.g. when declarative macros aren't powerful enough, and procedural ones are too cumbersome with separate crate), or do you think it's not that much of an issue? If you haven't looked into this yet, no worries!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.390023,
      "arousal": 45.69161,
      "dominance": 54.988662,
      "text": "Thank you very much, I was looking for that since a few month!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.4761905,
      "arousal": 70.9750565,
      "dominance": 68.7641725,
      "text": "Holy, that output macro definition is cursed. Still though will definitely find a use for this and pretty happy it was made. So many times I want just a small proc_macro but the overhead of having to create a whole new crate always stops me from bothering for simple things, so I instead end up with an incredibly cursed macro_rules. Hopefully this saves me 🙏"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This looks cool. It seems like an important difference between this and proc or rule-based macros though is that this doesn’t allow creating named macros that can be reused, even within the same crate. It’s just for one-off inline code generation. Is that correct, or am I missing something?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Reminds me of how we generated PHP code back in the day"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.181406,
      "arousal": 52.645502666666665,
      "dominance": 63.227512999999995,
      "text": "looks good! after reading the docs I'm concerned about shadowing. is output buffer of generated function really called `output_buffer` and is accessible as such inside `eval`? and if I define a variable with the same name inside the inside the `eval!` block, will it break the `output!` macro? can this also break the generated `main()`?\n\nmaybe use some less shadowable name, like `__eval_macro__output_buffer`? I think there was some convention about naming macro \"internal\" vars, but I don't remember it right now."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.99319750000001,
      "arousal": 64.9659865,
      "dominance": 74.77324275,
      "text": "Nice trick but I am definitely not a big fan!\n\nFrom a security standpoint, I would love to restrict the power of build scripts and procedural macros. This crate just go the other way.\n\nI would much prefer Rust to empower its declarative macros with more features and a cleaner syntax. Hygiene is good!\n\nAdded nitpick: a one image README is neither accessible, nor easily searchable."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.319728,
      "arousal": 56.462585000000004,
      "dominance": 67.006803,
      "text": "If this approach were changed to operate on ASTs instead of string manipulation, this is how macros should work in Rust - both plain macros and proc macros (admittedly proc macros are a bit closer already to this approach when combined with \\`quote!\\`).\n\n  \nWith that change, I would love to see this mainlined and \\`macro\\_rules\\` deprecated."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.18594099999999,
      "dominance": 58.503401,
      "text": "It looks quite cool! What if it was a function attribute instead?\n\ne.g.\n\n```\n#[crabtime]\nfn get_tuple(name: String, n: usize) -> TokenStream {\n  quote! {\n    #[derive(Debug)]\n    struct #name(\n  }\n\n  for i in 0..n {\n    quote!(u32,)\n  }\n\n  quote! { ) }\n}\n\ngen_tuple!(Vec2, 2);\ngen_tuple!(Pos3, 3);\n````\n\nit could peek the function signature - if it accepts TokenStream, it is passed:\n\n```\n#[crabtime]\nfn foo(input: TokenStream) -> TokenStream { ... }\n```\n\nit could be `#[crabtime(attribute)]`, `#[crabtime(derive)]` and perhaps `#[crabtime(eval)]` which would immediatelly execute the function (so exactly what `eval!` does now).\n\nAdding dependencies could be even easier, e.g.\n\n```\n#[crabtime(eval)]\n#[dep(serde_json = \"*\")]\nfn foo() -> TokenStream {\n}\n```\n\nI think it is a bit more straightforward, it's one less nesting level and allows to do some magic depending on the input parameter types.\n\nBtw. credits to the `crabtime` name goes to u/timonvonk: https://www.reddit.com/r/rust/comments/1j42fgi/comment/mg6pwfe/"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.0884355,
      "arousal": 47.335601,
      "dominance": 60.657596,
      "text": "This needs to be part of Rust itself eventually. It's a much more elegant solution than proc macros which really suck to develop."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.54195,
      "arousal": 48.639456,
      "dominance": 34.46712,
      "text": "Oh my gosh this looks SICK! I want to start using this right away. I guess for full metaprogramming - one thing I'd really want to have is a list of types and iterate over that. Is it currently entirely \"stringly\" typed like the example?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Now I can fearlessly write macros at blazing speed."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.367347,
      "arousal": 56.689342,
      "dominance": 60.31746,
      "text": "\\`eval!\\` looks a lot like C++ \\`constexpr\\` & \\`consteval\\`. The \\`output!\\` reminds me of C++ reflection. Neat. I wonder if Rust will standardize this."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Oh! Will definitely be checking this out. I've been writing some macros for some of my projects, but it's often unwieldy. The fact that the syntax can look so different, as well as the separation between macro definitions and their usage, breaks the flow of reading and writing code.   \n   \nNot that it's any real concern for my current projects, but does this affect compile time compared to an equivalent rust macro?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "This will probably be nice.\nOne problem which it can't solve is type information of types defined outside of the macro.\nYou can't write a for loop over a struct fields or methods."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.283447,
      "arousal": 74.489796,
      "dominance": 74.489796,
      "text": "Quick question, what's the point of the Eval macro? Doesn't the compiler constant propagate and constant fold consts?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Looked for something like this before but never found it, so just wrote proc-macros for the things I needed. Will check it out though as it might just come in handy in not-yet covered scenarios 👍"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 72.44898,
      "dominance": 68.253968,
      "text": "Ok so I've been trying with this for a couple hours and I can't seem to call a function that is defined outside of the eval block, inside the eval block i want to metaprogram. Please correct me if I'm wrong because this crate would be really awesome if it can."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.961451,
      "arousal": 56.689342,
      "dominance": 64.6258505,
      "text": "god bless you bro"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is so much more intuitive"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "first one is ok"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm listening..."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.789116,
      "arousal": 56.689342,
      "dominance": 62.018141,
      "text": "Is it possible for multiple `eval!` blocks to share the same data? For example: `mod data` has an array constant `VARIANTS: [&str; N]` and `mod foo` and `mod bar` would define 2 enum types using variant names from `data::VARIANTS`."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Would it make sense to rename this “comptime” like Zig (because it’s evaluated at compile time)?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Looks cool, what's the catch?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I really like the crate! [MacoCaml](https://xnning.github.io/papers/icfp23.pdf) is built around a similar feature. I wanted to have something like this using consteval functions, see [rust-lang/rfcs#3785](https://github.com/rust-lang/rfcs/issues/3785). It would let users pass in a consteval function pointer to the macro, which the macro implementation could then invoke directly during its evaluation, among many other things. This could be used to resolve the composability limitations of eval\\_macro\n\nPS: all the limitations called out in this thread can be solved with this."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "chat is this consteval"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do you foresee any issues using this with Bazel?"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.367347,
      "arousal": 56.689342,
      "dominance": 60.31746,
      "text": "Oh dear.. Compile times will get even longer.\nThis creates a new project, compiles it, runs it, parses its stout output and replaces it online.\nI wonder if there'd be a faster technique."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.9024945,
      "arousal": 56.292517000000004,
      "dominance": 61.111111,
      "text": "Damn, I don't think I have the right vocabulary to express just how profoundly this is going to improve rust moving forward.\n\nThis feature is something a lot of developers dream about for their languages, and crabtime adds it as a crate. Awe inspiring.\n\nI absolutely can't wait to start using it, and I'll feel like I'm committing theft for not having to even pay for it.\n\nI wonder if it can be used for compile-time reflection for existing types."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is so cool! Thank you for making this!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.54195,
      "arousal": 48.639456,
      "dominance": 34.46712,
      "text": "This looks sick, need to try it out. Great job"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.5782315,
      "arousal": 59.8639455,
      "dominance": 62.0181405,
      "text": "This is BIG news! So, from now on there' s no need to learn Zig because of comptime! xD"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.78533633333333,
      "arousal": 53.817082666666664,
      "dominance": 56.84051433333334,
      "text": "Yo this looks really cool! I'll definitely be looking into this in the near future.\n\nAnd I can't help myself, but the code snippet in the image has an unclosed parenthesis inside of the first invocation of the macro.\n\nEDIT: I'm blind! It's s there. Its just a different color so its hard to tell against the background."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.63492049999999,
      "arousal": 70.238095,
      "dominance": 73.639456,
      "text": "Oh my god I love this!!! I was wishing there was a better way to create implementations for various heterogenous tuple-types a while ago, and this solves it perfectly!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "This is pretty damn cool! Thanks for doing this!"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is neat, but zig's better. (Though I wrote more rust than zig)\n\nEdit:\nAnyways, I'll still use it as an alternative to comptime in zig"
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice, but please don't put code in images."
    },
    {
      "post_title": "[Media] Introducing eval_macro: A New Way to Write Rust Macros",
      "created_utc": 1741179370.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "bad zig metaprogramming"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "I'm rewriting the V8 engine in Rust"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 76.31802725,
      "arousal": 57.99319725,
      "dominance": 67.077664375,
      "text": "Update: After great community feedback (including a rename and better practices), I’ve moved the project to the JetCrabCollab org!   \n*New home*: [github.com/JetCrabCollab/JetCrab](https://github.com/JetCrabCollab/JetCrab)  \n\nI was working on a project for Node in C++, trying to build a native multithreading manager, when I ran into a few (okay, a lot of) issues. To make sense of things, I decided to study V8 a bit.\nSince I was also learning Rust (because why not make life more interesting?), I thought: “What if I try porting this idea to Rust?” And that’s how I started the journey of writing this engine in Rust.\nBelow is the repository and the progress I’ve made so far:\n[ https://github.com/wendelmax/v8-rust ](https://github.com/wendelmax/v8-rust)\n\nNote:\nThis isn’t a rewrite or port of V8 itself. It’s a brand new JavaScript engine, built from scratch in Rust, but inspired by V8’s architecture and ideas. All the code is original, so if you spot any bugs, you know exactly who to blame!\n\nLast update:\n"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, that's ambitious."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "V12 ?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you sure? It's 2.3m lines of code."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "So are you actually \"rewriting\" V8, or actually building a JS JIT/Interpreter from scratch?  Or something in-between?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'd suggest not calling it V8 to avoid possible trademark issues. I starred the repo though; I'm excited to see how this turns out!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Did you consider the existing JavaScript engines that are written in Rust, eg Boa and Nova, and rule them out for some reason?  How do you intend this project to be different?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "It’s wild what people think should be attempted by vibe coding."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.9818595,
      "arousal": 71.4852605,
      "dominance": 74.489796,
      "text": "I don't want to discourage you, but this is not a learner project.\n\nBut I bet you learn a lot and have fun."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Awesome; this would be wonderful to see! Good luck."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "oh alright, vibe coded, doesn't have a single line of ecma compliance, etc etc etc. sure"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.28117950000001,
      "arousal": 64.9659865,
      "dominance": 67.517007,
      "text": "That's a pretty comprehensive start! Good luck!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "Mind if i contribute? tho i am a beginner as well currently going through the rust handbook"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 79.138322,
      "dominance": 73.24263,
      "text": "In and out, 20 minute adventure!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.671202,
      "arousal": 51.814059,
      "dominance": 58.276644000000005,
      "text": "This is a cool project, and I wish you luck. However:\n\n> Note: This isn’t a rewrite or port of V8 itself. It’s a brand new JavaScript engine, built from scratch in Rust\n\nMaybe don't call it V8 if it's not related to V8. It's confusing and bad form IMO."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Try the Ladybird engine, it's exceptionally well organized."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Isn't that called deno?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "vibe coing - amateur developers - junk projects"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.900227,
      "arousal": 64.4557825,
      "dominance": 71.14512450000001,
      "text": "Good luck for your awesome project! Can you add some English documentation and a contributing.md to help people to contribute to your project"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 33.106576,
      "dominance": 50.680272,
      "text": "How much value do you think Rust will bring to the table here when the JIT generated code will all be unsafe?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.79251725,
      "arousal": 42.23356,
      "dominance": 56.320861750000006,
      "text": "You may want to use tree-sitter (https://tree-sitter.github.io/tree-sitter/using-parsers/index.html) to speed up the work on parsing. Unless you want to spend a time learning how to write a reliable parser :)"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why is the README in portuguese? English please!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.5873015,
      "arousal": 62.981859,
      "dominance": 65.249433,
      "text": "The project is ambitious, if you are the one who is actually writing it, in your instructions.rs file in the v8_bytecode crate you have this one with the suggestion in the comment in Portuguese looking like it was generated by AI, in fact, I speak Portuguese, anyway, I am an enthusiast in the area of computing theory, compilers, and virtual machines, I am developing something too. I would be happy to help you if you have any questions:\n\n#[derive(Debug, Clone, PartialEq)]\npub enum Constant {\n\n    Number(f64),\n\n    String(String),\n\n    Boolean(bool),\n\n    Symbol(String),\n\n    BigInt(String),\n\n    // ... other types as needed\n\n}"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.548753,
      "arousal": 64.5124715,
      "dominance": 69.671202,
      "text": "Good luck and God speed soldier 🫡"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.031746,
      "arousal": 51.859410600000004,
      "dominance": 58.344671000000005,
      "text": "I've wanted to write a toy JavaScript interpreter for a while. Part of the appeal is the *very* comprehensive test suite. But then I look at the countless engineering hours that have gone into V8 and ask \"Does the world *really* need another JS engine?\" So far that's held me back, but it's probably just a matter of time.\n\nBest of luck on your efforts. Trying to emulate V8 is no small task."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.23960699999999,
      "arousal": 54.91307633333333,
      "dominance": 59.78835966666666,
      "text": "Pretty cool! I also like R8 for name but I don't know if it will run into other name collisions"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.0861678,
      "arousal": 56.371882199999995,
      "dominance": 64.3310656,
      "text": "If you just want to do it for fun, then good luck.\nI would just argue that \"V8\" is one specific engine, if you don't plan to be a drop-in replacement maybe you should reconsider the name\n\nJust saw that somebody else already asked the question and OP said it was for learning purposes\n~~Otherwise, if you want to bring something new, have you checked the existing engine alternatives?~~\nhttps://github.com/errilaz/awesome-js-runtimes?tab=readme-ov-file#engines\n~~(There might be others not in this list)~~\n~~I quickly checked, most of them involve C++, but Rhino is in Java, Boa is in Rust, ...~~\n~~Maybe you could use them and/or contribute depending on your motives~~"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.984127,
      "arousal": 57.823129,
      "dominance": 66.326531,
      "text": "Definitely gonna check it out! I’ve been doing a pet project to basically write TS to LLVM IR (basically TS to Rust) so I might use some of your crates \n\nhttps://github.com/luizfonseca/draf"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.825397,
      "arousal": 53.3446715,
      "dominance": 64.6825395,
      "text": "I assume you know about Boa, another Rust JS engine? https://github.com/boa-dev/boa\n\nRegardless, more competition is good."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 72.44898,
      "dominance": 68.253968,
      "text": "There are a couple of rust based JVMs that you can look at for reference. Most do not have a JIT."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "V8 Splash, is what you should call it"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Title : I'm rewriting the V8 engine in Rust.\n\n(few lines below)  \nNote that this isn't a rewrite or port of V8.\n\n(insert among us sound effect)"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "Sounds like an ambitious project! I’d be happy to help. I’m a Servo contributor, so maybe we can even integrate it into Servo as a client :P Let’s create a Discord or something similar to communicate about the project and its potential."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.3492065,
      "arousal": 63.888889,
      "dominance": 55.385487499999996,
      "text": "This is really great, I was planning to build something like this for my next project, but was confused where and how to start. This would be a great inspiration.\nThanks man."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.16182236363636,
      "arousal": 53.030303272727274,
      "dominance": 61.25541118181818,
      "text": "I know this might get a little shit, but I’m all for it. I have some suggestions, or tips rather, if I may?\n\nI, too, have been working on rebuilding a major, used everyday system in Rust. I’ve been working on it for nearly 18 months and am very close to being able to ship a relatively polished v1. Here’s what I learned along the way:\n\nA) It’s okay to break legacy convention. In fact, I almost suggest you try to as often as possible. This just means be original in your implementation. Rust allows us to write code that wasn’t possible at the time these legacy systems were engineered - ignoring that in shortsightedness or some purist ideal is silly. \n\nB) Migration for something like this is almost absolute. If it’s not a clear migration path, it’s going to struggle regardless of its strengths in most cases. In my own situation, there are enough low level differences that I was forced to build an entire migration engine and have been testing it on 150k fixtures via AWS instances to get it right.\n\nC) A lot of the tools we use today were built by cracked engineers at a different point in time. They built for the hardware that was around; they built for the wire protocols that were around; they cared about storage engine page sizes and how operating systems behaved at that point in time. You have twice the work; first you need to do the exact same today, AND think about their work and how it translates. In my situation, I gained a LOT rethinking a storage engine from scratch. It took me MONTHs of bullshit yak shaving, but it changed the entire dynamic. Look at the systems they targeted and understand why.\n\nD) Build in trait abstractions and extensibility from day one as often as possible. In fact, think of your codebase like a trunk with swappable pieces. Huge systems like browser engines, operating systems, databases, version control systems, etc. are almost always going to change regularly. Make it easy on yourself and think through your design patterns.\n\nE) You absolutely need to work through each individual piece now, and have a solid understanding of what that looks like. This took me months. I assumed I had something figured out and realized I actually didn’t know shit. Be aware of how huge the task is, and be aware that you’re going to be caught off guard a lot.\n\nFinally, I would just say use the full power of Rust. Lock down unsafe code in islands behind features. Get creative with your tests. Benchmark aggressively and build all of this into your CI. It will keep you sane. As with everything real, build observability into the system from day one. \n\nKeep us posted! I’m watching!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I may have found a bug in the lexer. Test it for the following code: \n\nlet x = 45+12;"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So many engines in rust already :)"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Admire your courage on this topic.\nCan you give some comments about the boa js engine ?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "sorry, but completely unnecessary and too ambitious. i’d spend my time and energy on something else"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can just do things.\nGodspeed!"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.344671000000005,
      "arousal": 44.614512500000004,
      "dominance": 55.215419499999996,
      "text": "Deno uses Rusty V8, I don't know in detail but is this different from that?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ugh"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Bro...good luck. V8 is one of the most complicated software ever written."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "based, but why not zig?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is very very ambitious wtf"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.0181405,
      "arousal": 69.557823,
      "dominance": 63.605442,
      "text": "I've been getting Initial D and car content suggested to me the last few days and I was a bit confused for a bit lol"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "Aren't you worried about trademarks, using the name without being affiliated and with it being an entirely separate project?"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "Vibecoded ah hell naw"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 61.111111,
      "dominance": 71.315193,
      "text": "Will be cool to see it take off. Something like companion to ladybird (in swift)"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow! incredible work 👏"
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why don't you rewrite from Quickjs? Since Quickjs only has 60,000 lines of code, V8 has millions of lines of code."
    },
    {
      "post_title": "I'm rewriting the V8 engine in Rust",
      "created_utc": 1753397506.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Inline 4"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "DO NOT BUY \"Practical Rust\" By James Maina"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 63.6507936,
      "arousal": 58.594104200000004,
      "dominance": 66.0770976,
      "text": "It seems to be pure AI slop and extremely poorly formatted, legit copied from ChatGPT into word not even downloaded as PDF so code blocks are formatted correctly and You can see the \\`\\`\\` LOL\n\nI will hold on to my copy, as self-shame, so that I research the authors of my books more in the future.   \n  \nSpeaking of that, does anyone like \"Rust for Embedded Systems (Build Anything Anywhere)\" By Maxwell Vector? I am trying to determine if it is worth $40. It at least is formatted like a real book but the sample text showed limited writing and a large code snippet which was a red flag but idk maybe it gets better.\n\nEdit: Clarity, typos. (Rage induced typing is bed) "
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.995465,
      "arousal": 64.965986,
      "dominance": 32.199546,
      "text": "He is legit bragging about selling 1k AI written books on his Linkedin profile :dead:"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.17460349999999,
      "arousal": 67.8004535,
      "dominance": 73.185941,
      "text": "You need to learn from your mistakes homie. A quick search for Maxwell Vector shows that he wrote 84 books in the last year about everything from Matlab to Oculus VR, with a grand total of 1 goodreads review.  \n  \n[https://www.goodreads.com/author/list/54791475.Maxwell\\_Vector](https://www.goodreads.com/author/list/54791475.Maxwell_Vector)"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do a credit card chargeback."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.33031,
      "arousal": 57.142857,
      "dominance": 67.573696,
      "text": "What kind of book are you looking for? I own a (way too large) number of Rust-related books and I'd be happy to advise if you're looking for something specific."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just pirate the books and then pay for it  \nIf it's not pirate-able, it's probably junk anyways."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.74829933333334,
      "arousal": 55.971277333333326,
      "dominance": 59.78835966666667,
      "text": "Why did you even buy the book in the first place?\n\nLook at some of his past \"work\". \n\n[https://www.amazon.com/PositiveDay-Gratitude-Discovery-inspiration-mindfulness/dp/B0DTTYC1JK/](https://www.amazon.com/PositiveDay-Gratitude-Discovery-inspiration-mindfulness/dp/B0DTTYC1JK/)\n\n[https://www.amazon.com/Practical-Rust-Real-World-Applications-Programming-ebook/dp/B0FGHSS6LZ/](https://www.amazon.com/Practical-Rust-Real-World-Applications-Programming-ebook/dp/B0FGHSS6LZ/)\n\n[https://www.amazon.com/Complete-OpenAI-Agents-Blueprint-Production-Ready-ebook/dp/B0FHFQ63DJ/](https://www.amazon.com/Complete-OpenAI-Agents-Blueprint-Production-Ready-ebook/dp/B0FHFQ63DJ/)\n\nAll made/released in 2025, which is just outrageously unrealistic."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "May I recommend Rust in Action from Tim McNamara? Carefully human written."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If it’s embedded Rust you’re looking for, I’d check out https://blog.theembeddedrustacean.com/ I’ve bought his stuff and he’s been putting in the work for several years. "
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.83786875,
      "arousal": 55.130385749999995,
      "dominance": 62.244898,
      "text": "For embedded rust, I recommend \"Simple Embedded Rust\" - in 2 versions, one with the standard library, the other no-std\n\nwww.theembeddedrustacean.com/c/ser-std\n\nhttps://www.theembeddedrustacean.com/c/ser-no-std\n\nThe author Omar is part of the rust community and the book is pretty good!"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is why I download pirated books frst, read a few chapters and then pay for a genuine copy. Supporting authors is important, but supporting slop creators is not"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "[This one](https://www.amazon.com/Programming-Rust-Fast-Systems-Development/dp/1492052590/ref=sims_dp_d_dex_popular_subs_t3_v6_d_sccl_1_3/143-7272243-8882867?pd_rd_w=8mXSP&content-id=amzn1.sym.e94802a9-3b18-4cbd-b410-204abb9c6aed&pf_rd_p=e94802a9-3b18-4cbd-b410-204abb9c6aed&pf_rd_r=N0Z5VDX87GW4MHKCN33P&pd_rd_wg=qFQSf&pd_rd_r=693b8bfd-e064-4d34-a24a-4544da7f137a&pd_rd_i=1492052590&psc=1) is very good."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yucks thanks for the warning!"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.251701,
      "arousal": 52.8344675,
      "dominance": 66.043084,
      "text": "This is what I've used for learning embedded. It's free. https://docs.rust-embedded.org/book/"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Rust for Rustaceans by Jon Gjengset is really good. Not really for beginners though"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You misread the title. It's \"Practically Rust,\" as in, not quite Rust but close enough."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "I liked this one: https://rust-book.cs.brown.edu\nBut I am a rookie."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.17460349999999,
      "arousal": 54.535147499999994,
      "dominance": 66.66666649999999,
      "text": "Please DYOR before buying technical books nowadays, there is so much AI shit out there.\n\n  \nAlways check whether the author is a real person, with credits on conferences, rust articles, rust project etc.\n\nThere are so many good authors out there which are getting shadowed by AI. Please, if you don't know what to buy, ask first."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.2244896,
      "arousal": 51.111111,
      "dominance": 59.024943400000005,
      "text": "Rust is important because it combines the performance of low-level languages like C and C++ with modern safety guarantees, allowing developers to write fast, memory-efficient programs without the common pitfalls of manual memory management. Its unique ownership system enforces strict rules at compile time, preventing data races, dangling pointers, and buffer overflows before the code even runs. This makes Rust especially valuable for building secure systems, from operating systems to web servers, where reliability and stability are critical. By fostering both safety and performance, Rust enables developers to write code that’s not only blazingly fast but also robust and maintainable—without sacrificing expressiveness or flexibility.\n\n$40 plz."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Screenshot of one page please!"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Thanks for the warning and definitely give it a thoroughly eviscerating review.  Paying for a technical book to just have AI slop regurgitated is infuriating."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.888889000000006,
      "arousal": 47.7324265,
      "dominance": 59.297051999999994,
      "text": "Maxwell Vector seems to have published all sorts of books dealing from MATLAB, Assembly, Rust, Neural Networks, etc. etc. All in the same year, and his books appear to be self-published (I've not checked them all.)\n\n\n\nI Googled his name and checked out his book titles: All have the 2025 as the release year.\n\n\n\nIn short, stay clear."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.8820864,
      "arousal": 60.3854878,
      "dominance": 68.7981858,
      "text": "The only books i can actively reccomend is zero to production in rust and also the free \"rust book\" apart from that i think everything else is better documented online via the forums and discord servers. There are plenty of smart people who are passionate and willing to help you with domain specific problems. Reach out, and im sure you could probably pay some of these people for good 1 to 1s"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "return it :) and report seller"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.911565,
      "arousal": 58.8435375,
      "dominance": 70.351474,
      "text": "You can be save by pirating a digital copy first and if it looks good buying a physical copy."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "google annas-archive"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.0816325,
      "arousal": 63.095237999999995,
      "dominance": 64.0022675,
      "text": "It is enough to check these:\n* 1 star on Amazon\n* Independently published\n* Not renowned author\n\nYou can trust independently published books only if their authors are renowned."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 84.693878,
      "dominance": 69.274376,
      "text": "He's a Kenyan. As a Kenyan, I'm not really surprised"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.38127657142857,
      "arousal": 57.904114,
      "dominance": 67.80045342857143,
      "text": "Real human person here, author of real Rust book [The Secrets of Rust: Tools](https://bitfieldconsulting.com/books/rust-tools). Readers say nice things about it: “Among the more than 20 Rust books I've purchased, this one stands out. It focuses on clean, efficient, reusable code, good design principles, and robust coding practices. A valuable resource for anyone looking to learn Rust properly.” (For the justifiably sceptical, I'm happy to put you in touch with this and other readers to confirm those remarks.)\n\nYou'll find it and others on my list of the seven Rust books that are actually worth your money, thank you please: [The best Rust books](https://bitfieldconsulting.com/posts/best-rust-books)."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "AI \"books\" are not copyrightable, share the PDF so everyone can see the shame. "
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "this is why the rust book (available with `rustup doc --book` exists"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.34240375,
      "arousal": 57.17120175,
      "dominance": 60.799319499999996,
      "text": "I think you may have too much money if you're seriously thinking about spending $40 on something that \"idk maybe it gets better\", by someone who's purportedly called \"Maxwell Vector\" (which definitely is not a real name) and who has \"published\" dozens of books in this year alone, as you'll learn if you care to do a little research (aka using google)."
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My sympathies Jason T Ivey"
    },
    {
      "post_title": "DO NOT BUY \"Practical Rust\" By James Maina",
      "created_utc": 1754339859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.5510205,
      "arousal": 69.9546485,
      "dominance": 64.56916100000001,
      "text": "So I hate to say it, asking Claude to explain programming things and scenarios and such is a great way to learn stuff. \n\nAnnoying but also true."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why does Rust feel so well designed?"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 62.90455590909091,
      "arousal": 56.101834727272724,
      "dominance": 60.05978145454546,
      "text": "I'm coming from Java and Python world mostly, with some tinkering in fsharp. One thing I notice about Rust compared to those languages is everything is well designed. There seems to be well thought out design principles behind everything. Let's take Java. For reasons there are always rough edges. For example List interface has a method called add. Immutable lists are lists too and nothing prevents you from calling add method on an immutable list. Only you get a surprise exception at run time. \nIf you take Python, the zen contradicts the language in many ways.\nIn Fsharp you can write functional code that looks clean, but because of the unpredictable ways in which the language boxes and unboxes stuff, you often get slow code. Also some decisions taken at the beginning make it so that you end up with unfixable problems as the language evolves.\nCompared to all these Rust seems predictable and although the language has a lot of features, they are all coherently developed and do not contradict one another.\nIs it because of the creator of the language doing a good job or the committee behind the language features has a good process?"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "One big reason is that it's a more modern language.\n\nOlder languages have gone through some hard earned learnings and often have to build around legacy features. Rust learned from those mistakes and built from scratch not too long ago so it could avoid a lot of those problems."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "You might find this article from Graydon Hoare, the original creator of Rust, rather interesting: https://graydon2.dreamwidth.org/307291.html\n\nIt covers all the things Hoare would have done differently if he had been the BDFL of Rust, rather than just a member of the team. It also gives an interesting insight into how Rust being positioned as a C++ competitor really affected the language's design.\n\nBut yeah it really comes down to passionate people with lots of ideas finding ways for those ideas to work together."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678005,
      "arousal": 64.909297,
      "dominance": 74.659864,
      "text": "For what it's worth, Rust does have some legacy warts it will never truly shed (e.g. the leak-pocalypse). In another decade or two, someone might ask a similar question about why Rust doesn't do X thing like Y new language does. Progress is good."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Rust wasn’t always what it is today and not even close. But when people from virtually every programming paradigm came together they shaped the language into what we now have. I highly recommend [this](https://youtu.be/79PSagCD_AY?si=BWlLmeL93L3VZJ33) video to better appreciate and understand the process behind it all."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.7210885,
      "arousal": 60.94104325,
      "dominance": 65.27777775,
      "text": "I imagine it was because they were more willing to break with the past during development. Things are stable now but they went through some big language changing upheavals like the switch from multiple pointer sigils to `Box`, `Rc`, etc. \n\nBevy is young and its team break their API every three months, and I hope they keep doing it. Too many times it feels like things get stabilized before they should. I’ve used plenty of stable APIs that are wrong, inconvenient, misspelled, or footguns waiting to happen. I say, let ‘em cook."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.380952,
      "arousal": 59.580499,
      "dominance": 57.76644,
      "text": "Python is a great language when you don't have someone in your ear saying \"right tool for the job\" and somehow it's Python again despite it definitely not being the right tool for the job."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.4761905,
      "arousal": 57.5396825,
      "dominance": 59.6938775,
      "text": "Both Java and Python are quite old languages, and Java still carries a baggage of obsolete APIs, and some PL design mistakes that were made back in 90s. For a long time, Java was all about backwards compatibility, and only recently, it started removing some of the unused and deprecated stuff. \n\nAnd Rust as a much younger language was able to learn from older languages' mistakes. \n\nI would say it’s a natural lifecycle of programming languages."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.01230985714285,
      "arousal": 57.01328171428571,
      "dominance": 66.47230314285714,
      "text": "I would say it has two ingredients. Good research and a lot of trying out.\n\nThe early Rust authors had an incredible insight into all sorts of languages including those that have not been exactly mainstream. This provided a great pool of concepts to learn from. The other big aspect was that what you today see is a completely different language from the one implemented in the early draft. A lot of things have been tried out, often with hands on experimentation in the implementing the Servo engine and a lot of things where removed or radically reworked in the pre-1.0 phase. This ensured a relatively good cohesion between core features. Even after 1.0 Rust tried to keep this spirit as good as possible with nightly-only features, the insistance to not specify stuff unless absolutely necessary and the edition mechanism.\n\nHence, there are a few questionable parts but not a lot."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think it's just a more modern approach. The old languages ​​were developed in the 90s, so a lot of things were unknown back then.\n\nAdding new things is always a trade-off with trying to maintain backward compatibility."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.117914,
      "arousal": 59.03250166666667,
      "dominance": 70.06802733333333,
      "text": "It's definitely a combination. The folks who designed the language were very careful. They also treat language ergonomics as a first class feature. \n\nRust's type system is also very helpful, in that it's both strong and expressive. Rust's approach to mutability is somewhat unique (it's a property that a variable has, rather than a property a field can have, and it's orthogonal to type, while having robust static checks around it). \n\nThere are still warts, but they're small. Not like Java's massive historical issues brought on by fundamental shifts in library and language design."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.987013000000005,
      "arousal": 54.98866209090909,
      "dominance": 61.05957527272728,
      "text": "New languages don't have the accumulated warts over time. Lots of people explaining that. Your particular examples are interesting though.\n\nJava was well, almost beautifully, organized back in the day.  But 25 years of language additions, with a commit to not break any old code if at all possible, has made it a horrible mess. C#, which is pretty much Java,  doesn't care about breaking old code  (they just version the C# runtimes). So they have been able to add/remove/correct things with concern about breaking older code.\n\nHowever, a big influence on C# that has lead to ugliness (in places) is that it needs to maintain compatibility and interoperability with all the other .NET family of languages, C#, F#, Visual Basic .NET. And it needs to be keep in sync with  how the APIs of  Microsoft's C++ , Powershell ,Microsoft Products, Office MS SQL, Windows,Windows Server. \n\nWhether, when, and how to do Box/Unboxing has to interoperate throughout all that mess. Keeping mind that in general boxing is messy problem to solve. You can handle it a very easy and consistent manner (always keep all primitives boxed) but at a huge performance penalty. Optimum performance can only really come from having the programmer manually handle all boxing operations.   Programmers don't want to do that, and you need programmers to really understand all the performance issues to even do it well. So most languages pick some middle ground between the two. When you add in the complexity of smoothly working with all of Microsoft's things, it can get ugly, which is why F#'s boxing is what it is."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.919879,
      "arousal": 58.550642333333336,
      "dominance": 64.45578216666667,
      "text": "It comes down to two things, working together:\n\n* Many of the people involved have a lot of knowledge of PLT theory and history.\n* A relatively focused set of goals for the language.\n\nThe former gives way to a wide space of possibility, and the latter is how you cut that down into something coherent.\n\nThere are secondary effects, for example, Rust's dedication to inclusiveness is how you end up with so many people that have the knowledge. That Rust came in the 2010s instead of the 1990s means that that knowledge was built up by other languages first, that Rust got to learn from. But language design is a combination of an art and a science.\n\nIt is also very much not without flaws. Rust is well designed, but it is not perfect.\n\n> In Fsharp you can write functional code that looks clean, but because of the unpredictable ways in which the language boxes and unboxes stuff, you often get slow code.\n\nThis doesn't mean F# is poorly designed, it means that it deprioritized something you care about: speed at the limit."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because I didn't design it?"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.48904000000001,
      "arousal": 62.244898000000006,
      "dominance": 59.52380933333334,
      "text": "Honestly, I feel like the age Rust grew up in has allowed people to debate things to death before they get stabilized.\n\nC was designed by a small team, Rust was designed by an internet forum full of people who you have to justify *everything* to."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.12585075,
      "arousal": 57.08616775,
      "dominance": 66.95011325,
      "text": "Java sure has baggage but is generally well designed. Version 1.0 was quite rough, it didn't have the modern luxury of a soft launch and incremental community review that might have prevented some... misalignments. But the language's balance between functionality, expressiveness and complexity is still IMO very good."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.9750565,
      "arousal": 73.2993195,
      "dominance": 77.8911565,
      "text": "I love the compiler in Rust. As a newbie, it tells me what I’m doing wrong and I’m happy."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.17298342857143,
      "arousal": 61.80758014285714,
      "dominance": 60.02591507142858,
      "text": "I think it has less to do with modernity; it's more about expertise and domain knowledge. **Rust was actually designed by experts in PL.**\n\nLet's just look at the core features of Rust: algebraic data types were invented in the 1970s by Robin Milner et al., and well-known by the 90s. Traits were first implemented in Haskell (as \"type classes\") by Phillip Wadler and Stephen Blott, in the late 80s. Region-based memory management, a precursor to Rust's lifetime model, was pioneered in the 90s by Mads Tofte and Jean-Pierre Talpin et al., particularly in the MLKit implementation of Standard ML. Substructural type systems, which form the core of Rust move semantics, were known in the 1980s and Phillip Wadler was famously a proponent as early as the early 90s. In the early 2000s, Hongwei Xi famously created ATS, a very expressive programming language that very much presaged Rust in terms of memory management, but it never caught on due to complexity and poor documentation.\n\nSo none of these ideas are new; some are, in fact, as old as C! So why didn't anyone create Rust earlier? The answer, IMO, is that most programmers don't know much about programming languages (and how a good PL can completely change the dev experience), **and most popular languages are actually designed by people who know very little about programming languages**.\n\nPython's inventor famously didn't know much about PL design, and is often outright wrong on many things. Java was actually designed by computer scientists with PhDs specializing in programming languages (James Gosling and Guy Steele Jr.), but (1) corporate demands limited their design space, and (2) in the 90s, some strange cargo-cult worship of object-oriented programming was going on. Proponents advocated programming in accordance to strict design patterns, and to prioritize extensibility over everything else, leading to severe over-design. Java was guilty of pushing this OO excess even further, but by the time people thought it was too much, it was already too big to fail and impossible to change things."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "Let’s not forget that python 2->3 threw away some junk. We’ll end up with some warts in rust over time, but maybe the editions system will mitigate that a bit."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.929705,
      "arousal": 68.594104,
      "dominance": 64.058957,
      "text": "Because you haven't written a lot of async code yet. /s\n\nJokes aside, Rust is learning from the lessons of Java, Python, C++ with things like it's standard library design, tooling feedback, compilation model. It's just the benefit of generational knowledge."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.14966,
      "arousal": 49.4331065,
      "dominance": 51.927437499999996,
      "text": "\"In Fsharp you can write functional code that looks clean, but because of the unpredictable ways in which the language boxes and unboxes stuff, you often get slow code.\"\n\nCan you give examples of unpredictable ways in which F# boxes and unboxes stuff?  \nYou don't see rough edges in Rust?  \nWhat we can easily agree is that F# code is much easier to read/write/refactor than Rust code."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 57.086168,
      "dominance": 62.585034,
      "text": "I feel you are unfairly bashing Java here. It was designed, what, 30 years ago. We've learnt a lot about how to design good languages and APIs in that time. Rust is a reflection of everything we've learnt."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The creators are craftsmen who really value writing maintainable software, not something you write once and throwaway."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.13378689999999,
      "arousal": 61.0770976,
      "dominance": 65.4195012,
      "text": "I love Rust and wish it were less verbose because things are hard, but at the same time, wow... It is so nice to see what is happening. When I found that slice was not string because it required additional allocations I was like, there is a very good person that did this. I hate it is hard to use, but I love there was this much consideration into something so small."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "because you're comparing it to JAVA LOL"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.240363,
      "arousal": 59.3537415,
      "dominance": 60.3741495,
      "text": "Don't bash Java, it was never meant to be a good language: it was supposed to sell garbage collection to a bunch of grumpy C++ programmers who abhorred all change;)"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Java and Python have existed for 30 years, newer versions have to maintain some compatibility with previous versions, which doesn't allow you to redign a language to the extent you want. \nHowever, I wouldn't call Rust well designed until it supports const expressions in generic bounds."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.21541950000001,
      "arousal": 64.2290249,
      "dominance": 60.44217690000001,
      "text": "Different languages emerged to solve the pain points of their time. C helped move people from raw assembly to structured programming. Java abstracted memory management and promoted cross-platform code. Python focused on developer speed and readability, not strict design. F# brought functional power but still had runtime quirks like boxing. Rust came at a time when memory safety and concurrency bugs were major issues. Its ownership model was a deliberate response to real-world crashes. Rust's design may feel more consistent because it learned from decades of mistakes. Also, Rust evolved slowly with an RFC process and strong community feedback. Even then, it may have its own limitations that future languages will solve."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> Why does Rust feel so well designed?\n\nBecause you lack the experience to recognize Rust's problems (yet)."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.437641600000006,
      "arousal": 72.063492,
      "dominance": 62.154195400000006,
      "text": "Javais substantially older then rust (30 years to 13 years) same for python (31 years) \n\nalso, what do you mean with \"the zen\"?\n\npython is great for quick scripting and shows its power exceptionally well in jupyter notebooks, you won't get errors on errors as you're not unwrapping values, doing things with a pointer you can't do, etc etc. Granted you might run into a lot more runtime errors, but its not particularly worse, just different.\n\nIf I program python I might curse cause I forgot edge cases, but if I program rust I might curse cause my lifetimes don't want to cooperate (granted I vastly prefer rust for most things, but alas)"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.94860166666668,
      "arousal": 57.09561608333333,
      "dominance": 56.245275916666664,
      "text": "Partially, rust is young. You are comparing it to languages which are nearly 30 years old. Java today looks much different than the olden applet days, and Python did a major 2.0 to 3.0 transition.\n\nIt’s a natural order of language that they are beautiful and clean at first and accrue cruft over time as they are more well used and the ecosystem evolves. Then you have some nebulous corners of the language that maybe made sense once but not as much anymore. C++ is probably the single worst offender.\n\nIt could be that something about rust such as language editions, or the nature of cargo, prevents rust from accruing this crust over time. It will\nBe interesting to see how idiomatic rust is written in 10 years.\n\nThat’s not to say rust isn’t well designed, or hasn’t learned many lessons from other languages in the past. I tend to agree it has. But it is also a bit of an apples and oranges comparison. \n\nIt’s also very fair to say that the languages in question had very different design goals than rust, although Java did promote a certain element of memory safety as part of its goal. Both it and Python had certain design choices that would make them more difficult to grow and evolve over time, for sure. So it’s possible they were well-designed, but for a different purpose, and have been “re-purposed” over time."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Because there were really long public discussions and consensus based decision making about every little feature by people who actually cared about using the language."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.397959,
      "arousal": 47.64739225,
      "dominance": 51.9274375,
      "text": "Almost all langauges were designed based upon some ideology.  Ideologies fail eventually, not just in langauges but in almost anything.  Ideology stops you recognizing the failure too.\n\nRust had very explicit goals, but often weight conflicting ideologies.  Rust wanted to be both mid level enough and safe enough to write a browser, but the team included many PL folk who knew all the fancy PL stuff too.  They often picked among the cleaner viable tools in the PL toolbox.  Also, early Rust added many features, but then quickly removed them when they could not carry their weight.\n\nAround this..\n\nThere are few langauges that worry about \"soundness\" much, meanning whether every program exhibits safety or other features, mostly if two features become dangerous together then the designers say \"Don't use them together like that\" and forget it.\n\nThere are no langauges that worry about soundness like Rust does, with its explicit unsafe boundary, efforts to minimize the ricks even across this boundary, and the formal analysis.  And other higher level langauges abandond you the moment you need FFI or asm.  This extra care enabled some things like [Fearless Concurrency](https://doc.rust-lang.org/book/ch16-00-concurrency.html#fearless-concurrency)."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.9206348,
      "arousal": 60.0226758,
      "dominance": 58.0952382,
      "text": "> I'm coming from Java and Python world mostly\n\nThose are very old languages. I think the biggest thing for Rust is it tried to break as little new ground as possible. It's pretty much resulted in only the uniquely \"Rust\" part of the language have hard edges or questionable decisions (async and the borrow checker)."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Java list works that way for backwards compatibility.  That way you can still use old code that didn't know about immutable lists as long as you don't try to add things...\n\nSo it is still well designed but there are just tradeoffs depending on your requirements."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.154951,
      "arousal": 57.936508,
      "dominance": 60.48122955555555,
      "text": "I think the easy answer is \"because it is\".\n\nIn fairness, Java is from 1995 and Python from 1991, language designers have learned a lot in that time.\n\nAlso in fairness in particular to Java, even right now in 2025, I prefer Rust, but for many tasks Java may still be a more sensible choice.\n\nRust I think had a perfect storm of a very good design team and being in the right place at the right time. Plenty of good languages fail through no fault of their own."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.49969072727272,
      "arousal": 61.29663990909091,
      "dominance": 69.06823336363637,
      "text": "I agree. To be fair, I have to admit I'm not able to really deal with and deeply understand the complexity of the language. It requires another class of brain I don't have. Maybe I had it 25 years ago, but not anymore.\n\nNonetheless, just learning the basics - not easy as in other languages but definitely doable - is enough to start writing useful code and be productive. It's a very complex language but that complexity hits you only when it is necessary. This is a great accomplishment to be credited to the authors. \n\nWhat really struck me at the beginning of my journey with Rust is how much the compiler is willing to do to help me. We all know how good and useful error messages are. And its ability to infer types, and thus how many types declaration can be omitted, is outstanding, making not uncommon that some portions of code look like... almost Python. Wow. I can't imagine the effort it takes to add features like these to the compiler. But it definitely pays off.\n\nThe concept of edition is a great design feature to avoid the Python 2 to 3 mess. Learn from the mistakes of others.\n\nMy only (silly!) complaints are the trailing semicolons and the && || logical operators. I don't think I'm entitled to make higher order objections to Rust.\n\nI know not everything is perfect, but there's clearly a lot of thoughts before making decisions. My deepest respect to Rust's designers and developers."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.3424035,
      "arousal": 55.3287985,
      "dominance": 58.58843525,
      "text": "I mean humans have only ever learned something through trial and error. So, newer stuff can benefit from learning from older mistakes meaning less bandages. \n\nAdd in that often something is well designed for one task and maybe less so for others. I can probably hammer in a nail with the back end of a screwdriver. But that doesn't mean the screwdriver is a better tool than a hammer. I do think Rust is pretty well designed as a multitool that can do most everything really well and as such if I could only know one language, Rust may well be it. But I am sure some languages have advantages in specific use cases over Rust."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.362811875,
      "arousal": 59.84977325,
      "dominance": 60.87018125,
      "text": "The biggest win is really the order of how things get written in Rust now matches the hardware expectations, by this we mean the order of winding on and off the stack in general and concurrency being a front of house thought rather than a well go fix that later or we’ll have OS provide services.\n\nInstead of having the compiler try and optimise all the time, Rust enforces these better behaviours which makes it pretty unique and is the key reason it out performs in most cases, more stack vs heap use means not only faster execution but long term stability, no fragmentation and (shudder) zero garbage collection needed ever\n\nIt’s a great a design since inception "
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.099017,
      "arousal": 63.340891666666664,
      "dominance": 54.383976,
      "text": "I beg to differ. While were are parts which are well designed, others are entirely braindead. Just looking at filepaths in rust and comparing that with the python pathlib, I know which of the two is better designed. On the other hand, python needed like 3 iterations to get there. "
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I also recently found out that Rust didn't start out with the ownership model right from the start! \n\nInteresting journey 😂"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Java's nearly 30 years old. Back then, hardware was different. Software was different."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Something a lot of people haven’t mentioned here is the edition system, it’s a way of guaranteeing both backwards compatibility and forward evolution of the language. It was basically effortless to adopt async await, which would have taken a major version bump in any other language."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Comes later, learn mistakes from others and do not have to deal with compatible."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.117914,
      "arousal": 49.206349,
      "dominance": 60.31746,
      "text": "I can tell you as a long term Rust user that eventually you'll see quite a few cracks in Rust's design.\n\nHowever, recently having had the experience of seeing TypeScript again briefly, I once again became thankful for how principled Rust is, and rhat it usually does the correct thing by default.\n\n(My ideals are that of simplicity and being able to understand the whole system, down to the CPU)"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The java list interface problem that you mentioned is just a library design quirk and problem isn’t in the language itself."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Took the good and discarded the bad of 60 years of programming"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Java is quite old and based on a fad paradigm of the time (strict OOP) that they've loosened over the years. And as others said, many other langs are dealing with legacy stuff that Rust isn't."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "These posts are so masturbatory"
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.45691625,
      "arousal": 64.824263,
      "dominance": 58.53174625,
      "text": "a primary design goal is robustness and consistency almost everywhere. it adopts things from functional languages developed by math nerds for math nerds, so the logic is usually pretty solid.\n\nit's also pretty recent, so it has a head start in fixing design issues with older languages.\n\nmost importantly, this head start will not last forever. rust is not perfect either. ask the async guys. ask anyone who's ever tried to make a self referential type. check https://without.boats/. there are some things that could be cleaned up, and some things that will likely never be cleaned up simply because too many things depend on them staying the same. we can't predict the future, and yet we want to guarantee backwards compatibility. some things will look good now but bad later.\n\nstill, it's a whole hell of a lot better than... javascript."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.461966636363634,
      "arousal": 59.26613054545454,
      "dominance": 56.16367754545454,
      "text": "It's not perfect! There's many rough edges, especially the syntax. This is partly because it was designed by a bunch of C++ programmers that were very used to repeating themselves. (In C/C++ you typically write every definition twice, once in a .h file and once in a .c(pp) file.)\n\nAs an example, take any simple struct type that implements some traits. You'll have to repeat the name of the struct at least a dozen times, often with variations like \"Self\", but it's not even consistent!\n\nJava and C# nest methods inside their type definition so that you don't have to repeatedly type the enclosing type name over and over. Similarly, the usage of \"this\" is much more consistent than self is in Rust.\n\nThe other fun landmine is shadowing of variables, which is an insane feature that *will* be used by a nation state to hack someone. This \"but it's so convenient!\" feature allows a variable 'x' to be shadowed three pages of code later by another variable 'x' with a different type *in the same scope*.\n\nIt's insane to me that in a strongly typed language this compiles and works: https://godbolt.org/z/1naxYnYoK\n\nThis is a hacker's wet dream. Like the 'xz tools' attack, someone could sneak in code into open source repositories that at first glance and *even careful reading* would look innocent, because humans are physically unable to track hundreds of identifiers and their changes in their brain across a huge block of code. Compilers can, sure, but *humans can't*. That's why most languages don't allow this, it's a trap for squish meat brains.\n\nI confused *myself* several times with this issue in just *one* page of code, each time losing about a day to trying to figure out why I was getting unexpected behavior from code that superficially looked okay. If someone *malicious* does this in a multi-page function, there's no chance it'll be caught by even a careful PR review process."
    },
    {
      "post_title": "Why does Rust feel so well designed?",
      "created_utc": 1751389421.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.18496914285714,
      "arousal": 56.494979,
      "dominance": 59.75056671428571,
      "text": "I'm an Elixir dev (at work and in my own time) and I've recently been going through Hands On Rust from PragProg and some other resources. Sick of low level being a black box. Rust feels very natural to write and I'm having a lot of fun. Not sure why people complain about verbosity, for me it feels quite natural, even with the added overhead of a type system."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "What's the most controversial rust opinion you strongly believe in?"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "selftext",
      "sentiment": "negative",
      "pleasure": 47.78101728571429,
      "arousal": 66.569485,
      "dominance": 51.360544142857144,
      "text": "Mine are:\n * Panic on allocation failure was a mistake. Even with overcommit / OOM Killer.\n * Tokio shouldn't be the default. Most of the time threads are good enough, you don't overcomplicate and need everything to be Send / Sync.\n\nInspired by https://www.reddit.com/r/webdev/s/lunf00IwmB"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Compilation time is fine."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 33.2879818,
      "arousal": 65.3741498,
      "dominance": 42.5170066,
      "text": "> Panic on allocation failure was a mistake. Even with overcommit / OOM Killer\n\nthe second part doesn't really make sense? With overcommit, allocation failures are not a thing, you just randomly get killed by the OS."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.181406,
      "arousal": 55.7539685,
      "dominance": 48.01587275,
      "text": "Agree with both your points, Luckily, Tokio is working on LocalRuntime  \n[https://docs.rs/tokio/latest/tokio/runtime/struct.LocalRuntime.html](https://docs.rs/tokio/latest/tokio/runtime/struct.LocalRuntime.html)\n\nFor Panic on allocation failure There are new APIs for this as well with the Allocator trait.  \n[https://doc.rust-lang.org/std/boxed/struct.Box.html#method.try\\_new](https://doc.rust-lang.org/std/boxed/struct.Box.html#method.try_new)\n\nHopefully both these features land soon"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "async / await isn’t complicated, it just needs a complete understanding of types in Rust."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Single threaded code is often better than multithreaded.\n\nStructs should have associated types `struct X { type Y = ...; }` so we can write X::Y.\n\nUnwindSafe should be removed."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.789116,
      "arousal": 56.689342,
      "dominance": 62.018141,
      "text": "The bar for rustfmt stabilizing new features is way too high :/ I’d tolerate a ~monthly adjustment in formatting adjustment/fixes if it meant I get features when they are 95% perfect, rather than being stalled indefinitely."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.03628133333333,
      "arousal": 57.256236,
      "dominance": 65.11715766666667,
      "text": "cloning to avoid borrow checker complaints is, in most cases, perfectly fine\n\nedit - too short, didn't understand:\n\nthis advice isnt *intended* to scale\n\nwhat i'm saying is that getting to a baseline level of productivity quickly is critical to staying excited about learning rust. \n\nforcing yourself to wrestle with the borrow checker without a deliberate reason other than \"cloning bad\" is, from what i can tell, very discouraging to people learning rust \n\n\ni'm not saying don't learn rust and just clone everything forever.\n\nit's just about getting to the point where you can actually *build something*. \n\n*then* worry about performance, if it matters. \n\ni read [a blog post](https://blog.sdf.com/p/fast-development-in-rust-part-one) from a company that removed all their clones from their codebase and saw basically no performance improvement.\n\ni only bring this up to illustrate that it's not a foregone conclusion that cloning has significant performance costs. and if you're even in a position to seriously address the performance cost of clone, you probably already understand lifetimes well enough to do it right anyway"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "The compiler isn't really that slow"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Deref based polymorphism (I.e. having deeply nested structs organised in layers where each layer derefs to the next inner layer) is fine. I use https://docs.rs/shrinkwraprs/latest/shrinkwraprs/ on most the structs in my current project 😅.\n\nIt avoids a lot of borrow errors since you can split off the minimum necessary layer to mutate, and it allows you to build up the final object gradually in a complex processing pipeline."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pin shouldn’t’ve been a std lib type.  It should’ve been a keyword"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.573696000000005,
      "arousal": 57.70975059999999,
      "dominance": 61.111110999999994,
      "text": "# The Rust toolchain needs a better portability story. \n\n\nBeing able to compile itself to WASM or using the Cranelift backend in such as way as to only require a working Rust cross toolchain and standard library to cross-compile it would help a lot in that regard.\n\nI'm working on an OS written in Rust and inspired by it in many ways. It is very much not Unix-like at all. And figuring out the exact list of things I need to do to get the toolchain to run on such a new OS has not been easy. \n\nMeanwhile, even though it's stuck in development hell Zig's toolchain is much easier to bootstrap. Clang is much the same; all you need is a C++ standard library and the LLVM support library ported and cross compiled and you magically have a working clang running on the new target.\n\nWhile LLVM is a very amazing project that I appreciate greatly, having the option to build a Rust toolchain written entirely in Rust alone would go a long way to helping with this particular problem. It would make getting a target from tier 1 to tier 1 with host tools a lot easier."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "It isn't any more difficult or complicated than any other language. The hard parts of Rust like lifetimes and borrowing checking exist in every programming language, Rust forces you to confront that complexity and encode your solution in code."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.821428625,
      "arousal": 57.695578250000004,
      "dominance": 56.618480625000004,
      "text": "`cargo` being better than other static compilation build orchestration tools is very **VERY** low bar and it is one of the bigger things holding back `rust`.\n\nA lot of people are impressed that it _actually works_ but it has so many problems, edge cases, and barely supported features:\n\n* `build.rs` total magic and why am I using a statically compiled language to do scripting?\n* Also `println!(\"cargo:${compile_arg}` is wild indictment of the system if you think about it, why isn't there a visitor trait or return type?\n* `workspace` are barely supported but a key part of 'growing' a crate\n* conditional features are nightmare\n* it can't dump a build plan\n* `Cargo.toml` can't be templated, which makes the `[link]` section really hard to use cross platform.\n* `[env]` _sort of_ exists only in a really cursed weird way, can't do platform specification stuff. \n* it can't integrate with other tools"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust needs volatile primitives."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 34.580499,
      "arousal": 63.151927,
      "dominance": 43.99093,
      "text": "build.rs is a gaping security risk and a problem waiting to happen which will cause huge reputational damage to the rust project."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Many production use cases in web and enterprise are (currently) better served by frameworks in Java, C#, Python, etc.\n\nI am fervently pro-Rust but I am also pragmatic."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 47.675737,
      "arousal": 53.45805,
      "dominance": 51.1337865,
      "text": "Default features were a design mistake. That includes std being on by default (and also the name std is misleading, the real std is core)."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 35.37415,
      "arousal": 79.591837,
      "dominance": 36.281179,
      "text": "Recoverable `panic` should never have been allowed into the language."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "That Rust is an easy language for beginners who aren't held back by the mental model of previous languages"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.526833,
      "arousal": 58.654573,
      "dominance": 57.974301,
      "text": "Standard library should have been broken up and versioned. I'm not using standard HashMaps, Btrees, Mutexes or Channels but we are stuck with a decade old implementation or API forever. Can't even easily compile them out to save space."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.29138325,
      "arousal": 60.9977325,
      "dominance": 64.370748,
      "text": "The only reason 90% of people write Rust is because there’s not an ergonomic garbage collected language with type inference, algebraic data types, good tooling, comprehensive ecosystem, and a friendly community."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I'v got a spicy one: \n\nDrops *should* be guaranteed to run, `std::mem::forget` should have stayed unsafe.  There are so many designs & great abstractions this would enable....\n\nI strongly believe that the right solution to the [leakacopaylpse](https://cglab.ca/~abeinges/blah/everyone-poops/#leakpocalypse) would be removing Arc and Rc until the problem of cycles is solved.\n\nI dislike Arc and Rc. I don't use them, and I believe them to be code smell. In most scenarios, if your code \"needs\" Arc or Rc, you just need to rewrite it. \n\nStill, what is done is done. The decisions about `forget` were made before my time. I was 10 then, so I had little impact on the Rust decision-making process :D.\n\nNow, I just gotta live with this."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.900227,
      "arousal": 64.4557825,
      "dominance": 71.14512450000001,
      "text": "in most cases, people who say that rust isn't a good language do so because they are bad developers who can not properly understand it or the benefits it brings."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust jobs are real"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Link to [read this thread sorted by controversial](https://www.reddit.com/r/rust/comments/1l9xk90/whats_the_most_controversial_rust_opinion_you/?sort=controversial)"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.41723366666666,
      "arousal": 68.17838233333333,
      "dominance": 72.78911566666666,
      "text": "`impl Trait` in parameters is unnecessary sugar that doesn't bring much and shouldn't have been added to the language. It obfuscates the fact that the function is generic, when doing a quick glance. It's [less powerful](https://www.reddit.com/r/rust/comments/v8whtz/why_use_generic_parameter_instead_of_impl/ibue7zj/) than generics, and switching to \"full\" generics when you need them is a breaking change."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 65.079365,
      "dominance": 76.417234,
      "text": "Rust won. C-nile screeching is just sounds of titanic sinking. I work with c++ every day, the only things it offers over rust (that i want) is pimpl and friend.\n\nEverything else is like exchanging a cart for a flying saucer."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.72562359999999,
      "arousal": 61.2018142,
      "dominance": 68.9342402,
      "text": "It's hard to pick just one, but here's one:\n\n* Efforts to make the language more \"beginner friendly\" have actively made the language worse while not making it even the slightest bit easier for a \"beginner\" to learn. I'm thinking especially of the `impl Trait` in argument position syntax as the worst offender.\n\nIf your language is good, it will attract people. If they are unable or unwilling to figure it out, oh well. \n\nOf course I'm not against making the language better or easier or more ergonomic, *in general*. I'm just saying that making the language syntax *less consistent* or more redundant for the sole purpose of appealing to newbies in their first hour of learning that language is not the right move..."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.74225266666667,
      "arousal": 72.03325766666667,
      "dominance": 55.32879833333334,
      "text": "Panic on allocation - seriously how many times have you seen this in your life? In what environment is this actually a concern? Don't tell me embedded because. I've been an embedded developer for 10 years and seen that to be a problem maybe once.\n\nThat was a problem like 40 years ago.\n\nYou are exaggerating problems that simply do not occur in real life."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.7278912,
      "arousal": 65.7029479,
      "dominance": 60.1927438,
      "text": "I hate Cargo. I think it's nice that it exists, but boy is it poorly designed in many ways. Any non-trivial Rust usage will require spending a *lot* of time dealing with Cargo.\n\nI hate TOML. It's such a miserable format for anything nested, and Cargo needs that feature *a lot*.\n\nI hate crates.io. Not having namespaces was such a terrible idea. We already have people hogging all the good names, and this should have been easily foreseen, as PyPI has had this problem from the start. Also don't get me started on underscores vs. hyphens for crate names! Seriously, don't poke the bear. ;)"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "build.rs is not such a great idea."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "    let my_string: String = \"Hello\";\n\nShould coerce the literal and compile just fine."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 30.952381,
      "arousal": 73.015873,
      "dominance": 54.988662,
      "text": "Rust would be better if the community was less hostile to the GPL."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.18745283333333,
      "arousal": 51.41723366666667,
      "dominance": 52.36205583333333,
      "text": "We should've never come to a point where the average project uses 200 dependencies or more to do anything meaningful, and where big projects like zed can have more than 2000 dependencies while doing both the windowing and rendering from scratch. It's insane.\n\nTo clarify, I'm not just talking about the number of dependencies, but about the fact that each of them are a crate, in wide majority with a much wider goal than your project has, making it contain additional abstractions that pertain to cases you don't care about much more often than ones where you do.\n\nWith that level of granularity, the amount of code you end up compiling is insanely higher than it should've been. For example, if you run `cargo vendor` on winit and run `tokei vendor` to check how many lines of Rust code there are in there, it's gonna come to **4,273,179** LOC (**3,424,174** without counting blanks). Now to be fair, most of these lines actually come from bindgen crates:\n\n    13467    vendor/objc2-0.5.2\n    13738    vendor/objc2-metal\n    16615    vendor/objc2-core-graphics\n    16818    vendor/objc2\n    24717    vendor/x11rb\n    30978    vendor/objc2-core-foundation\n    44599    vendor/rustix-0.38.44\n    46643    vendor/objc2-foundation-0.2.2\n    48089    vendor/rustix\n    53485    vendor/objc2-foundation\n    79996    vendor/objc2-app-kit\n    81105    vendor/objc2-ui-kit\n    104443    vendor/ndk-sys\n    110098    vendor/libc\n    130057    vendor/x11rb-protocol\n    176630    vendor/winapi\n    195823    vendor/web-sys\n    286899    vendor/windows-sys\n    329641    vendor/linux-raw-sys-0.4.15\n    366473    vendor/linux-raw-sys\n    487675    vendor/windows-sys-0.45.0\n\nAll of these sum up to 2,657,989 LOC, which is, funnily enough, only **62%** of the vendors. Which means that winit is still compiling **1,615,190** lines of code outside of bindgen crates. No, it should really not be that high even for winit. (Also note that some of these are duplicated to hell.)\n\nThe one example I always give for a big project that doesn't have this problem is [raddebugger](https://github.com/EpicGamesExt/raddebugger), made from scratch, including windowing and graphics, and now compiles on Linux too (though nothing works in the debugger, only the interface works). Last time I checked the project was about 100k lines of C, which is a 16th of the non-bindgen code that winit depends on, and it's _an entire debugger_. And the whole project compiles in under 5 seconds on my machine with a single translation unit.\n\nSeriously, I think we can do better than this. Dependencies should have a much bigger granularity so that these problems don't get this bad."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 39.047619100000006,
      "arousal": 62.8684808,
      "dominance": 43.786848,
      "text": "> Panic on allocation failure was a mistake. Even with overcommit / OOM Killer. \n\nI sound like a broken clock since I have to repeat it each time someone mention it, but on OSX they use RAM compression. Which means that `my_vec.sort()` may change the bit patterns and thus their compression level, and thus request a new page allocation. You **cannot** have anything but panic on page allocation if you want to be able to target current and futur OS. Otherwise **every** operation that does a write need to be able to report an allocation failure.\n\nThat being said having a non-panicking `alloc` would be very nice for non-std targets."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`extern \"C\"` shouldn't be the syntax to use the C calling convention. In C++, the language that invented it, it just means `#[unsafe(no_mangle)]`, which is naturally related but also entirely orthogonal. Directly reusing syntax but not having it mean the same thing is not very graceful."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust should have a formatter that doesn't split/combine lines based on length. Visual Studio's C# formatter works like that, and I believe gofmt too."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.01814066666666,
      "arousal": 64.32350699999999,
      "dominance": 58.616780000000006,
      "text": "- Comptime is dead and I know who killed it\n- Namespacing on crates.io is a good idea. Amazon can't protect all aws-* crate names, but but they can protect @aws as a namespace.\n\nI know this comment is late...just like comptime. "
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 63.378685,
      "dominance": 67.30914566666667,
      "text": "If people read the Tokio introductory docs carefully, your second opinion SHOULDN'T be controversial (but it probably is)! They tell you right out the main usecase is supposed to be when you have to deal with many instances of i/o. They don't particularly recommend using it for data parallelization or concurrently pipelined algorithms. I do think that many people could profitably use channels more often than async or Arc, I think using Rayon for parallel processing large datasets seems like the popular suggestion?"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Arrays should be indexable with any integer type, not just `usize`."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust compiles faster than C++."
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "* Enum variants should be types\n* Placement new should get another chance"
    },
    {
      "post_title": "What's the most controversial rust opinion you strongly believe in?",
      "created_utc": 1749761470.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Macros are super poorly documented and near impossible to learn how to use. Like why do I need to have two separate crates just to `#[derive()]` my own Trait?\n\nAlso, important features and upgrades should be moved from nightly to stable much more quickly."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\""
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.7868482,
      "arousal": 54.8526078,
      "dominance": 63.061224200000005,
      "text": "Hellwig is 30% of major \"this person can't work with other people well\" issues I see show up on the mailing list.\n\nPeople try to always pin it on the other person in the thread because Hellwig is a \"venerable\" maintainer. Nah he's an a-hole. \n\nHe's just better at hiding behind his commit history on the mailing list about it."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.68329566666667,
      "arousal": 61.14890433333334,
      "dominance": 54.08163233333334,
      "text": "An alarming number of people in this thread downplaying this as 'not sabotage' who have never interacted with this subreddit meaningfully before.\n\nA linux maintainer actively is opposing efforts to add code in a part of the codebase they are not responsible for, that adds commonly used abstractions needed by rust drivers that would otherwise need to be repeated in every single rust driver. He would not be responsible, nor need to maintain the code, but is opposing it on the basis of multi-language support in the kernel being a 'cancer'.\n\nIt doesn't take not being charitable to read this as active sabotage."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.88284166666666,
      "arousal": 69.312169,
      "dominance": 76.41723366666668,
      "text": "\"I think seatbelts are a great idea, but I just don't want one in my car. I already know how to fix my car, and I don't understand how seatbelts work\""
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.770975,
      "arousal": 69.16099766666667,
      "dominance": 64.39909300000001,
      "text": "It is worth following the links to discussion. It is absolutely clear that the OP is correct that CH is trying to kill R4L. \n\n> Every additional bit that the another language creeps in drastically reduces the maintainability of the kernel as an integrated project.  The only reason Linux managed to survive so long is by not having internal boundaries, and adding another language complely breaks this.\n> You might not like my answer, but I will do everything I can do to stop this.  This is NOT because I hate Rust. While not my favourite language it’s definitively one of the best new\nones and I encourage people to use it for new projects where it fits.\n> I do not want it anywhere near a huge C code base that I need to maintain."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is this the same guy again?"
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.85034040000001,
      "arousal": 58.3446714,
      "dominance": 61.3151928,
      "text": "I understand the sentiment behind not wanting to complicate linux with more than one language, but the method he decided to use to prevent rust integration is purely selfish and inconsiderate towards other people's views on the topic. It makes it seem like he sees his own opinions on the issue as fact and has taken it upon himself to enforce said \"fact.\" Some of the wording he uses also makes it look as though he views Linux as his personal duty to maintain, which is pretty weird IMO."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.35978833333333,
      "arousal": 69.23658366666668,
      "dominance": 73.280423,
      "text": "So, I would love to be a positive voice in the Linux kernel, and help out with Rust for Linux. I have a lot of low level C and low level Rust experience, and can definitely see myself contributing to the kernel...if it wasnt for the archaeic way that they operate. Ive found the mailing lists to be really unapproachable. How do I quickly get up to speed on what needs doing and where I can fit in? Do I just sit on a mailing list until I see a conversation that I can chime in on? How does issue tracking occur? Do they have chat rooms for live communication?\n\nLike, what's the onboarding process for new contributors? Do they even have one? I'm so used to github/gitlab/atlassian based workflows that I cant even really fathom where to begin here. \n\nPeople aside, the Linux project doesnt feel very approachable from a project onboarding perspective. Anyone have any insight here? I think the only way to get around these mindsets is to get more like-minded people on the project."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.344671,
      "arousal": 60.657596500000004,
      "dominance": 67.403628,
      "text": "This post by Hector Martin is completely overkill. We should not be talking about using the code of conduct to remove people from contributing to the Linux kernel. This post is not at all helpful.\n\nBut reading the mailing list, it seems like none of the reasons for rejecting the code were valid. No one is trying to modify the DMA C code at all. Someone is simply trying to commit a light rust wrapper on top of the C API, and this dude is blocking it for no reason other than he doesn’t like rust.  This is outside the role of a maintainer.  Seems like a simple open and shut case for an adult in the room."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.62585033333333,
      "arousal": 65.23053666666667,
      "dominance": 60.99773233333334,
      "text": "People do hate change. It's human nature"
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.001512,
      "arousal": 60.54421766666667,
      "dominance": 66.06198,
      "text": "Wow, the mailing thread was unlike anything I have ever seen. \n\nIt seems people generally don't talk like this in face to face conversations. In a mailing thread, the response rate is so low, that tensions builds up quickly."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.37674128571428,
      "arousal": 64.01036614285714,
      "dominance": 56.00907014285714,
      "text": "Here are the quotes from the so-called saboteur:\n\n[1.](https://lwn.net/ml/all/20250131075751.GA16720@lst.de/)\n\n>Which doesn't help me a bit.  Every additional bit that the another language creeps in drastically reduces the maintainability of the kernel as an integrated project.  The only reason Linux managed to survive so long is by not having internal boundaries, and adding another language complely breaks this.  You might not like my answer, but I will do everything I can do to stop this.  This is NOT because I hate Rust. While not my favourite language it's definitively one of the best new ones and I encourage people to use it for new projects where it fits. I do not want it anywhere near a huge C code base that I need to maintain.\n\n[2.](https://lore.kernel.org/lkml/20250128092334.GA28548@lst.de/)\n\n>And I also do not want another maintainer.  If you want to make Linux impossible to maintain due to a cross-language codebase do that in your driver so that you have to do it instead of spreading this cancer to core subsystems.  (where this cancer explicitly is a cross-language codebase and not rust itself, just to escape the flameware brigade).\n\nCan someone please point out where this person openly admits to attempting sabotage? This just seems like a simple case of, \"it's too difficult to try to work across language barriers\". Like isn't that a genuine concern? Does it not genuinely create an artificial boundary?\n\nHector is misrepresenting this person IMO. It feels wrong to put them on blast for this. Just because we don't share the same concerns as them doesn't make theirs less valid.\n\nedit: Formatting"
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Gatekeeping and blanket judgements like these are why I got out of open source."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.8956915,
      "arousal": 60.600907,
      "dominance": 69.557823,
      "text": "I love rust, but this isn't sabotage. He is fully within his rights to be vocal about him not wanting to make the Linux kernel polyglot.\n\nHe is openly doing his best to keep the Linux kernel easier to maintain from his point of view. Now he might be wrong, but starting name-calling and trying to start drama about this isn't the way.\n\nThe correct way is to get a consensus about the way forward with clear rules, those that cannot follow those agreed upon rules should step away from maintaining the kernel, or work to try to change those rules by openly voicing their concerns in an objective way."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "When everything is in language \"A\", adding language \"B\" causes a lot of friction.  He's openly staunchly against that, which is a valid stance to have, IMOHO.  But I've only been coding since 1979 so what do I know."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'd like to have more rust in Linux. But behold's pov is understandable... Even if I probably disagree with the way he kinda impose it in kernel..."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.47996966666667,
      "dominance": 60.58201066666667,
      "text": "In the long run, if done properly, a language like Rust _will_ reduce the amount of mistakes being made (and they are being made, even by the best, because C is C). Whether one maintainer is openly against it or not does not change this simply fact. I hope we don't spend the next 50 years building on foundations as brittle as huge complex projects written in C. No thank you, the world deserves a better technological foundation than that."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.2947848,
      "arousal": 64.39909300000001,
      "dominance": 58.5487528,
      "text": "these people are begging to be removed from their roles as maintainers literally doing scorched earth tactics.\n\nno regard to the code or the project just operating out of pure spite, unrelated but this is how conservatives operate in all aspect of life they hold everyone hostage to their mania.\n\nthis level of psychotic behaviour must not be rewarded I hope they get the boot soon"
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.95108528571429,
      "arousal": 57.07806942857143,
      "dominance": 64.39909285714286,
      "text": "Based on the fact that the current and sole maintainer of the Linux Kernel DMA (for the past 15 years or so!?) is against adding additional language code that would make maintaining it more complex and difficult, does sound somewhat reasonable.\n\nBut it also exposes a different issue with the Kernel and the Kernel maintainers, which is the ownership that many of the maintainers feel about their part of the Kernel.\n\nAlso I guess as a maintainer over such a long time-span, you see developers come and go, and ideas and concepts come and go, and you are left to clean up and maintain those things, when they are gone.\n\nThe optimal solution would be to have more maintainers, and a change of those maintainers over time..\n\nBut would that work in reality?\n\nIf Kernel maintainer was a paid position, in a corporate setting, it could work, as it would be driven by forces other than dedication, but that is not the case.\n\nDedicated people tend to have strong opinions about their work - and that can be a very positive thing, but also a very negative thing at times.\n\nA more useful discussion would be how to solve this fundamental problem, instead of, trying to strongforce dedicated maintainers into leaving their project due to public shaming.\n\nThat could pave the way for some of those changes and progress that will help make the Kernel keep up with the times and new developments."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.312925,
      "arousal": 81.292517,
      "dominance": 62.92517,
      "text": "Nothing like the typical Linux maintainer experience than some angry nerd holding religious tech holy wars... I still laugh with Linus Torvalds compiler masturbation tidbit..."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.174603166666664,
      "arousal": 60.27966733333333,
      "dominance": 54.40287216666667,
      "text": "Honestly I think if people are so hyper focused on the adoption of Rust, they should be contributing patches to Redox. Leverage the enthusiasm by building a system from the ground up to use Rust in order to see the pain points first-hand rather then (and I'm wording this very poorly) demanding someone else deal with the pain points in another project because you want to see more rust adoption.\n\nIf your problem is wrapped around \"This is written in C, and I consider C unsafe\", then making the entire kernel a Rust kernel from the start is probably going to be more appealing to you then demanding a piecemeal replacement of subsystems when existing devs want to reduce their workload, not increase it.\n\nI don't actually care whether or not linux drivers are written in Rust, but I do think that attacking long time devs for being reluctant to rewrite significant parts of the codebase in a new language is a bit wrong.\n\nI assume Rust is a great choice of language for more system security and a great choice for rewriting codebases, but I'm not the one who ultimately deals with the consequences when my instincts are wrong."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.90605771428571,
      "arousal": 52.41334642857142,
      "dominance": 63.63783585714286,
      "text": "I don't really see anything to support saying \"this person is sabotaging R4L\". Hector seems to just be blowing smoke.\n\nThe only part of Cristoph's comments that concerns me is the hard stonewalling on introducing a new language. While introducing a second language to something like Linux is a \\*very\\* good concern, it should also take into account other's opinions and thoughts, rather than just be an authoritative \"no\". Especially since last things I've heard about the attempts circle around isolating the Rust code as best as possible.\n\nThere's also the concern about finding maintainers. The maintainers of the Fish shell noted that once they rewrote their code in Rust, they found more people willing to help maintain the codebase. In that regard, adding Rust could be beneficial towards keeping various parts of Linux running and maintained in the future."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.712018,
      "arousal": 55.7256235,
      "dominance": 64.9659865,
      "text": "Honestly I feel for the regular C code maintainers. As much as I love rust, it does feel a bit like a slow takeover that complicates the system with two languages."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "> Personally, I would consider this grounds for removal of Christoph from the Linux project on Code of Conduct violation grounds\n\nI strongly disagree with this. I don't think being wrong about the CoC is a big deal. (Being wrong is how we learn things. Maybe I'm the one who's wrong and I'm about to learn something.) But I think being wrong about the CoC *and* calling for someone's removal from a project is a big deal, worth publicly pushing back on."
    },
    {
      "post_title": "Hector Martin: \"Behold, a Linux maintainer openly admitting to attempting to sabotage the entire Rust for Linux project\"",
      "created_utc": 1738616119.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.1632655,
      "arousal": 40.8163265,
      "dominance": 55.612245,
      "text": "Christopher saying will \"stop this\" is not sabotage. He at least brings up maintainability concerns, but the argument for Rust seems to be because Rust is Rust? Arguing on the lkml and cc-ing Linus with unsubstantiated sabotage accusations and calling (either usage of C or the Linux project itself, who knows?) \"losing side of history\" is shameful.\n\nIt's posted here in the Rust sub, but this is a Linux issue first and foremost. Rust is trying to get its foot into a technical project that has greater goals than just propagating programming languages. As a Rust AND Linux user, this Hector guy isn't helping, come on."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The way Rust crates tend to have a single, huge error enum worries me"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 81.689342,
      "arousal": 69.4444445,
      "dominance": 69.6145125,
      "text": "Out of all the crates I've used, one pattern is incredibly common amongst them all: Having 1 giant error enum that all functions in the crate can return\n\nThis makes for an awkard situation: None of the functions in the crate can return every possible error variant. Say you have 40 possible variants, but each function can at most return like 10.\n\nOr when you have 1 top-level function that can indeed return each of the 40 variants, but then you use the same error enum for lower-level functions that simply cannot return all possible error types.\n\nThis makes it harder to handle errors for each function, as you have to `match` on variants that can never occur.\n\nAnd this isn't just what a couple crates do. This pattern is **very** common in the Rust ecosystem\n\nI personally think this is an anti-pattern and unfortunate that is has become the standard.\n\nWhat about if each function had a separate error enum. Functions calling other, lower-level functions could compose those smaller error enums with `#[error(transparent)]` into larger enums. This process can be repeated - No function returns an error enum with variants that can never occur.\n\nI think we should not sacrifice on type safety and API ergonomics because it would involve more boilerplate in order to satisfy this idea.\n\nWould like to hear your thoughts on this!\n\n\n\n\n"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.054422,
      "arousal": 50.566893,
      "dominance": 67.460317,
      "text": "I think this pattern is pernicious, yes. The language could use some kind of ergonomization so that it is easier to make invidual functions return individual error types.\n\nRelated: [https://felix-knorr.net/posts/2025-06-29-rust-error-handling.html](https://felix-knorr.net/posts/2025-06-29-rust-error-handling.html)"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.3265305,
      "arousal": 65.4761905,
      "dominance": 68.282313,
      "text": "A feature I'd love to see is some form of refinement types for enums, which I think would help this issue significantly.\n\nA concrete example of what I mean:\n```\nenum Error {\n  A,\n  B,\n  C,\n}\n\nfn do_thing() -> Result<(), Error::{A,B}> { ... }\n```\nI.e., this function can only return the `A` and `B` variants of the error enum. I'm also assuming that `Error::{A,B}` would be considered a subtype of `Error`, so I could have a trait that expects returning an `Error`, and I could return an `Error::{A}` from the method in the trait implementation.\n\nThat said, I agree that the pattern you described isn't great, but I don't think it's awful. Having an exhaustive list of error cases is super valuable, even if it contains extra \"junk\" you don't need to handle. \n\n> I think we should not sacrifice on type safety and API ergonomics because it would involve more boilerplate\n\nI think I agree with the idea you're trying to convey, but I'd argue that \"more boilerplate\" is in opposition to \"API ergonomics\" - i.e. an ergonomic API has less boilerplate.\n\nHere, type safety and ergonomics are in conflict, and we need to pick (until we have language features to bridge the gap). Rust is already a bit boilerplate-y, so I don't hate the decision to streamline things in exchange for a small amount of \"type-safety\""
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "Extremely strong agree, it really irritates me. It’s most annoying in crates like serde-json, where you’ve got a single error that encompasses both serialization and deserialization errors."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 71.4285715,
      "dominance": 64.62585,
      "text": "I guess I've been lucky enough to never have to deal with this myself, at least not that I've ever noticed. I definitely agree conceptually that more precise error enums are better, but as a devil's advocate, what use cases do they support? In most of my cases, all I can do is go \"welp, better clean up and log the error/propagate it to the caller,\" maybe intercepting a case if it's special in some way. I can see that a large error enum would make it tedious to exhaustively handle errors, but what are you trying to do that makes you want to do that?"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.2653065,
      "arousal": 52.72108849999999,
      "dominance": 54.5918365,
      "text": "There are many tradeoffs here. If you return a custom enum from each function that has only the errors that function can produce, that function is now constrained in its future evolution, because returning any new error is a breaking change. (Consider, for instance, if you have an abstraction over some underlying systems apis, different apis on different platforms, and you add a new backend. That new backend may have new errors it can produce in cases where other backends couldn't.)\n\n\nAlso, most of the time a caller of a library function shouldn't be handling every possible error case from a function it calls. It may have one or two specific errors that it knows how to handle, but for anything else, it probably wants to bail."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Even worse when all the errors are just Strings\n... I'm looking at you, ewebsock."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There is a crate called [error_set](https://crates.io/crates/error-set) that tries to help break up huge error enums. It allows one to can create smaller domain specific error enums and automatically coerce them to higher abstraction errors. Might be worth checking out."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is already a common pattern in Rust. You can define an error enum per crate, or per domain of functionality. You can also reuse error types from dependencies in those crates. In your main lib/bin crate, you define your big error and \\`impl From<SmallCrateError> for BigErrorEnum\\`. Then when you call your dependent functions with the small error types, the \\`?\\` automatically knows how to convert that to a \\`BigErrorEnum\\`."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Its mostly easier to work with that way, and it also helps with smaller binaries.\n\nFor example, `std::io::Error` is one of those gigantic enums you are talking about. But does it really make a difference if you were to use smaller error enums? Probably not"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.13227533333334,
      "arousal": 54.98866233333333,
      "dominance": 68.17838233333333,
      "text": "Check out [this discussion](https://github.com/BurntSushi/jiff/issues/8) for the decisions one crate chose around its error type. Although every crate is different (and this crate did not choose the pattern you describe), this discussion captures a good chunk of the landscape from the perspective of a crate author.\n\nI will say though, crates that have many different error types become a lot more difficult to use, especially when you don't want to take on additional dependencies just for error handling. I usually either want the one big set of enum variants you describe or literally one error as in the above link.\n\nAs a concrete example: the AWS SDK doesn't even get super specific, but each service (s3, ec2, ecs, etc.) gets its own error enum, basically. I usually write a lot of functions that just use `?` to return the error I encounter. That's easy if there's just one error type. But if my function happens to call across multiple services in the AWS SDK, this suddenly becomes a bigger hassle. Then what do I do? Again, my goal is just to bubble the error up to the caller, not create my own error, not to deal with it myself. Should I create an enum for every combination of service errors in every function? I can do that, but it's annoying for me and I think annoying for the user, especially if those combinations change over time, meaning my crate will have more breaking changes over error handling and that sucks.\n\nI don't think the AWS SDK necessarily should have done anything differently, but it's just an example of how multiple error types can get in the way of ergonomics."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 47.845805,
      "dominance": 58.61678,
      "text": "I'd recommend Snafu it, makes it a lot easier to make break your errors into domain specific types and share error types among different parent types:\n\nHere's how I handle errors in my project:  \n[https://gist.github.com/luca992/ad305d1e39fb9cfeae91bf997607654f](https://gist.github.com/luca992/ad305d1e39fb9cfeae91bf997607654f)\n\nYou can see \\`InvalidDataError\\` is shared between \\`ApiError\\` and \\`RepositoryError\\`\n\nThen when you want to transform an \\`InvalidDataError\\` in a function that returns \\`RepositoryError\\` you can just use the \\`.context(InvalidDataSnafu) \\` extension to map \\`InvalidDataError\\` -> \\`RepositoryError\\`.   \n  \nOr you can make \\`From<InvalidDataError>\\` for \\`ApiError\\` and \\`RepositoryError\\`  implementations if you want it to happen implicitly without having to use the \\`.context(InvalidDataSnafu) \\` extension."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Agreed.\n\nThe argument would be that a single error enum per crate is easier to maintain and makes for a simpler API. \n\nHowever, how about combining both approaches? Have each function return a narrower error that can be converted to the big error enum and give control back to the consumer of the API without inconveniencing them much if they just wanted to know that, say, reqwest returned an error, and included that in their own error enum that eventually got converted to a String anyway."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.23658350000001,
      "arousal": 52.626606333333335,
      "dominance": 65.04157216666667,
      "text": "I understand your concerns, but Rust is simply not setup in a way that makes maintaining hundreds of separate error sets remotely ergonomic, nor dealing with several functions that return different types of errors within a single function, or converting from one error type to an \"equivalent\" one without manually spelling out all conversions. You end up with pages upon pages upon pages of utterly unreadable boilerplate, and good luck ensuring anything at all is up to date once you start to make changes. In my opinion, that approach is *far* more problematic than \"big enum used widely where most users won't actually ever return most error types\", not to say the latter also isn't far from ideal. But at least it scales beyond tiny code bases, the \"risk level\" remaining more or less constant, whereas \"boilerplate explosion\" is only really at all viable for very small projects, IMO.\n\nMany ideas are being floated, but from my POV, the solution ultimately has to boil down to declaring each canonical error type *once*, somewhere, devoid of any context or groupings, then your error sets (ideally declared fully inline at function declarations, unless they will be used in multiple places) just list which canonical error types may occur in this specific context. Plus an easy way to indicate \"also include all errors from this other set\" that treats the added errors as first-class citizens no different from all the ones you explicitly listed out, rather than one inscrutable black box that requires special treatment."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.97203366666668,
      "arousal": 48.450491,
      "dominance": 63.038548666666664,
      "text": "https://crates.io/crates/error_set makes it easier to write better error enums, allowing composing them when it makes sense without incentivizing making a single huge enum if it doesn't.\n\n    error_set! {\n    /// The syntax below aggregates the referenced error variants\n    MediaError = DownloadError || BookParsingError;\n\n    /// Since all variants in [DownloadError] are in [MediaError], a\n    /// [DownloadError] can be turned into a [MediaError] with just `.into()` or `?`. \n    DownloadError = {\n        #[display(\"Easily add custom display messages\")]\n        InvalidUrl,\n        /// The `From` trait for `std::io::Error` will also be automatically derived\n        #[display(\"Display messages work just like the `format!` macro {0}\")]\n        IoError(std::io::Error),\n    };\n\n    /// Traits like `Debug`, `Display`, `Error`, and `From` are all automatically derived\n    #[derive(Clone)]\n    BookParsingError = { MissingBookDescription, } || BookSectionParsingError;\n\n    BookSectionParsingError = {\n        /// Inline structs are also supported\n        #[display(\"Display messages can also reference fields, like {field}\")]\n        MissingField {\n            field: String\n        },\n        NoContent,\n    };\n    }"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I 100% agree, I usually do function-specific error types"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.088435,
      "arousal": 62.9251705,
      "dominance": 71.7687075,
      "text": "I like how Roc handles this: sound static typing with anonymous sums. If large enums exist, they are implicitly inferred, rather than explicitly defined, so the compiler always OKs the minimal amount of error checking to make the check exhaustive and neatly lets you insert new variants or propagate ones you got.\n\nI imagine this might be hard for Rust though, and probably would go against some of the design philosophy of explicitness in everything."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.8480725,
      "arousal": 50.0,
      "dominance": 61.706349249999995,
      "text": "Another issue with the big enum is that it makes it hard to include metadata like `\"failed while doing foobar\"` context strings. Do you add a string field to every variant? Or can some variants include context while others can't? Do you wrap the whole thing in a struct? All of this is doable, it just feels awkward.\n\nI've found myself reaching for `anyhow` more and more, as soon as the error situation gets even slightly complicated."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use a hierarchical structure so most of my enums have a small number of variants. I like this pattern personally, it lets me go granular and define error enums per module."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The solution I have to this problem is to actually not use enum variants to represent errors. Instead, I have each error be its own struct, and functions return enums of those structs. With thiserror, the boilerplate isn't too bad, and the benefit is it's very clear how to do sub and supersets of errors."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well.. You're right 🤷‍♂️"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "what if you have a function that calls 2 functions from 2 different crates, but doesnt want to handle their errors?"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53287999999999,
      "arousal": 44.066515333333335,
      "dominance": 51.58730166666667,
      "text": "The defaulting to one Error type per module/crate is also something that has shocked me as a beginner coming from FP languages where I am used to create very specific and narrow Error DU types that only concerns the very specific function and whatever errors that specific function can return.\n\nI forgot where and when I came across it, but as a beginner I perceived it as it was recommended best practice to just mush everything into one Error type in Rust.. To me, it just seems lazy and very unsafe wrt long time code maintenance, plus it ruins the self documenting nature of such types."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.34693899999999,
      "arousal": 45.5782315,
      "dominance": 62.471655,
      "text": "TLDR; it’s easier for everyone involved to make a giant error enum in lib.rs\n\nWhen I started creating crates I would make an error module then separate the errors by “category”. I stopped doing this because there are functions that could have errors from multiple different “categories” and this would make returning Err on a Result less straightforward. Also, for the person using your crate, they would have to import multiple error types and know which ones belong to which function or method."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.78911575,
      "arousal": 58.24829925,
      "dominance": 61.50793675,
      "text": "I do think it's much better to compose a hierarchy of errors rather than having a single enum for the whole library.\n\nThe idea is that a \"higher level\" error is an enum of \"lower level\" errors.\n\nEach level doesn't have to be \"per function\", as you say, but could be per *class of functions*, which share certain expected behaviors.\n\nBut it gets tricky. You might need different compositions such that the same lower level errors appears multiple times in different places in the hierarchy.\n\nI use this_error to handle the composition, but there's definitely some copy-pasting going on when the same error appears again and again.\n\nI'm OK with this structure, I just wish it was all more ergonomic and more built-in so that libraries would be encouraged to follow this practice.\n\nIn practice many libraries just give up and use anyhow, which in my opinion is the worst solution because it deliberately avoids compile-time checking."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "This is not a real problem and the only reason to complain about this is mentally-ill levels of purism.\n\nSure its nice when invalid states are not representable, but sometimes the cost FAR outweighs the benefits and its not even close, as it is in this case. Other commenters have already pointed out the load of things wrong with smaller separated enums.\n\nThe only reason to have enumerated error types at all, instead of just strings, is when you want to handle some errors differently than others, for example when one is recoverable and another one is not. And in that scenario, you will ALWAYS know which errors to match for, because you know which errors are recoverable (or need to be handled differently in any other way). You will always have two groups of errors - ones that you want to handle explicitly, and \"the rest\". In a match statement, \"the rest\" will look like the wildcard match \\`\\_ => {}\\`. So what do you care that there are some errors that might not be returned from that function? They don't affect your code at all.\n\nThe only downside to the big error enums is that you might not know which errors a function might return, but that is better solved using documentation"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.73771733333332,
      "arousal": 76.00151166666667,
      "dominance": 67.34693866666667,
      "text": "Bit late to the party here, but I wholeheartedly agree with OP, and I'm surprised that I'm not seeing a lot of discourse mentioning \"local reasoning\" directly.\n\nThe ability to understand how to use a function safely and correctly without reading its internals comprehensively was always one of the main draws of Rust for me. Are you passing an immutable reference? If so, you know the referent can't be mutated. Etc.\n\nIMO, being clear about what errors can be returned is crucial in order to enable local reasoning. Rust feels much more like LEGO that way. With a god enum, we're sliding back to bad old habits from C and friends, where you're relying on documentation where you could have been relying on the type system, and you may be tempted to \"code defensively\" and match on irrelevant errors etc."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.05328800000001,
      "arousal": 52.04081625,
      "dominance": 63.63378675,
      "text": "I like String as an error type.\n\nWhen you return a Result in Rust, or when you throw an exception in languages that have them, you are returning a special kind of pseudo-value that is different from what the caller is ready to handle. As such, the caller shouldn't be unwrapping your error enum and making decisions about it. In the cases you want them to do that, the values should be in the Ok branch of your Result, not the Err side.\n\nWhat the value is useful for is a user trying to understand what happened. As such, return a string of it. It is the flexible way to explain to a human what happened.\n\nRelatedly, exception handling is best done close to the outermost loop of a program. For example, if an HTTP server generates an exception internally, it is best to propagate it out and return a 500 from the handler. Java tried checked exceptions, and it went badly, among other reasons because there is usually nothing to do except rethrow the exception, so catching it is juat a chance to do someyhing wrong, with no upside of possibly doing anything useful.\n\nThere are exceptions and nuances, for sure, but my go to approach in Rust is a String."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.86218194444445,
      "arousal": 49.77324272222222,
      "dominance": 60.56941283333333,
      "text": "Context-Generic Programming (CGP) offers a different approach for error handling in Rust, which is described here: https://patterns.contextgeneric.dev/error-handling.html.\n\nIn short, instead of hard-coding your code to return a concrete error type, you instead write code that is generic over a context that provides an *abstract* error type, and use *dependency injection* to require the context to handle a specific error for you.\n\nAs a demonstration, the simplest way you can write such generic code as follows:\n\n```rust\n#[blanket_trait]\npub trait DoFoo: CanRaiseError<std::io::Error> {\n    fn do_foo(&self) -> Result<(), Self::Error> {\n        let foo = std::fs::read(\"foo.txt\").map_err(Self::raise_error)?;\n\n        // do something\n\n        Ok(())\n    }\n}\n```\n\nIn the above example, instead of writing a bare `do_foo()` function, we write a `DoFoo` trait that is automatically implemented through the `#[blanket_trait]` macro. We also require the context, i.e. `Self`, to implement `CanRaiseError` for the error that may happen in our function, i.e. `std::io::Error`. The method `do_foo` returns an abstract `Self::Error`, of which the concrete error type will be decided by the context. With that, we can now call functions like `std::fs::read` inside our method, and use `.map_err(Self::raise_error)` to handle the error for us.\n\nBy decoupling the implementation from the context and the error, we can now use our `do_foo` method with any context of choice. For example, we can define an `App` context that uses `anyhow::Error` as the error type as follows:\n\n```rust\n#[cgp_context]\npub struct App;\n\ndelegate_components! {\n    AppComponents {\n        ErrorTypeProviderComponent:\n            UseAnyhowError,\n        ErrorRaiserComponent:\n            RaiseAnyhowError,\n    }\n}\n```\n\nWe just use `#[cgp_context]` to turn `App` into a CGP context, and wire it with `UseAnyhowError` and `RaiseAnyhowError` to handle the error using `anyhow::Error`. With that, we can instantiate `App` and call `do_foo` inside a function like main:\n\n```rust\nfn main() -> Result<(), anyhow::Error> {\n    let app = App;\n\n    app.do_foo()?;\n    // do other things\n\n    Ok(())\n}\n```\n\nThe main strength of CGP's error handling approach is that you can change the error handling strategy to anything that the application needs. For example, we can later change `App` to use a custom `AppError` type with `thiserror` as follows:\n\n\n```rust\n#[derive(Debug, Error)]\npub enum AppError {\n    #[error(\"I/O error\")]\n    Io(#[from] std::io::Error),\n}\n\ndelegate_components! {\n    AppComponents {\n        ErrorTypeProviderComponent:\n            UseType<AppError>,\n        ErrorRaiserComponent:\n            RaiseFrom,\n    }\n}\n```\n\nAnd now we have a new application that returns the custom `AppError`:\n\n```rust\nfn main() -> Result<(), AppError> {\n    let app = App;\n\n    app.do_foo()?;\n    // do other things\n\n    Ok(())\n}\n```\n\nThe two versions of `App` can even co-exist in separate crates. This means that our example function `do_foo` can now be used in any application, without being coupled with a specific error type.\n\nCGP also allows us to provide additional dependencies via the context, such as configuration, database connection, or even raising multiple errors. So you could also write the example `do_foo` function with many more dependencies, such as follows:\n\n```rust\n#[blanket_trait]\npub trait DoFoo: \n    HasConfig \n    + HasDatabase \n    + CanRaiseError<std::io::Error> \n    + CanRaiseError<serde_json::Error>\n{\n    fn do_foo(&self) -> Result<(), Self::Error> {\n        ...\n    }\n}\n```\n\nI hope you find this interesting, and do visit the [project website](https://contextgeneric.dev/) to learn more."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.14966,
      "arousal": 55.21542,
      "dominance": 44.444444,
      "text": "The real question is, why are you matching on errors from another crate to begin with? Unless you're certain you can catch and gracefully handle every possible type of error, perhaps it is better to juat pass along what the crate was complaining about? What you absolutely do not want to do is obfuscate the original error, replacing it with a generic and useless \"something went wrong\"."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I usually separate the errors by \"domain\" and just use from semantics to convert the errors from one type to another"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the best way to do it is to give every function its own enum"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "As we have this discussion here, I was recently searching a crate that I cannot find anymore – I just cannot remember the name. It was a proc macro you put on a function and it would generate the error enum needed for that function."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.637188,
      "arousal": 36.734694,
      "dominance": 59.637188,
      "text": "what's wrong with just using `_` for all the legs aren't relevant?\n\n    let result = do_something(input);\n\n    match result {\n        Ok(val) => {\n            println!(\"Operation succeeded: {}\", val);\n        }\n        Err(CustomErrorEnum::NotFound) => {\n            eprintln!(\"Error: item not found (input={})\", input);\n        }\n        Err(CustomErrorEnum::InvalidInput(msg)) => {\n            eprintln!(\"Error: invalid input: {}\", msg);\n        }\n        Err(CustomErrorEnum::PermissionDenied) => {\n            eprintln!(\"Error: permission denied for input {}\", input);\n        }\n        Err(CustomErrorEnum::IoError(err)) => {\n            eprintln!(\"IO error occurred: {}\", err);\n        },\n        _=>unreachable!()\n    }"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have a big Error enum for private functions, and separate Error enums for public ones. Implement the necessary Froms. Or use [https://crates.io/crates/subenum](https://crates.io/crates/subenum) to replicate this. If you try to do a subenum for every function, you'll go crazy. Just one subenum for private functions and then many ones for public ones.  Do that for now, I have crate cooking that you might like. Coming soon."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576000000001,
      "arousal": 59.0136055,
      "dominance": 62.8117915,
      "text": "> This makes it harder to handle errors for each function, as you have to match on variants that can never occur.\n\nThat's what default match conditions are for.\n\nRealistically, you should be writing `From` implementations for each crate's error type to *your* error type. It's ***trivial*** to pull out the error conditions you do actually care about and know how to handle in a `match` and throw up if you don't. Sure, it would be slightly better to create a new error type for each function, but IME it's really *not* worth the effort. I personally *like* the status quo quite a bit because *if* you follow it, you define your error transformations in one place and can use `?` pretty much everywhere, picking out locally recoverable conditions with your favorite pattern matching operation.\n\nI also really don't want to go digging around in docs or submodules so I can import the correct error type returned by a function. One import for one library is quite nice.\n\nOne thing I do to make this easier in many cases is implement `From<&str> for Error` / `From<String> for Erorr` and have an `Unknown(String)` (or `Internal(&'static str)`) error variants to make defining `grep`-able errors without tons of boilerplate when all that happens is the message gets propagated to the user or logged."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.55102,
      "arousal": 60.997732,
      "dominance": 48.29932,
      "text": "Runtime polymorphism sneaks it's ugly head in wherever it is allowed. That is why it must be constantly beaten down."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.14512450000001,
      "arousal": 62.698413,
      "dominance": 66.4965985,
      "text": "I'd suggest naming which crates have this problem especially bad so people can submit patches to fix it. It shouldn't be that hard to break up error enums into multiple types."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I tend to agree with you.  \nThat's why in Nutype every newtype gets its own error variant.   \nHowever, I was frequently asked to provide a one big single error type for everything, cause this would simplify error handling in some cases."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.840136,
      "arousal": 63.80385475,
      "dominance": 62.78344675,
      "text": "Well, I'm sold on migrating all my crates to [error\\_set](https://github.com/mcmah309/error_set).  \nI typically hate having to use macro machinery because of the lack of IDE/R-Analyzer checks, but I agree that the inability of the type-system to clarify possible errors is a real issue.  \n\nI played around with return impl bounds and faking unions as a simple workaround approach until issues piled up and boredom set in.    \n([playground link here](https://play.rust-lang.org/?version=stable&mode=debug&edition=2024&gist=c6ae364243fc2b53148129b218a15436) for anyone else that want's to jump on some scratch code around that -- one thing I discovered was that type aliases won't enforce trait constraints (\"bounds\") -- my main takeaway was that, 'yes, a macro-based approach would be needed' \\[short of an external program\\])\n\nThe inability to see what errors you actually have to handle has been a real issue in rust.  Not an end of the world issue, but something that would be quite nice.  We'll have to see about API stability -- but, not having yet implemented it, if the errors I can return change then I \\*like\\* the idea of that being represented in the types I export.  (We'll see!)"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.2698415,
      "arousal": 53.571428499999996,
      "dominance": 61.791382999999996,
      "text": "I’ve been thinking all about the rust type system of late - and this thought came up.\n\nI’d like to be able to return a subset of enums from a function. (I.e. one function returns enumX \\\\ enumX.variant is var1 var2 …) in a sense, if the contract of the function was a subset of enums, then I could match on a subset.\n\nI think it’s possible to take inspiration from dependent type theory. I am wondering if it’s possible to make this change feel like it’s truly a dependent type but relying on some other rust concept (like a meta program that expands those “dependent” match statements into the full statement but annotate unreachable!() on what it knows is truly impossible)"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.42517000000001,
      "arousal": 51.24716574999999,
      "dominance": 72.647392,
      "text": "On Easy ML I have tried to ensure any error types returned by a function are entirely possible error states and it means very few functions reuse error types, nothing impossible is represented in the error types returned. Easy ML is a very pure library where nearly all the errors are due to the caller so I don't even have to handle much of nested failures where a lower level API fails and then needs to fail in a higher level API and so on. Even with quite an easy domain, error types do get quite time consuming for me to write and document and any function which might need more error types for failures in the future has to use a non exhaustive enum anyway so the caller still wouldn't be able to exhaustively handle all error cases in those functions."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.19576733333334,
      "arousal": 50.907029666666666,
      "dominance": 61.715797333333335,
      "text": "It seldom happens that you need to match on every single error variant, you usually just need to check for a few and handle them accordingly. Having a single error enum that's part of your crate's api is crucial for allowing ergonomic use of the try operator (like how in thiserror you add #\\[from\\] for sqlx::Error on your Error type, but this has it's issues as you might be calling sqlx multiple times in your function and each one of them has a different context).   \n  \nIt's good practice to have that enum be non-exhaustive so that a user's code also handles new future variants and the library author can add variants without it being a breaking change.\n\nThe problem isn't so much the single public error enum, it's if that's the only error type in the entire crate (this is still fine if your crate isn't that big and still in the initial stages). If the same error type is returned by every single function in the crate, that enum will quickly balloon into like an unmanageable number of variants. There should be different error types, divided by the contexts in which they occur. You might have a few major modules in your code, and each one of them would have their own error types. The public error type will then have appropriate From or Source impls for them. This is the pattern that's promoted by the Snafu crate (https://docs.rs/snafu/latest/snafu/)"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If you have a use case that has a top-level error that combined lower-level sub-errors, you can either combine them using:\n- composition using [thiserror](https://crates.io/crates/thiserror)'s `#[error(transparent)]`; or\n- flattening into a single error enum with all variants using [flat_enum](https://crates.io/crates/flat_enum)"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.78798175,
      "arousal": 59.75056675,
      "dominance": 61.84807275,
      "text": "My \"giant error `enum`s\" are actually a hierarchical collection of smaller, more focused error `enums`.  As a library, usually, nothing returns the top-level enumeration—it serves as a catch-all for the convenience of the user of my library.\n\nTwo challenges with the top-level roll-up `Error` type:\n\ni) Consider marking it `#[non_exhaustive]` to avoid breaking your ysers as you add new sub-`Error`s.\n\nii) Each fallible function returns the lowest level error possible to maximize granularity.  Usually I only need two levels of hierarchy, but when there are more, the art of making multiple hops from a low-level `Error` to the top level is ugly/boilerplatey.\n\nBut usually, With `thiserror`, there’s a little boilerplate (like `pub type Result<T, E = Error> = core::result::Result<T, E>;`) but there’s not much—maybe 3 lines outside of the `Error` type itself.\n\nAs you suggest, this does neatly avoid having to deal with an `Error` type which only uses 1 out of 40 variants.\n\nThe sub-`Error` types can start out as 1 per function, but where there is commonality (e.g. `input_validation::Error`) I prefer to DRY my impl and define that `Error` type only once.\n\nOne can define the `Error` hierarchy under a crate-wide module or in a distributed, define-where-used strategy.  And depending on your use case, you may be able to elide defining the top-level wrapping `Error` type if `dyn Error` is feasible in your domain).\n\nSo short answer, yes, I agree that more granular `Error` types are good.  Rust is really flexible in letting us define how and where we want to define them."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is definitely an anti-pattern! \n\nWhat I do is have an [`error.rs`](http://error.rs) for each module (that it makes sense to have one in) and then use [derive\\_more::From](https://docs.rs/derive_more/latest/derive_more/derive.From.html) on the parent error and `#from` on it's sub-error variants. \n\nAs far as I can tell this is the cleanest way to do it."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "The question I haven't see answered is this :  \nIf one has very nested functions `f(g(h(i(j(x)))))`  \nand `j` returns an error, what type does f return, so that the error is easy to use?"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.457294,
      "arousal": 64.24792133333334,
      "dominance": 58.314436666666666,
      "text": "> I think we should not sacrifice on type safety and API ergonomics\n\nThere's nothing type-unsafe about either approach. As far as the type system is concerned, all that matters is indicating is whether your function is total or partial, and in the latter case preventing you from treating a failure as a success. Honestly, while I don't begrudge people who want to precisely handle every possible error branch in a unique way, as far as I'm concerned the error type is almost always just metadata to be logged and reported. I doubt I would bother precisely handling errors (or designing APIs with precise errors) even if there were some dedicated facility for anonymous enums, because just like the type system I really only care whether your function is partial or not."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Something something distinct enums anonymous unions"
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "In many cases, you do need to match the error type, because you just need to log or display it regardless of the error type. I just do something like format!(\"An error occurred: {}\", err ) and move on."
    },
    {
      "post_title": "The way Rust crates tend to have a single, huge error enum worries me",
      "created_utc": 1754058102.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.84126966666666,
      "arousal": 49.092970333333334,
      "dominance": 65.495087,
      "text": "Composition over inheritance? What are you, a fool? Everyone knows inheritance is the best way of handling polymorphism.\n\nBTW here's my great (unrelated) idea, sometimes you don't get an integer from some external source, sometimes you get a string representation of the integer, so to makes things easy and backwards compatible I will replace all u64 in my function signatures with my INT enum consisting of INT::N(u64) and INT::S(String). Yeah I'm only using u64s right now but what about in the future when I am too lazy to parse strings?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why doesn’t Rust have a proper GUI ecosystem yet?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Such a good language but no proper GUI ecosystem yet?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.49811033333333,
      "arousal": 59.334845333333334,
      "dominance": 61.829176,
      "text": "GUI is hard. A lot of people start a project, go about and write their own label and button implementations and think that they're nearly done.\n\nThen they try to tackle text fields and most of the time are never heard from again."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://areweguiyet.com/"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Quite a lot of GUI options for Rust, but we have to be realistic and know that Rust hasn't been around long, isn't commonly used, and a lot of people wanting GUI options can use webview stuff."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.72108800000001,
      "arousal": 61.734694000000005,
      "dominance": 71.8820865,
      "text": "Let's be real here, which of the \"newer\" languages does have a GUI ecosystem that is alive and well? The only thing I can think of are Swift because of Apple, and JS with Electron."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Slint and libcosmic are great"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There is Ratatui so we have the essential /s"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Shitty JS desktop apps have taken over. One of the many reasons of the sorry state of the average software product these days."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.9319725,
      "arousal": 40.929705,
      "dominance": 51.927437499999996,
      "text": "While javascript is slow and running webview is resource intensive, Tauri + some js framework is one of the fastest way to build GUI at this moment. In most cases, this level of resource overhead is tolerable, considering how much overhead electron has (given that so many highly popular apps are written in electron)"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "Sorry but I quite disagree. I do not feel that there are less opportunities in Rust than in other languages nowadays.\n\nConsidering GUI we have:\n- Iced if you like Elm architecture\n- Slint if you prefer declarative layout\n- Dioxus and Tauri if you need multi-platform support, including wasm\n- Embeded Graphics and others if you need minimal UI on no-std\n- egui if you want simple design and can afford loss of performance with immediate rendering\n\nMost of them support wgpu as rendering API which can then leverage DRM, OpenGL or Vulkan for a lot of targets.\n\nAnd if you can afford more experimental crates, Xilem, Floem for instance.\n\nAnd I do not talk about GTK bindings that are quite well documented and used AFAIK.\n\nI am certainly not a expert in graphics but I feel quite confortable with the existing ecosystem at the moment.\n\nIs there any goal you've not been able to achieve with these crates?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.174603,
      "arousal": 64.22902500000001,
      "dominance": 70.4648525,
      "text": "I guess technologies like Tauri are enough? Most people today are more comfortable with JS / TS over GTK, Qt, Tcl/Tk, etc. anyway, honestly non-web based GUI development I mostly hear about is for mobile or for a very small set of apps that for whatever reason use native UI bindings on desktop (e.g. Swift apps using SwiftUI)"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Egui isn’t flashy but it works, I’m currently working on a desktop gui app using it."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.7301585,
      "arousal": 56.859410499999996,
      "dominance": 57.823129,
      "text": "I'm a very big fan of Slint. Rendering is done using Skia or OpenGL ES 2.0, so none of the nasty javascripty stuff. I've made a project using their toolkit and while they're mostly active in the embedded space they've done a fantastic job. Highly recommended."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.514739399999996,
      "arousal": 56.9614514,
      "dominance": 54.648526000000004,
      "text": "When is the last time you've installed a _new_ app that's not a web browser with a coat on? because the last time I ran `htop` I counted at least 5 instances of Chrome under a different name.\n\nMost developers hate native frameworks because they're slower to iterate on and they can't really justify not reusing their existing Web codebases. It sucks? yes. But that's how it is. Rust is GUI already because with stuff like Tauri, Electron, ... you can just a few bits of native code alongside web technologies and that covers the 99% of their needs. Even on mobile web apps are finally taking over after years and years of failed iterations.\n\nIn my experience only FOSS devs in their spare time and legacy apps use native toolkits nowadays"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like:\n\n\\* cosmic\n\n\\* dioxus\n\n\\* makepad\n\n\\* slint\n\n\\* vello\n\n\\* bevy (sort of, but not really gui stuff)\n\n\\* egui"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "honestly iced is a really good GUI library, probably one of the best in the rust ecosystem. There are many things missing/incomplete but in it's current state it's already good for many desktop apps"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What's wrong with slint, iced or dioxus ?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.176115,
      "arousal": 53.514739,
      "dominance": 62.925170333333334,
      "text": "I have been using [iced](https://iced.rs/) and it has been working pretty well. It's based on the Elm architecture, so I felt right at home to work with it. \n\nI have been building an audio player, with the audio backend running on a separate thread than the UI. So I'd say quite a non-trivial app, and it has been working splendidly."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.73771766666668,
      "arousal": 62.773998666666664,
      "dominance": 69.00982633333332,
      "text": "Slint is pretty good rn, free for Desktop and Mobile use"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.36356766666667,
      "arousal": 59.78835966666667,
      "dominance": 65.74074083333333,
      "text": "I've been using Slint, and I'm quite happy with it. Actually, I wish there was an alternative to KDE using Slint language instead of QT.\n\nThe main downside to me (personally), is that it's a whole new language for defining interfaces. It's not hard, but it just takes time, where I'd like to be more productive. While I'm sure, I'd feel more at home with something like Dioxus, but it's just not there yet (lots of progress though)."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.87755075,
      "arousal": 57.73809525,
      "dominance": 65.95805,
      "text": "platform GUIs are tied to specific languages ... microsoft : C++ & c# ;.. android :java ;.. apple frameworks for mac osx/iOS : ObjectiveC & swift;\n\nThis makes making cross platform wrappers  in different languages for what already exists very awkward..\n\n..and building a whole new native GUI for a new language, then making it cross platform and slick enough that people want to use it is hard"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there not a qt binding?"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Slint"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.22832715384615,
      "arousal": 58.52084430769231,
      "dominance": 68.20163938461539,
      "text": "Because there is not proper GUI ecosystem in a world yet.\n\nMost cross-platform, capable and flexible is HTML+CSS+JS, which is overbloated and resource inefficient.\n\nMy check-task for proper GUI system is ability to relatively easy create table with nested rows and complex widget layout in every column, including interactive widgets.\n\nAs far as i know, in every major GUI framework, it is still voodoo-dance with delegates, that includes custom layouting logic. Just like in 90ies.\n\nThere are QML, Flutter, Compose, Slint and others, that (i've not cheched it personally, because not doing GUI-related job for decade) capable of this, but theirs lack of much more ordinary things, like platform integration.\n\nPlease, correct me if i'm wrong!\n\nI imagine that in 2025 gui framework would be built on top of wellknown flexbox, grid and tables layouting, with full reactive updating, like in HTML5, but without that multiprocessing bloat.\n\nI'am happy that people of Rust think in that way:\n\n[https://www.gpui.rs/](https://www.gpui.rs/)\n\n[https://freyaui.dev/](https://freyaui.dev/)\n\nHope that some of this brave people will create real modern GUI toolkit."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.42176875,
      "arousal": 46.54195,
      "dominance": 52.86281175,
      "text": "It does. Folks just don't want to use it.\n\nFor example: [https://v2.tauri.app/](https://v2.tauri.app/)\n\nIt's psychologically uncomfortable for some folks to admit that browsers are the de facto GUI standard and are literal marvels of UI engineering, whether it be through font rendering, unicode support, advanced layouts, etc. You can integrate Rust support though WebAssembly or just use the built-in scripting language and libraries cultivated over three decades. And if you're really unsatisfied with render performance, there's always the canvas for both direct 2D and 3D rendering.\n\nSome folks think you have to use React (instead of Svelte or Solid) and then wonder why rendering is slow. Little do they realize that so-called native GUIs are often quite slow as well, especially when developed by folks who haven't spent much time on the UI side."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I don't know how an 'ecosystem' should look like, but we have iced for example, which I've been running in production for a while now. Yes, it has missing features, however considering the amount of data my users want to be refreshed as soon as possible, I'd have to write my own widgets anyway to achieve proper framerates."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "just wondering if there's a parallel \"50 gui frameworks, 5 gui applications\" to the usual critique of rust gamedev :)"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Dioxus ftw"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Dioxus is great. The latest version 0.6 is like developing web applications on the desktop with hot reloading and all that. Their project seems more promising as it’s backed by major companies and is developed by a full time team."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Slint, I think, is written in rust. It's declarative but I think you can use the rust API directly?\n\n\nhttps://slint.dev/"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.12018166666667,
      "arousal": 44.44444466666666,
      "dominance": 59.25925933333334,
      "text": "Check out LibCosmic, a cross platform Rust GUI toolkit:\n\n[Repo](https://github.com/pop-os/libcosmic?tab=readme-ov-file)\n\n[Book](https://pop-os.github.io/libcosmic-book/)\n\n[API Docs](https://pop-os.github.io/libcosmic/cosmic/)\n\n[Template](https://github.com/pop-os/cosmic-app-template)\n\n[Examples](https://github.com/pop-os/libcosmic/tree/master/examples)"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there *any* language that has a proper GUI ecosystem?  Dart is probably closest I can think of.\n\nI don't think this is even close to being a solved problem."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GUI is a huge domain. And it has extremelly complex things in it. There are some binding for decent small toolkits here and there. But we still decade away from something like \"rust (c) inteface builder (tm)\""
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like this https://iced.rs/"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.23129233333333,
      "arousal": 65.45729433333334,
      "dominance": 75.510204,
      "text": "1) rust is a system language. dont try to make on language do everything\n\n2) gui systems are OS dependent. look how hard it has been for c#. using things like maui. so you can do front ends like c++ and just call the win api. so now you have a windows app. now lets go to linux. which DE? gtk for gnome and qt for kde.\n\nX is on its way out, so now DEs are using wayland. wayland is easier but still painful to go direct. you also misd out on the DE flavor.\n\nnow apple. i really dont know but i think appkit?\n\nmy point is, its not easy and trying to do all means you get a watered down gui."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's just a lot easier to write an app that draws a web page of some sort. That way, you don't have to know anything about the platform it ends up on."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check out Slint"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "I found GTK4's api in Rust to be the most pleasing of all the ones shown. Slint looks great, but learning a DSL is annoying. At least it can be written in .slint files that have some checking.\n\nAll I've used so far is egui, specifically with bevy, for a simple interaction.\n\nMe personally, I hate doing anything with UI, so I get the value proposition of using something widely used like the web frameworks."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "It’s a systems language. I’m sure you’ll get GUI libraries eventually but I doubt that’s how most people will use it."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.54497366666668,
      "arousal": 55.25321233333333,
      "dominance": 59.372638,
      "text": "Most people probably don't need it. There has been a pretty big push to make new apps just cloud hosted web apps, and nobody wants to re write an existing app with a different language. Unless you are a masochist and want to build your web gui by compiling rust code to webassembly.\n\nNow there is also a lot of Native mobile apps and a framework for rust mobile apps would be cool but, a lot of big corporations have gotten lazy and their \"mobile apps\" are just progressive web apps."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.4716555,
      "arousal": 52.947846,
      "dominance": 56.122449,
      "text": "All this is there. You may have missed the latest news, but there is already a full-fledged desktop environment Cosmic DE, written in Rust using the Iced gui library.\n\n[https://github.com/iced-rs/iced](https://github.com/iced-rs/iced)\n\n[https://pop-os.github.io/libcosmic-book/introduction.html](https://pop-os.github.io/libcosmic-book/introduction.html)\n\nAnd when I read news about Gnome, about how Gnome developers throw out feature after feature - it seems to me that in 2026 Cosmic will become a Gnome successor."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The gui ecosystem is a mess and electron is eating everyone's lunch"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because browsers + WASM are infinitely easier to"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.52154200000001,
      "arousal": 55.328798500000005,
      "dominance": 61.734693500000006,
      "text": "I'll go against the grain and state that it _is_ in an alright place, and you can build full GUI apps - even cross platform, without using a browser - but you have to be willing to do some legwork on system integration.\n\nThat last part is where I think people falter."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.129252,
      "arousal": 56.122449,
      "dominance": 68.027211,
      "text": "gpui.rs save us"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because the web is now omnipresent and is not tied to an operating system so most “not all” chose to create a webapp"
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Proper GUI development requires hot reloading. Without some annoying hacks, it is impossible in rust."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.054422,
      "arousal": 64.62585,
      "dominance": 70.861678,
      "text": "I'm putting my money on iced."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Honestly, a DOM for GUIs in Rust, with a library to manipulate it, feels like the way to go. I'm not saying we need electron or something, but having the graphics modelled in HTML/CSS and animated with Rust seems like a good way to go."
    },
    {
      "post_title": "Why doesn’t Rust have a proper GUI ecosystem yet?",
      "created_utc": 1749024911.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.59863949999999,
      "arousal": 60.204082,
      "dominance": 66.3265305,
      "text": "Imagine if all the time wasted on writing TUI crates had instead been spent copying JavaScript frameworks into Rust equivalents."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust 1.88: 'If-Let Chain' syntax stabilized"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "New valid syntax:  \n  \n```\nif let Some((fn_name, after_name)) = s.split_once(\"(\")\n    && !fn_name.is_empty()\n    && is_legal_ident(fn_name)\n    && let Some((args_str, \"\")) = after_name.rsplit_once(\")\") {\n```"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've just tried this syntax, thinking it's a language feature, only to be disappointed - and now it's a language feature! How exciting."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Can't wait do declutter my codebase with that syntax finally ;)\n\nif-let-else has been very helpful as well to use guard clause pattern when possible"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there a clippy lint to use it already available?"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "RIP `is_some_and()`, it's been nice to know you!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "What happened to [slice::as_chunks()](https://github.com/rust-lang/rust/pull/139656)? I thought it was going to be stabilized in 1.88."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "FINALLLLLY!. Time to visit my codebase"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "That's some crazy syntax. As a beginner you have really get used to it, but it seems pretty expressive."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.117914,
      "arousal": 55.952381,
      "dominance": 58.163264999999996,
      "text": "Also cargo got faster and will do some regular cleanups for us: \n\n- zlib-rs\n- garbage collection (not the one you thought about, heh)"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "omg i need this.\n\njust yesterday i was looking at my nested if lets and thinking there should be a better way"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "We are about to see the _entire_ ecosystem do an MSRV bump at the same time. Awesome feature!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it out yet? Running `rustup update stable` doesn't do anything yet :/"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I have many Rust projects that I only touch once every few months. To prevent Cargo from deleting cached files needed to build those, you can add the following to `~/.cargo/config.toml`:\n\n    [gc.auto]\n    frequency = \"never\"\n\nSee also <https://doc.rust-lang.org/cargo/reference/unstable.html?highlight=frequency#automatic-gc-configuration>."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "finally I will lessen my nested statements"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Woo!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "Really wish ``is`` won instead."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Finally! Really love this one :\\_)"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 43.7641725,
      "arousal": 53.6848075,
      "dominance": 47.222222,
      "text": "That is a great feature which I have been waiting for a long time. Glad to see that I was not alone here."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 40.249433,
      "arousal": 46.145125,
      "dominance": 49.092971,
      "text": "Praise the crab. Hail the mold. This is such a big QOL improvement! Been waiting for this for so long."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Will use tomorrow. Just had this come up the other day."
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Been waiting for this too!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The best thing about this is not being batted between the nightly clippy collapsible_if lint and stable’s syntax"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Woot! I've been waiting for this, game changer!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yay!"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "took long enough, wow"
    },
    {
      "post_title": "Rust 1.88: 'If-Let Chain' syntax stabilized",
      "created_utc": 1750939066.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 18.253968,
      "arousal": 46.825397,
      "dominance": 39.115646,
      "text": "Rust has too many of these obscure syntactic control flow cases already. This wasn't needed and I am sad that Rust keeps getting more complex."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "[Media] The people who make Rust Rust!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 76.83295533333335,
      "arousal": 57.785336666666666,
      "dominance": 65.94860133333334,
      "text": "Obviously, thousands of people contribute daily to the compiler and the ecosystem around it. Nonetheless, it was awesome to celebrate this incredible achievement - ten years of Rust - together with this group of amazing individuals who help, or helped make Rust into the incredible language and community it is. My thanks to everyone, both to those who were there and to everyone else.\n\nThis picture was taken as part of the celebration at the Rust Week conference, and was also shared in the rust 1.87 [release post](https://blog.rust-lang.org/2025/05/15/Rust-1.87.0/) for which there's [another thread](https://www.reddit.com/r/rust/comments/1kne4mr/rust_1870_is_out/)."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Now show us the socks :p"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "not a single crab in sight."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Gratitude to all of you. You are the giants on whose shoulders we're standing <3"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congregation of redditors"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Some memes write themselves"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53288,
      "arousal": 46.485261,
      "dominance": 60.884354,
      "text": "[Neeeeeerds !](https://m.youtube.com/watch?v=i6l8MFdTaPE)"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.48904000000001,
      "arousal": 60.50642500000001,
      "dominance": 59.44822333333334,
      "text": "It makes me sad that there are so few older people, mostly because as I unfortunately age, I question where all the people from the generations before went off to, maybe they have a secret planet.."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I was here!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "POV: You appeased the borrow checker and your program compiled successfully\n\njk jk, nice photo, makes me smile :)"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Smells like autism in there. (Rust is amazing)"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "what a swell crew! looks like it was fun"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.64096733333334,
      "arousal": 60.99773233333334,
      "dominance": 64.92819333333334,
      "text": "The event was simply awesome. Thx to the organizers and to all the wonderful people of the community, that made this a truly memorable event 🫶"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Kudos to everyone who made this awesome language and works on it to keep things sailing. Going stronk!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.32577466666667,
      "arousal": 62.77399833333334,
      "dominance": 58.352229666666666,
      "text": "Tbh the Rust community  basically made me and my team give up Rust. Never saw a community so openly hostile and aggressive towards anyone with an argument that is not an utter praise for Rust. The community is mostly made of zealot fans that  cannot accept any form of criticism on any point whatsoever.   We never ever  made a question in any  Rust focused group that was not resulted in a clear an open hostility for us not  reaching the results that  the almighty  church of Rust say  are guaranteed."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "oh wow, truly the language of trans"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "NERDS!! (I lob nerds)"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It’s like a celebration photo of the extras after having just shot an episode  from Silicon Valley"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.095238,
      "arousal": 70.4648525,
      "dominance": 72.39229,
      "text": "Happy 10th anniversary! So cool that people were able to come together to celebrate this :)"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.9863945,
      "arousal": 74.6598635,
      "dominance": 70.9750565,
      "text": "Happy birthday Rust!!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thank you truely"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats 🎉 to 10 years of Rust!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thanks everyone!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hello rustaceans"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thanks!"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I now have a longer thumb 💅all thanks to RT."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "They sure look like it"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.30007533333333,
      "arousal": 57.18064999999999,
      "dominance": 60.92214666666666,
      "text": "the lack of diversity is very concerning. It also makes me sad that nobody is pushing back against that here. are we undoing all the social progress we made in the last 50 years?"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.356009,
      "arousal": 49.546485,
      "dominance": 67.800454,
      "text": "white."
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.1088435,
      "arousal": 59.80725650000001,
      "dominance": 63.945578,
      "text": "why so few black people?"
    },
    {
      "post_title": "[Media] The people who make Rust Rust!",
      "created_utc": 1747342908.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.58881333333333,
      "arousal": 58.76795166666667,
      "dominance": 66.70445966666666,
      "text": "White people crazy man"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust 1.88.0 is out"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.4807255,
      "arousal": 47.675737,
      "dominance": 57.5396825,
      "text": "      [toolchain]\n    - # TODO: Go back to stable when 1.88 lands\n    - channel = \"nightly\"\n    + channel = \"stable\"\n\nBoy did I wait for this moment!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I am unreasonably excited for let-chains. Time to un-nest my code and deduplicate a lot of else blocks!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "Happy \"I wanted to make this change anyway and now clippy is forcing me to\" day for those who celebrate. Also let chains."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.6145126,
      "arousal": 56.0770976,
      "dominance": 59.6825396,
      "text": "Im honestly quite happy to see automatic cache purging. I often forget to even try to manage it and one time it had bloated into the 10s of GBs over quite some time before I spotted it.\n\nMore QoL for cargo and rusts really high space requirements on a dev machine is very much welcome :)\n\nAnyone know if theres plans to start purging prior versions of compiled programs (the artifacts that build up i mean)? Like the ones compiled for a version of rust 3 versions ago? That way I dont have to cargo clean project every dir every so often..."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.882086,
      "arousal": 65.759637,
      "dominance": 68.027211,
      "text": "    #[unsafe(naked)]\n    fn deep_fry(x: dyn Any) {...}"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "FINALLY IF LET CHAINS 🔥"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.77097499999999,
      "arousal": 56.9161,
      "dominance": 77.8911565,
      "text": "[look gary, there i am!](https://thanks.rust-lang.org/rust/1.88.0/#:~:text=Lynnesbian)\n\ni [submitted a pull request](https://github.com/rust-lang/rust/pull/139608) to add more detailed docs for `async` blocks. i added about 60 lines of comments describing control flow behaviour, most of which appears on [the `async` keyword doc page](https://doc.rust-lang.org/stable/std/keyword.async.html#control-flow).\n\nsubmitting my changes to rust was really easy and there's lots of information about the procedures to follow. i'm a bit proud of my little docs contribution haha. hopefully this is just my first pull request of many!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm so glad to hear let chains are finally being stabilized. It just makes my code so much nicer when I no longer have to nest my `if let`s."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.643991,
      "arousal": 59.5238095,
      "dominance": 64.399093,
      "text": "Quality of life update with if let chains. Maybe some day we will even got stable try-blocks"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "call me crazy but can't wait for const trait impls, stable specialization and variadic generics"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.98833842857142,
      "arousal": 60.54421742857143,
      "dominance": 65.75963742857142,
      "text": "So many people are excited about let chains, and I am too, although I never needed the let chains that badly, because we have `let-else`, which pairs with early returns so nicely. If there is a way to write code with `let-else` rather than with an `if-let` I'll always chose to do it with `let-else` because it keeps code flat.\n\n```\nlet Foo::Bar(bar) = baz else {\n   return;\n}\n\nif bar != smth {\n   return;\n}\n\n// ... yay, no nesting here\n```\n\ncompared to:\n\n```\nif let Foo::Bar(bar) = baz && baz == smth {\n    // ... boo - nesting\n}\n```\n\nI am still a never nester ¯\\_(ツ)_/¯. That said, I would love to see let chains supported with `let-else` but I understand the syntax ambiguity problem =("
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`uninlined_format_args` was moved from `pedantic` to `style` which means it's a warning by default. That's really annoying because I never inline anything since you can't access any fields when a variable is inlined which means you are forced to combine both styles or constantly refactor your format string. \n\nI'm really hyped for this release, but this is annoying."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I mean let chains are great but I’m hyped for “Cargo automatic cache cleaning.” My disk thanks you!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.882086,
      "arousal": 65.759637,
      "dominance": 68.027211,
      "text": "Unsafe naked pub function? I guess some nudists are gathering at a pub where they’re going to engage in “unsafe assembly”? Ooh la la. At least they seem to welcome external visitors."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "my cup runneth over"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I got so excited about let-chains but then felt bad when I couldn't find a place to use them in my project"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "```\nif let Channel::Stable(Semver { major: 1, minor: 88, ..}) = release_info()\n{\n    println!(\"`let_chains` was stabilized in this version\");\n}\n```\n\nAll of let chains examples are so bad… we already could do this!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "Everyone is excited about let chains, as a library author I like [`proc_macro::Span::local_file`](https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.local_file)"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.1587305,
      "arousal": 61.564626,
      "dominance": 65.3061225,
      "text": ">     \"add rax, rdi, rsi\"\n\nassembles to\n\n>     62 f4 fc 18 01 f7       add    %rsi,%rdi,%rax\n\nThis seems to be AVX-512 EVEX encoding? I didn't even know you *could* EVEX-encode the ordinary `add` instruction, I thought it was only for AVX instructions.\n\n(Also I'm pretty sure this example is unsound, it causes illegal instruction errors on my system that doesn't support AVX-512)"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.045351499999995,
      "arousal": 61.281178999999995,
      "dominance": 54.705215499999994,
      "text": "oh hell yea let chains we are eating good"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "Anyone bumped yet? I’m pumped for let chains, but I’m curious if there are issues in the release?"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a little annoying how `rustup toolchain list` or `rustup show` doesn't actually show the rust version, but something like `stable-x86_64-pc-windows-msvc (active, default)` and `nightly-x86_64-pc-windows-msvc`. Why not just show the version?"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "let chains LET'S FUCKING GO"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very excited for the span line/col/file info finally stabilizing, this will unlock all sorts of interesting proc macro use cases. In particular will make some things in my docify crate much easier if I ever decide to upgrade it."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 33.786848,
      "arousal": 57.142857,
      "dominance": 48.072562,
      "text": "We removed garbage collection from Rust, only to add it to Cargo."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "Super happy about the `as_chunks` API!!!"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.882086,
      "arousal": 65.759637,
      "dominance": 68.027211,
      "text": "# Naked functions"
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Let chains. Finally. if\\_chain (and rand) is the only library I habitually include everywhere."
    },
    {
      "post_title": "Rust 1.88.0 is out",
      "created_utc": 1750961721.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 44.557823,
      "dominance": 64.62585,
      "text": "Yay the comfort of back of nightly, well this week anyway"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\""
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ignoring Rust for a second.\n\nIf someone points out a bug in your code, and they point out that the bugs are probably based on the fact that the interface and lifetime requirements are unclear/weird…\n\nAnd your reaction is anything but \"ok, let’s fix it\"\n\nYou probably have other priorities………\n\nEdit: (removed speculation)"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 30.272109,
      "arousal": 47.165533,
      "dominance": 59.410431,
      "text": "That seems to be a recurring theme lately with Rust. I've noticed maaaaaaany C++ developers especially really trash talk and just dismiss everything as if its providing no value what so ever.\n\nRight. That's why Rust is becoming popular, no value add. /s"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.171039857142866,
      "arousal": 57.17525114285714,
      "dominance": 53.43375442857143,
      "text": "I just want to point out part of [the email that Asahi Lina linked](https://lore.kernel.org/lkml/20240828211117.9422-1-wedsonaf@gmail.com/):\n\n> I truly believe the future of kernels is with memory-safe languages. I am no visionary but if Linux doesn't internalize this, I'm afraid some other kernel will do to it what it did to Unix.\n\nI don't like the thought of Linux falling victim to \"Adapt or die.\" But at the same time, if Linux doesn't *try* to adapt, it *will* die.\n\nEven if it turns out that Rust doesn't belong in the kernel, I still want to see Linux try it. That way, if Rust doesn't work out, we not only understand why, but have proof too."
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 41.043084,
      "arousal": 53.798186,
      "dominance": 53.401360499999996,
      "text": "work rude homeless plough squealing square consist dam zesty ring\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev)*"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 55.555555500000004,
      "dominance": 63.321995,
      "text": "Sadly I agree with them. I've been subscribed on the rust for Linux for a year now, and some replies from upstream people and not really inviting (or should I say: agree to a virtuous circle)."
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.100907,
      "arousal": 50.65192725,
      "dominance": 50.113378749999995,
      "text": "There are high ego developers in positions of key decision making whose minds are calcified and who are incapable of learning a new thing (it worked for the past 20 years of their career, so why change?)\n\n\nThey oppose Rust, not on the merit, but because Rust is foreign to them. Safety is foreign to them. Strict types are foreign to them. Their rigid minds cannot read a foreign language, not to mention have enough curiosity to try it and discover how tremendously it can help them\n\n\nIt's sad but it needs to be called out so that there's a chance of this changing"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.30612242857143,
      "arousal": 59.16747657142857,
      "dominance": 65.85681885714285,
      "text": "I regularly trash on Rust and some of the rude members of the community. Some of these recent posts about the hostility that some of the C kernel devs are giving the Rust developers is crossing the line.\n\nTwo things:\n\n- No one calling themselves a serious developer should give Lina or Wedson or Overstreet the attitude they have received. Before I was even a junior developer I was told that one has to continuously learn new things as a developer. It is fine if we change how a driver is written or add analyzers to ensure function correctness. We don’t need to do the same things now as we did yesterday just because that’s how we did it last week.\n\n- I like that that thread has people with anime girl profiles. It perfectly captures the Rust stereotype and I love it."
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.82086149999999,
      "arousal": 84.2970525,
      "dominance": 71.7687075,
      "text": "First they laugh at you\n\nThen they fight you (you are here)\n\nThen you win"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Asahi Lina: \"A subset of C kernel developers just seem determined to make the lives of the Rust maintainers as difficult as possible\"",
      "created_utc": 1724964415.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[I'm a sucker for drama, but I didn't think I'd ever see programming drama in my feed](https://i.kym-cdn.com/entries/icons/facebook/000/015/878/thatsnoneofmy.jpg)"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So two of the most notable contributors to Rust are looking for jobs..."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 71.133787,
      "arousal": 56.031746,
      "dominance": 62.92517,
      "text": "Both Nicholas Nethercote and Micheal Goulet (compiler-errors) are currently looking for employment to keep working on Rust. Forgive me if I'm missing some critical information or context (I'm not the most up to date on everything in the community), but this seems like a perfect example of where the non-profit that's set up to benefit Rust (The Rust Foundation) should step in to help. \n\nIs there something else that's higher priority than keeping key contributors continuing to contribute? I kinda thought that was the point of getting funded by massive corporations."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.2335601,
      "arousal": 60.0907029,
      "dominance": 68.4807256,
      "text": "We can't say why this is happening -- it is likely that the non-profit does not have the funds to pay for these developers, at least not what they can get elsewhere.  In the end, they like nice bank accounts too.  A labor of love may be great, but they may have kids now or kids in college and love doesn't pay tuition.\n\nMozilla *should* support their language but, they're not Google, and we can ask how well Google supports Go.  Remember also that the gods of yesteryear that gave of C, C++, etc. had jobs at research centers and universities that *let* them work while on the payroll.  We really don't do that anymore -- not if you want a house in Silicon Valley.\n\nAnd even if you did work at a place that paid you that well, good luck working on any open source or public domain material -- I speak from experience here.  Getting things past Legal is no easy task."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.19047633333334,
      "arousal": 58.04988666666666,
      "dominance": 68.14058933333332,
      "text": "I doubt the Rust Foundation has enough funds available to do that, or they probably would have. According to their tax filings, they only made $250k in 2023. Pulling 2 full time developer salaries + benefits out of that isn't easy, even assuming they have no outstanding obligations."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.6235828,
      "arousal": 69.2517006,
      "dominance": 69.88662120000001,
      "text": "If I ever managed to win something like the Euro-Millions lottery I would love to fund (at a complete loss) a huge team of some of the worlds best Devs to sit and keep developing all of this cool stuff.\n\nJust sink money into reclaiming development, the internet and making as much FOSS as possible for the world.\n\nBetter buy some more ticket 😂"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "See how much it took to Linus to work full time on the kernel"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "The Rust Foundation can barely employ a single-digit amount of rust-lang people."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.76514414285714,
      "arousal": 67.330742,
      "dominance": 67.88143814285715,
      "text": "It makes little sense for the Foundation to spend donations on direct employment of people contributing to Rust. It could provide recommendations perhaps, but any company that wants to donate to employ someone to work on Rust can do so directly.\n\nIn 2024 the Foundation had 4.3 mil in donations according to their 2024 report. That's like ~20 contributors of this caliber that they could hire if they tossed everything else. A chunk of it is already going to grants; about half is going to a small number of specific projects that are low-hanging fruit in terms of allocating capital to improve the language.\n\nI'm all for scrutinizing the Foundation's decisions and I'd hate to see it captured by a group of people with no interest in Rust's success, but a well-run Foundation wouldn't do what you're proposing."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.99773266666667,
      "arousal": 63.303098999999996,
      "dominance": 59.750567,
      "text": "It would be nice, but I'm afraid the Foundation doesn't have enough money for that."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "certainly, a weird situation\n\nwith those creds they should be able to get 500k at any finance shop in London"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "What’s the Rust Foundation actually doing if not supporting the people writing the compiler?"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have you donated to them?"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\"Will mop floors for borrow checking\""
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.37037033333333,
      "arousal": 56.878307,
      "dominance": 65.117158,
      "text": "We are passionate about Rust, Elixir, Tauri, and Svelte projects.\n\nAs part of our upcoming corporate initiatives, we’ll be actively supporting these open-source ecosystems.\n\nThese projects owe their success to the dedication and hard work of the global open-source community. Their contributions continue to drive innovation and make these technologies possible"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Nah. Instead they're spending 850k/yr on [a tool to dependency analysis](https://github.com/rustfoundation/painter), which _basically_ [nobody but amazon can use](https://github.com/rustfoundation/painter/issues/7) and a [tool to analyze look-alike squating](https://github.com/rustfoundation/typomania) which [is unused](https://www.reddit.com/r/rust/comments/1ibdxf9/beware_of_this_guy_making_slop_crates_with_ai/).\n\nOr that is what they spent ~1/3 of their budget on in 2024."
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.63416500000001,
      "arousal": 61.6024185,
      "dominance": 69.19879066666667,
      "text": "At least Nethercote cuts out three big rust deployment categories:\n\n[https://nnethercote.github.io/2025/07/18/looking-for-a-new-job.html](https://nnethercote.github.io/2025/07/18/looking-for-a-new-job.html)\n\nYou'll notice that academics who also \"work on what they want\" frequently accept money from some of the worst industries.\n\nYou'll notice how many open internet projects doing mixnets take blockchain money.  Also there are some open internet projects not doing tokens still take money from Teather, aka bitcoin puming whitewash money.\n\nThat's not a critisism, merely an observation about why locating a funder takes longer.\n\nI'd never critisize all the great journalists who took USAID or RT money either, although I might critisize someone for being a bad journalist, but that's rarely those investigative guys.\n\n[Bob Dylan discusses this](https://www.youtube.com/watch?v=wC10VWDTzmU)"
    },
    {
      "post_title": "So two of the most notable contributors to Rust are looking for jobs...",
      "created_utc": 1753752317.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.882086,
      "arousal": 71.088435,
      "dominance": 40.589569,
      "text": "This is such a terrible signal"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Announcing Rust 1.89.0"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "AVX512 IN STABLE LETS GO!!!!!"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Damn, Intel Mac about to move to Tier 2. End of an era."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there a reason the `File::lock` (and company) APIs don't use a guard/RAII instead of requiring you to call `File::unlock` manually?"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "NonNull::from\\_ref and from\\_mut, finally <3"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does the compatible ABI on wasm32 mean we can finally use C and Rust together on that platform?"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.84807266666667,
      "arousal": 48.71504166666667,
      "dominance": 47.01436133333333,
      "text": "I am a bit confused. How is this\n\n    pub fn all_false<const LEN: usize>() -> [bool; LEN] {\n      [false; _]\n    }\n\nBetter than this?\n\n    pub fn all_false<const LEN: usize>() -> [bool; LEN] {\n       [false; LEN]\n    }"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Thanks to the team for the hard work! 😀"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Mention of `str::eq_ignore_ascii_case` reminds me: why doesn't the standard library have a `str::contains_ignore_ascii_case`?\n\nClosest mention I found on the issue tracker was https://github.com/rust-lang/rust/issues/27721 but it's hard to tell if this is blocking for this specific API."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This release also allows i128 and u128 to be the repr of an enum!"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 84.693878,
      "dominance": 69.274376,
      "text": "At first, I was surprised they added support for Knights Landing while everyone else was removing support, but then I found out that in this case, [`kl` means \"keylocker\"](https://github.com/rust-lang/rust/pull/140766)."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I didn't know const generics were already stabilized. Neat."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like the lifetime elision lint compromise."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I can delete so many `allow(improper_ctypes)`!"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Mismatched lifetime syntaxes lint👌. I always find myself fighting with lifetimes."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.1632655,
      "arousal": 65.02267599999999,
      "dominance": 55.328798,
      "text": "I am not sure that the mixed lifetime syntaxes lint is going to make this newcomer less confused about lifetime syntax. But I hope it will."
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.6099775,
      "arousal": 48.7528345,
      "dominance": 60.941043,
      "text": "`str::eq_ignore_ascii_case` is nice, but what about comparing in const context if no need for ignoring case? Or this should wait before const trait stabilization?"
    },
    {
      "post_title": "Announcing Rust 1.89.0",
      "created_utc": 1754565295.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Call me when we get to 2.0"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async closures finally arrived!"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The updates to the `std::env::home_dir` function is funny. I have never seen something get deprecated, be deprecated for years, then get fixed and un-deprecated!"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async closures ❤️"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\\`\\`\\`  \n[`if let` temporary scope](https://doc.rust-lang.org/edition-guide/rust-2024/temporary-if-let-scope.html) — Changes the scope of temporaries for `if let` expressions.  \n\\`\\`\\`\n\nGates of Valhalla just opened, did they?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Did let-chains not make it?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.741497,
      "arousal": 36.054422,
      "dominance": 51.133787,
      "text": "Given that this is now supported:\n\n    let (squares, cubes, tesseracts): (Vec<_>, VecDeque<_>, LinkedList<_>) =\n        (0i32..10).map(|i| (i * i, i.pow(3), i.pow(4))).collect();\n\nI'd also expect the inverse to work:\n\n    for (square, cube, tesseract) in (squares, cubes, tesseracts) {\n        \n    }\n\nThis would be much nicer than the current:\n\n    for (square, (cube, tesseract)) in squares.into_iter().zip(cubes).zip(tesseracts) {\n        \n    }"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The small things like \\`unsafe\\_op\\_in\\_unsafe\\_fn\\` warning being enabled are welcome. Those were seriously a concern to me."
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Really hoping that async closures can deliver on the lifetime bounds I need from them. I had no problem with `Func: Fn(Type) -> Fut, Fut: Future`, but what I need is `Func: Fn(&’a Type) -> Fut, Fut: Future + ‘a`"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Argh, too many new features to mess around with"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Hi all – I’m currently working my way through The Rust Programming Language Book which suggests that it works with version 1.82.0 or later. \n\nCan anyone confirm whether I can update and continue the book without problems?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The changes to match ergonomics are great, really excited to see what Rust does with patterns since they mentioned \"future possiblities\""
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Where's the \"what's new in Rust\" youtube guy!! I'm gonna need him for this one!"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are there any plans for finally unifying `!` and `Infallible`, now that the fallback of *never* has been changed?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thank you team 🙏."
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust 2024!"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What happened to the `overflow_delimited_expr` change? I saw it in earlier versions of the edition guide but no longer. Digging in, I see it was dropped in https://github.com/rust-lang/rust/pull/136312 but not why.\n\nedit: oh, searching issues for the config parameter brings up https://github.com/rust-lang/rust/issues/136224"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "no stable `std::simd` 😔"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.3752835,
      "arousal": 58.47505675,
      "dominance": 61.366213,
      "text": "Kind of a nit, but i find the detailed release notes as hosted at https://doc.rust-lang.org/stable/releases.html#version-1850-2025-02-20 are absolutely atrocious to use/navigate, because its all one single page with headings to delineate versions, so theres no way to quickly go to the *end* of the list and see the compatibility notes at the bottom, or ctrl+f search for anything without hundreds of useless noise from other versions, or just get any idea of how long the notes are from the scrollbar sizing.\n\nthankfully they're also on github with proper per-page notes and i hope they will be forever https://github.com/rust-lang/rust/releases/tag/1.85.0"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 47.959183499999995,
      "arousal": 58.843537,
      "dominance": 54.30839,
      "text": "I wonder what's up with `cargo fix --edition` introducing diffs such as the following...\n\n    @@ -219,12 +219,12 @@ where\n                 return Ok(());\n             }\n             let mut l = self.shared.lock().expect(\"not poisoned\");\n    -        let waker = if let SharedState::Ok {\n    +        let waker = match &mut l.state\n    +        { SharedState::Ok {\n                 ready,\n                 ready_bytes,\n                 writer_dropped,\n    -        } = &mut l.state\n    -        {\n    +        } => {\n                 if !self.buf.is_empty() {\n                     let full_buf = mem::take(&mut self.buf);\n                     *ready_bytes += full_buf.len();\n    @@ -232,11 +232,11 @@ where\n                 }\n                 *writer_dropped = dropping;\n                 l.waker.take()\n    -        } else if !self.buf.is_empty() {\n    +        } _ => if !self.buf.is_empty() {\n                 return Err(());\n             } else {\n                 return Ok(());\n    -        };\n    +        }};\n             drop(l);\n             if let Some(w) = waker {\n                 w.wake();\n\nIt's super ugly IMHO and if I run `cargo fmt` after indents everything another level.\n\nIs this about preserving the prior [`if let` temporary scope behavior](https://doc.rust-lang.org/edition-guide/rust-2024/temporary-if-let-scope.html)? If so, I may just manually undo these chunks, as I was not relying on that.\n\nedit: oh duh the page I linked above actually has a \"Migration\" section that says as much. that might be new compared to when I last read through it, or maybe I just wasn't paying enough attention..."
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.294785,
      "arousal": 46.258503,
      "dominance": 66.213152,
      "text": "Does anyone know how to unfuck let bindings in 2024?\n\nI've had \n\n\t\tlet Self { used, ref len } = mut_ref_self();\n\nTo have len be non-mutable. In 2024 i'm forced to \n\n\t\tlet &mut Self { ref mut used, len } = mut_ref_self();\n\nWhich is worse in every way. I just want a way to drop mutability off some fields, in the same line i'm declaring access to said field."
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I just found out that changing the edition also changes the behavior of `rustfmt` leading to quite a few changes due to the new identifier sort order (e.g. in `use`declarations). The [edition guide](https://doc.rust-lang.org/edition-guide/rust-2024/rustfmt-raw-identifier-sorting.html) has more information."
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Should I update my applications to use Rust 2024?\n\nWhat are the caveats for doing so?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 28.117914,
      "arousal": 63.605442,
      "dominance": 39.68254,
      "text": "I have OCD, and the `expr_2021` really frustrated me 😑"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I tried to look through the Rustfmt issues, but I wasn't able to find some information about how the 2024 style edition came together. What discussions lead to certain decisions etc. Is there a location that I've missed so far?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there a reason why `env::set_var` doesn't show a warning when used outside an `unsafe` block in old editions?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "From the docs, it seems that we need to make sure std::env::set\\_var is called in single-threaded code. Is there a safe alternative where we dont have to do this manual checking ?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "woah, that's a lot. I'd better start to migrate all my projects then!"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.163265,
      "arousal": 43.0839,
      "dominance": 53.174603,
      "text": "Why exactly was it difficult to get AsyncFn and company through the door?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I understand std::env::set\\_var has the issue but why did they decide to introduce this breaking change instead of guarding all APIs accessing environment variables with an internal global lock like [Go's standard library does](https://github.com/golang/go/blob/64d82cd72c222caa93b2f71c5970a00ec4e7929a/src/syscall/env_unix.go#L55-L137)?"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This release is so last year… when 2027 coming???\n\n\n\n/s"
    },
    {
      "post_title": "Announcing Rust 1.85.0 and Rust 2024 | Rust Blog",
      "created_utc": 1740071479.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I guess is time to use\n\n    [resolver]\n    incompatible-rust-versions = \"allow\"\n\n  \nto keep my dependencies up to date."
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 69.274376,
      "dominance": 85.37415,
      "text": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.394558,
      "arousal": 68.367347,
      "dominance": 48.072562,
      "text": "Unrelated, but I'm really confused why they put cloud infrastructure software, package managers and build systems in the same category as _cloud platforms_."
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.947846,
      "arousal": 70.861678,
      "dominance": 49.319728,
      "text": "First year in a long while where I missed the voting due to not looking at stackoverflow. Incredible how that's fallen off cliff."
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.2857145,
      "arousal": 54.648526000000004,
      "dominance": 56.4058955,
      "text": "The margins are much slimmer this time! I wonder if it will continue for next year? 🙂"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 69.274376,
      "dominance": 85.37415,
      "text": "Wow, Axum second most admired web framework!"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 69.274376,
      "dominance": 85.37415,
      "text": "Interesting how Rust was at 83% most admired last year, but now it's around 72%."
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use StackOverflow so little now that I hadn't even realized this had been running :)"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 31.972789,
      "arousal": 65.986395,
      "dominance": 32.426304,
      "text": "lol IntelliJ lost to notepad++ 😂"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 69.274376,
      "dominance": 85.37415,
      "text": "I noticed that the next most admired entry is Gleam, the VM of which is implemented in Rust! 😏"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interesting that Elixir and Gleam are both quite high too"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.199546,
      "arousal": 62.358277,
      "dominance": 72.44898,
      "text": "Is SO even alive? Who did they ask? 1.5 developer?"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yet Rust still requires semicolons in 2025"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "nice"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.882086,
      "arousal": 71.088435,
      "dominance": 40.589569,
      "text": "I didn’t even bother answering when I saw how terrible the survey was this year."
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Do people use Stack Overflow anymore? I get my answers from GPTs and Reddit"
    },
    {
      "post_title": "Once again, Rust is the most admired language in the 2025 Stack Overflow survey!",
      "created_utc": 1753813693.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 69.274376,
      "dominance": 85.37415,
      "text": "Yawn.  At this point, who needs a survey.  We already knew this. 😉 They are going to have to start surveying the “Most admired language of the decade.”"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 97.959184,
      "arousal": 72.335601,
      "dominance": 75.056689,
      "text": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 65.898998625,
      "arousal": 61.06387004166667,
      "dominance": 59.13407027083333,
      "text": "# Intro\n\nI've used Rust for somewhere around ~10 years at this point, since shortly before Rust 1.0 was released in May 2015. I've worked on a bunch of different projects in Rust including desktop GUI apps, server backends, CLI programs, sandboxed scripting interfaces via WASM, and multiple game-related projects. Most recently, I've done a ton of work contributing to the Bevy game engine. \n\nI also have a good amount of experience with several other languages: Java, Python, Typescript, Elixir, C, and several more niche ones with correspondingly less experience. Not enough to say that I'm an expert in them, but enough that I'm familiar with and have experienced the major tradeoffs between them. I'll mainly be comparing Rust to Java, as that's what I've been using a lot lately outside of Rust.\n\nOut of all of these, Rust is by far my favorite language, and I'm not planning on going anywhere! I use it daily, and it's been a joy to work with 90% of the time. \n\nOf course like any language that gets actually _used_, it has it's problems. Moments where you go \"what the heck? Why? Oh, hrmm, ok maybe this? Not quite, this is frustrating\". _I'm not here to talk about those cases_.\n\nWhat I'm here to talk about are the _major_ pain points I've experienced. The problems that have come up repeatedly, significantly impact my ability to get stuff done, and can't be fixed without fundamental changes. \n\nA quick list of things I'm not going to cover:\n\n* Async/await: Actually fairly decent in Rust in my opinion. Pretty solid given the constraints of no extra cost or builtin runtime, cancellation, etc. I remember the pressure to get this shipped around Rust 2018 edition, and I think it came out pretty well despite that. The main issues are around mixing sync and async code, Pin, multiple executors in the ecosystem, and whether zero-cost is a sensible tradeoff to begin with. It's been discussed to death, I don't have anything to add to it. Maybe virtual threads would've been nicer and just eat the runtime costs, I don't know. I feel that just using async by itself in e.g. a web server is pretty solid now that we've gotten async traits. \n* Library ecosystem: Yeah I wished it was more stable and bug-free (e.g. comparing winit to sdl), but that's not really a language issue. There's not much for me to talk about here.\n\nOnto my complaints.\n\n# Result<T, E>\n\nWhen I first started with Rust, I loved that errors are just another type. Implicit errors are terrible; forcing the user to be aware that a function could error, and handle that error is a great design!\n\nAs I've used Rust for both library and application code over the years, I've grown more and more disillusioned with this take. \n\nAs a library author, having to make new error types and convert between them for every possible issue _sucks_. There's nothing worse than adding a dependency, calling a function from it, and then having to go figure out how to add it's own error type into your wrapper error type. Crates like `thiserror` (I think the main one I've tried) help a bit, but in my experience are still a poor experience. And that's all for 1 function - if you make a second function doing something different, you're probably going to want a whole new error type for that. \n\nThen there's application code. Usually you don't care about how/why a function failed - you just want to propagate the error up and display the end result to the user. Sure, there's `anyhow`, but this is something that languages like Java handles _way_ better in my experience. Besides the obvious issue of wanting a single dynamically dispatched type, the real issue to me is backtraces. \n\nWith Java, I see a perfect log of exactly what function first threw an error, and how that got propagated up the stack to whatever logging or display mechanism the program is using. With Rust, there's no backtraces whenever you propagate an error with the ? operator. Of course backtraces have a performance cost, which is why it's not built-in. \n\nLibraries hit this issue too - it's really hard to figure out what the issue is when a user reports a bug, as all you have is \"top level function failed\" with no backtrace, unless it's a panic. Same with tracking down why your dependencies are throwing errors themselves.\n\nRust got the \"forcing developers to think about errors\" part right. Unlike Java, it's immediately obvious that a function can fail, and you can't accidentally skip dealing with this. I've seen so many bugs in other languages where some function threw an error, and completely unwound the program when it should have been dealt with 10 layers lower with a retry. \n\nHowever, while it's zero-cost and very explicit, I think Rust made a mistake in thinking that people would care (in most cases) _why_ a function failed beyond informing the user. I really think it's time Rust standardized on a single type that acts like Box<dyn Error> (including supports for string errors), and automatically attaches context whenever it gets propagated between functions. It wouldn't be for all uses cases, as it's not zero-cost and is less explicit, but it would make sense for a lot of use cases.\n\nSmall aside, there's also error messages. Should errors be formatted like \"Error: Failed to do x.\", or \"Failed to do x\"? Period at the end? Capitalization? This is not really the language's fault, but I wish there was an ecosystem-wide standard for formatting errors.\n\n# Modules\n\nThe orphan rule sucks sometimes, and the module system is maybe too flexible. \n\nWorking on Bevy, which has a monorepo consisting of bevy_render, bevy_pbr, bevy_time, bevy_gizmos, bevy_ui, etc, and a top-level bevy crate that re-exports everything, I've felt the pain on this pretty strongly recently.\n\nOrganizing code across crates is pretty difficult. You can re-export types willy-nilly between crates, make some parts pub(crate), pub(super), or pub(crate::random::path). For imports, the same problems apply, and you can choose to re-export specific modules or types from within other modules. It's really easy to accidentally expose types you didn't mean to, or to re-export a module and lose out on the module-documentation you've written for it.\n\nMore than any real issue, it's just too much power. It's strange because Rust loves to be explicit, but gives you a _lot_ of leeway in how you arrange your types. Say what you will about Java's \"one file = one class; module paths follow filesystem folders\" approach, but it's nothing if not explicit. It's much easier to jump into a large project in Java and know exactly where a type can be found, than it is for Rust.\n\nThe orphan rule is a problem too, but something I don't have as much to say about. It just sometimes really gets in the way, even for library developers due to splitting things across crates for one project (and Rust really encourages you to split things up into multiple crates).\n\n# Compile times and IDE tooling\n\nCompile times and error checking in my IDE are too slow. People do great work speeding up rustc and rust-analyzer, and I don't mean to demean their efforts. But Rust fundamentally treats 1 crate = 1 compilation unit, and that really hurts the end-user experience. Touching one function in Bevy's monorepo means the entire crate gets recompiled, and every other crate that depends on it. I really really wish that modifying a function implementation or file was as simple as recompiling that function / file and patching the binary.\n\nRust analyzer has the same problem. IntelliJ indexes my project once on startup, and instantly shows errors for the rest of my development time. Rust analyzer feels like it's reindexing the entire project (minus dependencies) every time you type. Fine for small projects, but borderline unusable at Bevy's scale.\n\nI'm not a compiler dev - maybe these are fundamental problems that can't be fixed, especially with considerations for macros, build scripts, cargo features, and other issues. But I really wish the compiler could just maintain a graph of my project's structure and detect that I've only modified this one part. This happens all the time in UI development with the VDOM, is there any reason this can't be implemented in cargo/rustc?\n\n# Conclusion\n\nAnd that's the end of the post. Writing is not my strong suit, and this was hastily put together at night to get down some of the thoughts I've been having lately, as I don't have time to sit down and write a proper article on my rarely-used blog. Take everything I've said with the knowledge that I've only given surface-level consideration to it, and haven't looked too deeply into existing discussion around these issues.\n\nThat said, these are the major issues that have been bothering me the last few years. I'm curious to hear other peoples' thoughts on whether they face the same issues."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "If rust analyzer is doing a long recompile on every change, it probably means it's compiling with different features or environment variables than what you are building your app with. By default RA uses the same target directory as as `cargo build` to store build artifacts and if they are making incompatible builds they end up causing each other to keep doing full builds.\n\nThis can be especially common with Bevy if you enable the bevy/dynamic_linking feature for your builds but not Rust analyzer's.\n\nEasiest fix is to tell RA to use a different target directory, see rust-analyzer.cargo.targetDir here: https://rust-analyzer.github.io/manual.html\n\nAnother fix would be to make sure all features and environment variables are the same so they can reuse each other's build artifacts, this can be tricky though."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "`anyhow` actually supports backtraces. You just need to set `RUST_BACKTRACE=1` and call `.backtrace()` on the error:\n\nhttps://docs.rs/anyhow/latest/anyhow/struct.Error.html#method.backtrace"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.60015133333333,
      "arousal": 54.19501133333333,
      "dominance": 62.849584,
      "text": "I thought I was the only person in the world that actually likes the async/await implementation in Rust."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.41950100000001,
      "arousal": 61.866969000000005,
      "dominance": 66.137566,
      "text": "I am still confused about modules. Way more than async or borrowing. \n\nI think it is made worse by being easy to work with without understanding it.   \nYou can quite easily survive with copy/paste and following the existing pattern. Add file here, pub mode her, use there. And suddenly when something slightly different needs to happen I have no idea how it works."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Disclaimer: I wrote this as a hasty not-quite-rant on some issues I've been thinking about recently. The tone came out as fairly negative, so I want to re-iterate: I love Rust! \n\nThe language really is great - I wouldn't have used it for 10 years, and continue to use it every day if I hated it. Huge props to everyone that's worked on it - everyone has put in a great deal of effort that shouldn't be ignored, and I want to take a second to recognize that effort and not just complain :)"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.5986394,
      "arousal": 52.154195,
      "dominance": 63.0612244,
      "text": "About the \\`Result\\` in libs point, how about a \\`struct Error(anyhow::Error)\\` or similar (enum if needed)? It avoids the need to constantly map every error occurrence and Anyhow's \\`.context(\"reason\")\\` method can help tracing the, well, error context.\n\nI've been using this in my recent prototypes and I'm happy about it so far but of course my experience is limited here.\n\nedit to clarify : it doesn't have to be an `anyhow::Error`, this works with a `thiserror::Error` or a `std::error::Error` too. This is context-dependent."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.98526075,
      "arousal": 55.555555625,
      "dominance": 54.350906875,
      "text": "I think errors are often misunderstood - so many times I've seen a huge `thiserror` enum in a web server/cli tool/etc where you're never actually matching against the individual variants, just using it to get the `From` impl. At that point, just use anyhow.\n\nI think there are some people that hear \"Rust has great error handling\", and think that means that you get great error messages without thinking about them, but I'm not sure there's any language that can do that. Rust doesn't give you good errors, it gives you control over errors.\n\nIn many libraries I maintain, I just have `struct Error(String, Backtrace)`, since, while there are different reasons this error can happen (i.e. different \"variants\" if it were an enum), a user of my library wouldn't necessarily want to match on this. For example, at a previous job, I maintained a library that was validating a custom cryptographic protocol. Our error enum looked like this:\n```\nenum Error {\n  MalformedData,\n  FailedToVerify,\n}\n```\n\nEach of these variants could have many different causes, for example, malformed data could be:\n - the input was not valid CBOR\n - the arrays in the CBOR had the wrong lengths\n - the data contained invalid indices into data stored somewhere else within itself\n\nAll of these could have been separate error types.\n\nSimilarly, failure to verify could have been for 1 of about 10 different reasons. But a user of the library doesn't care. They only care about whether a failure was due to the data being malformed, or just wrong.\n\nI agree with OPs complaints about backtraces. IMO they're often poorly handled, and languages with a VM often have more information floating around to at least point you to where the error happened. I'm still waiting for the \"perfect\" error crate that solves this, because it feels extremely solveable, but I can't put my finger on exactly what it would look like...\n\nRegarding the orphan rule, it's bitten me a few times, but considering the alternatives, I'm glad it's there. But I do wish there was a way to turn it off, perhaps with the consequence that it's only allowed in binaries and not libraries (or at least disable publishing such libraries to crates.io). Some way of saying \"I know what I'm doing, just use this impl\""
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.70748333333334,
      "arousal": 58.314437,
      "dominance": 65.91080866666667,
      "text": "As someone new to Rust but with a lot of experience in Java, I enjoyed reading this post and the comparisons between them. It seemed well thought out and not just a quick take from someone who used the language for a month and wants clicks for their blog like we frequently see on Reddit lol. Thanks for writing it!"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.03514762500001,
      "arousal": 50.467687125,
      "dominance": 58.701814,
      "text": "> But Rust fundamentally treats 1 crate = 1 compilation unit, and that really hurts the end-user experience. Touching one function in Bevy's monorepo means the entire crate gets recompiled, and every other crate that depends on it. I really really wish that modifying a function implementation or file was as simple as recompiling that function / file and patching the binary.\n\nI don't want to nit-pick here because I agree that the experience is bad, but I feel like a lot of people misunderstand Rust compilation by incorrectly comparing it to C++. I don't mean to patronize if you already understand Rust compilation very well, but hopefully this will be educational for some readers.\n\nThe Cargo profile setting `incremental = true` will try to prevent the entire crate from being recompiled when any part of it changes. Incremental compilation is enabled by default in the dev profile (plain `cargo build/test/run`). I don't see any mention of it in the bevy repo, but probably my searching is just poor. The problem with incremental compilation is that very strongly depends on CGU partitioning and whether the functions in your crate are compiled with LocalCopy (like a header) or GloballyShared (like a .o) codegen. Essentially all that matters is the total size of dirtied CGUs. If you modify some function that gets LocalCopy codegen which is also referenced by every CGU in the crate, the incremental compilation system doesn't help much. But if the current crate has a lot of CGUs and you edit a GloballyShared function, only its CGU needs to be recompiled. Most of the design of the rustc incremental compilation system focuses on caching queries and getting the query invalidation right; I think that for large projects which are doing incremental `cargo build` not `cargo check`, all the query juggling is irrelevant. The query caching is very important for `cargo check` times, but as soon as you want to generate code the most important factor is how much IR is handed off to LLVM.\n\nNone of that is about the dependencies of the changed crate.\n\nIn C++ you can modify an implementation file and just recompile that one file and re-link. In Rust, the primary reason you can't do that is that the Rust language doesn't let you separate headers and implementation. Rust still has headers, but automated. They're called rmeta files (or the rmeta section of a rlib file). Compiling a crate (in any mode other than `cargo check`) first emits an rmeta file, then an rlib file. Compilation depends on the contents of the rmeta file/section of dependencies. The problem is that any change to the source code will change the rmeta file, and Cargo/rustc only understands that means a rebuild is required. If you were constantly editing C++ headers, you'd expect to have poor incrementality... but also you'd take some kind of action to make sure you didn't need to edit headers all the time.\n\nIn addition, incrementality in Rust is very much at odds with optimizations, because CGU boundaries (which you do not have control over!) block inlining. Adding `#[inline]` is the same as moving a function to a header file; they get pasted into every CGU that uses them, every copy gets separately optimized by LLVM, and in my experience they are only deduplicated by LTO, not by normal linkage.\n\nSo I don't think the problem you're running into is \"The Rust compilation model\", it's the fact that rustc's incremental compilation system is insufficient for your workflow. The problem is not with the language, the problem is in the compiler. If the incremental compilation system understood incremental updates to dependency rmeta files and could only recompile what was changed, these muti-crate workflows would be significantly improved."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.04610716666667,
      "arousal": 61.8858655,
      "dominance": 64.32350716666666,
      "text": "Yes!!! I 100% agree with your take. I too love Result, however, after living in a gigantic code base now for over a year, the amount of error handling boilerplate, wrapping one into another, has become beyond useless. The worst is when you want to create a closure that has more than one result type. The compiler will force you to handle the different error types and ends up defeating the point of the closure.\n\nSwift took a similar approach too, but what I like about swift is that it has type erasure built in. At each point you can decide to just “catch” the error as a generic type and deal with any error there.\n\nI’ve started adopting anyhow in my project simply because I’m exhausted playing Error typecaster. It honestly should become part of the std library.\n\nFor small projects, handling various result errors is manageable, but at some point, it’s too tedious to keep track of. Future small refactor tasks then becomes an exercise in asking yourself if it’s cheaper to rewrite the thing from scratch. \n\nResult, grew out of era of language design where “exception handling needs to be rethought.” However, it’s clear to me now that there’s a middle ground somewhere and rust went too far in the other direction."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.97862,
      "arousal": 57.563978000000006,
      "dominance": 66.27793985714285,
      "text": "Quick question: did you try RustRover? You compare IntelliJ to rust-analyzer, and I'm not entirely sure that's a fair comparison.\n\nThat said, coming from C++, I will say this: I have never seen an IDE and/or code inspector which gets everything right. There always are outdated or plain wrong inspections. I simply don't trust them.\n\nSpeaking of IDEs: that's my personal gripe, while the compiler messages are amazing, they are often too verbose and just don't fit in the compilation log window in my IDE, so I have to switch over to a terminal and run the build there. And the short errors are... Too short, they give no information at all. I'd love it if there was a middle ground option."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 68.253968,
      "dominance": 75.623583,
      "text": "regarding Result and traces, I had the same problem and it inspired me to make a small proof of concept type that adds a return trace whenever `?` is used against it. I'll find the links...\n\n\nedit: looks like I never added a readme to the repo, but here it is: https://github.com/Zoybean/error-return-trace\n\nit's based on the concept of error return traces as implemented in Zig, at least according to their own documentation (I've not used Zig yet). I'll find my Reddit post about it, that would have more info...\n\nedit: here we go: r/rust/s/pVTEIXD6dB"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "When I speak to experienced developers who have started learning Rust, module declarations are the thing I most often feel the need to apologise for."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We seriously need a way to simple toggle off Orphan rules for end user crates, there's no reason for me to adhere to a rule because \"downstream crates may implement bla bla bla\" when downstream crates will never exist since I'm developing an application."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.621315,
      "arousal": 58.843537,
      "dominance": 78.117914,
      "text": "You’re on the bevy team ? Respect dude"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I love Java stack trace too, who cares error message, I just want the real  line number and file. The same problem applys to go."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> Onto my complaints.\n\n> Result<T, E>\n\nI still think Rust's error handling is best in class. No other language comes even close.\n\nThe *only* problem is the huge amount of boilerplate required to make new error types. This means that generally speaking, libraries don't define finer grained error types; usually just one error or a handful at most.\n\nBut this boilerplate is fixable! Libraries like `thiserror` is a stopgap measure but new language features should address this problem.\n\nFor example: there is no operator to compose errors, something like, anonymous enums (that OCaml calls polymorphic variants), or the `|` type-level operator from Typescript. This forces you to create a new error type for slight modifications to a base error type. So you can't write a bunch of foundational error types and write things like\n\n    fn f() -> Error1 | Error2 { .. }\n\nWhich could sometimes make error signatures more readable."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.72562366666666,
      "arousal": 59.863945666666666,
      "dominance": 65.64625833333334,
      "text": "Thank you for your perspective on errors, and especially stack traces. I feel it's an area where both Rust and Go have regressed significantly from Java, but it takes you a while to notice, because stack traces are most useful when maintaining other people's old code. Young languages have less old code."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I really, *really* want anonymous sum types for error handling. Error handling in no-std is a miserable experience."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 56.1791385,
      "dominance": 67.4603175,
      "text": "sloppy nine jar abounding complete imagine history physical exultant chunky\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev)*"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.25170075,
      "arousal": 39.37074825,
      "dominance": 51.95578225,
      "text": "# Backtrace\n\nIf you are a lazy person like me who just log out the error with `{:?}`, do this:\n\n```toml\nanyhow = { version = \"1\", features = [\"backtrace\"] }\n```\n\nAnd then set `RUST_BACKTRACE=1`. With `debug = true`, it gives all the line and column numbers; with `debug = false`, it at least gives the function chain (sometimes partially annoyingly inlined, of course).\n\nReference: https://docs.rs/anyhow/latest/anyhow/struct.Error.html#display-representations"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "For me, its not really a rust issue but getting the gnu debugger fully supported and working on apple silicon is a big miss. Last time I checked it had the best step through debugging experience out of the box"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.85865466666667,
      "arousal": 54.988662,
      "dominance": 58.73015866666666,
      "text": "> Small aside, there's also error messages. Should errors be formatted like \"Error: Failed to do x.\", or \"Failed to do x\"? Period at the end? Capitalization? This is not really the language's fault, but I wish there was an ecosystem-wide standard for formatting errors.\n\nI like [golang's take on this](https://go.dev/wiki/CodeReviewComments#error-strings), to be honest. No caps (except proper nouns), no ending punctuation. It's what I've steered my team to, and it's worked nicely for us."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.035525500000006,
      "arousal": 45.91836766666666,
      "dominance": 55.19652283333334,
      "text": "I mostly agree with you on `Result<T,E>`, I would like to see some sort of \"Exceptions, but get it right this time\" system. Part of the nice part of `Result<T, E>` is that it's part of the signature of the function and you have to explicitly handle the error case. So just have exceptions that are part of the function signature and need to explicitly handle if they are thrown, but also adds stacktrace data at a language level, and you can compose them together just at the function they need to be composed for. I'm thinking something like how Zig does it."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.25497622222222,
      "arousal": 57.47039577777778,
      "dominance": 51.90224222222222,
      "text": "> \"Error: Failed to do x.\", or \"Failed to do x\"? Period at the end? Capitalization? This is not really the language's fault..\n\nIt's absolutely the fault of the language and its standard library!\n\nThe core Rust developers worked on Firefox and had to deal with well-established UX patterns when targeting Windows and MacOS.\n\nA common pattern in those systems is to propagate *error codes* and then format them into display strings using an *internationalization* system built into the OS and/or standard library.\n\nE.g.: how do you show a timestamp in an error? If you naively call \"to string\" or the equivalent in a language, you've almost certainly made a mistake because this is how you end up with 3/4/12 and now *NOBODY CAN TELL* if this is the 4th of March 2012, 3rd of April 2012, or the 4th of December 2003.\n\nI regularly see this mistake in every Linux and cloud product. All of them, all of the time do this, and *randomly* so there is zero hope of figuring out what the pattern of the mistake is and compensate for it. You basically have to have a day that's greater than 12 but not the 24th or you're screwed. What's super fun is if there's like three different date/time formats *on the same web page* because three different developers made three mistakes in the one product.\n\nIf you don't speak English natively, I guess you can just not work professionally in IT, am I right? Just give up.\n\nWe live in the future and we haven't figured this stuff out, that Windows and MacOS got right back in the year 2000."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.263794499999996,
      "arousal": 57.21844316666667,
      "dominance": 57.99319716666667,
      "text": ">Rust analyzer feels like it's reindexing the entire project (minus dependencies) every time you type\n\nI've said it before, and I'll say it again\n\n        \"rust-analyzer.checkOnSave\": false,\n\nis required for a sane workflow for any workspace that's larger than just a couple of crates. \n\nThis will show you only _some_ errors, but the right fix for that is to improve ra/share code with rustc until it detect all errors. (and until that's done, what you could do is use \"rust-analyzer: Run\" action to get the full set of errors on demand). \n\n:thinking: I am wondering if implementing flycheck in rust-analyzer was a mistake, and what should have happened instead is a separate VS Code extension to run `cargo check` on save?"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.064189846153845,
      "arousal": 60.927961076923076,
      "dominance": 57.142857,
      "text": "I'll have to disagree with you on errors and `Result<T,E>` , not that it isn't a PITA. It sure can be. But I'm really surprised you would hold up Java as an example of how to do this better. Java's interpretation of exceptions is one of the reasons many people hate Java.\n\nJava's approach to exceptions was copied by nobody, despite languages like C# being modeled after java in the early days!\n\nIn practice this is how Java plays out...\n\nInitially you are led to believe you can simply propigate using `throws`. But that rapidly becomes a snowball of exceptions that have absolutely nothing to do with the immediate signature of your method, only the deepest grandchild of implementation.\n\nNow what you \"should\" do about this is to try to avoid propigating errors that don't make sense for the signature of your method. It's going to take a hell of a lot of code that `catch (FooBar e) {raise BazBob()}` on a case-by-case bases. If this were rust I'd say don't add to your error wrapper if you can avoid it, make sure the errors are specific to the signature of your method.\n\nBut that's not what developers do. People are lazy! Instead they just raise `RuntimeException` or `IOException`  all over the place. When libraries do this, it undermines the application's ability to do anything useful with the error at all and so **forces** the app to vomit an internal error to onto screen. At that point the library may as well simply `panic!`\n\n>you just want to propagate the error up and display the end result to the user\n\nReally?!! As an end user there's nothing worse than seeing a stack trace. I may be a dev and know what it means, but most users hate it. It's only very marginally better than writing \"something went wrong\" with no information at all."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "you would really love zig error handling"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.28117950000001,
      "arousal": 64.9659865,
      "dominance": 67.517007,
      "text": "The error situation combined with async makes it all pretty bad. Rust is good for writing really low-level (in the system) components such as the Bluetooth daemon in Android, but for regular applications a GC'd language and exceptions make for much more readable and maintainable code."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.09876555555554,
      "arousal": 62.19450733333334,
      "dominance": 65.25573188888889,
      "text": "I agree on the single error type. I have that in my system, since I use almost no 3rd party code, not a lot of the runtime and mostly wrap the little I use. So everything works in terms of a single, monomorphic error type. I had the same setup for my old C++ system. So many problems and annoyances just go away.\n\nMy argument is that if anyone is reacting to errors up stream and making decisions, then it's not an error, it's a status. So I don't need to have all kinds of different error types with all kind of different information. And it's an unenforceable contract anyway, which is why you shouldn't do it. Nothing is going to tell you that this five layers down library stopped generating this error that you are depending on to make a decision.\n\nIt also means I can have simple macros to generate errors and logging, my logging system can use the same type and can monomorphically stream the errors to file or the log server, and the log server can stream them back in and fully understand them, not treat them like text or whatnot.\n\nI use three strategies. One is it's just an error and no value. It's an error and a value. Or it's an error plus a value enum, one of the values of which is Success<T>, and the others provide status information. So I'm not having to look at errors and decide things, they call can auto-propagate, and only statuses are things that I need to react to. \nAnd most any call that returns something like that has a trivial wrapper version that turns everything but Succcess() into an error, for callers who don't care.\n\nIt contains a call stack, so I can at key points insert some call stack info to make it clearer what path was taken if it might be ambiguous or important.\n\nIt works about as well as one can reasonably expect, though strict error handling is never simple. Of course no one will ever agree on an actual, single, monomorphic error type for Rust, so it'll never be solved in practical terms even if it could be technically. At best it'll be a blessed type erasing wrapper thingie, so the issues will never go away.\n\nI also don't have the compile time issues for the same basic reasons. I don't use big third party code with lots of proc macro stuff, or stuff like Serde that has me inserting proc macros all throughout my own code. And I don't have an almost completely generic code base, as some folks seem to. So the compile times are quite reasonable so far, though it still has a good bit of growth to come. The analyzer scan will become a problem for me by the end I'm pretty sure."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.07029475,
      "arousal": 47.0238095,
      "dominance": 57.65306125,
      "text": "Regarding error types, have you looked at [error_stack](https://docs.rs/error-stack/latest/error_stack/)?\n\nIt's closer to Java-style error reporting, because the error type you define only has to care about the *local* context—what were we doing that went wrong? There's a wrapper `Report` type that handles chaining together the history of error values as you cross context boundaries. The `Report` also provides a place to attach additional context as the error propagates."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.5707807142857,
      "arousal": 56.81891785714286,
      "dominance": 63.524457285714284,
      "text": "Regarding errors, is there any mileage in Result<T,Any>  or some kind of Result<T, &dyn ErrorConvertibleToString> that could be quite universal?\n\nI was recently concerned about my compile times but I find the module system & cargo make it reasonably easy to setup smaller testbeds for features; i also found leaning on dyn a bit more at the top levels let me break things into smaller crates, i can still get sub second builds for individual systems & top level whole application changes for some  tasks.\n\nI also find #\\[test\\] really handy\n\nRegarding the orphan rules, I wish there was a workaround like a #\\[...\\] that declares you know you'll accept the chance of libraries making breaking changes for your application. This kind of code could just be banned from [crates.io](http://crates.io), whilst giving the rust community more freedom when using libs.\n\nThe orphan rules prevent me from using a shared type for my vector maths libs - i have to choose between that or a personal type if I want full control over it (I do) *AND* have operator overloads. I bounced on this in my codebase early on, and have a bit of residual mess in my maths traits where i was trying to hedge my bets.\n\nfields in traits could also help with this.\n\nwith the vecmath thing.. I'd want to be able to declare \"here's a type that will be x:T,y:T,z:T, i am definitely not going to add more fields to it, and i want it to be compatible with other libs x,y,z, whilst retaining full control over the functions that use it in my own codebase\".\n\nthere's various options available and all have downsides so we're back to the temptation to bounce  between them (\"ok maybe the codebase would be better if i lean on \\[T;3\\] as a storage & interop format, ok now i'll make some maths helpers that work directly on that, arghghh, now i've got 2 maths libs in my codebase..\").\n\nAnyway whilst Rust isn't perfect, and switching language has certainly cost me a lot (many years of bouncing back & forth being unsure if i'll stick with it basically delayed my projects), I think it gets more right than wrong. I have some ideas on how it could be softened a little to be less offputting to newcomers but i'm sure the team has seen similar proposals and there's many voices that would pull it in different directions."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.63718849999999,
      "arousal": 52.324263,
      "dominance": 52.7210885,
      "text": "> Should errors be formatted like \"Error: Failed to do x.\", or \"Failed to do x\"? Period at the end? Capitalization? This is not really the language's fault, but I wish there was an ecosystem-wide standard for formatting errors.\n\nSame. It really bothers me that I can’t keep it consistent. And I can’t keep it consistent because there are aren’t rules I’m aware of."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Compile times suck ass even on small projects"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.63718825000001,
      "arousal": 59.325396999999995,
      "dominance": 68.82086175,
      "text": "I really like your post and I agree with pretty much everything in it. I sorely miss Java's ability to simply nest error types like matrioshka dolls and leaving it easy to treat errors either as a family or by type and even by underlying cause if desired."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "with your criticism of the orphan rule, I'm curious how it compares to java?\n\nin my experience, the orphan rule in rust is strictly more permissive than anything I've seen in statically typed object oriented languages. that said, I've not used *recent* java or c#, so there may be new developments in that area that I've not seen.\n\ncompare rust:\n```rust\ntrait MyTrait {}\nstruct MyStruct {}\n\nimpl MyTrait for MyStruct {}\n\nimpl MyTrait for String {}\n\nimpl Read for MyStruct {...}\n\n// impl Read for String {...} // illegal\n```\njava:\n```java\ninterface MyInterface {}\n\nclass MyClass: MyInterface, Readable {}\n\n// how to implement MyInterface for String? (allowed under orphan rule)\n\n// how to implement Readable for String? (forbidden by orphan rule)\n```"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.28571425,
      "arousal": 51.30385475,
      "dominance": 61.366213,
      "text": "I tried to do some game dev in bevy mind you, and the build took 20 minutes on my laptop. Sure my laptop is not exactly a cutting edge machine, but that is horrendously slow."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\"Rust loves to be explicit\"\n\nHeh, like enums that are actually tagged unions everywhere"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You missed creating a singleton"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.35386100000001,
      "arousal": 59.022556473684205,
      "dominance": 57.47105857894737,
      "text": "> There's nothing worse than adding a dependency, calling a function from it, \n> and then having to go figure out how to add it's own error type into your \n> wrapper error type. \n\nIt’s funny because I think _the exact opposite_. I think that having the\ncompiler telling you that your code can now fail with more sources / causes,\nand forcing you to either transform those errors into something meaningful or\nbubbling them up your own error stack is a pretty great design. You mention\n`thiserror` (i.e. `#[from]` here), and I think such utility should probably be\npart of the core of the langage (just like `#[default]` for `Default` impls for\n`enum` is).\n\n> if you make a second function doing something different, you're probably going\n> to want a whole new error type for that. \n\nHonestly, I think this is dishonest. I’ve yet to see a library that has a\ndedicated error type for every possible function they export. Once you have\nthe `From` impl converting the error type of the library to your own type, the\n`?` takes care of all the boilerplate for you.\n\n\n> Then there's application code. Usually you don't care about how/why a function\n> failed - you just want to propagate the error up and display the end result to\n> the user. \n\nUsually, says who? It’s not uncommon to pattern match on error to do various\ndifferent things. It’s especially typical when doing low-level IO (I’m thinking\n`mio` out of experience), and interfacing with sys crates (like at work we have\na wrapper over Kafka client communications, and we pattern match against their\nerrors to do various things).\n\n> Sure, there's anyhow, but this is something that languages like Java handles\n> way better in my experience.\n\nJava uses exceptions that can be completely omitted from the type signature. I\ndon’t see how that’s _way better_.\n\n> Besides the obvious issue of wanting a single dynamically dispatched type, the\n> real issue to me is backtraces. \n\nErrors and backtraces are two different things to me. Errors are _logical\nerrors_. A gRPC call failing should provide an error. Should it provide a\nbacktraces? I really don’t think so.\n\nAlso, backtraces are actually a pretty poor instrument when you want to\nunderstand what’s going on with your crashed application. Coredumps are of a\nmuch more value, IMHO.\n\n> With Java, I see a perfect log of exactly what function first threw an error,\n> and how that got propagated up the stack to whatever logging or display\n> mechanism the program is using. With Rust, there's no backtraces whenever you\n> propagate an error with the ? operator. \n\nAgain, errors, logs and backtraces/core dumps are very different things. If you\nwant observability, you want to have a look at the `tracing` crate for instance.\n\n> Libraries hit this issue too - it's really hard to figure out what the issue\n> is when a user reports a bug, as all you have is \"top level function failed\"\n> with no backtrace, unless it's a panic. Same with tracking down why your\n> dependencies are throwing errors themselves. \n\nRust gives you `enum` types for your errors. If the library provides poor error\nfeedback, then the errors used in the library are not descriptive enough. The\nargument you used here is actually an argument I have against Zig; since it’s\njust regular unions (not tagged ones), there is no way to attach a context to\nthe error. In Rust you can.\n\n> However, while it's zero-cost and very explicit, I think Rust made a mistake\n> in thinking that people would care (in most cases) why a function failed\n> beyond informing the user.\n\nWoah… no, not at all. I see two use cases of errors:\n\n- Error types in libraries. They are used by other programmers; dependent\n  projects. Whether they materialize to the user is entirely dependent on what\n  the caller library / application does.\n- Error types for end-user applications. Those can indeed be provided to the\n  user, but here, the type of reporting can be very different from a user to\n  another. A video game failing to fetch some assets shouldn’t provide a\n  backtrace to the gamer, and on the same spirit, it shouldn’t just bluntly say\n  “sorry, internal error.”\n\n> I really think it's time Rust standardized on a single type that acts like \n> Box<dyn Error> (including supports for string errors), and automatically \n> attaches context whenever it gets propagated between functions. It wouldn't be \n> for all uses cases, as it's not zero-cost and is less explicit, but it would \n> make sense for a lot of use cases. \n\nI disagree. And again, for tracing through your code, just use the `tracing`\nlibrary with spans etc.\n\n> Small aside, there's also error messages. Should errors be formatted like \n> \"Error: Failed to do x.\", or \"Failed to do x\"? Period at the end? \n> Capitalization? This is not really the language's fault, but I wish there was\n> an ecosystem-wide standard for formatting errors. \n\nApplication-dependent choices. It has nothing to do with the language.\n\n> The orphan rule sucks sometimes, and the module system is maybe too flexible. \n\nI agree with that and I wish we had named impls.\n\n> Rust analyzer feels like it's reindexing the entire project (minus\n> dependencies) every time you type. Fine for small projects, but borderline \n> unusable at Bevy's scale. \n\nI face similar problems at work in our monorepository. I hope they can fix that\nat some point."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.8594104,
      "arousal": 48.979592000000004,
      "dominance": 58.8208616,
      "text": "I totally agree with you on \\`Result<T,E>\\`. I think they had the right spirit, but totally botched the implementation.\n\nDefining error enums is so clunky and frustrating. What I *want* is something like TypeScript's union types where I can accumulate a wider and wider error type, like \\`Result<T, E1 | E2 | E3>\\` and have an easy syntax for composing errors. What I *have* is this hideous tree of nested error enums for every single function in my application. But I don't want to abandon that entirely and use \\`anyhow::Error\\`, because there are cases where I need to inform the user the difference between \"something went wrong internally, it's my fault, try again\" and \"it's your fault, please fix your input for Foo.\""
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.20231811111111,
      "arousal": 54.81229533333333,
      "dominance": 58.21365566666667,
      "text": "have you looked much at [zig](https://ziglang.org/)?  theyve effectively solved all of your pain points here besides IDE tooling which is already planned. not to say you should switch languages of course but you may find it interesting\n\nzigs error system is very simple but pretty nice, every possible error across the entire project is part of a global \"error set\" which is really just an integer, a u16 by default. they carry no information with them other than their name and error return traces are part of the language and enabled by default for debug builds. the [langref](https://ziglang.org/documentation/0.13.0/#Errors) gives a more in depth explanation.\n\nthe module system is also very simple, its really just a file that might import some other files. if something is \\`pub\\` its public to everything that can access the module, theres no special naming or path searching, if you have a module called \\`foo\\` you \\`@import(\"foo\")\\` and never anything more or less.\n\nfor your problems with compilation speed, zig is actually *extremely* close to an MVP of their incremental compilation model which does in-place binary patching like you were wanting in rust. its been planned for many years and the compiler (and even certain language features) have been designed with this in mind so its likely not something that rust could easily do unfortunately. basically the entire core team is working on it rn and i'd probably expect a working (albeit probably buggy) version within the next few weeks. sadly its gone now but a while back the creator of zig did a rough demo of the incremental compilation and it was extremely cool, small recompilations were like sub 1ms. heres [a nice thread](https://ziggit.dev/t/how-zig-incremental-compilation-is-implemented-internally/3543) explaining some of the internals of it if youre interested"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.899660125,
      "arousal": 51.927437749999996,
      "dominance": 57.610544250000004,
      "text": "> I really think it's time Rust standardized on a single type that acts like Box<dyn Error> (including supports for string errors), and automatically attaches context whenever it gets propagated between functions.\n\nAn approach like what Zig or Roc do might be better.\n\n> Organizing code across crates is pretty difficult.\n\n> But Rust fundamentally treats 1 crate = 1 compilation unit, and that really hurts the end-user experience.\n\nYeah, whole program compilation would be nice, but it is not foreseeable.\n\n> It's much easier to jump into a large project in Java and know exactly where a type can be found, than it is for Rust.\n\nJust `rg` it?\n\n> But I really wish the compiler could just maintain a graph of my project's structure and detect that I've only modified this one part. This happens all the time in UI development with the VDOM, is there any reason this can't be implemented in cargo/rustc?\n\nComplain on internals.rust-lang.org?"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 18.253968,
      "arousal": 52.040816,
      "dominance": 39.342404,
      "text": "> whether zero-cost is a sensible tradeoff to begin with. It's been discussed to death, I don't have anything to add to it.\n\nWhy would zero cost be a bad thing? Sorry, I am new and unaware of this discussion."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.3922905,
      "arousal": 60.090703,
      "dominance": 62.414966,
      "text": "Good news: Improvements to async/await are on the 2024 development goals."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "Explain why \\`cargo check\\` or \\`cargo clippy\\` runs in 1 to 2 seconds in terminal, but in VS Code on the same project, \\`rust-analyzer\\` takes 20-30 seconds or more. That's a problem with \\`rust-analyzer\\` (and its design), not \\`rustc\\` IMHO. I know, having to use TypeScript (yuck!) to write VS Code extensions is part of the problem, but it shouldn't be THIS BAD. The authors of \\`rust-analyzer\\` probably way over-complicated things; there is no reason checking a file in VS Code should take more than marginally longer than running \\`cargo check\\` or \\`cargo clippy\\`."
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "I use CodeMate on Visual Code and personally this is very good Ai agent imp"
    },
    {
      "post_title": "I've used (and loved) Rust for ~10 years. Here are the ways it disappoints me.",
      "created_utc": 1721629133.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Create 1 error type for all private functions and 1 error type for each public ones."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 33.106576,
      "dominance": 50.680272,
      "text": "My rust database was able to do 5 million row (full table scan) in 115ms"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 67.2052155,
      "arousal": 40.87301574999999,
      "dominance": 55.640589500000004,
      "text": "https://preview.redd.it/bmh9s1zlm7gf1.png?width=216&format=png&auto=webp&s=34cc46283121929d8b2544755b0c09f0f935fa8a\n\nHello everyone, I wanted to share that my custom database written from scratch in Rust, was able to scan 5 million rows in 115ms (full table scan).   \n\n\nAnyone interested checking the code, it can be found here:   \n[https://github.com/milen-denev/rasterizeddb/tree/rework\\_db](https://github.com/milen-denev/rasterizeddb/tree/rework_db)\n\nI am completely reworking my database."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's great :) I'd share it in [https://www.reddit.com/r/databasedevelopment/](https://www.reddit.com/r/databasedevelopment/)\n\nHow does your db do it?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How big is each row?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you sure you want to use mmap in your dbms?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cool, how did you chunk (sizing) the parallelization? Any specific chunk strategy?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.6473922,
      "arousal": 52.9138322,
      "dominance": 59.94331050000001,
      "text": "I'm super cool with people writing their own databases, but some of the performance claims here and especially comparisons with Clickhouse, look... weird. Sorry in advance for being harsh.\n\nSo just for reference, the benchmark and code, as written right now (note: very quick investigation, might be wrong in some places. I also needed to do minimal changes to run it on my Linux, as the current source has hardcoded Windows paths):\n\n- operates on a table with 10M rows (`consolidated_write_data_function(5_000_000 * 2)`, though for some sus reasons populating panics half the time, and other times produces slightly less than 10M rows),\n- the benchmark basically does a `where id > hardcoded_number` and that's it,\n- the table is row-oriented, I'm assuming the second `POINTERS` file contains offsets into each row,\n- for each of 2000 batches of 5000 (pointers to) records, spawns a Tokio task\n- inside the task, for each row pointer (plain loop), it iterates the expected columns (here hardcoded to only `id`) and copies the data to a row object, then passes this single row to the Transformer object which is basically a huge `switch` (still per-row) that decides which math operation to do on the input column value\n- EDIT: also the main iteration loop and the function that reads bytes for each row's field are async, which is also not the most perf-friendly thing in a tight loop (but probably not the worst offender here, and it doesn't actually do any async FS operations if mmap is available)\n- if the row matches the condition, it's passed via tokio mpsc channel - and the final task aggregates all the rows from the channel into one Vec at the end. It waits to start reading from channel until all parallel tasks are done (why?), so the channel temporarily stores a copy of all (matching-condition) rows.\n\nAnd that's the happy path, but I'm not going to mention what happens for non-trivial expressions or when mmap is not available or anything not involving the hardcoded microbenchmark, as I'm assuming it's all a WIP.\n\n(Also, if I change the microbenchmark condition to let more rows pass the condition (say, 4M rows), the execution time jumps a lot and memory use temporarily jumps to 12GB - weirdly high considering the input data is only 3GB and the benchmark is supposed to only read the id column, not the entire row. My guess is it could be related to the mpsc channel being a choke point?)\n\nThe work done per-row feels quite inefficient, to be honest. Admittedly you took care to avoid some (no clue if \"most\" or \"all\") repeated allocations. But still, it doesn't feel like it should take 100ms to just compare 5M ids against a constant.\n\nTo be honest, I'm mostly just miffled about your quote about Clickhouse:\n\n> By reading what Clickhouse does, if it's unordered and unoptimized, probably will take many hundreds of ms. If it's perfectly optimized probably ms. I am going to implement hash indexes, which will speed this up into the sub-ms space.\n\nCH is column-oriented (so, say, numeric ids are in a consecutive block, without per-row pointers) and running a `id > 5` or `id * 5` runs the expression on the entire block at once, with basically zero per-row overhead. (think like `dataframe_block[\"id\"] * 5` in pandas); it's designed for efficient dense scans in exactly the ways that your current high-level db design isn't.\n\nFor comparison, an example `select sum(metric) from rows where some_unindexed_column > 15` in CH shows this (after the data settles in cache, ~20x slower if uncached):\n\n    1 row in set. Elapsed: 0.119 sec. Processed 154.62 million rows, 2.32 GB (1.30 billion rows/s., 19.44 GB/s.)\n\nAnd again, I'm not bashing you for not being as fast as a production database, but throwing claims that a full scan without an index can't be faster is just weird.\n\nAdmittedly you also never actually stated if it's supposed to be used (and thus compared with others) for OLAP or OLTP, and at its current state it's hard to guess. Focusing on full scans (and some comments asking about CH) suggests OLAP, while mentioning hash indexes and ACID (and internal SmallVec optimizations for small result row counts) makes it sound more OLTP. If it's the latter, then there's probably no point talking about column storage or comparing with CH."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.913832,
      "arousal": 54.7619045,
      "dominance": 64.6258505,
      "text": "Thank you for sharing.\n\nI'm also playing with database building - not for production use, but just for education. Your database is waaay more advanced :) and great to study as well."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How does it compare to Clickhouse ?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.91609975,
      "arousal": 52.154195,
      "dominance": 55.753968,
      "text": "This is a very common.. it's very easy to create a high speed \"database\" when you lack all of the features and functionality of a real database. At this point it's more of a hardware benchmark. \n\nChecked your repo and... Sorry but thats not a database, you built a datastore... otherwise known as a rocketcar with no brakes.. the performance problems that come later in development and what special tricks you do to solve them is what makes or breaks a db. Given the use of mmap you're very very far away from that moment.. \n\nKinda funny how almost every new programmer gets suckered by this.. they write a basic skeleton of a db and it's blazing fast and they think the have the next big thing in db tech..  do a search for database on GitHub and you'll find endless dead projects.. it's a pitfall trap..\n\nNo offense intded but this is a rite of passage.."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's impressive. How does it compare to other databases?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.2063495,
      "arousal": 52.437642,
      "dominance": 53.854875,
      "text": "That's nice but I don't see ACID, a db is near useless without it, it really doesn't matter how fast you can read corrupted data."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just because I feel like bragging: my commercial database (written 80% by me) can do a billion rows grouped in 50 million groups in 1.2s, which likely means it can do something like ~100 million rows in that 115ms."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you welcome to contribute"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ohh this looks very interesting!  Starred your project and watching."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Forgive my curiosity. But how well would that scale with 1 million concurrent accesses?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.399093,
      "arousal": 41.950113,
      "dominance": 56.462585,
      "text": "this is really cool! im a beginner at Rust and am currently playing around with embedded databases, and the one im using forces me to cast the key and value since it isn’t as flexible and is slower than your database i believe. I’m definitely going to check this out, tysm for sharing!"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "how this 115ms compares to postgres or mysql?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.043084,
      "arousal": 63.038549,
      "dominance": 76.417234,
      "text": "I think TerminusDB is implemented in rust and I remember them being very proud of their speed."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Maybe I’m missing something about Rust, but why does the code look like an `unwrap()` convention cult meeting :)\n\nhttps://github.com/milen-denev/rasterizeddb/blob/rework_db/rasterizeddb_core/src/core/database.rs"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This reminds me of the 1BRC, 1 billion row challange: https://github.com/gunnarmorling/1brc\n\nIt was a Java challenge to see who produce the fastest implementation (00:01.535). There were some rust implementations too: https://github.com/gunnarmorling/1brc/discussions/57"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 64.965986,
      "dominance": 71.655329,
      "text": "Hi congrats on great achievements !!!\n\nIs this mixed workloads (read/write), does the benchmarks run on \"hot\" db (mostly in mem)? And the last famous question, when it mixed workloads, do you do fsync and how often you do fsync?"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 33.106576,
      "dominance": 50.680272,
      "text": "Cool!\n\nDoes having support for big data table such as Iceberg negates all these optimizations"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How does this compare to polars"
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you performing direct I/O? Or disable filesystem cache? You don’t want to provide a benchmark of the OS filesystem cache."
    },
    {
      "post_title": "My rust database was able to do 5 million row (full table scan) in 115ms",
      "created_utc": 1753967970.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thoughts? u/apavlo"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "JT: Why I left Rust"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "An initial response from the Rust Project can be found here: https://www.reddit.com/r/rust/comments/13vbd9v/on_the_rustconf_keynote_rust_blog/"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.368481,
      "arousal": 56.7743765,
      "dominance": 64.76757375,
      "text": "Just so there's no confusion on the RustConf side, I was the organizer involved. I absolutely fucked up by even entertaining this notion at all. At the time I thought that saying no to project leadership on this would have caused drama. As you can see I achieved my goal of avoiding drama.\n\nWe're working to remedy the situation as best we can. It's unlikely I'll be able to answer any questions about specifics until all the decisions have been made about how to remedy this but feel free to ask them anyway"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.85034,
      "arousal": 58.125472333333335,
      "dominance": 66.250945,
      "text": "As someone trying my hardest to introduce Rust at my workplace, I _really_ hope none of my coworkers hear about this stuff. This drama could negate months of progress in building confidence about Rust with management at my company."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I honestly wouldn't expect /r/rust to be the most dramatic subreddit I read. That's quite unfortunate. It seems every other week there's a different problem. \n\nDoes anyone what was the actual talk about?"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.04308366666667,
      "arousal": 71.80650033333333,
      "dominance": 76.643991,
      "text": "I love Rust the language, but the project and foundation have really burned away most of the goodwill that has been built over the years. I don't feel very confident in the leadership of Rust, at least not like I used to.\n\nLeadership is definitely tough, but it really feels like we're just stumbling from debacle to debacle. Then you look at this post, the one by boats, and the metric ton of subtweets and vagueposts which all keep touching on the fact that something is not quite right at the very heart of it. How did we end up in a situation where an individual was able to unilaterally make a decision like this with no accountability or even apology as of yet?\n\nSomething like that doesn't \"feel\" like Rust."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 47.505669,
      "dominance": 60.657596,
      "text": "\"A person in Rust leadership then, without taking a vote from the interim leadership group (remember, JeanHeyd was voted on and selected by Rust leadership), reached directly to RustConf leadership and asked to change the invitation.\"\n\nWho is this person?"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.5034015,
      "arousal": 67.743764,
      "dominance": 63.265305999999995,
      "text": "I am a little confused by the groups here.\n\nWhat is the rust interim leadership group? Is that the core team? \n\nAnd what was the team that raised the objection? Also the core team, or a different one?\n\n---\n\nOne point that is not at all addressed here is why the keynote was offered in the first place when there was a team who had such strong objections.\n\nEDIT: Okay I guess it's the group mentioned here: https://blog.rust-lang.org/inside-rust/2022/10/06/governance-update.html\n\nWhich makes it even more bizarre, because that group supposedly has a representative from each team?"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What is it about the Rust organization that makes it so insistent on complete opacity in its decisions? Drama after drama, everything seems to come down to anonymous actors hiding behind committee bodies that nobody is willing to identify and hold accountable."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.51441528571429,
      "arousal": 61.01392942857143,
      "dominance": 68.69128585714286,
      "text": "As policy I never comment on situations like these, but I'd like to just add one bit of opinion here as someone unfamiliar with the events or people involved, but someone who spends unhealthy amount of time writing proc macros:\n\nHaving read the blog post about the subject of the proposed talk, it was in my mind 100% keynote worthy. Even if this was just an experiment that would possibly never become a stable feature, it highlights both how powerful proc macros are today (esp. compared to similar mechanisms in other languages), and how much they tend to mask shortcomings of the language. Having those be in a spotlight during a keynote would have been a net good, even if some people took the wrong take from it that it's about a feature that's guaranteed to land in the language eventually."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.25234871428572,
      "arousal": 64.73922914285714,
      "dominance": 71.12082914285715,
      "text": "How is it a good idea for JT to resign? If the good people go out of their way to find the minimal blame that could be placed on themselves and resign because of it, while the bad people reject all responsibility and stay... we won't end up with a better leadership, but a worse one, no?\n\nEdit: I know good / bad people is a problematic simplification, but you get my point."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.825397,
      "arousal": 54.705215499999994,
      "dominance": 65.6462585,
      "text": "https://thephd.dev/i-am-no-longer-speaking-at-rustconf-2023\n\nThis provides good context for JT's post as this is JeanHeyd Meneide's account of what happened from his perspective."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "The level of bureaucracy bullshit is crazy. Why just not collectively select one new team of respected people, to drive the project and start from scratch?"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.98218342857143,
      "arousal": 55.782312999999995,
      "dominance": 60.220278428571426,
      "text": "> A couple team members had strong opinions/discomfort against JeanHeyd being selected as a keynote speaker, as best as I understand it, because of the content of JeanHeyd's blog post on reflection in Rust.\n\nI'm not sure if I get it. Is [this](https://soasis.org/posts/a-mirror-for-rust-a-plan-for-generic-compile-time-introspection-in-rust/) the blog post in question? I remember scanning over it when it first popped up on this subreddit, but I didn't really have time to read the whole thing. Is there something that was perceived to be offensive here, or is it literally just a technical disagreement? (And if the latter, why not just, y'know, make the dissenting argument?)\n\nThese might not be answerable questions. Not trying to provoke speculation or fan the \"drama\" flames or whatever, kind of just hoping someone with more context might be able to shed some light."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.4784582,
      "arousal": 57.3922904,
      "dominance": 61.0657596,
      "text": "I am just confused about all this nonsense. \n\nWhy was there yet another vote after the initial one has already been made? Like, say what you have to say when you are deciding for the keynote speaker before sending out an invitation, don't make another vote to express doubts after the fact.\n\nWhy not name and hold the person who clearly abused their power to bypass the voting system accountable? What is even the point of the votes and groups if individuals seemingly can make whatever decisions they want to make?"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.181406,
      "arousal": 55.487528399999995,
      "dominance": 60.58956920000001,
      "text": "With respect this isn't the first time the rust leadership had acted in a disrespectful, and entitled/elitist manner.\n\n\nThe difference here is that this time it was directed at someone, who you essentially without knowing pulled into the picture by suggesting him as a keynote speaker. And even though there was a vote to accept, the instigation was still partly aligned to yourself.\n\n\nI do commend that you are stepping down after this went down, and you are being transparent as possible. I think it's disgusting the way that this was handled.\n\n\nUnfortunately to me, I'm seeing a pattern of the leadership group that really needs to be stopped before it ruins the language. Things are too opaque, and come across a lot more like a language being run by a large multinational corporate, that it does a language that it at its core open and accessible.\n\n\nI really hope that this action by yourself, and the transparency you are giving, along with the 'woopsi' of the trademark escapade result in some rethinking if how the rust leadership group acts, holds accountability.\n\nEdit: spelling"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.20861683333333,
      "arousal": 58.333333333333336,
      "dominance": 60.31746016666667,
      "text": "Who are these people? Why is there no names? I hate that every time shit happens its always some anonymous ”key figure”. And then nothing happens and boom, same shit next year. There needs to be transparency and people need to be visible if they are in key positions."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.2902495,
      "arousal": 49.20634925,
      "dominance": 61.961451249999996,
      "text": "\nI'm glad JT provided some timeline context from their perspective of the whole talk-revoking shenanigans. Still a bit unclear on the whole objection bit. \nHopefully someone in Project leadership can step up to share their side of the story and maybe where things broke down on that end. \n\nThe whole situation is really not a great look for the Project, especially given the context of:\n> this would have also been the first keynote by a person of color at RustConf\n\n:/"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wondering if mods will lock this thread too and delete all the comments? The Last one looked like this is being censored: https://www.reddit.com/r/rust/comments/13sqdt7/i_am_no_longer_speaking_at_rustconf_2023_thephd/"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 47.845805,
      "dominance": 58.61678,
      "text": "It seems like some important context... Or subtext... Is missing. Nominally, it sounds like the org (or more accurately, someone acting unilaterally on behalf of the org, after there was some internal pretense of democracy ) didn't want the content of the intended speech to be seen as representing their goals, and downgraded the speaker from keynote to normal talk in a weirdly abrupt way without clear communication... Which all just reeks of... Like, someone shit in someone else's milkshake and this is just petty revenge playing out or something that no one's talking about"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.80498866666666,
      "arousal": 58.786848,
      "dominance": 69.00982599999999,
      "text": "It seems like the problem is: 'one person can go email rustconf to tell them to change a talk invitation without alerting anyone else'. The obvious fix is to have RustConf to deliberately send a group-wide email about the change, or require some sign-off process.  \nThat it happened is bad, but it seems like an organizational issue that just needs relatively simple rules to guard against in the future. Look into who did it, and why they did it, and make a point that it shouldn't happen again. \n\n> Rust acted as a cruel, heartless entity that did not care about JeanHeyd and treated him as disposable. Easy to offer a place of respect and just as quick to snatch it away. That is what Rust is because that is what Rust did.\n\nI don't entirely appreciate the exaggeration and anthropomorphization here. This attributes all bad decisions to the Rust language/culture/organization all at once. This was a bad decision by whoever decided that they should take individual initiative to remove them, but exaggerating that to the abstract Rust (or even Rust Foundation, or even Rust leadership since it was an individual) is a rhetorical move that moves further away from truth and closer towards a general lambasting that doesn't help."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 62.585034,
      "dominance": 60.544218,
      "text": "This keeps getting better. The governing body of one of the most promising languages of this decade is run by manchildren."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.03502155555556,
      "arousal": 58.629377777777776,
      "dominance": 62.27009311111111,
      "text": "Most organisations are made up of a leadership team and a head honcho (ceo, managing director, whatever) and are hired on their credentials. These people report to a board - made up of shareholders. This model has proven to work.\n\nIt’s always fascinated me how open source projects organise themselves - often with people that are amazing technically, but lack leadership qualities needed to run a project of this size - often leading to loads of drama - it’s part of life. You just have to hope it doesn’t become too toxic.\n\nLinux model works well - there’s basically one person in charge and responsibility is delegated. It’s not ideal to have a dictatorial model - but it too - clearly works.\n\nI think models where a working group of representatives nominate the main decision maker - who then builds a team around them is a good thing. This means that lines of accountability are set. I don’t know the ins and outs of how the rust leadership is setup - but from all the emotion flying around there doesn’t seem to be a model where you can hold that leadership team accountable?\n\nA resignation achieved very little - other than raising emotional reaction higher. It may serve to get the desired result, but ultimately shouldn’t be the way you need to get the required changes."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.30385475,
      "arousal": 56.972789250000005,
      "dominance": 53.85487525,
      "text": ">It was JeanHeyd who called Rust out for having no Black representation among Rust conference speakers. Rightly so, as both the Rust organization and the conferences had little to no Black representation.\n\nIs this somehow meant to imply that it is a race thing?  \nIf so that is extra terrible.  \n\nBut we should also remember the demographics, there are not that many black software developers.  \n\nSo maybe it is unrelated? Please JT clarify"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.44583976923077,
      "arousal": 62.78562715384616,
      "dominance": 62.79434846153846,
      "text": "What I'm reading is that the Rust Project is exhibiting some of the same awful and compassionless behavior the rest of the communuty can put on.\n\nThere's people basically stalking GCC-RS through reddit in the community trying to get them to leave Rust, alternative formatting means you need to be stopped, write the wrong lints and be accused of attacking the community. \n\nIf they don't like you, they'll use rhetorical tricks (there's a couple rounds of \"I don't get it\" gaslighting going on right now in the forums). When they have power, they'll start putting organizational roadblocks in your way, and build bigger and bigger hurdles. You'll be constantly accused of things and will have to constatntly justify yourself.\n\nAs above, so below. I've been pained by this for a while, and have been complaining about the whole \"social pressure\" strategy for a while now. Because once the whole things was normalized, of course the majority will use that open door to keep people out.\n\nI'd be happy to see some changes in approach at the top, and maybe it will happen. But after watching these mechanics for years I'm finding myself rather cynical.\n\nI applaud JT for recognizing the harmful mechanics and deliberately not being a part of them.\n\nEdit: Even in this thread, part of the mob is not looking for accountability, but for a target. The whole Rust project is accountable for their collective failings. The leadership is the group that has the power to fix things. Reddit making some persons life hell isn't a solution at all. It only makes things worse."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 43.990929666666666,
      "arousal": 54.780801499999995,
      "dominance": 53.62811766666667,
      "text": "> A couple team members had strong opinions/discomfort against JeanHeyd being selected as a keynote speaker, as best as I understand it, because of the content of JeanHeyd's blog post on reflection in Rust.\n>\n> This discomfort was brought to the interim leadership group as a problem that must be fixed immediately. There was no discussion of the ramifications of making a change at this point. There were complaints that this pushback was not sufficient to require change, but this feedback was ignored. The discussion focused on the discomfort of the team members and changing JeanHeyd away from being a keynote speaker as the only solution.\n\n\"Discomfort\" is not a healthy way of framing technical arguments. It's a programming language, you are not eating or marrying it, it shouldn't be personal. If this sort of rhetoric is prevalent, that suggests a deeper issue."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why is everybody here like \"How could this happen to my Rust!?\". Rust is just another lang with just another set of decision makers, just like C++, Java, and any other lang"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "For rust, it was disappointment after disappointment recently.."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The political BS that is happening with the Rust foundation makes it very difficult for those of us who are creating/porting/proposing projects in Rust within our organizations.\n\nAt some point this political BS is going to affect the evolution/development of Rust in a negative way.\n\nRust foundation leadership (intern leadership and team/group leaders that decide to go rogue), just stop.   If a vote is held for a decision, a vote needs to be held to reverse that decision.\n\nYou are making it harder for us (devs/programmer/sysadmins) to recommend Rust as a language for upcoming projects when there is this crap floating around."
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Taking a step further back there's also the question of how the talk made it to keynote when there were apparently concerns about the topic. \n\nMaybe there should be a team outside the interim leadership that handles public facing roadmap and PR. Whose job it is to gather feedback from the project as a whole about topics before decisions are made?\n\n\"Organisation without a dedicated PR function fails again at PR\" isn't a surprising outcome"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.004535,
      "arousal": 56.462585,
      "dominance": 67.006803,
      "text": "This is extremely embarrassing and everyone involved should feel ashamed. How is it that ive seen and worked on startups that are more accountable and mature than this? \n\nShit like this is why I never get involved in the social aspects of open source projects"
    },
    {
      "post_title": "JT: Why I left Rust",
      "created_utc": 1685252809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.143613,
      "arousal": 59.14588066666667,
      "dominance": 61.980348,
      "text": "Why was his article on reflection in rust controversial enough that a faction in leadership wanted to downgrade him? Did they not WANT reflection in rust? If not, why was it so crucial to him that this man's opinion not be shared? Clearly if rust shouldn't have reflection, then the proposal would have been debated and if the point of view that it should NOT had any merit, it would have been excluded.\n\nAre they so single-minded about the language that they wont let the community entertain an opposing point of view?\n\nI dont know much about the rustlang structural hierarchy, but something like this would have never happened in a more mature body like ISO, IEEE, or OMG..."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What do you develop with Rust?"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 68.06500366666667,
      "arousal": 56.764928,
      "dominance": 59.10808766666667,
      "text": "What is everyone using Rust for? I’m a beginner in Rust, but the languages I use in my daily work are Go and Java, so I don’t get the chance to use Rust at work—only for developing components in my spare time. I think Rust should be used to develop some high-performance components, but I don’t have specific use cases in mind. What do you usually develop with Rust?"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.043084,
      "arousal": 63.038549,
      "dominance": 76.417234,
      "text": "Proud to said that right now, i'm developing flight control software ( mainly for planes and multirotors, but not discarding rovers,etc) using Rust embedded in stm32 :))"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "game engine (according to the '50 engines, 5 games' rule)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.0362815,
      "arousal": 60.487528499999996,
      "dominance": 57.426304,
      "text": "Because of wasm, literally everything and anything. Personal websites, client websites, backends with Axum or Loco, mobile apps and desktop apps with Tauri + Leptos, small helper CLI tools to do automations. Rust feels like a language you can use pretty much anywhere and sacrifice almost nothing (except for compile time lol)."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.7097504,
      "arousal": 66.55328779999999,
      "dominance": 54.14966,
      "text": "I have made some programs for personal use to do maths calculations and generate various outputs. I also made a program to help sort and manage a large library of e-books. \n\nCould I have done this in Python? Absolutely. Am I addicted to the speed and efficiency of Rust in action? Absolutely. \n\nTo be honest I’m just making simple things as fast as possible because I enjoy learning about Rust. I will never have a job that pays me to code but it seems fun and I enjoy getting lost in it."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.552154,
      "arousal": 59.6088435,
      "dominance": 56.037415,
      "text": "My love for programming...\n\nSick of so much Python at work, doing stuff in Rust afterhours is such a breath of fresh air.\n\nI make CLI tools for myself to use during work."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "Little helpers for my daily life at work.\n\nEmbedded stuff on stm32. Mostly test devices for electrical engineering tasks."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.09675,
      "arousal": 57.180650333333325,
      "dominance": 62.962963,
      "text": "Web servers. I really dislike how heavy SpringBoot & other frameworks are & how if you mess up an annotation or configuration or setting somewhere the error messages aren't helpful. \n\nFundamentally it's the feeling that if it compiles, 99 times out of a 100, it just works & the other 1% is usually logic bugs on my part. There's no surprises, no gotchas, no concurrent modification exceptions etc.\n\nSo I'm using rust to power the webserver for an internal dashboard, to process data from an ETL pipeline to a Mongo time series collection & a SQL database, & hopefully in the future to manage external integrations required to make our reports."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Umm.. superiority complex?!\n\n\n/s"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.759637,
      "arousal": 45.124717,
      "dominance": 65.986395,
      "text": "[kernel](https://github.com/an-owl/hootux)\n\nCurrently working on USB2/EHCI driver."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 40.873016,
      "arousal": 59.5238095,
      "dominance": 50.0566895,
      "text": "My whole career I was working with mostly dynamic languages on web but recently diving more into embedded.\n\nC++ is ..... a pain.\n\nI am just starting but Rust seems like a great alternative here when you are doing something more serious."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[spreadsheet](https://rowzero.io)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "High frequency trading.\nMore stable than C/C++ at runtime so faster to reach a working system to test different algorithms."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.176871,
      "arousal": 60.31746,
      "dominance": 72.44898,
      "text": "I develop at music client for Quboz music service. It has a tui, a web interface and an “rfid” interface. All rust!\n\nhttps://github.com/SofusA/qobuz-player"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.89115642857143,
      "arousal": 54.081632285714285,
      "dominance": 66.893424,
      "text": "Rust is amazing for network infra! I'm currently building an [IP routing protocol suite](https://github.com/holo-routing/holo). It's the kind of software that runs on routers and other network devices that keeps everything connected.\n\nI'm also dabbling with Bevy to build a tower-defense game, purely for fun! I believe Rust isn't just for high-performance stuff. Once you get the hang of it, you'll want to use it for everything. The peace of mind that comes from the compiler catching so many types of bugs for you is invaluable."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 38.321995,
      "arousal": 68.820862,
      "dominance": 39.115646,
      "text": "High blood pressure"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.410430500000004,
      "arousal": 46.7687075,
      "dominance": 61.904762,
      "text": "Mostly server side stuff. My main work is in other languages but when we need something standalone that's performant, light weight and very reliable I'm able to make the case for building it in Rust. So far a REST proxy that adds an auth layer to existing services, a log monitor that watches and alerts on a large number of fairly high traffic logs, an image processing Lambda and another monitoring related tool."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Tooling that interacts with data generated in C."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.88133,
      "arousal": 47.77021966666666,
      "dominance": 61.75359,
      "text": "At work, we are developing a tool to optimize production schedules in factories, and the core of that engine is written in Rust, and its being developed by me and my boss.\n\n\nWe also have an internal tool to auto-generate changelogs, that's also written in Rust. "
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.2993198,
      "arousal": 57.98185959999999,
      "dominance": 61.2018142,
      "text": "A year ago I was hired to help a company port a simulation library. A user (an internal engineer) described the simulation in a config file, they have extra user code written in Python, and the engine loads this and runs it.\n\nIt’s pretty cool! We generate Rust code on the fly and compile it to get as much performance as possible. We have lots of internal maths to track what goes on to build graphs and such, and making that fast is a huge task. I’d describe the system more as a virtual machine.\n\nIt’s a huge library and I’m allowed to take it in any direction I want (I do have to justify this). The thing I’m most proud of is we have 90% test coverage."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Mechanical Engineering simulation software"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Algorithmic trading platform."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.9909295,
      "arousal": 55.782313,
      "dominance": 61.8480725,
      "text": "Phase-offset modulation synthesis library, a module format for that library, a binary serde crate for that format, and derive proc macros for that crate. One big stack of priorities. \n\nAlso a compiled general-purpose programming language that I have no idea how to continue."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.154195,
      "arousal": 57.8798185,
      "dominance": 53.117914,
      "text": "I had millions of images I had to do some fancy processing on at work. I wrote a working processor in Python with PIL+numpy but it would've taken like a month to finish processing the initial queue. I tried optimising my usage of numpy as much as possible, but there was always some logic I couldn't do without a normal for loop over all the pixels, and there's various functions I had to use that made entire copies of the image data rather than modifying it in place. Anyway, I RIIR and it ran something like 1000x faster and that's what I ended up deploying. That was like 2 years ago and it's been sitting there doing its thing flawlessly ever since, unlike anything else I ever wrote at work."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.11597014285715,
      "arousal": 65.759637,
      "dominance": 60.73858128571429,
      "text": "I wanted to learn programming. Complete beginner. I search for what is the trending language, saw Rust and went for it. \n\nThe difficulty of it wasn’t really registering with me. I just thought this is how programming is supposed to be. Then I tried Python. God damn. \n\nBut along the way I just began to really enjoy Rust. I can’t articulate why, but it just feels.. solid? I’ve made so many game prototypes with both. Python is definitely easier to get going, but Rust (with Bevy or Macroquad) feels so much smoother. I guess the modernity of it? I don’t know. \n\nSince beginning I’ve made Python apps, JavaScript web apps, and some Rust projects. And I still really like Rust, even though I don’t have many finished or fully-working projects in it."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Everything 😅"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Firmware for Devices in OR Rooms as a Job."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.70408125,
      "arousal": 55.555555749999996,
      "dominance": 68.14058925,
      "text": "My place of work is mostly (still?) a C++/Java company, so I just use Rust to make tools for myself. The latest has been a program to extract UDP packets from a .pcap file ( the ones generated using tcdump or wireshark capture functions ) and replay them on a different udp port, keeping the same timing (more or less ). I started using tcpreplay\\_edit, but I was annoyed that I had to specify changes in mac address and ip ports by hand, so I started looking for a better tool and I stumbled in a site that reported the format of .pcap file. I was \"Oh, but it is so easy, I could write the program myself\", I had a couple of days of small work ahead, and I just wanted to try Rust at work ... so I did it."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.578231,
      "arousal": 57.936508,
      "dominance": 67.120181,
      "text": "I developed a few personal GUI apps which were used by me and my friends. Now on new workplace I develop comprehensive data analyst app with friendly interface to non developers. There all my previous skills come to use: GUI, parallelisation, datastructures, networking, etc."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I don't use Rust for my personal projects but at work we use it for high performance data parsing and correlating software."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am currently using it for backend of web apps"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.75736966666666,
      "arousal": 57.40740733333333,
      "dominance": 64.58805733333334,
      "text": "I made a file storage server that i use to share files with my friends.  \nAnd a lot of other small projects like an online chess game, a client-server style music player where you can use cli, tui and gui clients as remotes, a wallpaper engine clone etc.."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Forecasting tools for financial investments"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Implementations of the algorithms I develop with my students (I’m a CS prof focusing on algorithms for “big data”)."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.827664,
      "arousal": 35.600907,
      "dominance": 67.23356,
      "text": "Secure replacements for Ken Thompson's toolkit"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.25623575,
      "arousal": 44.89795925,
      "dominance": 53.259637,
      "text": "A binaural beats audio engine, and a cli based time tracker, cli tools for work. I’d like to build an lv2 plugin soon. (Very) slow but steady at the moment."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.663643,
      "arousal": 70.21919866666667,
      "dominance": 63.79440666666667,
      "text": "I've been very happy using it for CLI tooling, for example a utility that scans through all executables and shared objects to create dependency graphs to help me track what symbols come from where and are used by what. It's to help detangle a massive codebase that spans multiple languages to verify what actually is being used by what relative to the code \"lying\" at times. Rayon is in combination of \"fearless concurrency\" is the biggest helper for this.\n\nAnother is writing backends for websites, where I am effectively writing a CLI that exposes an HTTP interface, but this just is a consistent reminder of how much I hate web front end development.\n\nI really dislike how pervasive function coloring is though for async relative to how well designed everything else in the language is though. It's really bad with most web backend frameworks like actix.\n\nI am really eager to start tinkering with using rust in kernel space though."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm developing an OS kernel from scratch."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102049999999,
      "arousal": 67.23356,
      "dominance": 64.7959185,
      "text": "In a general sense, basically whatever you want.\n\nIn terms of what I do at work: I maintain a Rust open source AI framework (called rig).  \n  \nI also write some of my own programs that use Rust for data processing/pipelines combined with making API calls to models to operate on the data. I could do it in a scripting language, but there's no fun in that and it would likely be slower and less maintainable over time (... and my entire role is Rust, so...)."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Front end design environment. Rust gives us the speed we need that tyespcript couldn’t  (through webassembly)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Visualisation engine which I will use for my project"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://github.com/search?q=rust+language%3ARust&type=repositories\n\nsomething like this"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Real-time (nano/microsecond latency) streaming computation and data warehousing platform."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.628118,
      "arousal": 71.48526100000001,
      "dominance": 76.07709750000001,
      "text": "For anything, really. It's a general purpose language. If your question is where the language excels, then in current trends it is mainly used for as a C/C++ replacer for drivers, engines, and other high demand, sensitive components. \n\nIt's perfect for about any task. The problem is that it has a steep learning curve and still not widly adapted in high-level applications.\n\nIt's also awesome for CLI tooling. I'd use it to anything that I want to make sure is of high qualitly. People would argue about velocity of development and that prototyping is an issue compare to other high-level languages but I'd argue that because of the power Rust gives you to optimize, there is a tendency to pre-optimize and create complexities without fully realizing their implications.\n\nI'd also add that today, using AI, velocity seem to be far less of a problem."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A document organizer :)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Internal frameworks at work in the HFT area"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "I use rust for anything where I want to see results. It's the language that lets me stay motivated the most. So if I need something, like a small command line tool, I'll just code it up in rust and be done with it."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "A database. Tools to help build databases. And embedded on esp32 for fun."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A Spark data pipeline replacement based on DataFusion primarily."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "I’m making a Pico-8 compatibility layer for the Bevy game engine for my nine year old. That way she can continue to write games in Lua and I can continue to help out in Lua and Rust."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.65154966666666,
      "arousal": 39.38019666666667,
      "dominance": 54.76190466666666,
      "text": "My biggest Rust project is [a DNS server that I run on my LAN](https://github.com/barrucadu/resolved), I also have [my book database](https://github.com/barrucadu/bookdb) and [bookmarks database](https://github.com/barrucadu/bookmarks) that I use frequently.\n\nI wrote [a little distributed container orchestrator](https://github.com/barrucadu/thing-doer/tree/master) backed by etcd that got to the point of being able to spawn pods that could then communicate over a flannel network with in-cluster DNS (using my DNS server), but I got bored of the project as I had no use for it."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.941043,
      "arousal": 46.3718825,
      "dominance": 64.285714,
      "text": "Working on an api testing tool that supports http and web sockets.\n\nCLI based for now, and you define requests in Toml files.\n\nE.g.\n\n```toml\n[request]\nmethod = \"GET\"\nurl = \"{{ base_url }}/posts\"\n\n[request.query]\npage = 0\npage_size = 5\n\n[request.headers]\nAuthorization = \"Bearer {{ jwt_token }}\"\n\n[tests.assert_status_code_ok]\ntype = \"rhai\"\nscript = \"\"\"\nassert_eq(response.status_code, 200);\n\"\"\"\n\n[test.assert_5_posts]\ntype = \"rhai\"\nscript = \"\"\"\nlet actual = response.json()[\"posts\"].len;\nassert_eq(actual, 5);\n\"\"\"\n```"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wearable devices. Train communication systems. Some web stuff (wasm), security, AI related stuff, and probably some I'm forgetting."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.95464849999999,
      "arousal": 49.546485000000004,
      "dominance": 56.122449,
      "text": "At the moment, I am rewriting a complex desktop application for hymn presentation in churches in Rust which originally was written by myself in Pascal more than ten years ago. Rewriting the application is really smooth and I absolutely do think that Rust is suitable for such use cases even if it might not be considered primarily."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.92290249999999,
      "arousal": 67.97052149999999,
      "dominance": 71.0884355,
      "text": "Most of the Rust I write is in the form of WebAssembly for browser-based visualizations, simulations, or stuff like that.\n\nYou get the power and performance of Rust along with the convenience of being able to make your app accessible to anyone anywhere in the world on any operating system."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Only thing I’ve built that’s actually in production is a LLM gateway/proxy using Axum. Basically what it does is interface with several LLM providers/apis (azure, OpenAI, bedrock, etc) via the OpenAI API spec. So you can access most LLMs using the OpenAi API."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.428571399999996,
      "arousal": 66.8480726,
      "dominance": 54.2630386,
      "text": "CLI tools for work. We're mostly a python shop, but trying to get people to properly manage packages installed to their system with python and everything is a nightmare.\n\nI've started kicking out CLIs in rust. Clap is great. I cross compile everything with cargo-zigbuild and produce linux, mac, windows binaries for a x86 and arm."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.170068,
      "arousal": 64.399093,
      "dominance": 34.240363,
      "text": "FinTech (credit, insurance, debt) and advanced scheduling systems (all web applications).  Back end in Rust, front end mostly in rust-generated html, with some typescript for interactivity.  All assets compiled into a single clean and fast binary."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "A website backend. Axum and diesel are lovely to use, and the type and ownership system means that if my code compiles, it usually works. I've pretty much never had to debug my code. Also, it runs on a Raspberry Pi, and cross-compiling was relatively trivial.\nAfter the learning curve, I'm much more productive in Rust than in Go or Java."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Everything."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Mitmproxy / burpsuite alternative named zxc with tmux and vim as ui"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A Network Management/Security Plattform with integrated diagnostic Collection, firewall and Packet inspection"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.08238866666666,
      "arousal": 54.421769000000005,
      "dominance": 58.65457266666667,
      "text": "Currently practicing with rust in my own time to prepare for convincing people to move away from Java for REST and XML.\n\nThe XML part is a little tricky as it woild be preferable they go JSON or Protobuf.\n\nMeanwhile I'm just mucking around with making a simple 2d battle system in macroquad lol"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.335601,
      "arousal": 56.632653000000005,
      "dominance": 62.755102,
      "text": "My current [year-and-a-half long game project](https://www.youtube.com/watch?v=PjO7dcW1bXc) is built in rust at all levels. I've also used it for writing various little servers that I want to set-and-forget, like [everyone's a syndicate](https://syndicate.fallible.net/) my RSS/Atom CORS proxy and syndicator."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A discord bot, with some commands."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "Highly cross platform applications, a game engine, ECS, networking, games, an operating system and addiction"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "A server that runs jobs on remote machines via a message queue.\n\nUsed to manage our nodes we're using to build a network that will do zk proofs and some other cool things in the future. \n\nAlso part of that is the service that runs on the nodes, listens to the queue, and configures/controls the node. Oh, and two different cli tools to deal with all this."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Robotic modules"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "An L1 blockchain"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "High frequency trading engines for mm firms. Mix of Rust (mostly), C++, and ASM. (:"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Mission critical software, i integrate payloads on \"big size\" drones"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Healthcare informatics"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Launched my app today, completely built in Rust\n\nhttps://unispacehub.com/"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.176871,
      "arousal": 60.31746,
      "dominance": 72.44898,
      "text": "Hobbyist here. Anytime an existing program doesn't fit my needs (missing a feature I want, runs poorly, doesn't run on Linux, doesn't run at all, etc.), I try to recreate it in Rust. I'm rarely successful, of course, as most consumer software is complicated and built by teams of developers over years or decades, but that doesn't stop me from trying. I've learned a ton, even if I haven't made much of value.\n\nSince it's usually desktop software and games, I have done a lot of exploring in UI libraries and Bevy. Not really Rust's strengths, but they're improving rapidly. My current project is remaking a small configuration interface someone made in .NET for a specific model of headphones, and it's been refreshing that it's a small enough project that I probably actually can finish it (and I'm really liking the improvements in Iced since I last tried to use it). Otherwise it's usually music-related stuff, such as Max/MSP, MuseScore, Lilypond, DAWs, etc."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.8537415,
      "arousal": 54.818594,
      "dominance": 63.63378675,
      "text": "At work: a heavy duty FEM solver that serves as the engine of an AI-assisted mechanical engineering toolkit. Ironically, most of my work is in C/C++ and FFI shenanigans to enable the safe use of some older but irreplaceable linear algebra libraries. (My colleagues are 20 years younger than me and were thus never properly initiated into the dark arts.)\n\nFor fun: a physics-based colony builder (think \"Oxygen Not Included\" with more elements and fewer pre-fab buildings). Wanting to do this brought me to Bevy and thereby to Rust, two years ago. Release date: probably never."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Still a student so I don’t have a programming job yet, but I’m currently working on a discord bot using serenity and sqlx"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.314436666666666,
      "arousal": 69.16099766666667,
      "dominance": 57.36961466666667,
      "text": "python code analysis tools at work. astral has been highly influential in getting rust seen as the way forward for a lot of python code tooling, and I'm excited at seeing where we end up in terms of an ecosystem of libraries people build upon."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm developing skills, atleast that's what I call myself getting 361 errors per day :))"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Web services, AI agents, command line tools… nearly everything. \n\nAs a Trainer, people working with embedded systems seem to move straight from C to Rust."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "currently? stuff in godot using godot-rust"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.51801466666667,
      "arousal": 60.00251944444444,
      "dominance": 66.31393288888889,
      "text": "New to rust, but I'm working on a homemade DSP audio library for making plugins and hardware devices. Goal is to target embedded, VST, even WASM (for fun stuff on my website). I made a good amount of progress in C++ but, as I'm still new to the embedded world, kept running into platform-specific gotchas and it really slowed development. Taking some time to learn more and use rust  has eliminated a lot of the gotchas and it's been a much smoother experience so far.\n\nOverall, I'd say the landscape for C++ is better for what I'm trying to do, but a huge part of this is doing as much as I can by hand to learn as much as I can personally, so it's working great for me."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.8752835,
      "arousal": 63.6621315,
      "dominance": 67.9705215,
      "text": "I have many projects lol\n\nFor one, I'm working on a text-based cookie-clicker style (I think?) mining/automation game that runs purely in a terminal :3\n\nI'm also working on a nanokernel that I hope will become an operating system at some point.\n\nBut currently I'm working on a The Powder Toy inspired particle simulation :3\n\nIf you wanna have a look, the repos are all public: https://github.com/LordAfterEight"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.80158725,
      "arousal": 54.1099775,
      "dominance": 66.18480725,
      "text": "We’re building a [site analytics tool](https://betterlytics.io) in Rust! The dashboard to view the data is in nextjs, but the server processing incoming events is written in Rust! Feel free to take a look or contribute if you want to improve your Rust skills! We have a few open issues for optimizing our rust server that are up for grabs. You can find the repository [here](https://github.com/betterlytics/betterlytics) 😊"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Numerical software for Scientific computation, plus the little everyday things, like telegram bots."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "For work, I build CAD software on top of bevy.\n\nAs a hobby, I contribute to bevy, mostly on the rendering side. From time to time I also do rendering stuff outside of bevy."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A cross platform set of libraries that perform business logic and run on anything with native performance (IOS, android, windows, macos, linux, and hopefully WASM one day).\n\nEncryption, caching (via rusqlite), I/O calls, network calls, just about everything. So far (except for wasm) it's always just worked across all platforms with 0 issues (UniFFI is awesome once you get past the initial confusion)."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 30.952381,
      "arousal": 70.521542,
      "dominance": 47.845805,
      "text": "Deep learning framework in Rust: [https://github.com/tracel-ai/burn](https://github.com/tracel-ai/burn)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Warp terminal is written entirely in Rust. It's pretty awesome with AI capabilities built in.\ncheck it out - https://www.warp.dev/blog/how-warp-works"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Rust for every task that's not just a simple script because of how strict Rust is, this allows me to have a high confidence in the fact that my code will properly work"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Risk engine, pricing engine supporting high frequency trading"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because tauri consumes less than electron, thats why I aim to use rust"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.0748298,
      "arousal": 60.952381200000005,
      "dominance": 68.526077,
      "text": "My friends and I wanted to make a (joke) alternative to git, so we used the [git2 crate](https://crates.io/crates/git2) to build a tool called [`shtt`](https://shtt.show) in one evening. I don't think we could have done this nearly as easily without Rust, since it doesn't depend on the git tool itself (clearly, we could have done this with shell wrappers around git).\n\nThis isn't useful, and isn't intended to be, but it was a lot of fun and I think Rust made it possible to do in a single night.\n\nCode: [https://github.com/shtt-show/shtt](https://github.com/shtt-show/shtt)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.07812809090909,
      "arousal": 62.131519181818184,
      "dominance": 63.17254190909091,
      "text": "Most recently [a command-line tool](https://github.com/mshroyer/coursepointer) to assist generating courses for navigation on my Garmin watch and bike computer, which I'm also in the process of building to WASM just for fun—even though Garmin apparently just fixed the bug in their software that had prompted me to create this in the first place.\n\nI originally started that project with Python but quickly discovered the Python versions of the Garmin FIT and GeographicLib libraries were woefully incomplete. Next I briefly tried F#/.NET, and while there were fully-functional versions of both those libraries there, I abandoned that too because I didn't love the CLI experience overall (and I'll admit, partially because I preferred to spend my time brushing up on Rust instead of learning F# anew).\n\nSo even though it meant both implementing FIT encoding from scratch and using FFI to access the C++ version of GeographicLib, I went with Rust and I'm pretty happy with the end result."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "i use Rust for AI"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.748299,
      "arousal": 53.854875,
      "dominance": 59.977324,
      "text": "I use it for general stuff like automation work. I just finished writing an app that my NAS runs, that packages backups and sends them to another computer for redundancy."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "A transcoder service with gstreamer. Rust has made this fun"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Most of my Rust output is video games made during gamejams, here's a few: https://siegelord.itch.io/"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038548666666664,
      "arousal": 60.090703,
      "dominance": 61.715797333333335,
      "text": "I’m developing Klirr for my own personal use, but seems a few freelancing IT consultants liked the project: https://github.com/Sajjon/klirr\n\nRust is my go to choice for any project, I love macros, the tooling, how fast unit tests start up and run and the execution speed of the binary."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "MCPs and CLI tools, specially now that I found about Ratatui"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 65.8163265,
      "dominance": 61.961451499999995,
      "text": "I am now doing midnight commander style file manager. Other from that I use rust for writing every day single use utility scripts. Data transformations etc. Things one would do with python. But I prefer rust syntax and compile times for such small utilities are good."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Currently working on product catalogue synchronization using Rust and Polars."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Trying to implement a parser combinator library [https://github.com/oebelus/parsenator.git](https://github.com/oebelus/parsenator.git)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.25170066666666,
      "arousal": 60.166289,
      "dominance": 67.687075,
      "text": "I'm alo a beginner, but so far I have built a desktop app with Tauri and SolidJS to manage multiple timers, and a CLI tool I use to bootstrap new projects with template management. I'm not there yet, but I'm pretty proud of how far I have come!"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Problems mostly... but then again, I'm still a novice when it comes to Rust"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Rust for whatever really, all just because I like writing in the language. I have written toolchains, GitHub Actions and now I am working on a WASM plugin based Discord bot framework which aims for a Docker compose like experience."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.811791,
      "arousal": 40.816327,
      "dominance": 60.31746,
      "text": "I'm using rust for the embedded software of a general purpose museum controller. It runs on a raspberry pi pico, handling illuminated buttons, presence sensors, communication with other devices (brightsign signage players, ethernet adapters, other controllers), programmable LEDs, and can drive solenoids, servos, motors, etc."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Currently building a financial analysis/rest backend app. Also use it to do gamedev in bevy."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.34391533333333,
      "arousal": 63.56764933333333,
      "dominance": 62.69841266666666,
      "text": "I used to work on a proxy that sits in between non-standard E-Mobility providers (CPOs and EMPs) that converts their proprietary weird broken API into a fully functional OCPI compliant API.\n\nIts a couple of magnitudes faster on the previous java based version :)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "Doing the heavy lifting in our Machine learning pipeline"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rest APIs, data ingestion and transformations (lambda functions) and some ESP32 embedded personal projects."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.548753,
      "arousal": 58.049887,
      "dominance": 65.079365,
      "text": "Tinkering with xv6-rust to get a tiny adorable 32/64-bit tiny Unix"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.81746025,
      "arousal": 48.441043,
      "dominance": 63.5770975,
      "text": "Right now?\n\n* At work - my company's public-facing single sign-on service\n* Personally - an embedded project to sit in between my pellet smoker's temperature probes and control board, and ship the temperatures off to Home Assistant so I can monitor remotely\n\nIn the past?  Off the top of my head...\n\n* A packet sniffer for Final Fantasy XIV that replaced some external Windows program for tracking DPS (I played on Linux)\n* A multitude of data collection adapters for influxdb\n* influxdb\n* A bunch of web services, all open-source but primarily to serve my own needs\n* A Matrix bridge for Twitch chat\n* A container registry mirror\n* An SFTP protocol implementation"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.47467866666666,
      "arousal": 53.85487533333333,
      "dominance": 60.24187466666666,
      "text": "Backend library for mobile. Currently implementing it with the frontend Swift IOS app using Uniffi. Probably could all be done natively but it was just a nice excuse to use Rust in a personal project"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "An opinionated POSIX makefile linter...\n\nI need ELI5 of how to understand the stock rules (confused_gandalf_\\\"SCCS\\?\\\"_meme.jpeg)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I developed a CLI generator with Rust: https://github.com/aspadax/you"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.4036285,
      "arousal": 54.138322,
      "dominance": 55.102041,
      "text": "I plan to use it for real-time image processing on edge (Jetson Nano)\n\nStill learning the language, so unsure how smooth this transition will be"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 48.072562,
      "dominance": 63.605442,
      "text": "Read and process GNSS data to study Earth's ionosphere"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use tauri develop desktop app"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Games (check out Gnomes on stream) :)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.6462585,
      "arousal": 52.5510205,
      "dominance": 59.12698400000001,
      "text": "I am still in my learning phase but recently I am into malware development with rust for red team exercises"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.9024945,
      "arousal": 47.789116,
      "dominance": 63.6621315,
      "text": "I'm a developer who recently started learning Rust so I'm not developing anything useful. I've read The Book a little bit and I've started Advent of Code 2024."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust can be used in a various scenarios. For example I used Rust for embedded."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Smart contracts for building in web3. Especially for solana"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A Gameboy emulator"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.326531,
      "arousal": 52.834467,
      "dominance": 56.689342,
      "text": "Kubernetes operators and deployments, various GRPC services on top of Postgres... API clients for over 60 different services, with custom macro codegen via web scraping, because OpenAPI specs are inconsistent... Bootstrapping Compiler framework with custom ML driven optimization passes (KA-GNN tbe for PGO), and it's own erlang-like formally verified lang."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Hopefully, wealth :-) But, along the way, I write a LOT of software. Given that I may never quite reach the first bit, it's good that I enjoy the second.\n\nMy thing is highly bespoke, highly integrated general purpose development platforms. Then eventually I have to do with all of that functionality."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 51.984127,
      "dominance": 69.387755,
      "text": "Writing a graphics engine and a Lua runtime with batteries included, inspired by BunJS/Deno2. I cannot emphasize enough how easy and safe Rust has made this possible. And something less often said, Rust's portability. The same codebase can run on quite literally all Lua VM versions, and all platforms with almost zero changes. Absolutely amazing."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Bioinformatics software and backend for a web app."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "I'm working on a game engine using wgpu"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Algorithmic trader. Was the project that motivated me to push over the learning hump."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.07180666666666,
      "arousal": 71.80650033333333,
      "dominance": 73.43159466666667,
      "text": "Using it to learn game development, the ease of cross compiling with the inbuilt build system was a big win from the offset."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.1564626,
      "arousal": 54.9659864,
      "dominance": 63.5827662,
      "text": "My largest project so far is a still-growing library of customized accessibility tools and related command line tools for progress management. My other favorite project is a suite of tools for applied ontology analysis that will likely end up being part of my PhD dissertation. That last fancy sounding part is basically custom brain Legos for representing knowledge patterns lol."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.598639,
      "arousal": 57.993197,
      "dominance": 57.8798185,
      "text": "Working on an SMTP parser to be integrated into a larger project and an OpenGL screen locker for wlroots. OpenGL giving me some trouble 😅."
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Clearly software for elevators, just ask Rust's creator 🪜"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "I'm building a Job Tracking app using Dioxus on Stream if you're interested in joining in (next one will be on Input but I haven't decided quite when)\n\nYouTube: https://youtube.com/@fiosquest\nCode: https://github.com/Fios-Quest/job-tracker"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "game server for a browser online 2d rocketleague like game!"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.367347,
      "arousal": 55.328798,
      "dominance": 59.637188,
      "text": "I am exploring Rust for custom modelling. For example, discrete event simulation (DES). For practice I started (and will continue once I have a better grasp of traits and enums) a crate implementing some core DES logic.\n\n  \n[https://crates.io/crates/desru](https://crates.io/crates/desru)"
    },
    {
      "post_title": "What do you develop with Rust?",
      "created_utc": 1752396342.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Raycast clone for Linux"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Announcing Rust 1.86.0 | Rust Blog"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice, with get_disjoint, I can now retire most of https://github.com/mcmah309/indices"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Trait upcasting!\n\nImma upcast myself from `Human` to `Mammal` now :3"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "[`Vec::pop_if()`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.pop_if) is a highly welcome addition."
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.2108845,
      "arousal": 46.712018,
      "dominance": 64.56916100000001,
      "text": "Nice, safe functions can now be marked with `#[target_feature]`"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": ">Rustdoc - Add a sans-serif font setting.\n\nOooh, looks good!"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Wow, they were not exaggerating the [compile time improvements on aarch64 linux](https://doc.rust-lang.org/stable/releases.html#internal-changes), very impressive - went from  88.377 s ±  2.182 s to  68.367 s ±  1.782 s(x1e80, wsl2).\n\nGreat job and thanks to everyone involved!"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm waiting for the Clippy lint to warn OOP enthusiasts from making all their traits extend `Any` trait to gather them in `Vec<Box<dyn Any>>` with their beloved runtime reflections\n\n  \nEdit: Forget to Add Box<>"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.83956925,
      "arousal": 54.3225625,
      "dominance": 61.323696,
      "text": "As the author of (abandoned) crate [multi_mut](https://github.com/golddranks/multi_mut), `get_disjoint_mut` makes me, at the same time, satisfied and a bit nostalgic.\n\n8 years, time sure flies. I used to argue with /u/Manishearth about whether what I was doing was UB or not: https://www.reddit.com/r/rust/comments/5ofuun/multi_mut_multiple_mutable_references_to_hashmap/ Never met him in person, but I always respected his sharp mind and relentless attitude (and interest to languages/linguistics!). And also his blog post [The Problem With Single-threaded Shared Mutability](https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/), which, I think is a part of the undying Rust lore.\n\nAt least, now there's a blessed way to do the thing. And the general situation of operational semantics, i.e. what's UB and what's not, is at least a bit better than back then. Big thanks to Ralf et al. I hope that in another 8 years, the Rust community would be done with that, but that might be wishful thinking :D"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The example shows an \n```rust\nimpl dyn MyAny {\n   ...\n}\n```\nWhat does the `dyn` do there? Also isn't `MyAny` a trait? How can it have an `impl`?"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Ooh, lots of nice things"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.791382999999996,
      "arousal": 59.580499,
      "dominance": 58.956916,
      "text": "All of this looks really useful, and - hold on. The get_disjoint_mut example uses 413 and 612? Suspicious..."
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a shame that intrinsics are still marked as `unsafe`  in 1.86, e.g. see [`_mm_xor_si128`](https://doc.rust-lang.org/1.86.0/core/arch/x86_64/fn._mm_xor_si128.html). In other words, until the next release we still have to keep our functions marked `unsafe` with allowed `unsafe_op_in_unsafe_fn` lint."
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.245654,
      "arousal": 52.380952,
      "dominance": 63.303099333333336,
      "text": ">fn safe_callsite() {\n>    // Calling `requires_avx2` here is safe as `bar`\n>    // requires the `avx2` feature itself.\n>    requires_avx2();\n>}\n\nI guess the `bar` here is a typo and they mean `requires_avx2`?"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "Yay. https://doc.rust-lang.org/stable/std/primitive.f64.html#method.next_up is finally stabilized. I was really suprised it wasn't so far when I needed it in the past."
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "WOAH! Disjoint borrows! That was a long way off when I first started using Rust. I remember being told it might have to wait for Polonius once."
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "I think the description of `target_feature` in that blog post could use some improvements.\n\n> Safe functions marked with the target feature attribute can only be safely called from other functions marked with the target feature attribute.\n\nFails to state that the set of features linked to the caller must include all features linked to the callee.\n\n> only support being coerced to function pointers inside of functions marked with the target_feature attribute.\n\nWhile this makes sense, the linked RFC gives a more restrictive rule:\n\n> safe #[target_feature] functions are not assignable to safe fn pointers.\n\nI assume that here the blog post matches what was actually implemented. Perhaps the blog could like to some up-to-date reference documentation, instead of the outdated RFC?"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is 'trait upcasting' not downcasting, since you effectively lose functionaility?"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "wow"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.26001533333333,
      "arousal": 56.31141366666666,
      "dominance": 64.13454266666666,
      "text": "I'm going to invent a time machine just so I can get rust updates faster cuz every update they drop is 11/10 amazing. Love you guys!"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great!"
    },
    {
      "post_title": "Announcing Rust 1.86.0 | Rust Blog",
      "created_utc": 1743674296.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are multi value returns in wasm actually supported? generated .wasm file have this listed as required extension to run program but it doesn't work - returned value is wrong.\n\nmy test case is: fn xxx(...) -> (a,b,c,d) {\n\n}\n\nand trying to use these values from javascript"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\""
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.324263,
      "arousal": 54.761905,
      "dominance": 41.950113,
      "text": "Was there any explanation on how \"productivity\" was measured? I don't think most managers are competent enough to even measure productivity _within_ a team let alone across teams."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.8276645,
      "arousal": 62.755101999999994,
      "dominance": 55.215419499999996,
      "text": "Also as productive as Go based on the screenshot. This is pretty impressive considering the competition is against a garbage collected language"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I worked at Google and gave a talk on rust at the time. This might not really be a fair comparison, because c++ encompasses a huge amount of old old legacy code that's naturally difficult to deal with. To some extent, the same applies to Go, whereas rust was much more recently introduced into Google3, their source control. \n\nThat's not to say Rust isn't better, I believe it is for a lot of things they use go and c++ for, but the comparison isn't quite apples to apples!\n\nEdit: spelling..."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Everyone in the thread seems to have the appropriate amount of skepticism for this claim, with all of the obvious questions about comparing apples to apples.\n\nBut, anecdotally, as someone who has spent years writing C++ and Rust, it's *obvious* to me that I'm *significantly* more productive in Rust. Forget memory safety and borrow checking: just the control and ergonomics we have over moves and copies in Rust vs C++ is enough to boost productivity significantly!"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.9161,
      "arousal": 37.07483,
      "dominance": 56.462585,
      "text": "Not completely fair comparison. As a C++ programmer I cannot code while I'm healing my shooted foot."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Here the live stream (at 7:22): https://www.youtube.com/live/6mZRWFQRvmw"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is a super broad statement, I don't think we know how they measure this or what features they are working on.  I was hardcore C++, working on complex models.  There were teams in the org that were using C++ for much less complex things, their productivity was most likely like 2x my teams if you count it as lines of code.  Software has varying degree's of complexity and product maturity, those are the main drivers of productivity."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "While Rust can be more productive I read it only as a marketing statement. It's not based on a publicly available research results. In many cases in the past such things occurred to be falsified years after it circled around as an invalidated fact. So I don't consider at as any information whatsoever."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.77777800000001,
      "arousal": 62.244898000000006,
      "dominance": 66.950113,
      "text": "Just taking the statement at face value without any other critical analysis; It occurs to me that this may have more to do with the fact that people who use rust are almost entirely composed of enthusiasts, as opposed to the often necessitated users of C++. \n\nSelection bias may be at play here."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "In the same situations? Same set of available libs/crates or is this another matter of more feature frameworks?"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 33.106576,
      "dominance": 50.680272,
      "text": "The statement about them being \"as productive as ones using Go\" is a bit suspect to be frank.  I would need to see data to even begin to believe that.  Rust is just a far more featureful and flexible language.  Combined with the extra safety it brings to the table, that is its strength.  But that also means there's just so much more complexity to navigate.  It's unintuitive at best that those teams could be as productive as Go teams, particularly if they're similarly experienced with the language in question."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.482993,
      "arousal": 69.08541166666667,
      "dominance": 60.31746066666667,
      "text": "Its interesting that they mention Go here: one of the things I've been hearing is that Rust makes a great higher-level-language replacement for projects that have gotten large. e.g. that CLI that was written in python and now takes thirty seconds to print help runs instantly in rust, everyone who's used it loves being back in strong-type land, and the coding itself is speedier than doing it in C/C++ and python due to how crufty the code had gotten."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Let Rust Go!"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "New codebase bias?"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 47.505669,
      "dominance": 60.657596,
      "text": "As someone who’s been doing Rust for the past 1.5 years I wholly believe this. As someone who’s been watching the rest of a 50-person org migrate to Rust for the past 3-4 months… let’s just say there’s a significant energy well to climb out of before those productivity gains are realized."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Any comparison to Java?"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.61678,
      "arousal": 58.956916,
      "dominance": 74.716553,
      "text": "Google's C++ Lines of Code: +100 mill?\n\nGoogle's Rust Lines of Code: probably not +100mill?\n\nI mean I would like to believe, but it's not easy. Just food for fanatism imo"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.247166,
      "arousal": 55.668934,
      "dominance": 51.020408,
      "text": "I’m a bit skeptical of such a large disparity. Writing greenfield is always more “productive” than maintaining a large legacy codebase."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.394558,
      "arousal": 68.367347,
      "dominance": 48.072562,
      "text": "For the confused, because I was:  \n\nSee the schedule of presentations here.  \nhttps://www.rustnationuk.com/schedule\n\nNote the columns and count them there are four.  These are the Tracks.  Note there are two days worth of presentations.  Find the presentations you want to see.\n\nGo here, and find the Track and day of the presentation(s) you want.  Click forward and backward through the video until you find them.\n\nhttps://www.youtube.com/@rustnationuk/streams\n\nEnjoy!"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "When writing Rust, you spend time dealing with lifetime and abstraction. While in Go, time is spent on writing loops to get keys and values from maps, and slices are turned into maps to create sets and deal with null pointer errors occasionally."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "I don’t have anything meaningful to contribute here other than: 1) I got the 1,337th upvote and that’s pretty awesome, and 2) I saw this on April fools and was relieved to find the date was prior to the day of infamy."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.3990928,
      "arousal": 51.8140588,
      "dominance": 65.89569159999999,
      "text": "Im author of a C++ library, and a year ago I rewrote the library using Rust. (without a single unsafe) - whereas the C++ library has been building four years, the rewrote in Rust happen in three months! I suppose the biggest contribution was simply the Cargo, and how well it is integrated with crates.io - Within C++ the 3d party libraries needs lot of tape and glue, and many times it needs fork or your own implementation. Composing projects with Cargo and integrating them from Crates is breeze. In language wise I dont see that much difference."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.814059,
      "arousal": 61.8480725,
      "dominance": 63.7755105,
      "text": "1. this guy comes from Rust foundation, so obviously his opinion.\n\n2. He might have force his team into work longer than other team, or his team just are all rust dudes with no life willingly.\n\n3. Productivity is not a quantified term, so \"twice\" does not make sense."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "No doubt about that as the old saying says RUST never sleeps!!!"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "From the same company advertising Angular is \"the web development framework for building the future\". 🤮"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.95464866666667,
      "arousal": 56.80272133333333,
      "dominance": 59.750566666666664,
      "text": "Ok, I also want to see rust as a part of the standards in the industry, but this just sounds as a joke"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "*\"Teams writing new code are more productive than those spending 80% of their time maintaining old one\"* - no shit Sherlock!"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Less bugs than with Go I presume"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Can’t fool me. Rust devs are too busy with convincing other people Rust is better to be productive."
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So based, tbh after learning 2 hours of go you are more productive than 200 hours of rust"
    },
    {
      "post_title": "[Media] Lars Bergstrom (Google Director of Engineering): \"Rust teams are twice as productive as teams using C++.\"",
      "created_utc": 1711635260.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "I don't even use rust for the memory safety"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 76.30385488888889,
      "arousal": 59.58679755555555,
      "dominance": 60.985134888888894,
      "text": "I've written plenty of c++ for work and other projects. I still forget how CMake works every dawn time. I forget how to import libraries, I have to deal with goddammed header files.\n\nThen I come home and I use rust, the package manager handles everything, I can write tests easily. I can import fantastic libraries. Life is great. A systems programming language that doesn't make me want to die. The memory safety is just the icing on top. Delicious delicious icing that prevents me from blowing my own legs off when I'm being an idiot. God I love this language.\n\nCrab gang for life"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "Sometimes I long to write Rust on projects that have no need for being at systems level, usually around the 3rd time that day where Python blows up because everything is made up and the type system doesn't matter."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.99093,
      "arousal": 69.274376,
      "dominance": 78.117914,
      "text": "I'm convinced that the majority of Rust's success can be attributed to the ease of starting and managing a project in it, not necessarily the merits of the language itself."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.59183666666667,
      "arousal": 59.712773999999996,
      "dominance": 67.57369633333333,
      "text": "I have a web server and a bunch of services written in Rust. I build at the app level and I love this language.\n\nI hope one day there's a super robust ecosystem for building UI's in Rust. Typescript is getting better but I still sometimes want to (╯°□°)╯︵ ┻━┻"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "The reason a piece of tech or an idea wins, isn't the reason everyone thinks it is.  Cargo/Crates.io is the reason that Rust will continue to gain adoption."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yep. cargo and nuget got me spoiled and I have to keep my guns away when writing java or c because I might shoot myself. And don't get me started on npm..."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Any tips for using CMake less painfully? I’ve been working for about a year and every time I have to mess with builds (e.g. adding a new library) the simplest tasks somehow devolve into chaotic messes"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.3847315,
      "arousal": 55.952381,
      "dominance": 65.51398333333333,
      "text": "Same here. 20 years ago I was good at C++, and considered myself a master of C because I basically knew every pitfall there was and then some.\n\nNowadays I write my personal projects in Rust, and if given a choice, I'd never touch C++ or C again. Switching to Rust was very easy for me, because it so happens that my coding habits back then made for very safe software... apparently. I just wrote Rust code and it worked. The one thing I had to take into account was the \"move\" semantic, with ownership moving from one variable to another.\n\nI never had to fight the borrow checker. Sometimes it pops up telling me that I'm being an idiot, and after looking at the code, I mostly determine that it's correct.\n\nCargo is great to have. I try to limit the number of libraries I use (if I need simple stuff that I can write myself in a few lines, I will), but if I do need or want some, it's as easy as adding a dependency and done.\n\nAlso: as long as a Rust project doesn't depend on an unreachable dependency, it will almost always compile cleanly directly after cloning. That's mostly not the case with C or C++ and you can go on a dependency hunt and find the EXACT right versions of the libraries you need... somewhere."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.08843522222223,
      "arousal": 60.68279155555555,
      "dominance": 60.31746044444445,
      "text": "I don’t use Rust because it’s memory-safe. \n\nI use it because of its speed, memory footprint, and type safety.\n\nTry writing a computationally expensive algorithm in Python. You can hear your fans whirring and it takes forever. \n\nEven writing it in JavaScript and you’ll still struggle with bugs and performance issues.\n\nGolang is the only viable alternative. It’s good enough for most use-cases.\n\nBut Rust is a different-level. If you can get the program to compile, you’re certain that it works correctly. It’s lightning fast and uses absolutely no memory. The most computationally expensive algorithms runs like a dream in Rust.\n\nIN RUST WE TRUST! 🦀"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.527589,
      "arousal": 53.590325,
      "dominance": 61.48904000000001,
      "text": "Honestly, if C++ had better syntax and package management, I would have a significantly less interested in rust. Memory safety is nice, like really nice, but it's not the primary reason I'm here. The ergonomics of just being able to mid-function declare a variable equal to `{some bullshit that goes on for a damn while}`, or match or if else with internal scooped returns, or a fantastic error system."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.9863946,
      "arousal": 51.405895799999996,
      "dominance": 61.337868400000005,
      "text": "> I still forget how CMake works every dawn time. I forget how to import libraries, I have to deal with goddammed header files.\n\nA modern programming language should strive to solve these problems. I like how some languages like Zig and Jai ditch things like CMake, and just let you program the build process *in the same language*. Building complexity upon complexity adds up on your cognitive load, and having to learn yet another tool which may or may not revolutionize your use case is just bad."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.068783,
      "arousal": 58.541194,
      "dominance": 68.32955366666667,
      "text": "I’m starting a project on TIC-80, which is a little fantasy game console. Typically one would use lua but it supports many other languages. Since it supports wasm though I could use rust and I’m sorely tempted even though this is kind of throw away code."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.3907785,
      "arousal": 54.100529,
      "dominance": 58.37112616666667,
      "text": "Use Rust most if the time but shot myself in the foot yesterday with some hobby Cuda code. WTF does a pointer to system memory have the same type as a pointer to graphics memory ? ( Kernel aborted when it tried to write to host memory, since I passed the wrong pointer ) - I guess in C++ this kind of behaviour is par for the course, but if Rustacians were in charge I am sure the type system would have been used to prevent the program from even compiling."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.02267599999999,
      "arousal": 51.1904765,
      "dominance": 55.498866,
      "text": "> every dawn time\n\nI'm usually sleeping at dawn time, not coding"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I seriously think the fact that Rust has dependency management built in from the beginning is almost enough of a use case in and unto itself."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this belongs in r/rustjerk doesn't it"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "😂😂😂 That's literally me"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "(\\\\/). .(\\\\/)"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.21088449999999,
      "arousal": 53.6281175,
      "dominance": 63.8888885,
      "text": "There are so many posts (here and in other forums) like yours. I wonder if there's another programming language that inspires this kind of positivity."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Same boat. I’ve been knee deep in mostly unsafe rust code the last 2 weeks and it’s still better by far."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Even if you don't care for the memory safety, Rust is great for getting shit done!"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 43.764172,
      "arousal": 42.743764,
      "dominance": 51.360544,
      "text": "That's it, I am leaving my job, going hermit mode among the crabs. \n\nHopefully I come out a bit rusty."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good candidate for r/rustjerk ."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.47543466666667,
      "arousal": 59.48601666666667,
      "dominance": 63.605442000000004,
      "text": "I recently made a post on mastodon essentially saying this. Memory safety is nice but isn't the real reason people program in rust"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.416099625,
      "arousal": 57.653061375,
      "dominance": 64.83843525,
      "text": "I was literally just thinking about this yesterday. My programs are small enough that memory management in c++ is fairly easy and the GC in c# is tolerable. I just got into rust a few weeks ago and it's definitely a mainstay in my toolbelt.\n \nCargo is amazing and though I try to keep project requirements low (don't need to add a huge library for one function I can write myself), it's been super nice when I have needed to add libraries. A lot easier than in c# (NuGet works, but you still have to fiddle with dlls sometimes) and a hell of a lot easier than c++.\nRusts enums are absolutely fantastic. Using associated data covers like 80% of my use cases for polymorphism, and simplifies a lot of interfaces. Even when I'm just using a flat c-style enum, being able to add methods to it is great.\nSpeaking of enums, Option and Result are amazing uses. By simply reading a function signature you know what to expect. Option means there could be a \"null\" value and then it forces you to check, and Result for that whatever operation is being done could error. You could do something like them in c++ (std::optional does exist), but the fact they weren't there from the start means that most libraries (including the stl) don't use them. c# does have nullable objects and even values but objects are always nullable, so you can't really communicate anything with that, and you can't annotate that a function could throw an error (win for java there I suppose lol)\nTraits are interfaces and I won't hear otherwise. Amazing. Arguably the best part of OOP, being able to define common behavior, and then use those methods, not caring about what the specific implementation is.\n\"Primitives\" like integers being structs with methods is something I enjoy in c# and I enjoy it in rust too. It's not an essential thing to have, but I certainly find myself missing it in c++. \n\nRust isn't perfect, there are a few headaches, especially when I was just first learning, but it's still great. It takes some of my favorite parts from other languages and combines it into one. I'm still going to use other languages as the project dictates, but I'll probably find myself wishing for some features of rust while I do so (most likely the enums lol)."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.622826999999994,
      "arousal": 38.66213133333333,
      "dominance": 54.83749066666667,
      "text": "I totally agree!\n\nBut then I tried to implement a fast, immutable, multi-thread shared access tree with parent pointers and six months later I'm still not getting anywhere, unless I just use a Vec with indices, but it's too slow...\n\nEDIT: I've tried Arc<>, Arenas, id-tree, petgraph, but they all fail in one way or another - no Send+Sync, no ownership transfer to Arc, circular ownership issues. Even ChatGPT told me to go do something else..."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.40022675,
      "arousal": 56.207482999999996,
      "dominance": 57.73809525,
      "text": "About the only reason I use rust is the memory safety. Trying to work through someone else's rust with macros and new traits for everything they can think of becomes tedious. And the [crates.io](https://crates.io) is just NPM all over again.\n\nAnd god help you if they've put example & documentation comments into their code everywhere.\n\nI feel like a part of my soul dies every-time I see a stack of unwrap calls longer than the rest of the actual function.\n\nbut yes I like working in the language compared to C++ lets say."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.179138,
      "arousal": 60.8843535,
      "dominance": 64.3424035,
      "text": "Yeah for me the memory safety, borrow checker and just general resistance to letting me do what I want makes it not worth it to use rust. It has a lot of things I like, like the tooling, modules, generics, macros, and pattern matching. But the general resistance to writing programs makes it all not worth it. I think I would be more productive in c to be honest."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Add to this the great documentation. Even without any real docs comment, it automatically shows what implements what. Compare with the awful experience I've had with Kotlin, where I have to jump to hoops to understand how to create an instance of an abstract class to pass that to a function that accepts said abstract class."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.789116,
      "arousal": 56.689342,
      "dominance": 62.018141,
      "text": "Compared to C and C++ everything looks great, but Rust has really raised the bar when it comes to tooling including package management, compiler error messages and lints."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.8480726,
      "arousal": 53.537414999999996,
      "dominance": 66.25850319999999,
      "text": "It's a language with good tooling, easy to access libraries and a proper type system. Performance is just a bonus.\n\nBut the memory safety and borrow checking parts are so not why we use this language. It's clearly a stepping stone language there and it's kind of a shame it's becoming a mainstream language. Rust should've stayed kinda small and let the next generation take over the systems part. Look at Hylo (Val) and Vale still working on making the same guarantees with less mental overhead."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.02494300000001,
      "arousal": 58.446712,
      "dominance": 80.44217649999999,
      "text": "I much prefer c++. Much more powerful template stuff (see my post recent post on this subreddit) cmake doesn't bother me either, especially when I combine it with a c++ package manager like vcpkg for easy library integration."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amen."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Try go"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.451247,
      "arousal": 75.9070295,
      "dominance": 68.9342405,
      "text": "I understand.   \nI'm working on c++ library project, where I love cmake  just because we have to support Android.mk and Microsoft Visual Studio (omg).   \nI try to avoid adding new .cpp files, because you have to manually add it to xml of the msvs which I hate\n\nI'm forcing everyone to remove the latter one, because you can generate it from cmake."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.2857145,
      "arousal": 54.648526000000004,
      "dominance": 56.4058955,
      "text": "I wonder how much brain time was saved just by the things you mentioned."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "Coming from the Python ecosystem of having to uninstall/reinstall conda for the umpteenth time it was refreshing to just run rustup *and it just worked*."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "only reason I don't use c++ is because of all the new syntax bullshit, it's not a consistent language at all with all the new standards"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I just like rust's type system"
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Same, memory safety is not a reason to use Rust for me. Cargo is the reason."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.530612125000005,
      "arousal": 55.513038625,
      "dominance": 51.445578125,
      "text": "I really don't have a lot of rust out even low level experience.  I've been looking to get into a rust job mostly for a lightweight output and platform.  I'm sick of 150mb+ docker images, and cold start times in the seconds.  I'm sick of the output of node or C#: projects with a mess of a bundle to ship around.  Let alone the memory footprint.\n\nThe ergonomics for the couple micro services I've written in it are just nice.  Even without real optimizations I can get a bare container under 10-12mb with ease.\n\nNot to mention the lack of enterprisey baggage in the ecosystem.  Really want a job working in Rust."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cargo is enough reason for sure.."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.02267599999999,
      "arousal": 51.1904765,
      "dominance": 55.498866,
      "text": ">  I still forget how CMake works every dawn time. I forget how to import libraries\n\n&#x200B;\n\nLOL So I'm not the only one.\n\nI like CMake, once properly setup it always gets the job done, but OMG it's so painful to write CMakefiles."
    },
    {
      "post_title": "I don't even use rust for the memory safety",
      "created_utc": 1704245840.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You forgot to mention: if it compiles it works...\n\nWith C++ I always have  my debugger in standby mode ... LOL"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 52.267574,
      "arousal": 47.278912,
      "dominance": 55.555556,
      "text": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\""
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The audience member from the video appears to be Ted Ts'o, a most senior kernel developer. https://lwn.net/Articles/978738/"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.244898000000006,
      "arousal": 47.165532999999996,
      "dominance": 59.750567000000004,
      "text": "heres the context cited in article\n\nhttps://www.youtube.com/watch?v=WiPp9YEBV0Q&t=1529s"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.9603175,
      "arousal": 60.82766425,
      "dominance": 68.19727875000001,
      "text": "Damn, I can't begin to imagine having to deal with this kind of vitriol. It's a reddit discussion but in real life, no wonder he quit."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.07936525,
      "arousal": 57.681406,
      "dominance": 61.366213,
      "text": "I recently heard someone say: “The culture of a project is not defined by what behavior you encourage, but about what behavior you tolerate.” I think about that a lot.\n\nAfter seeing how the behavior of the senior Linux maintainer in the video was seemingly interpreted as normal by the room, I completely understand eventually running out of patience and stamina. It’s a sad outcome, but if the Linux project doesn’t learn from this, it’s also bound to keep happening. I do hope they reflect and learn from this."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.73242660000001,
      "arousal": 54.784580600000005,
      "dominance": 66.0770976,
      "text": "You know, the Rust community has a reputation for having a ton of drama and toxicity, but after watching [the linked video](https://www.youtube.com/watch?v=WiPp9YEBV0Q&t=1529s), I think this is a good point to remind ourselves:\n\n**No, actually. The Rust community is super fucking nice.** The overwhelming bulk of this community is, you know, polite, soft-spoken, open to critical ideas, and doesn't consider it to be normal to interrupt someone else's talk to treat it as their personal platform for broadcasting their rant against a project they don't like."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.93348440000001,
      "arousal": 61.583522433333336,
      "dominance": 61.78382446666667,
      "text": "It is sad to see people quit open source stuff for any reason - but it is even more sad to see them quit for people-adjacent reasons.\n\nI also do not understand the irrational hate towards the unknown - yeah, Rust is different. You could also say that it is not easy - but neither is kernel development. I hoped the Kernel people would be open to change, and learning new skills, since this is something they seem to normalny enjoy.\n\nI feel like `C` has a similar problem to Rust - it also has its fanatics, who would write only in C, if possible, and reject everything else. This is especially annoying with some elitists, who think just because they write something in C, that means they are more skilled.\n\n Also, hand waving memory issues / ease of invoking UB by essentially saying it is just a \"skill issue\" is also just so annoying. Yeah, sure let's assume you are the second coming of Christ and don't make any mistakes ever. Good for you, but most people will make a very stupid mistake once in a while - since we are human. Everyone has bad days, and everyone will fail at some point.\n\nI feel like there is this idea that writing in C is hard, therefore skilled people use C, and the rest uses inefficient, High-Level languages. C is simultaneously simple(for smart people), yet difficult(for the \"normies\").\n\n\nBut - I feel like 99.9% of Rust devs could write C no problem. Writing C is not harder than writing Rust. However, admitting that Rust is in any way comparable to C makes their efforts seem silly.\n\nNormally, a lot of very vocal people brag and feel superior, because they use C, and can do stuff(like kernels, or bare-bones development) that none else can.\n\nSo, writing advanced, low-level stuff in C is like climbing Mt. Everest - a great accomplishment, to be envied by all.\n\nHowever, Rust comes along and builds stairs to the top of the mountain. Suddenly, writing fast, low-level code becomes way easier. \n\nIf this vocal minority accepts Rust as a viable alternative, then their efforts are purely performative.\n\n\n*Oh, you climbed the mountain with no safety gear?\nNice, but those folk over there took the stairs, and finished the whole journey in half the time. Oh, by the way, have you heard that the government says people should use the stairs, or at last certified gear? Yeah, they got tired of having to clean up folk who fall down.*\n\nWriting C stops being some sacred art, performed by the True Real Programers, and starts being what it really is - just writing code. \n\nThere are a lot of perfectly fine folk who just like C - and there is nothing wrong with that. *C is just a language.* However, once the small, annoying minority starts to bash other languages because they dare to not be C - we have a problem. Especially when they know nothing about Rust - is it that hard to criticize the real problems of Rust, instead of getting angry at things which are not real?\n\nWell, this got a bit ranty.  I just think people should use whatever language they like, and not hound on others for making different choices. You can disagree on technical stuff - but please, don't let non-technical issues harm open source.\n\nAlso - this rant is not targeted on anyone in particular, and more so aims at an amalgamation of bad people I encountered over the years(IRL and online)."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "Damn linux kernel devs are real dinosaurs it seems. \n\nAs someone who has submitted patches to linux kernel a decade ago, I know the feeling. \n\nI wish we could write drivers in Rust atleast as drivers are the primary reason for kernel crashes in my experience."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.106576,
      "arousal": 70.0113375,
      "dominance": 58.390023,
      "text": "Rust community so toxic it drives kernel maintainers to throw tantrums.\n\nGod the rust community is just sooooooo awful. Asking these poor C programmers to… work with them a bit to help keep kernel code from breaking.\n\nUnreasonable. I’m glad that very calm and rational individual was there to yell at them about things they didn’t do or say."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.562358200000006,
      "arousal": 56.893424,
      "dominance": 64.2630384,
      "text": "I'll have to watch more than 3 minutes to really get what is going on. \n\nSeems like audience member is mad that the Rust bindings will break if they refactor the C API that is being bound to.\n\nOn the one hand, of course they will be. Even if they were generated and got regenerated, the code using those apis would break.\n\nOn the other hand, I can see how that creates a real problem for someone doing those refactorings who only knows C.  Also refactoring Rust would be difficult for them. Creating new, good bindings though is probably a more advanced skill than just writing Rust in the kernel. So I can see how it would be a practical problem.\n\nBut it's one you have to solve, otherwise you cannot introduce a new language to the kernel. Unless that language doesn't need bindings at all. But even then you'll have to refactor some code in the new language."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The thing I’m wondering after watching that video is - is a function that sometimes returns a fully initialized, refcounted inode and sometimes returns a partially uninitialized, nonrefcounted proto-inode the cleanest API they could muster?  And if so, why? Like naively, I would think that passing an initializer function would be cleaner.  But maybe the extra function call would have too much overhead?"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "haven't read the article (this is reddit)  but my experience with development projects has always been problems with the non-technical part."
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All this drama was expected =("
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just wait until you rust whipper snappers reach 50 and gen beta is going to rewrite the Linux kernel in Lean"
    },
    {
      "post_title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
      "created_utc": 1724900732.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.356009,
      "arousal": 55.668934,
      "dominance": 47.6757365,
      "text": "When you don't want your system to be as mathematically proven as possible cause it's mildly inconvenient, then what more to say than that natural selection will run it's course.\n\n\nGive it a decade for these boomers to retire, then we will rewrite the whole damn kernel in Rust cause C is Latin and it's already dead."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am a Rust compiler engineer looking for a new job"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.671202,
      "arousal": 53.117914,
      "dominance": 58.673469499999996,
      "text": "Really impressive history! Hope you find something that fits you :)"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Don't see anything about solving leetcode or designing global scale applications in 30minutes unfortunately. Good luck!"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.8321995,
      "arousal": 55.8956915,
      "dominance": 71.315193,
      "text": "\"I'm not interested in:\n\n* blockchain/cryptocurrencies\n* generative AI\n* algorithmic trading\n\n\"\n\nFrankly, job-wise, I think this is a big problem in the rust community- I also will turn every one of these down, but it's most of the the jobs I see in my area (or remote), and also they only seem to want experts in rust- which I doubt most of us, even the very sr's in general, would claim.\n\nThank God the blockchain hysteria seems to be fading."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.15419525,
      "arousal": 62.159864,
      "dominance": 68.3106575,
      "text": "Such a strong development experience and impressive profile. Good luck in finding a new job. 👏 👏 👏 \n\nGen AI is just a over hyped solution. Will get saturated over time. Very un-deterministic times we live in.\nPeople's  analytical ability is reducing and its just prompt engineering everywhere.\n\nThats when impressive skill like yours matters to solve problems and build solutions that actually work"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’ve been following your work for a while Nicholas, if you’re interested in Fastly or 1Password (though I’m not sure they hire in Australia) let me know.\n\nI can probably also get you an intro to Microsoft as I think you know Jack from Mozilla."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I remember the Graphite team was looking for compiler people. I don't remember the details, but give it a look (graphite.rs)."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Futurewei is downsizing? What does that mean for the many other core Rust contributors paid by futurewei? And the other projects they sponsor (Servo? Dioxus?)"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.054422,
      "arousal": 50.566893,
      "dominance": 67.460317,
      "text": "What kind of changes would you like to make on the Rust compiler ?"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Fastly sometimes has Rust jobs and some of our smartest people are in Australia. DM me if you want more info."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.748997,
      "arousal": 65.60265138461538,
      "dominance": 71.14076407692308,
      "text": "May not be of interest to you, but if you wanna do YouTube vids or tutorial walkthroughs on rust compiler and make a pattern id love to watch that and would happily contribute.  — Not everyone wants to be on cam and time to make dev money is probably long if ever.\n\nBut as someone that left dev job to do a sabbatical (much cash to no income, but fine savings): I love the freedom.  (Mind you I don’t need much cash; everyone’s different.)  Even if it’s just a while you look it could be fun.\n\nAnd, on the community & language end: I think the both badly need it.  Rust is amazing, but increasingly it seems like there’s an emphasis on smart, knowledgeable people making systems that just work … and a the logic of the systems being increasingly opaque.  (It’s one thing that makes me consider doing a little zig: I don’t like the language as much, but a big goal there feels like visibility of what the machine does not *just* being unwasteful)\n\n____\n\nTLDR: if you feel like doing some YouTubes or producing tutorials and getting donors, even just while you look, I’d happily contribute and I think we could all use more insight into rust. (Reducing magic as a norm: and compilers are magic :)"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.18367333333333,
      "arousal": 58.314437,
      "dominance": 57.558579,
      "text": "Your work looks amazing! I hope you find a new job which fits you.\n\n\nThe idea that funding for something revolutionary like rust is going towards overly large models instead is a bit sad."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Props for using your network.\n\nWhen you find something, it would be awesome to see the follow up story."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.5192745,
      "arousal": 64.512472,
      "dominance": 66.099773,
      "text": "Hope you join amazons rust initiatives team, I know it doesn’t have the best rep here on Reddit but the rust team people are some of the best I worked with. Some of the names on the total contribution list you linked I recognize often such as Niko obviously and Weihang who is super active to help us Rust developers with issues we run into. I definitely asked a lot of beginner questions and the internal community is super responsive (as I can’t really ask about our internal code stuff outside) compared to most other languages here."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.560091,
      "arousal": 64.909297,
      "dominance": 68.7641725,
      "text": "Valgrind changed my life when I started programming in a lot in C. Wild that non of my college professors told me about it. Good luck!"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.9455784,
      "arousal": 65.05668940000001,
      "dominance": 69.659864,
      "text": "I’m noticing the specific anti-GenAI note. I definitely have no idea what I’m talking about relative to you, but as an intern working on ML compilers it feels way more compiler than ML. Team members have backgrounds in LLVM, Scheme compiler, etc. People are maintaining passes for all the good compiler stuff, e.g. register allocation, scheduling, formalizing type systems, etc. It seems like a pretty good place to be as an aspiring compiler engineer."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That’s a very impressive resume. Do you have any recommendations for getting into compiler engineering?"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Apply to Polars. I'm sure they would love your expertise. It's also rust-based, open source, and a great use-csse! "
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Best wishes to you."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.0657595,
      "arousal": 65.7596375,
      "dominance": 68.1405895,
      "text": "We are looking for rust compiler engineers! I know you said no to gen ai but we make a programming language called BAML that may be of interest. We are working on making it imperative as it is currently declarative, and letting people build full programs \n\nhttps://github.com/BoundaryML/baml"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.346182999999996,
      "arousal": 62.09372666666667,
      "dominance": 54.91307633333333,
      "text": "All the best u/nnethercote!\n\nEvery time we fight with Rust compilation time challenges ([example](https://www.feldera.com/blog/cutting-down-rust-compile-times-from-30-to-2-minutes-with-one-thousand-crates)), I go searching for an update to your blog series."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://beyond-tabs.com/jobs/rust"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.031746,
      "arousal": 56.235828,
      "dominance": 63.151927,
      "text": "I'm looking for people with experience in Rust in my company but I'm not sure whether or not this falls into generative AI - we build an inference engine that's optimized to run models locally. Let me know if that's interesting to you."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good luck! Unfortunatelly, many of the Rust folks are now turning to vibe coding, as it is a “new cool thing”, the same as Rust - soooo…."
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "Why don't you want to work in algo trading ?\n\nOr gen AI ? Actually fuck it, crypto is fun too.\n\nWhat are you willing to work in dude ?"
    },
    {
      "post_title": "I am a Rust compiler engineer looking for a new job",
      "created_utc": 1752925495.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "How many millions you have right now in your bank ? Just curious"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust Dependencies Scare Me"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 84.4387755,
      "arousal": 67.2052155,
      "dominance": 72.222222,
      "text": "Not mine, but coming from C/C++ I was also surprised at how freely Rust developers were including 50+ dependencies in small to medium sized projects. Most of the projects I work on have strict supply chain rules and need long term support for libraries (many of the C and C++ libraries I commonly use have been maintained for decades). \n\nIt's both a blessing and a curse that cargo makes it so easy to add another crate to solve a minor issue... It fixes so many issues with having to use Make, Cmake, Ninja etc, but sometimes it feels like Rust has been influenced too much by the web dev world of massive dependency graphs. Would love to see more things moved into the standard library or in more officially supported organizations to sell management on Rust's stability and safety (at the supply chain level)."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.900227,
      "arousal": 64.4557825,
      "dominance": 71.14512450000001,
      "text": "Small counterpoint coming from a C++ Dev.\n\nIn C++ you usually do not see the number of your dependencies. You either rely on shared libraries that also use shared libraries under the hood or people use giant frameworks like boost or qt.\n\nSince its much more of a hassle in C++ to add dependencies, dependencies are just larger collections of code compared to Rust, boost is a good example of this.\n\nRust is at least transparent about the dependencies, C++ hides a lot of this complexity but it is there."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Always worth linking: [Let's Be Real About Dependencies](https://wiki.alopex.li/LetsBeRealAboutDependencies)."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.83824633333333,
      "arousal": 51.70068033333333,
      "dominance": 65.495087,
      "text": "> Out of curiosity I ran toeki a tool for counting lines of code, and found a staggering 3.6 million lines of rust. Removing the vendored packages reduces this to 11136 lines of rust.\n\nSource lines of code is a good way to get a _feeling_ of the volume. But it is IMO load bearing for this particular blog. And that feels like very sloppy reasoning. Like, what if 95% of those 3.6 million lines of Rust are some combination of FFI definitions and tests? And maybe even FFI definitions for platforms that you aren't even targeting and thus aren't even building. If that's the case, then that eye popping number all of a sudden becomes a lot less eye popping and your blog ends up reading more like you're tilting at windmills.\n\nBut I don't know the actual number. Maybe it really is that much. I doubt it. But maybe."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust needs to be extremely picky about what it adds to the standard library as that must be supported forever. 'extra' dependencies are the price you pay for overall stability."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Counter point - this attitude is prevalent in c++ so a lot of places roll their own code. So many hours are wasted re implementing common functionality, making new bugs, and new unmaintainable messes"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do any other software package manager ecosystems scare you any less?"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.63114166666667,
      "arousal": 59.712773999999996,
      "dominance": 52.456538,
      "text": "I believe there should be at least one or more official tier for dependencies. Adding dead batteries to std always sucks, and I think it should keep up its current stability guarantees. However, it would make sense to promote a few crates as \"high grade and stable, but not immutable or eternal\", as already is applicable to a lot of https://blessed.rs/crates. These crates would be triaged and maintained by the rust project (as quite a few of them already are), with the reservation of breaking more often than std could/should and being displayed/tagged on crates.io.  \nA good example would be network protocols which slowly evolve over time."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's a choice of course: use libraries written by others or roll out your own. The question is one of reliability, trustworthiness. Since Rust is a new language, so are the crates written with it. But the crates you need are likely to be the crates others also need, those that are in use in many other projects, those that have proven themselves reliable. It makes them less scary."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.126984,
      "arousal": 66.75170075,
      "dominance": 69.18934225,
      "text": "> Most of the projects I work on have strict supply chain rules\n\nSigh. I briefly worked in supply chain security, and honestly: C++ does not have any. The only way to give guarantees about what you deliver in C++ is either to NIH everything or to get written statements from the lawyers of every third party library you use, good luck with any open source stuff that isn't boost. And don't tell me you're using conan, no one does.\n\nThe npm ecosystem has given third party packages a bad reputation, but you still have the option to restrict yourself to flat dependencies if you want to - precisely because cargo gives you the information to make that decision."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.9176115,
      "arousal": 55.21541966666666,
      "dominance": 57.01058183333333,
      "text": "I whole-heartedly agree that the complexity of async Rust in general and tokio in particular is often unjustified. I am rooting for thread-based web frameworks (another one of those was announced here just recently) because they are simpler and usually good enough, and often offer a better developer experience.\n\nHowever, what you are looking at is not as much a statement about Rust's dependency sprawl as it is about the complexity of the web protocol stack. Once you start looking at what the alternative to the Rust situation is, it's... well, the same but in a memory-unsafe language. I see you don't have 1.5 million lines of C in your screenshot, so you avoided OpenSSL - nice! Also, cURL alone (without any dependencies) would be 400k lines of C; libnghttp2 alone would be another 150k lines, not counting its own dependencies.\n\nIt is scary to gaze into the abyss and contemplate all this complexity. And I do avoid it where I can - I try to make my projects have a low footprint, even if I have to work for it. But the only readily available alternative - and the one the vast majority of projects out there take, regardless of the programming language you end up writing - is to have this amount of complexity and code but in C instead of Rust, and that terrifies me so, so much more.\n\nP.S. In case you'd like to do a line-of-code analysis of your own project, I wrote a tool for that: https://crates.io/crates/cargo-loc"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.45275900000001,
      "arousal": 62.81179133333333,
      "dominance": 73.28042333333333,
      "text": "If you really consider what you have described (an async HTTP webserver that supports TLS, logging, JSON (de)serialization and ZIP (de)compression that works across several operating systems and CPU architectures), I would encourage you to write all of this \"from scratch\", starting only with OS syscalls, or even starting with the stdlib. I'm pretty sure that if you actually achieved that, you would stop calling it trivial :)\n\nRust makes it easy for you to use all of that tech, and that makes it seem like it's trivial, which is actually a great success for Cargo and Rust, that you feel that way! But the functionality itself is far from trivial."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.40942311111111,
      "arousal": 55.60594611111111,
      "dominance": 65.79743,
      "text": "Carrying over some comments from Mastadon\n\nI was curious about this and decided to try to reproduce the situation.\n\nThey pull in `ripunzip` which is both a lib and a bin and there is no way to opt-out of the bin dependencies, so I opened https://github.com/google/ripunzip/issues/100\n\n`ripunzip` seems like a particularly bad offender because it is pulling in a second copy of `reqwest`.  It also pulls in support for several compression formats when the author says they only need one.\n\nSome deps are for supporting old versions of Rust and hopefully the MSRV-aware resolver will open people up to the possibility of dropping those deps.\n\nSome look big because the maintainer split them up.\n\nSome are for optimizations and I wish crate authors would offer more control over runtime vs build time performance.\n\nSome are for developer convenience which I personally feel less inclined to use when it shows up in a \"core\" dependency like one of these.\n\nSome will hopefully go away as Rust becomes more powerful.\n\n> With cargo there is no easy way (as far as I can tell) to see what lines ACTUALLY get compiled into the final binary, many crates include items for windows which I don't necessarily need (but there's no official way to tell cargo that).\n\n    $ cargo +nightly tree --target all | wc -l\n    682\n    $ cargo +nightly tree | wc -l\n    524\n\nYup, there are a good number of platform-specific dependencies.  We've had some design discussions around this, see https://blog.rust-lang.org/inside-rust/2025/02/27/this-development-cycle-in-cargo-1.86/#specifying-supported-platforms-in-packages\n\n**Note:** that gives an approximation since a dep can show up multiple times"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.50761242857143,
      "arousal": 63.249109142857144,
      "dominance": 60.20408171428572,
      "text": "This opinion again, meh, I completely disagree with every point\n\n1. The fact that C++ has a broken build process and people copy-paste their dependencies in the codebase is NOT a feature. \n\n2. cargo makes it very easy to vendor your dependencies if you must, set up a private registry, etc.\n\n3. Including more things in stdlib is a terrible idea imo, just look at Python. Instead of just stating this, why would it be better to have stuff in std vs. relying on a well maintained community crate that doesn't have the same strict backwards compatibility guarantees as stdlib?"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Go look at the dep, pin a version, vendor it if you’re really paranoid. Sure a pita when you have a lot of deps, but the auditing is faster than recreating the wheel quite often."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.168052555555555,
      "arousal": 59.737969333333325,
      "dominance": 55.454774444444446,
      "text": "I agree with the article in the more general sense of dependency and supply chain management becoming increasingly difficult in pretty much _all_ languages (though Rust definitely has its own unique problems).\n\nBut a line that jumped out at me was, \"adding more to the rust standard library much like Go\". Maybe I'm in the minority here but the Go standard library is complete garbage. Off the top of my head the Time and SQL packages are a nightmare. Working with slices feels like I'm stuck in Java 1.6 again, throwing random stuff into a static method on Go's equivalent of the `Arrays` class with the `slices` package. Less facetiously, the `slices` package doesn't even have most of the things I expect from a \"batteries included standard library\" - where are the \"any\" or \"all\" methods? Why do I have to write, over and over, the same horrible `for range` loop? _And if anyone says I can just write my own method for it, why in the goddamn can't the Go maintainers write it themselves?_\n\nWhich is a barely related rant all to say, \"I don't want the Rust standard library to look like the Go standard library.\" Every time I switch between Rust and Go projects, I either thank God for letting me return to a language that feels helpful or curse him for making me deal with a language that feels like it's designed to drive me insane."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263033333334,
      "arousal": 53.099017333333336,
      "dominance": 64.32350733333334,
      "text": "It all comes down to the tradeoffs you are willing to make.\n\nCargo solves the mechanical problems and provides a consistent way of handling dependencies.  \nUsing external dependencies is totally optional.\n\nI quite like the pattern of allowing the ecosystem to evolve solutions outside the standard lib. Allows much faster iteration and the ecosystem can evolve and coalesce around the best solutions. The tradeoff is obviously that some useful libraries are not in standard and projects need to either rely on external dependencies or create their own implementations. \n\nImplicit in the idea that there should be \"more officially supported organizations\" is someone else should be doing the work to simplify our supply chain management. It would be great, don't get me wrong, but I guess is a consequence of Rust's relatively short history. \n\nPossible commercial opportunity for someone to make a trusted version of Blessed.rs.\n\nWe can call it [Trusted.rs](http://Trusted.rs)"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My tauri project is 1000+ dependencies now. Its only growing"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "Althogh something like [Blessed.rs](https://blessed.rs/crates) exists,\nMaybe we need something like Boost in C++, or SRFI in Scheme, which is a set of useful libraries that can be widely trusted?"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "most of dependencies that are added on a Rust project are optimized and stripped from the release binary. it is okay for me to work with many dependencies as soon as the result is light."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.30561877777778,
      "arousal": 58.23885088888889,
      "dominance": 60.26706966666667,
      "text": "Does anyone else think it’s a little non-sensical how much organizations freak out about “supply chain safety” when it comes to code, but seemingly is thrown out when it comes to literally anything else? \n\nIn the real world, you literally depend on 3rd parties for everything. You need a water company to supply water, electric company to supply electricity, a telecom company for internet, and a food distributor for your groceries/restaurant meals. Seemingly, we’ve decided that reinventing these things every time is too much of a hassle, so it’s widely accepted to use existing solutions.\n\nBut code? Oh don’t you dare use that http library, time to reinvent the protocol. Logging? Let’s make a custom logger with an interface only trained employees know about.\n\nI dont know if this attitude has reduced CVEs. What it has done for sure is give the contractors and companies who make the software a lot more hours and money thanks to having to literally reinvent the wheel for every project. "
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "(author here) Thanks for reading and posting! Been having a great time reading everyone's thoughts. I'll try to write something in the future with some more fair comparisons! Learning lots!"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "IMHO this is a sign that crates in general try to use other, already existing crates instead of reinventing the wheel - which is a good sign (reusability of crates). \n\nOne concern could be that some crates introduce incompatible version requirements."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.2675735,
      "arousal": 55.328798000000006,
      "dominance": 72.16553300000001,
      "text": "If I understand correctly how it works, when cargo goes to build dependencies, it automatically picks up bug fixes in transitive dependencies.  (It depends on how dependencies were specified in the Cargo.toml files, and whether you include Cargo.lock in the crate, but usually you would set it up that way.)  In my mind that is an advantage over having C++ dependencies with transitive dependencies baked in (so that I have to wait for a new release of the top-level dependency in order to pick up those bug fixes)."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.582766,
      "arousal": 53.741497,
      "dominance": 71.882086,
      "text": "You always have the option to write your own (and figure out how to make it correct, well-tested, etc) instead of simply pulling in a dependency."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I agree. That’s why I like boost. It’s like cloning the entirety of crates.io as a single dependency!"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.31216933333333,
      "arousal": 66.72335600000001,
      "dominance": 61.0544215,
      "text": "I'm still a bit of a newbie to the Software Dev industry so take what I'm about to say with lots of salt.\n\n\nBut from what I understand, you should be scared of those dependencies! And Rust is not the only language to have them. It's just the only one to shove them in your face and ask, \"Can you deal with this?\".\n\n\nAnd that seems to be the whole point of Rust in comparison to C++. There is nothing you can in Rust that you can't in C++, but Rust continously asks you if you should be doing it.\n\nSomeone posted an article earlier in the thread that discussed how many of the real-world C projects have tons of dependencies too but they're not as obvious about it in the way Rust is.\n\n\nSo what I'm saying here is that Rust dependencies scaring you is an absolute win for Rust. Because if you are, a lot of other people will be too. Which means discussions like this, which are crucial to thinking up innovative solutions to the problem. As opposed to some languages obfuscating the problem."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.174603000000005,
      "arousal": 52.664399,
      "dominance": 65.02267549999999,
      "text": "For me personally, I think it’s a benefit.\n\nI can focus on the more practical implantation of my application than to re-write functions in existing libraries. \n\nOnce the general structure of the application is firm, then I can start trimming the fat at either re-write the functions or only import what is needed.\n\nAlso cargo’s versioning makes it easy to ensure all libraries work together."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Coming from go, I found it quite cumbersome. Especially when it comes to async. I don't think it'll be too bad if serde, tokio, and some http crates are added to the standard library. But, it'll make it no longer as low-level."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you counting multiple crates from the same team separately? I don't think we should be penalizing projects for making use of Rust's excellent modularity support..."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.696145,
      "arousal": 70.26643975,
      "dominance": 51.13378675,
      "text": "For better or worse, this is just modern software development and has nothing to do specifically with Rust. There is nothing requiring you to bring in dependencies that don't meet your criteria, or preventing projects from managing themselves in a way that meets them. The fact of the matter is that most developers these days are coming in to Rust from JS, Python, Go, etc backgrounds and will absolutely expect to have the ability to pull in whatever dependencies they want, as they were previously able to, and failure to provide that facility is a sure fire way to complete irrelevance. They'll go back to crapping out JS. All of the Rust converts from C or C++ backgrounds can continue to handle their projects as they have done, just do your diligence on what dependencies you bring in. Done and done, everyone happy."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just you try bevy then lol"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.5215422,
      "arousal": 59.4784582,
      "dominance": 63.106575799999995,
      "text": "Quick tips: make sure your machine have abundance of storage since those dependencies eat a lot of it.\n\nSide note: every language has its own way to manage dependencies and I think Rust doing it well.\n\nI agree that many dependencies required just to build simple app. This trend should be decreasing overtime as Rust include it as built-in features if it proves necessary in the long run, just like Once_cell crate. But it takes time."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.006803,
      "arousal": 59.09863975,
      "dominance": 58.33333325,
      "text": "Today I installed a Treesitter parser and I was surprised to see it installed 200 cargo packages…\n\nIn my own big project, I barely use any dependencies (fxhash being the only micro–package, the rest are bigger ones like serde, the windows–crate and the typical proc–macro crates), and while it takes a lot of time to write ready-made stuff that I could’ve just `cargo add`ed especially stuff like math libraries), I do enjoy knowing every detail of the api’s I consume — even if it takes a lot of time and is probably not as performant as ready–made crates."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.09674966666667,
      "arousal": 48.03476933333334,
      "dominance": 56.76492833333334,
      "text": "I both get excited and concerned from a security perspective by the fact that you can almost always find a Rust version of some library. Excited, for obvious reasons.\n\nMy concern is that the libraries are not well-audited and operate under a false sense of security. Just because a program is memory safe does not mean it won't lead to catastrophic security issues. \n\nIf the library itself has nested dependencies, it makes me even more worried."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I take it that the OP has never done node.js or any react projects? Compare to js projects, rust dependency this somehow a blessing for me. :D"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I much prefer the paradigm Rust has with cargo versus a bloated std lib. It puts far more control into the hands of the developer to make decisions for what gets included in their binaries and the developer can be surgical with upgrading libs as needed.\n\nFrom a supply chain security perspective you can always lock your deps or vendorize them."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.88133033333333,
      "arousal": 61.07331833333333,
      "dominance": 53.514739,
      "text": "You're not alone! I have a similar background and similar fears. Im currently working on a very large rust project at a huge company and we're suffering from some problems due to all the dependencies. There are about 100 rust packages this this project and a clean build takes 30+ minutes. It's the transitive dependencies that just kill you. Recompiling a slightly different version of Tokio for the like 12th time gets really old. \n\nThankfully we have an internal mirror of crates.io and there is some internal audit of 3rd party packages we use but not enough. We've been aggressively pruning dependencies as the project matures thankfully."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yep.\n\nIMO if you find you are bringing in loads of deps for something comparatively trivial, think about implementing it yourself.\n\nYou can even vendor the code you need if it’s simple/contained enough.\n\nWith the usual warnings about certain things you definitely should not implement yourself, like cryptography."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.655329,
      "arousal": 86.054422,
      "dominance": 41.723356,
      "text": "Project at work has in excess of 700 deps, but the real nightmare is the cost of monomorphization. The team has been aggressively doing “DDD” - this means having type erased backends for the DB, separation between HTTP and DB logic.\n\nI’m generally concerned at how long compile times will grow overtime."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.011338,
      "arousal": 87.528345,
      "dominance": 83.786848,
      "text": "Yet another C# win."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Tokio can die. Not because it’s bad or doesn’t solve problems, but it’s an ecosystem of its own and forces things. I avoid it like the plague. \n\nI hear what you’re saying. It feels a lot like npm, but you can avoid it. It’s a bummer that people don’t dig into this more. \n\nThanks for sharing. I agree 100%."
    },
    {
      "post_title": "Rust Dependencies Scare Me",
      "created_utc": 1746744518.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "You might want to think yourself to write some common libraries from scratch with the help of LLM.\n\nBut you know that's really counterproductive the true purpose of crates.\n\nThat will always be a drawbacks, given very limited resources, it's better to handle dependency hell than writing yourself.  \nPick your enemy!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "For those of you who have jobs in Rust. What are you working on?"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "selftext",
      "sentiment": "negative",
      "pleasure": 45.7482995,
      "arousal": 65.7596375,
      "dominance": 44.501134,
      "text": "I fear there may be not enough jobs in the future for Rust programmers. What are the trends for rust jobs? Last time I checked there were a few on cryptocurrencies. Will rust will at some point be widely adopted?"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing firmware for charging stations for electric vehicles."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Open-source data processing/analysis library: https://pola.rs/."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.9478455,
      "arousal": 57.2562355,
      "dominance": 55.385487999999995,
      "text": "Building libraries that our inhouse python developers use."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "awesome seeing the range of jobs in this comment section\n\ni myself work on web apps, building servers with axum and frontends with wasm"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Scientific data https://icechunk.io"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I get paid to write backends using axum and egui for my startup.\n\nIts cool to only use rust because I can use the same types that I use in axum in my egui desktop app and it just works."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I work on games server side"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.359032500000005,
      "arousal": 62.47165533333333,
      "dominance": 48.129251833333335,
      "text": ">I fear there may be not enough jobs in the future for Rust programmers. What are the trends for rust jobs? Last time I checked there were a few on cryptocurrencies. Will rust will at some point be widely adopted? \n\nOf course it will be. It's in the Linux kernel. Google is using it for Android because Go just isn't fast enough. Microsoft has mandated that all new Azure features must be written in Rust; C++ is forbidden now. Some new Windows features are also developed in Rust. Discord moved from Python to Go to gain speed; still not fast enough, so no they've redone their backend in Rust.\n\nRust isn't going anywhere anymore. \n\nIn the past new programming languages got adopted super-fast if they could do something that previous languages couldn't. Now, Rust can't do anything that for example wouldn't be possible with Java, C++ or C#; it can just do it with less chance to have severe bugs. Also, C# has had 25 years of library development; C++ has had almost 40. Java has had 35 years of ecosystem development. Rust is just 10 years old now (starting at version 1.0, also known as \"Edition 2015.\")\n\nRust has to overcome a massive inertia and that just takes time. A lot of it."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.133787,
      "arousal": 40.249433,
      "dominance": 54.875283,
      "text": "A preprocessor to deserialize bus data. Forgot to mention for rockets!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I work at a network observability company"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.01284966666667,
      "arousal": 57.74754333333333,
      "dominance": 60.31746033333334,
      "text": "Rust is everywhere in industry. Many job posts don’t mention it, but there’s a good chance rust is in use at any tech-heavy company."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.328798000000006,
      "arousal": 63.47586642857143,
      "dominance": 55.34499542857143,
      "text": "For the planning of wind farms you have to do physics based simulations. I was hired as a python dev and I am still working mainly on python code. But our simulations were too slow in python, so I began writing them in Rust and packaged them using pyO3 and maturin. So now I am maybe doing Rust 30%-50% of the time. I do love both python and Rust :)\n\n\nThe company I work for is in Germany\nhttps://engineering.noxt.de/"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.29818575,
      "arousal": 51.21882075,
      "dominance": 60.4024945,
      "text": "I did not have a Rust job but I wanted to have one so much that I just started using it at my job and now things are getting serious. It all started as a side project because I saw the opportunity to write a transpiler (for sql) (my job is data analyst / data engineer) and the idea was to automate the migration of thousands of sps that we were \"updating\" manually, so I ship my first proof of concept of this using rust, my boss told me to turn it into a web page (in that moment I appreciate wasm a LOT) and now I am on the last steps of creating a transpiler that runs on the web and according to the my boss and the chief data officer the whole department will use it"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.26001533333333,
      "arousal": 50.340136,
      "dominance": 62.962963,
      "text": "Music software and hardware development! I run a startup that specializes in singing synthesis tech, we develop https://mikoto.studio. We use Rust for almost everything except UI, and I know of at least one other company in our sphere that has also adopted the language.\n\nIn my eyes, all Rust needs is a decently complete audio framework (a la JUCE) to have a shot at dominating the audio market. The question isn't \"if\" but \"when\"."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.902494,
      "arousal": 53.344671,
      "dominance": 64.115646,
      "text": "Computer vision"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Infrastructure for other teams that want use Rust at a FAANG company."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Backend in Rust for a fintech company with a credit card product, but I mostly work on the mobile apps right now"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My company is in crypto, but my work is not directly related to the blockchain. Just regular backend server stuff."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.05102049999999,
      "arousal": 47.0238095,
      "dominance": 57.7947845,
      "text": "1. Creating a network simulation of the QUIC protocol in deep space (currently focusing on Earth <-> Mars, using a dataset from NASA's JPL to simulate link interruptions). It's [open source](https://github.com/aochagavia/quinn-workbench/) btw.\n2. Creating infrastructure for fast machine learning workloads (a lot of this is about replacing slow tools with Rust-based fast ones)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I work in flying robots."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "writing firmware for high end projection systems."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Programming the firmware for battery charging stations"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.829176,
      "arousal": 61.715797333333335,
      "dominance": 59.674981333333335,
      "text": "Medical Device developer. Our life-critical core algorithm is written in Rust, along with some firmware for controlling peripherals, and web services that touch patient data. Sadly not hiring, but maybe sometime this year."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Industrial automatization."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.319728,
      "arousal": 46.4285715,
      "dominance": 61.791382999999996,
      "text": "spreadsheet engine for [row zero](https://rowzero.io/home)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm mostly a go dev be we use rust fare amount in a firewall software."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.160998,
      "arousal": 55.55555566666667,
      "dominance": 60.61980333333333,
      "text": "Timeseries Databases\nhttps://github.com/influxdata/influxdb\n\nBefore this job I did a database that synced without internet, wasm edge compute at Fastly, and healthcare. This was all from end of 2018 till now. There are jobs available and it has been growing over time. The only reason you’ll see more crypto jobs on the market though is due to churn or not being able to hire people."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.408163,
      "arousal": 57.823129,
      "dominance": 62.585034,
      "text": "Web apps with leptos for an event driven processing platform!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.19841275,
      "arousal": 54.223355999999995,
      "dominance": 61.36621325,
      "text": "We do mostly Java, but we use some Rust in places that are performance critical, or needs to interop with C libraries, or needs to be lightweight on memory. \n\nWe have a bunch of SasS products, but the backend stuff that I work on where Rust is used is for stuff like: \n\n- Lightweight daemon services that collect metrics or control node readiness in a cluster \n- Queue-driven workers that do batch processing for machine learning features \n- Worker containers for a container-based, massively parallel file format conversion and transformation service \n- Creating native libraries to solve specific performance problems that are used within a Java service using JNI \n\nAll of these Rust projects have been pretty well received, and it is a safe bet that we will continue to use Rust where it makes sense, but it probably won't become our \"main\" language since most of our stuff is just simple CRUD webapps."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.46679614285715,
      "arousal": 60.09070271428571,
      "dominance": 57.159054285714284,
      "text": "I've had 5 different jobs writing rust. Jobs I've done are: \n\n1. Writing an ML inference service on a home security camera\n2. Indexing blockchain contacts\n3. General purpose data mesh framework\n4. Rewriting a python app for automating linked in\n5. Back test framework for trading\n\nEvery project started using rust for different reasons. The security cameras needed something without a garbage collector and the manager was cool enough to let me learn rust on the job which ruined all other languages for me. The data mesh project already has a ton of work done in go and python and the CEO (former c++ dev) could see that they were having issues that rust would solve. \n\nThe python app and the trading stuff happened because I like rust and I'm was more productive in it for both prototyping and building production apps than any other language"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing distributed database, storage nodes  in rust."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "I work on an open-source linked data store (https://trible.space) for our asset and archive management."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.510204,
      "arousal": 58.446712000000005,
      "dominance": 64.5124715,
      "text": "I'm currently working on some data-intensive perf-happy backend part of [Flatfile](https://flatfile.com/). We're not officially hiring Rustaceans right now but stay tuned, that may change in the future."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Low-level cybersecurity stuff. Implementing VMs, emulators, decompilers, binary analysis engines, and similar things"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.750567000000004,
      "arousal": 48.469387499999996,
      "dominance": 59.5238095,
      "text": "Rust is widely adopted, it’s not necessarily always mentioned in the job description but off the top of my head I know of several large companies that hire large amounts of Rust developers. Amazon has a bunch of Rust teams in AWS, Google heavily uses Rust in Android, Microsoft is using Rust to slowly replace some old C and C++ based code in places like Office and the Windows kernel, Cloudflare’s moved their DNS stack and DDOS detection to Rust, Rust is officially supported in the Linux kernel… you get my point. \n\nRust has solidified itself heavily in the industry and isn’t going anywhere anytime fast. I’m at one of the aforementioned companies and there’s been a very clear push from higher up over the past few years that all new projects that have performance requirements and would have previously been written in C or C++ should be written in Rust. Job postings may not always specifically say “Rust developer”, but it’s being used everywhere and continues to grow year over year."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "(Distributed) Web Services"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Geospatial hpc servers, batching and number crunching."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.91383233333333,
      "arousal": 54.421769000000005,
      "dominance": 63.15192733333333,
      "text": "Open source visualization tool for multimodal time-aware data: [https://github.com/rerun-io/rerun](https://github.com/rerun-io/rerun)\n\nHere's a good explanation of what it's for: [https://rerun.io/docs/getting-started/what-is-rerun-for](https://rerun.io/docs/getting-started/what-is-rerun-for)\n\nAnd some examples, many of which run in the browser: [https://rerun.io/examples](https://rerun.io/examples)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building a runtime for robots!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Low-level cryptography libraries\n\n[https://github.com/entropyxyz/crypto-primes](https://github.com/entropyxyz/crypto-primes) (prime number generation and primality testing)\n\n[https://github.com/entropyxyz/manul](https://github.com/entropyxyz/manul) (a framework for distributed cryptographic protocols)\n\n[https://github.com/entropyxyz/synedrion](https://github.com/entropyxyz/synedrion) (an implementation of a certain distributed ECDSA protocol)\n\nWorked on a bunch of similar stuff as a backend for Python code at my previous job as well."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "I'm building a distributed system that's being rewritten in rust. It's popularity is growing - it's much easier to use than c/c++so big tech is setting the benefits of moving services to it and reducing hardware footprint as a result."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I do research and my projects are written in Rust to leverage its safety and speed. There's also the verus project that makes it easier to verify rust programs."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Research into constraining LLM inference via grammars. Funded deep tech startup."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.319728,
      "arousal": 59.7505665,
      "dominance": 56.235828,
      "text": "All of the jobs here sound so cool. I wish my country could give a chance to tech areas other than web dev."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "[https://github.com/ArthurBrussee/brush](https://github.com/ArthurBrussee/brush)\n\n  \nGot there in a very roundabout way but been a lot of fun to work on :)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing firmware for surveying equipment (GNSS/RTK)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use to write/maintain the general-purpose cryptographic(not cryptocurrency) library at my former job. Other Rust dev over there were maintaining backend services and some protocol stack(RDP, VNC, etc)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.594104,
      "arousal": 51.3038545,
      "dominance": 62.8117915,
      "text": "Building a data science platform for a health data company"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "HFT, quantitative trading and mev"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am a working student at a research institute and I am working on two projects. Media over QUIC and the c2pa crate."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "developing an IDE for China company. Remote from Turkey :)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.9954645,
      "arousal": 58.446712000000005,
      "dominance": 63.888889,
      "text": "Building sales tools at a kitchen cabinetry company. I'm currently doing a rewrite from Rocket to axum because I want to share code with a couple of other projects that are already using axum."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.315193,
      "arousal": 54.5351475,
      "dominance": 64.1723355,
      "text": "Writing firmware/app for a stm32 device which will monitor the electric grid on city levels.\n\nUsing embassy which is a really nice framework. My first rust gig after 17 years as a dotnet developer. Still doing dotnet for the backend though."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building a desktop app with Tauri as a companion app for one of our VR projects. Also, I built our backend with axum and shuttle."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.87981833333333,
      "arousal": 66.13756599999999,
      "dominance": 65.00377933333333,
      "text": "Cyber security space - passwordless, auth, etc. Previously EDR/SIEM space. Fun stuff and fair amount of Rust showing up now."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "A database (SurrealDB) which is entirely in Rust.\n\nA lot of databases are rewriting components or entirely in Rust too, seems to be taking over the space bit by bit."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Embedded firmware to collect and control data in buildings (heater, ...) with various protocols and automation. We use Rust and C, but we are replacing the latter with the former as soon as possible."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.154195,
      "arousal": 57.8798185,
      "dominance": 53.117914,
      "text": "I’ve built an optimizer that does around 10 million simulations per hour (based on 6 month data)\n\nOriginally I build it in Python, couldn’t get the performance we need. Learned Rust, did the rebuild and it’s blazingly fast. Recently introduced ScyllaDB in the project. I can never go back to the old ways."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Robots!\nhttps://maticrobots.com/careers\n(Most of our stack is in Rust)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.43764200000001,
      "arousal": 58.3900225,
      "dominance": 70.861678,
      "text": "Cloud Native Buildpacks: https://github.com/heroku/buildpacks. It builds OCI images declaratively (verus Dockerfile is procedural). Our team builds buildpacks using https://crates.io/crates/libcnb. We get strong typed guarantees and really nice build tooling (cargo etc.)."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Bioinformatics and genomics"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Investment banking"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cryptography 2.0"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.62962966666667,
      "arousal": 60.61980333333333,
      "dominance": 61.602418666666665,
      "text": "I help maintain an internal-use-only Rust GUI framework which is used by our frontend client team to develop a certain suite of streaming entertainment applications. These Rust apps are compiled into WASM bundles and shipped to client devices via over-the-air updates. These apps sit on top of a tiny WASM-based runtime, written in a combination of C and Rust. We use this (admittedly unconventional) tech stack only to support extremely underpowered systems that are otherwise incapable of running pretty much anything else the company has tried in the past (HTML/CSS/JS, C#, commercial game engines, and so on)."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rest webservice backend written entirely in Rust. webservice provides APIs for cryptography primitives and other wrapped features like ekms etc."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building an authorization language and platform. We're hiring in NYC."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wasm faas and webassembly components"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rewriting a spark pipeline into Rust based on DataFusion. I'm almost ready for QA to let me know what I broke :)\n\nThe job isn't strictly Rust, but it's been my primary language for the last year followed by Scala, some Java and the occasional Kotlin."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Internal service that stitches together a huge data store"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Our own build system used for semiconductor IP design! Specifically the remote caching service!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.896825250000006,
      "arousal": 65.78798175,
      "dominance": 58.276644250000004,
      "text": "Mostly Python.\n\nThat is, I’m introducing Rust where I can make a case for it.\n\nI have a Web service where security is such a high concern that I wanted to have nothing but a statically linked single binary to reduce the attack surface, and I wanted a very rigorous type system to help ensure my code was correct. Rust was a great fit.\n\nMy next Rust project is a logging library for our Python and Go devs. Since Rust has practically no runtime, it’s a good fit for polyglot libraries + language bindings, especially where speed and memory are a priority."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Static analysis tools"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Oh glad I saw this, am trying to build a p2p layer with libp2p, and I’ve been stuck tbh, would appreciate any tip or help, thanks"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Working on a Rust C++ interop tool"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "working on telecommunication system, also looking student engineer that will write rust code at Denmark"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building security layers for service workloads, mostly in the cloud. I also use a lot of Go as well."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "Indie gamedev - details at https://slowrush.dev for the curious :)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 52.834467,
      "dominance": 68.253968,
      "text": "Embedded/Edge multimodal ML (text/audio/vision).\n\nAnd as far as Rust adoption....the trend is towards it being widely accepted:\nX, Google, Microsoft, Meta, Discord, HuggingFace, Amazon, NASA, Tesla...the list goes on...\n\nIt's not going anywhere."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.96976566666667,
      "arousal": 54.83749066666667,
      "dominance": 72.48677233333333,
      "text": "Software on top of Linux for ARM based Automotive Connectivity Units. Another Team is responsible for the hardware design.\n\n(Love how easy it is to cross compile Rust applications)"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.4965985,
      "arousal": 60.147392,
      "dominance": 54.9319725,
      "text": "Microservice to support control plane workflows in the cloud storage industry"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Creating MPR/3d visualizations for medical data (CT/MRI scans). We are using Rust, WASM and typescript.\n\n\nI held a talk about how I got here at last years EuroRust: https://youtu.be/ZzQaVH-9Dzs"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "Gaming machine monitoring, jackpot implementation, b2b api"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 37.07483,
      "arousal": 38.888889,
      "dominance": 46.485261,
      "text": "Tour planning. We're [hiring](https://careers-here.icims.com/jobs/73733/lead-software-engineer--research-scientist--%28rust%29---m-w-d/job?mobile=true&width=414&height=770&bga=true&needsRedirect=false&jan1offset=60&jun1offset=120)."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building the storage/database layer of an ERP system."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.98412733333333,
      "arousal": 56.198034666666665,
      "dominance": 65.00377933333333,
      "text": "Tooling around embedded dev, mainly real time data viz with egui based on a home made serialization frame work inspired by proto buf but optimized for constrained environments!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Federated GraphQL: https://github.com/apollographql/router"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 55.215419499999996,
      "dominance": 57.5396825,
      "text": "Real time (<1ms latency) event driven data processing, monitoring, analysis and warehousing platform."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "API wrapping language servers for code navigation"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Libraries for cross-platform consolidation of business logic, mostly focused on mobile but Python support for data science work and some wasm."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing a boot loader"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing a distributed language & database. Rust has become our go to, our entire team switched from Go & Elixir to rust."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Run of the mill backend apis"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.637188,
      "arousal": 45.578230999999995,
      "dominance": 59.221466666666664,
      "text": "Most recently it’s all about AI, agentic systems and all that.  Really just building APIs that call models and get context etc.  prior to that we were building a lot of data processing pipelines using polars.  Also some generic APIs doing boring business stuff using Axum."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.324263,
      "arousal": 54.761905,
      "dominance": 41.950113,
      "text": "We use Rust for ASIC development. By rewriting the verification software model, which was previously written in C++, in Rust, we have significantly reduced the number of multithreading-related bugs. We also use Rust for various other purposes, such as automatic generation of SystemVerilog source code. Initially, I started using it alone, but now several of my colleagues are using it."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "ETL pipelines, ML inferences in cloud and mobile devices, and now getting into python interoperability."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cryptography libraries for homomorphic encryption and multiparty computation"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Different parts of navigation backend for EVs (navigation with range/soc prediction and charging planning)."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I build tools for bioinformatics and signal processing for $work in Rust."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.020408,
      "arousal": 59.3537415,
      "dominance": 65.929705,
      "text": "Our firm has built a low-latency trading platform and performant analytical engine purely in Rust as a replacement for the pieces written in Go. Started two years ago and happy all the way."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.326531,
      "arousal": 52.834467,
      "dominance": 56.689342,
      "text": "Custom database services."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VFX/CG pipelines, CLIs, Backend servers"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building server applications processing weather data and publishing data through APIs for clients."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Doing interesting things for breweries, Rust is excellent for embedded systems"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pathtracing."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "High speed data signal processing, basically reading oscilloscope output and looking for events, then performing calculations based on the events."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.630385,
      "arousal": 74.036281,
      "dominance": 68.594104,
      "text": "I’m doing work with HSM/softHSMs with Rust! I have become very familiar with PKCS11. The rest of our stack is in Go but I’m the lucky one who gets to do the Rust work on the team. There are other pockets of rust in the company, another project does packet analysis which is super cool."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Networking software for a LEO Satellite based internet project."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "UAV payload integration and semi critical comms"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Data science and big data processing. We have a few rust engineers working for us who have enthusiastically migrated from python internally."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.6575965,
      "arousal": 42.9138325,
      "dominance": 55.8956915,
      "text": "Developing modules for trains central unit, in particular the driver HMI. Developing a part of obstacle detection for tram autonomous drive system"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "Am working on a App for Ar Glasses with Rust Bevy Game Engine"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I work on writing simulators of novel accelerator architectures. I got to choose to use a Rust."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Doing a regular web development.  \nWe have a Rust monolith on backend."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Writing wearable device firmware (formerly C, now Rust with Embassy), and onboard communication systems for trains (formerly mix of C and Python, now Rust and Python)."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Writing firmware on the RP2040 chip and a serial communication \"backend\" on a Raspberry Pi 5."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Smart contracts"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.7471655,
      "arousal": 57.851474,
      "dominance": 56.26417225,
      "text": "Computer programming is problem solving. Although some may have had the title \"Rust Programmer\", very few companies hire people simply to program in Rust.\n\nAs the corporate budgets get approved and the VC capital loosens up, projects will be green lit and some of the managers on architects will be open to using rust to update or create products, services, and features.\n\nHow do I know? I don't, for sure. But this is what happened in 2005 after the DotCom downturn and in 2011 after the Great Financial Crisis."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Working on Firefox's implementation of WebGPU, mostly via the WGPU project. Enabling graphics programming, learning about shaders (or compiling them, at least), and making sure that APIs for them are up to spec.!"
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Medical 3D visualization with OpenGL/WebGL and Wasm."
    },
    {
      "post_title": "For those of you who have jobs in Rust. What are you working on?",
      "created_utc": 1737836164.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "We are building a text editor in Rust over at [zed.dev](http://zed.dev) \\- and we are hiring!\n\n[https://zed.dev/jobs](https://zed.dev/jobs)"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My Dev environment is fully written in Rust!"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 76.9428984090909,
      "arousal": 64.38363218181819,
      "dominance": 67.30055654545454,
      "text": "Since I started learning Rust 5 months ago, I have since replaced my full dev environment with software written in Rust.\n\nWhy? Well, I like Rust and I also love contributing to open source. I contribute features I would use myself, and I like to contributes to projects that I believe in. Not only does it keep me motivated to work on them, but also it's very fun to use something I made myself. So using software written in Rust gives me all of these opportunities.\n\nI also like to understand how the software I use actually works. So IDEs, shells, terminal emulators. What actually happens under the hood? And Rust makes it fun for me to just dig into the codebase and read\n\nSo far, I've made the following replacements:\n\n\n## Neovim → Helix (IDE)\n\nHelix is just ready to go out of the box. Everything is setup, it doesn't support plugins yet but they're not needed for me. Helix has custom keybindings and allows running TUIs inside of it like a git UI or a file manager which is extremely powerful.\n\n## Kitty → Rio (Terminal Emulator)\n\nThe other two Rust terminals I've used is Alacritty and WezTerm. I loved Alacritty for its performance, and I love WezTerm for how many features it has. Alacritty is quite conservative on features so they don't support stuff like ligatures or tabs. Rio is basically a blend of these 2 terminals, Rio uses the high-performance crates developed by Alacritty while having all the features I needed from WezTerm \n\n## Lazygit → GitUI\n\nWhile GitUI has less features than Lazygit, I still find it plenty for my use cases. It uses gitoxide under the hood (where possible) for its operations. gitoxide is a Rust implementation of Git that's making very good progress, and really a very underrated project. Already powering projects like Helix for git hunks and (hopefully soon!) inline blame.  \n\nI do find GitUI snappier than Lazygit is, in fact I experienced about 3X performance increase when undoing changes for 1,200 files so I'd say it is very promising and looking forward to seeing where it can be improved to have more a feature parity with Lazygit!\n\n## zsh → nushell\n\nnushell is very different from zsh, bash, fish and similar shells. Every command is colored and syntax highlighting comes out of the box. Traditional shells output text, whilst in nushell commands output structured data like tables and arrays, on which you can easily use high-level commands like `filter`, `map`, `first`, `reverse` etc. to operate on them.\n\nIt comes with a swiss-army knife of utility commands that fit into Nushell's model. Utilities for parsing text into structured data, as well as operating on them. The `nu` language is the most beautiful scripting language I have come across. It's like the Rust of scripting languages, in a sense. \n\nI'd say this shell is much easier to learn and is a lot more intuitive than any other shell. Also being cross-platform is a huge bonus. Nushell to Zsh is strikingly similar to what Helix is to Neovim\n\n## lf → yazi (file manager)\n\nI don't really use file managers much aside from occasionally viewing images with them, as that is very handy. However, with Helix there is a direct integration available for yazi that lets you use it like a plugin. It integrates so well and is really seamless, not requiring tmux or zellij or whatever. this made me use yazi far, far more now. I like how fast yazi is.\n\n## tmux → zellij (terminal multiplexer)\n\nI don't use terminal multiplexers often, but I appreciate that zellij has more intuitive keybindings and is easier to customize, also feels a lot snappier than tmux\n\n## sway → niri (tiling window manager + wayland compositor)\n\nI'd like to give niri a mention too. I haven't tried it as it simply doesn't work with my Nvidia 4070 GPU unfortunately but I do hope support improves for it. I've been really wanting to switch to a tiling window manager + wayland compositor but there aren't really many options in this field. Niri is also doing things the \"new way\" like Helix and Nushell are. I'm super happy to see these software not afraid of experimentation, this is exactly how things get better!\n\n---\n\nSome honorary mentions:\n- grep → ripgrep\n- find → fd\n- latex → typst\n\nSome things I hope to replace in my lifetime with pure Rust alternatives would be:\n- Operating System (Linux) → e.g. RedoxOS\n- Browser (Firefox) → e.g. Servo\n- Image Editor (Gimp and Inkscape) → e.g. Graphite.rs\n- Media Player (mpv), Video Editor (kdenlive), Recording Software (obs studio) → ??? rewriting FFMPEG in Rust is left as an exercise to the reader :)\n\n## References\n\n- [Neovim](https://github.com/neovim/neovim) → [Helix](https://github.com/helix-editor/helix)\n- [Kitty](https://sw.kovidgoyal.net/kitty/) → [Rio](https://github.com/raphamorim/rio)\n- [Lazygit](https://github.com/jesseduffield/lazygit) → [GitUI](https://github.com/extrawurst/gitui)\n- [zsh](https://www.zsh.org/) → [nushell](https://github.com/nushell/nushell)\n- [lf](https://github.com/gokcehan/lf) → [yazi](https://github.com/sxyazi/yazi)\n- [tmux](https://github.com/tmux/tmux) → [zellij](https://github.com/zellij-org/zellij)\n- [sway](https://github.com/swaywm/sway) → [niri](https://github.com/YaLTeR/niri)\n- [grep](https://www.gnu.org/software/grep/) → [ripgrep](https://github.com/BurntSushi/ripgrep)\n- [find](https://www.gnu.org/software/findutils/) → [fd](https://github.com/sharkdp/fd)\n- [LaTeX](https://www.latex-project.org/) → [typst](https://github.com/typst/typst)\n- [Linux](https://www.kernel.org/) → [RedoxOS](https://github.com/redox-os/redox)\n- [Firefox](https://www.mozilla.org/firefox/) → [Servo](https://github.com/servo/servo)\n- [GIMP](https://www.gimp.org/) and [Inkscape](https://inkscape.org/) → [Graphite.rs](https://github.com/GraphiteEditor/Graphite)"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "And this is why people compare rust developers with vegans"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "Jfyi fish was rewritten to rust so if you’ll be in need of a less exotic shell you have fish there for you."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.4240365,
      "arousal": 51.020408,
      "dominance": 64.285714,
      "text": "I kinda use similar tools. Zed, Alacritty, Fish to be precise.\n\nAlso, I am using niri on my RTX 3060 and it works almost flawlessly. Wonder why it's not working for you. Maybe, nvidia driver setup for wayland is missing something?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I know Firefox isn't 100% rust, but I still think it's funny that he moved from it considering, Rust was initially developed for Firefox specifically."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.93877549999999,
      "arousal": 59.807256499999994,
      "dominance": 68.027211,
      "text": "I want to give a good try to Helix but Neovim is just hard to leave…"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "In what situations did you have tmux not feel snappy? I don't think I have ever thought about its performance"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check out https://github.com/ajeetdsouza/zoxide\nfor cd replacement."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.91383250000001,
      "arousal": 72.845805,
      "dominance": 73.92290249999999,
      "text": "Wait until you find out that the std is relying on C.\n\nJoke aside it's interesting to see those rust projects. I do also use Zellij and Helix with success."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Try https://github.com/jj-vcs/jj instead of git, it's cool"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I genuinely don't care what the tools I use are written in. As long as they work."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "I like [gitu](https://github.com/altsem/gitu) over gitui.\n\nI didn't knew Rio, but I am happy with Ghostty, maybe it is has split support with similar ergonomics."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">rewriting rust in ffmpeg\n\nCheck out symphonia"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.36205600000001,
      "arousal": 50.340136,
      "dominance": 64.85260766666667,
      "text": "I have tried almost every replacement on that list and except for maybe fd and ripgrep all of them had some glaring issues which made them unusable in practice for me. A lot of those tools sound nice on paper, but as much as I would love to use them, they just aren't as mature, well documented and compatible as their original counterparts."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "maybe this is pushing it"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How do you find Rio coming from Kitty? I was not keen to move to Alacritty but am still interested in a rust alternative to Kitty "
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 47.845805,
      "dominance": 58.61678,
      "text": "Awesome! Thanks for sharing! I'm trying out Helix on your recommendation. I've yet to find a modal editor that I've gotten comfortable with. Nvim has been the closest but the learning curve to really understand the configuration and the reliance on a massive amount of plugins is just too much for me. Hopefully this will be a little more opinionated/functional out of the box.\n\nJust started the tutorial so obviously too early to make a judgment but I like it so far. I appreciate the context-sensitive menus."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.48093181818182,
      "arousal": 58.24572254545455,
      "dominance": 61.028654,
      "text": "Nice writeup, I always like learning about new tools! Here are some of my thoughts:\n\n\n\n- I ended up doing the reverse of you, starting with Helix and going to Neovim. This is because Helix lacks a plugin system, and the one that they're developing uses Lisp (I havent tried Lisp yet, but what I have seen of it has incredibly ugly syntax). Its a shame, though, since I do think Helix has objectively better keybinds - maybe I'll go back once their ecosystem is more mature.\n\n\n\n- I've never heard of Rio before, but it looks really neat. It *does* use a TOML-based config whereas Western uses a Lua-based one, though I don't know how much functionality is really being lost there. Currently I use Ptyxis, though I'll need to take a look at Rio too. \n\n\n- GitUI is pretty good, does everything that I need it to. My only complaints are the lack of mouse support (old habits die hard) and the lack of confirmation when pushing a new branch, but its still a big improvement over Github Desktop. \n\n\n- I switched from Fish to Nushell recently and i have fallen in love. With previous shells, ive always felt like they were too minimalistic to use for anything other than basic commands, but with Nushell, it feels like both a great shell AND a great scripting language. 10/10. \n\n\n- I downloaded Yazi and Zellij, but havent found myself using them all that much. I just find it easier to open a new tab on my terminal, or open a GUI file manager and get the extra features it comes with. Oh well, the advantages of TUIs are probably reaching diminishing returns for me at that point anyways. \n\n\n- Niri's scrolling model is incredibly intriguing, and one I really want to try, but I find it annoying and tedious to rebuild a desktop environment from scratch. If Cosmic had a scrolling mode I'd totally use it, but no window management model is something I want enough to spend weeks of my life building a desktop around."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Make sure you never look inside the Rust compiler, I wouldn’t want you to find what’s inside there….."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "Is the kernel part of your environment?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "I'm sorry, but it is not the best idea imo. Moving all tools to 'wrritten in rust' sounds cool, but in reality not so much.\n\nSome of tools that written in other language may be better that in rust. And because of this I still not decide to switch all tools."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.39682533333333,
      "arousal": 55.820106,
      "dominance": 71.05064233333333,
      "text": "TUI toolchain for Rust is amazing i'm also using mostly Rust tools, but the only thing i can''t replace now it tmux.\n\nterminal - warp\nshell - fish (yea, it's in rust now)\ncode editor - helix (and i really love it more than vim)\nfiles - yazi (great tool)"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.387755,
      "arousal": 46.938776,
      "dominance": 61.678005,
      "text": "go touch some grass"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "But why?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Replacing FF with Servo is wild"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "But why?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not sure if I would like niri. Another Tiling WM in Rust is leftwm\n\nhttps://github.com/leftwm/leftwm"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good for you buddy!"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.579365,
      "arousal": 61.2528345,
      "dominance": 65.6462585,
      "text": "Even though I'm not a rustacean, I'm genuinely happy for you :) I really like the idea that you have access to and can easily modify/compile any part of your system with one toolchain and one language that you're comfortable with. I hope to get there one day also."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nushell sounds like powershell."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Huh, I use all of those too 😅"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "umm, don't use servo as browser. Browsers are security-sensitive software and I doubt even servo team would recommend using servo as a general browser."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "good luck with Linux → e.g. RedoxOS"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Where is gitoxide instead of git?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the only 2 things i replaced : Iterm2 -> Warp, Vscode -> zed. Somehow it got my potato macbook run faster."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I admire your enthusiasm.\n\nIf I may ask -- how did you come to the conclusion that RedoxOS was your top choice for OS?  What criteria did you use?  \n\nI saw a statement to the effect that, kernels (for GPU-accelerated programming) -- and even an operating system! -- were written in Rust.  But when I did about 5 minutes of online searching, there seemed to be quite a few of them."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\\*All in chant\\*  \nCantor: \"May the Ru-ust be with you!\"  \nRustaceans: \"Any also with you!\"  \nCantor: \"Li-ift u-up our co-ode!\"  \nRustaceans: \"We lift it up to the eyes of the borrow checker.\"\n\niykyk..."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "Upon reading this I checked Rio and it's a life changer"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "thanks! I'm stealing this setup!"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I have a RTX 3080 Ti, and niri works just fine though. What's the issue with 4070?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.89342400000001,
      "arousal": 60.18140580000001,
      "dominance": 66.122449,
      "text": "Thanks for the recommendations. I also find myself migrating to Rust-based tools, perhaps just because I hear about them on this sub, because I want to support the ecosystem of a language I love, and because I like the idea of being able to (in theory) improve the codebase myself. My setup history:\n\n* Eclipse -> Netbeans -> Brackets -> Visual Studio Code -> VSCodium -> Helix\n* A million different terminals -> alacritty\n* screen -> ntmux\n* grep -> ripgrep / rga\n* git gui\n* gitk\n\nAlacritty+Helix+tmux has been a winning combo for me. Going full-in on a TUI editor took some adjusting but has been worth it. I'll be interested in trying Rio, Nushell, and Zellij. I'm not sure I could go without mouse support using GitUI."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "I thought Firefox was written in rust?!"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "No visual debugging?"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "Kitty -> wezterm \nZsh -> fish 4\n..."
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "great"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "My Dev environment is fully written in Rust!",
      "created_utc": 1743602220.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ollama replacement?"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 70.40816322222223,
      "arousal": 55.58075077777778,
      "dominance": 61.72839511111111,
      "text": "Hey guys, \n\nAs the title says - after giving a dangerously wrong answer about mixing malloc/dealloc in an interview, I realized I could do some d ep dive on how memory allocators work. So I spent way too much time building a comprehensive testing framework to see what actually happens.\n\nSpoiler: It's worse than I thought. Exit code 0 (silent corruption) is way more common than immediate crashes.\n\nFull writeup with code and experiments: https://notashes.me/blog/part-1-memory-management/\n\nWould love feedback on anything from the blog or the code! \n\nEdit: lots of feedback! appreciate it all! please look forward to the next update. I'll try to be more coherent, have proper context or details around how i conducted the tests and how to reproduce them with even more effort put into it! "
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.1247166,
      "arousal": 57.3469388,
      "dominance": 66.25850340000001,
      "text": "OP id send this straight to your interviewer and tell them \"I didn't know the answer so I built a lab to figure it out\". That should more than make up for a minor knowledge gap and demonstrate significant attention to detail and determination to improve. Worth far more than a correct trivia question in my book."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.12585025,
      "arousal": 71.74036275,
      "dominance": 48.242630750000004,
      "text": "I find it strange that you started with a question about mixing Rust and C and then never explained why the `malloc`+`dealloc` pair worked. You said this:\n\n> Rust’s allocator looks for its metadata format at specific offsets from your pointer. If it finds glibc’s metadata instead, the best case is an immediate crash. The worst case? Silent corruption that manifests as mysterious bugs hours later.\n>\n> ...\n>\n> When Rust’s allocator looked for its metadata at a different offset, it found zeros - which by pure chance didn’t trigger an immediate crash. But the heap is now corrupted, and any subsequent allocation could fail catastrophically.\n\nAnd I'm pretty sure this is bullshit. Did you get this from AI?\n\nOn UNIX-like platforms, [Rust's standard allocator](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/alloc/unix.rs#L6) uses `malloc` directly (or, well, `posix_memalign`, same difference), so it's entirely not surprising that Rust and C work well together, because they use the same allocator. There simply isn't such a thing as \"Rust's allocator metadata\". Arguably, there isn't even any language UB here, because it would be entirely sound to copy the stdlib's `malloc`-based `GlobalAlloc` implementation and then use it to pass heap pointers between C and Rust. (But there's no stability guarantees either, so don't actually do that.)\n\nSure, Rust *does* use a non-system allocator like `dlmalloc` on platforms without a system allocator, like wasm, and Rust *does* add some metadata for overaligned structured on Windows. But I don't think you've researched this area."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That’s a bit of a weird question… “if you cause undefined behavior, what will happen?”\n\nIf the premise is something that’s always a bug in the code, why even dive any deeper at what could happen? I probably wouldn’t have bombed the question because about a decade ago I happened to dive into a malloc implementation and so know what an allocator is actually doing, but knowing how the C allocator behaves is a weird question for a Rust job interview."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "writeup reads very LLM generated"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.507936666666666,
      "arousal": 61.942555,
      "dominance": 44.70899466666666,
      "text": "This LLM vomit is an unreadable slogfest. I would never ever insult someone's time by expecting them to read through some AI slop I couldn't even be bothered to write."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.1156461,
      "arousal": 57.56235819999999,
      "dominance": 60.068027300000004,
      "text": "I would like to see what exactly the Rust deallocator is doing and looking for that caused this result, unfortunately you only showed roughly what the libc allocator put in the metadata.  \nedit: as another comment said: the answer is that they are doing roughly the same thing as the rust deallocator calls the libc deallocator, so im not sure this is even UB.\n\nExperiments 3+ seem to go in an unrelated direction to C and Rust mixed allocations.  \n> Silent corruption is the most common outcome \n\nthe table right above this statement contradicts it.  \n\nAbout the use-after-free danger, the memory is only given without zeroing it when it is reused memory in the same process that came from some process specific free list. When the memory is actually given back to the OS, it will be zerod before given back to another (or the same) process. Secure application will still usually zero memory that contained passwords anyway before freeing it."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.6077095,
      "arousal": 52.6077095,
      "dominance": 61.904762000000005,
      "text": "Something else I'd like to point out - a sigsegv is not \"safe\" it means what otherwise would have been memory corruption just happened to land on an unmapped address. But with a malicious actor you can frequently turn the same path into a controllable address and exploit the program without segfaulting."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.43424025,
      "arousal": 52.43764175,
      "dominance": 54.62018125,
      "text": "For the article, it wasn't clear what you meant by \"exit 0 is worst that anything\". IMO, you should clarify that you mean in the context of tests that you know are incorrect.\n\n\nFor the content of the article: basically, all allocators work differently. Combining them randomly is like putting a bike wheel on a motor bike.\n\nFor example, some allocator might keep the allocated size before the index 0 of the allocated memory. If you call the corresponding deallocator on a memors that was allocated differently, then the value expected to be the size can just be garbage. \n\nBut I don't understand what you meant with the FFI part. Didn't you mean to use the deallocator corresponding to the allocator you used? Or did you mean something else?"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great stuff :)"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "as long as you use the same allocator, you can mix them."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.082766250000006,
      "arousal": 50.5668935,
      "dominance": 57.3696145,
      "text": "I thought it was obvious that two lookup table on a same memory zone would perform silent overlap and corrupt everything."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Should call it \"I bombed a memory management question so you don't have to\".\n\nGreat post!"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The malloc wrapper that uses printf looks strange. Because printf can call malloc internally."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.50566900000001,
      "arousal": 51.757369499999996,
      "dominance": 61.621315,
      "text": "Nice read. I was reading along and got to the mmap_malloc source code and was just wondering whether you would write out of bounds if you passed page_size as the argument to the function and then wrote to the final eight bytes in the allocation? Because then the allocation size would be page_size, but the first eight bytes would be used on metadata. As far as I understand, this would leave page_size - sizeof(size_t) bytes left available instead of page_size.\n\nI’m away from my computer for a while and therefore am not able to verify whether or not it would work."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.40287233333333,
      "arousal": 63.681027666666665,
      "dominance": 65.00377966666667,
      "text": "It's a cool blog, but it doesn't answer the question? You talked about what happens, talked about some peripheral (again, pretty cool) stuff, but you didn't explain why that's an issue, which is probably what the question is asking, but also not why that's happening. That is, one reads all this and still can't answer what exactly Rust and C do differently"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.48148133333333,
      "arousal": 59.977324333333335,
      "dominance": 68.29176133333333,
      "text": "That's interesting work! From my understanding, memory allocation and deallocation must be handled by the same allocator. So I wouldn't trust deallocating any data that I did not allocate myself, unless I knew the exact allocator used to allocate it, and could guarantee that there would not be an double free errors from deallocating it."
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hey bro I read your article on HN and it was amazing. Thanks for the content :)"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Unrelated but I love the appearance of your site. Is that your own CSS or a theme or...?"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.0702945,
      "arousal": 64.56916100000001,
      "dominance": 53.9115645,
      "text": "Beautifully done. Love your persistence in the wake of failure"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 96.2585035,
      "arousal": 65.70294799999999,
      "dominance": 76.303855,
      "text": "Wow! Great atricle, i love stuff like that! A cup of coffee, a plate of brownies and deep dive into some interesting topic! you saved my free day! Thank you!"
    },
    {
      "post_title": "I bombed a memory management question in an interview, so I built a testing lab to understand what really happens when Rust and C allocators collide!",
      "created_utc": 1754295463.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.387755,
      "arousal": 55.385487999999995,
      "dominance": 63.435373999999996,
      "text": "Well writen, short, readable, practical examples... excellent!\n\nI was a little uncomfortable with the \"experimental\" side first as I rather read the OS / compiler source code but  you built a valuable pedagogical tool in a few lines.\n\nHope you get the recognition you deserve."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "title",
      "sentiment": "negative",
      "pleasure": 37.301587,
      "arousal": 60.430839,
      "dominance": 44.217687,
      "text": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://lore.kernel.org/rust-for-linux/2025021954-flaccid-pucker-f7d9@gregkh/"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.62358266666666,
      "arousal": 62.47165566666666,
      "dominance": 72.07105066666666,
      "text": "I think what Greg does really well here is demonstrating technical leadership. Leadership doesn't mean being right. He is right, but that's not the point. \n\nLeadership means bringing along on the path he thinks is best. He doesn't crack the whip, chiding or coercing maintainers who disagree. Instead, he first acknowledges their very valid concerns about maintaining a code base with two languages. This is good, because they're right about that, their lives do get harder before they get easier.\n\nHe then ends on an inspirational note, pointing out that they've done much harder things and this is well within their abilities. He gently nudges them to welcome R4L devs.\n\nAbsolute masterclass of leadership.\n\nI don't know if the other maintainers will be convinced when they read this. But it's hard for me to imagine a more convincing pitch than this one."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.79365050000001,
      "arousal": 58.900227,
      "dominance": 64.739229,
      "text": "That mail sounds like the one adult in the room finally spoke up."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So after a lot of heated conversations in the past week/s about Rust for Linux in the mailing list, looks like Rust will be staying in the kernel. As Greg KH, the second in command after Linus AFAIK, has made a supportive statement for Rust in the Linux Kernel codebase."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very well written, and I think he makes a great point at the end about the future of Linux. You can't let it ossify!\n\n> we have 30 million lines of C code that isn't going anywhere any year soon.\n\n> C++ isn't going to give us any [Rust-level safety] any decade soon\n\nThis is an incredibly funny pair of sentences."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.356009,
      "arousal": 58.730159,
      "dominance": 63.3219955,
      "text": "I think it's super based to be 56 years old, be confronted with a pretty complex tool that you don't fully understand, and instead of resisting change making an attempt to embrace it."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interesting url"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We do, and that’s why we use it for almost everything now lol"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.666667,
      "arousal": 51.88964466666666,
      "dominance": 55.70672733333333,
      "text": "> C++ isn't going to give us any of that any decade soon, and the C++ language committee issues seem to be pointing out that everyone better be abandoning that language as soon as possible if they wish to have any codebase that can be maintained for any length of time.\n\nholy what a sentence this is for the history books"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.29478499999999,
      "arousal": 55.5555555,
      "dominance": 56.1791385,
      "text": "\"C++ isn't going to give us any of that any decade soon, and the C++ language committee issues seem to be pointing out that everyone better be abandoning that language as soon as possible if they wish to have any codebase that can be maintained for any length\nof time.\""
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Omg Greg is so based"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.23356050000001,
      "arousal": 51.133787,
      "dominance": 57.8798185,
      "text": "I’ve a lot of time for Greg KH; it’s nice to see some level-headedness on this topic for a change."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I haven't followed the debate too closely, shouldn't LLVM not supporting all targets that Linux does be a dealbreaker for now?"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 69.954649,
      "dominance": 71.315193,
      "text": "this is beautiful"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Now we just gotta get rust into everything"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.324263,
      "arousal": 54.761905,
      "dominance": 41.950113,
      "text": "Even medium sized multi language code bases are difficult to maintain, let alone one the size of Linux. \n\nAs much as I like Rust I agree with Hellwig.\n\nBurnout due to the maintenance burden and bad/flaky maintenance/maintainers are a greater risk than just keeping it in C.\n\nWe’re going to end up with worse of both worlds, and possibly more Jia Tan situations which Rust won’t solve."
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?",
      "created_utc": 1739967255.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.23129266666666,
      "arousal": 57.256236,
      "dominance": 63.303098999999996,
      "text": "Go, Greg! I really hope this leads to a green light for Rust kernel components. It’s change, but it’s good change!"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is Rust faster than C?"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.47295114285714,
      "arousal": 44.574020000000004,
      "dominance": 59.79915785714286,
      "text": "Rust gives you better data structure implementations out of the box. Bryan Cantrill observed this with Rust's B-tree vs a binary tree you'd use in C; and while a B-tree is technically possible to implement in C, it's also very awkward to use because it doesn't provide pointer stability.\n\nRust also gives you a very nice hash table out of the box. You probably aren't getting SwissTable in your C program.\n\nThis doesn't apply equally to C++, and I have no idea why [Microsoft sees a consistent 10% to 15% performance improvement](https://www.youtube.com/watch?v=SmUprpjCWjM) just from porting their C++ code to Rust."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 72.44898,
      "dominance": 68.253968,
      "text": "Interesting, i learned a couple of things, thanks."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "What about aliasing? Nobody in their right mind uses `restrict` in C all over the place, whereas in Rust, everything is implicitly `restrict`.\n\nSo it’s conceivable that writing something like ARPACK in Rust will be slightly faster than writing it in C, right?"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The fastest language is the one that can be optimized most.\n\nThat is,  more information is available for optimization, high and low level, that easier it is to optimize.\n\nLike tail call that rust doesn't know how to optimize without extra information."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 37.9818595,
      "arousal": 64.8526075,
      "dominance": 50.9637185,
      "text": "I agree with the comments about the importance of eliminating certain classes of bugs , developer productivity etc. I found some old results comparing execution speed [here](https://users.rust-lang.org/t/rust-vs-c-vs-go-runtime-speed-comparison/104107/5) that were a bit mixed until optimized (though old - and likely subject to improvements in the compiler). I would generally say that if we are talking about speed, benchmarks and testing are the proof points rather than speculation (I remember being shocked at how performant Java can be when I assumed that only lower level languages could hit those numbers)"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It depends. Plus I don’t use Rust just because of its speed. Security is my #1 reason for using it."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "> Someone on Reddit recently asked: \"What would make a Rust implementation of something faster than a C implementation, all things being the same?\"\n  \nI appreciate you putting this immediately at the start of the blog post. that's (imho) a useful way to frame the question and it sets expectations properly."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.011338,
      "arousal": 87.528345,
      "dominance": 83.786848,
      "text": "Default Rust will not be, because the standard library of Rust does whacko things like makes the hashmap \"resistant to DDOS attacks\", and way slower.\n\nYou have to optimize both Rust and C and see where you get. Rust on average might win some rounds due to the default non-aliasing pointers as opposed to aliasing pointers used by default in C"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.76870766666667,
      "arousal": 53.43915366666667,
      "dominance": 62.24489766666667,
      "text": "That was a nice read, in part because Klabnik cheekily calls the question \"great and interesting\" while pointing out that it's neither. :)\n\nI can say that I'm very tired of headlines like \"Rust rewrite of blahblah performs 80% faster\" gaining so much attention. To which I say: Rewriting old software with the goal of improving performance can likely achieve that goal. The language chosen, if different, *could* be a factor but it is likely a small and indecisive one, especially if we're talking about systems languages where \"everything\" is technically possible by dropping down to asm ... which is indeed Klabnik's opening shot.\n\nMy meta annoyance with this question is that self-appointed Rust evangelists spread the \"faster than C\" fairy tale and that makes the whole community and language dismissable to some people. (For the record, I'm annoyed by *both* the evangelists *and* the neckbeards.)"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.287982,
      "arousal": 54.0249435,
      "dominance": 65.02267599999999,
      "text": "Should be on par or barely slower. But its way faster to ship bug free code."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "It's less about inline ASM and more about SIMD.  C++ and Rust often are faster than C because the language allows the compiler to optimize to SIMD in more situations.  SIMD on a modern processor is quite a bit faster than a standard loop.  We're talking 4-16x faster.\n\nThis is also why, for example, dataframes in Python tend to be quite a bit faster than standard C, despite it being Python of all things, and despite the dataframe libraries being written in C."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 61.337868,
      "dominance": 66.326531,
      "text": "The answer is always, \"no\"."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.5464852,
      "arousal": 54.512471600000005,
      "dominance": 63.526077,
      "text": "one could argue that the fastest language is the one that uses the fewest instruction cycles to perform the given task at hand. if the rust compiler is smart enough, perhaps it can optimize most or all of its abstractions to the same quantity of cycles, or reduce it to the same number of memory usages. rust might make more complex and aggressive optimizations, and therefore have opportunities to reduce cycles in places where C doesn't, but in the name of safety, rust also introduces additional runtime checks that may not be necessary, which C would not, thus adding more cycles. furthermore, there are many abstractions rust provides that are not provided by default in C; a developer looking to solve a problem may decide to use a given high level rust abstraction without much additional thought, when a custom built, more complex, more particularly specified solution would be more efficient. In C, the developer would have no choice; they would necessarily have to build that solution in order for the code to work. Therefore their code would be more optimized, while the Rust code might not be. \n\nWhile modern compilers are very intelligent at a micro level, in terms of macro scale implementation of different algorithms, we still have to rely on programmer intuition and intelligence to choose the most optimal algorithms to solve a given problem. When more control is given to the developer than the compiler, then a skilled developer may have the capacity to choose better algorithms and make better top-down optimizations. C's relative lack of abstraction and design pattern choices compared to rust encourages this intentional freedom, meaning C encourages a greater \"capacity\" for optimization, simply because it requires the developer to do more; they must lay every individual brick bt themselves, as opposed to simply filling up entire walls at once with concrete. Concrete is a nice material, don't get me wrong; it's proven, durable, and very structurally effective. But there are still certain situations where laying bricks is sometimes superior to using concrete, even if both are an option. A C developer will sometimes lay those bricks; a Rust developer might just choose to always use concrete, because it's the simpler solution."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.062736,
      "arousal": 69.085412,
      "dominance": 70.03023433333333,
      "text": "Why people don't just perform benchmarks instead of arguing? Obviously the later if more fun than the hard work of doing correctly performance tests.\n\nTest and find out."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust VS C/C++ is often comparing compiler sophistication at optimization rather than language speed."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "Likey yes if the C code has same security/thread safety that Rust ensures (by this I mean there will be use cases C might be faster but less safe)"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Faster is a meaningless metric."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 53.968254,
      "dominance": 72.108844,
      "text": "I would say yes, with liberal use of unsafe. Most \"inefficiencies\" come from runtime checking, and there are unsafe methods you can use instead. Rust's primitives should have advantage from aliasing. Without std, rust should still have slight advantage from reference aliasing rules."
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes =)"
    },
    {
      "post_title": "Is Rust faster than C?",
      "created_utc": 1749492408.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "One possible comparison is, once we have full fledged AI coders, to compare programs written by them. They'll deal with safety and abstraction, and they have a common denominator: how many thinking tokens they require -  assuming equivalent results (same performance, etc).\n\nBut this could say little for human coders, since we can't really look at millions of tokens at once."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Typst, a modern LaTeX alternative written in Rust, is now open source"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "It's a big undertaking to propose a new latex. Good luck with it."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.4393425,
      "arousal": 55.782312875,
      "dominance": 64.0873015,
      "text": "Lots of folks are quick to criticize, but I'm not sure they spent much time using it -- I just spent half an hour playing around with it, and I have to say, I'm _really_ impressed. The interface is really smooth, the syntax is really quite natural (I'm glad I can stop writing `\\frac{df}{dx}` and start writing `(dif f)/(dif x)`), and the scripting language makes it quite easy to make fairly complicated packages -- obviously, the CTAN archive is huge, and there is a _massive_ collection of templates, Typst's formatting syntax feels natural enough that I'd be willing to reproduce one of them (even though I've never tried to writing a Latex template before). \n\n\nHonestly, awesome work -- I wish y'all the best of luck, and hopefully this does become significant in the next several years."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.451247,
      "arousal": 75.9070295,
      "dominance": 68.9342405,
      "text": "LaTeX is a love hate relationship. The results are lovely but the road is a mess and a big pita. I'm all for some new thoughts, especially involving Rust - have to check it out."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.57067266666667,
      "arousal": 47.921391,
      "dominance": 60.69538933333333,
      "text": "How is the actual quality of the typesetting? That is definitely where TeX excels and looking at the examples here, I’m just not sure. What algorithm is being used to compose paragraphs? And has this tackled the typographical errors of LaTeX like poor control over grid alignment and page breaking. \n\nETA: like others I am massively interested in this if it can have TeX’s truly high typographic standards without its awful cruft and ghastliness. But attention to detail is critical. I’d correct the spelling error in the sample document for instance. No, it doesn’t matter but in typography detail matters."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.441043125,
      "arousal": 52.69274375,
      "dominance": 62.259070125,
      "text": "Felt like giving this a try, everything worked nice and painlessly out the box. The syntax is very cute and intuitive. The documentation on their page is rich and I was able to learn enough to write a simple paper with custom layout/fonts/styling, equations/symbols in a couple minutes. Compiles very fast (atleast for my small test-paper) and supports incremental compilation. Haven't tried the more powerful features yet but I'm already sold. Going to use this for my next assignment at my university!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.15495066666666,
      "arousal": 40.929705000000006,
      "dominance": 60.95993933333333,
      "text": "What would make this powerful if it had a LaTeX compatibility layer so that packages from LaTeX can be reused in a meaningful way. E.g., academic conferences publish their paper guidelines as LaTeX classes so you can just use their LaTeX template to create a paper that is formatted with the correct layout. If typst could interpret those definitions it would be an actual alternative for writing academic papers"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.616780000000006,
      "arousal": 50.94482233333334,
      "dominance": 56.12244866666666,
      "text": "This is really cool. It comes across very programmer-oriented, but LaTeX has just as much (if not more) complexity, it just tries to paper over it in a way which actually makes it worse in all but the simplest cases. Looking forward to giving it a try! The writing experience will be very important as it's *utter garbage* in LaTeX and lots of people are fed up with LaTeX's shit."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.92630375,
      "arousal": 70.23809525,
      "dominance": 61.90476175,
      "text": "A big issue will be competing with the massive ecosystem of CTAN. There is probably a latex style or class for your specific need. What you /might/ be able to compete with is if your LSP works really well (i.e. good completion and errors even for third party styles and classes, because latex is terrible at this).\n\nStill, in compsci at least LaTeX has near monopoly, including conferences and similar providing LaTeX templates.\n\nFinally a couple of question: What about something like Beamer? Bibtex?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I'd love to see this take off, even just for better error messages."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.0294785,
      "arousal": 64.0022675,
      "dominance": 71.82539700000001,
      "text": "First impression: looks freaking awesome. This could do away with most of my frustrations with LaTeX. I've been doing everything in markdown since I graduated college and only use LaTeX blocks when needed (scarcely now).\n\nMay I suggest finding a way of integrating Typst with markdown? Say, create some workflow for `pandoc` to convert \"typst-flavored markdown\" (like pandoc-flavored but using Typst blocks instead of LaTeX) into Typst and then use the Typst binary to compile the final pdf document? I could see this get Typst decent traction in the developer community since `pandoc` is used under the hood for a lot of stuff.\n\nBest of luck. I'll make sure to give it a good go!\n\nEdit: clarity about the idea"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 28.344671,
      "dominance": 50.680272,
      "text": "I’d like to see someone to write a proper article (thesis, academic paper, scientific correspondence, etc) using this new language."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 59.3877552,
      "dominance": 62.42630380000001,
      "text": "Good luck, indeed! I find LaTeX annoying to work with, but still the best option for drafting publications.\n\nI suggest you take a glance at www.overleaf.com . Providing a similar service, but more ease of use, would have a real chance to take off. Reason being, a lot of non-mathematician and non-physics people want to use it, but struggle to make the LaTeX side go as smoothly as they'd like and fall back to Word."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.6825398,
      "arousal": 66.0090704,
      "dominance": 63.0612244,
      "text": "A lot of people are missing an epic point about this. It’s in rust. So you can compile it to WASM. So you can generate PDFs, right there on a frontend client, WITH ZERO INFRASTRUCTURE.\n\nMassive win for web developers working with PDFs.\n\nAlso: after my phd and numerous papers done in latex; anything that can replace that mound of hell will be amazing. Good luck folks, I’ll check in here next time I do something PDFy!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Much appreciated. Latex isn't nearly as intuitive as a markup language should be. Big room for improvement."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Very impressive. But the real trick will be how (and why) people will transition from LaTeX to Typst. I want to use it, but my targeted publishing venue only provides style files for LaTeX, and a bunch of my figures are in TikZ and Asymptote, and I use BibTex for my huge shared bibliography file. \n\nUntil those dependencies are resolved one way or another, I am personally much better off staying with Latex despite its many flaws. I suspect very many other LaTeX users have similar problems."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "I've been waiting for you for years 🙂\nI hope you get popular. Do you support the following features?\n\n- figures\n- references\n- compiling multiple source files into a single document\n- Bibliographies\n- html and PDF targets?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.423064571428576,
      "arousal": 57.41820557142857,
      "dominance": 59.15127942857142,
      "text": "I love this! I've been using templated LaTeX for my resume for about 7 years and it's always a huge pain in the ass to make even the most trivial change to the LaTeX -- not because of the templating system, but because LaTeX and its packages are so poorly documented (not saying that the documentation doesn't exist, only that even when it's verbose it's often not useful or doesn't apply to the specific thing i am trying to understand) and has unnecessarily complicated syntax really not meant for average humans like me.\n\nLast night I was able to reproduce a somewhat complicated section of my resume in Typst using scripting/functions, and grid layout within an hour or two when I can't even find a good example or the proper reference documentation simply to adjust the margins in my LaTeX code that works for both the tabu and non-tabu sections. I've spent hours trying to make that one tiny change.\n\nThe best part about Typst compared to LaTeX for me is the error messages. LaTeX errors are totally incomprehensible to me. When I make a mistake, correcting it consists of trial-and-error while tediously switching between my editor and the LaTeX output log file. Typsts just gives me clean error messages with spans pointing out exactly what it doesn't understand. Obviously taking a page from rustc/cargo.\n\nThe best part is, it looks like I will be able to use the Typst compiler directly in my resume generator rather than execing out to it since the Rust code is really well organized and straightforward to import as a library :)."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "The only question that matters is: how easy is it to place diagrams in the middle of the page?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.862812,
      "arousal": 60.6575965,
      "dominance": 64.62585025,
      "text": "This reaaaaally scratches an itch I had for years. I would love to dive into this, if I have time.\n\nCan you redefine \"phi\" to mean \"phi.alt\" everywhere in a document?\n\nDoes it have full Unicode support by default?\n\nIf I want a picture in a certain place, can I just put it there and let the text wrap around it, without some magic incantation and sacrificing a goat to the latex gods and hope for the best?\n\nWhat about plots? Say, I plot something with gnuplot and I want to put the graph with proper labels and legend in the document? I think gnuplot has a latex target... Would a typst target be straight forward?\n\nIf someone wants the whole document in Arial, can I judt change it? Are TTF/OTF fonts supported?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 38.77551,
      "dominance": 57.596372,
      "text": "for wider adoption i think it needs a tree-sitter grammar and optionally LSP server, so all mainstream editors can support it."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neat! Is there a way to render to HTML?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.23015875,
      "arousal": 55.980725750000005,
      "dominance": 66.55328775,
      "text": "I am craving for a modern replacement for LaTeX, but working in academia I have a huge barrier to adopting anything else. Whatever I write, ultimately I will want to submit to arXiv or a journal. I don't know how any new solution could possibly convince publishers to allow a new format (being conservative in their practices as they are). Perhaps a good start would be a tool to translate Typst code into LaTeX so that people can begin using it and still be able to submit their work to journals with minimal extra effort. If that takes off, there might be some incentives for publishers to actually start adopting it."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Looks cool! Would be awesome if it could be rendered in something like https://quarto.org/ - these day I do more reporting than academic writing. \n\nHowever I made a commitment to myself to not learn new languages unless they have a Language Server. Is something like that on the roadmap?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.05668916666667,
      "arousal": 57.19954633333333,
      "dominance": 66.43990916666667,
      "text": "Do you have (planned) a solution for plotting data? I saw that you can load data but I saw no visualization functionality. The coolest would be some kind of incldued visualization grammar like [vega-lite](https://vega.github.io/).\n\nFrom what I experienced most people try building labeled subfigures in LaTeX once, fail and then start doing them by hand in some external tool which gets gnarly if you need to change the data because you need to repeat the whole manual figure layout process. Currently, I am having much fun with tikz and matplotlib..."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.9161,
      "arousal": 55.83900225,
      "dominance": 56.83106575,
      "text": "I am excited to see where this goes.  Writing my thesis in LaTeX (overleaf) was a pain.  In particular, the slow recompiles made it excruciating to try to get figures on the right page correctly, and my reference section was constantly breaking for no good reason.  \n\nLooking back, the result was certainly nice looking, but it's possible I should have just used Word like my supervisor suggested."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.748299,
      "arousal": 53.854875,
      "dominance": 59.977324,
      "text": "I was literally just typing a report in LaTeX and struggling with weird subtle bugs, when I gave up for the night and shut my computer down. I opened Reddit and the 3rd post I see is a Rust-based replacement? \n\nI'm very intrigued. I can't wait to see where this goes."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.04705225000001,
      "arousal": 59.452947875,
      "dominance": 65.958049625,
      "text": "Just awesome. I stumbled on your project a couple of months ago (maybe after the HN post) and was quite excited about it. However, I thought this tech will be fully behind a paywall. The fact that you released the CLI is, as I said earlier, just awesome.   \n\n\nI have started using LaTeX recently to format the reports for my classes at uni. It definitely made the job, but only after I crippled it with a lot of dependencies for all sort of things. It was rough, I didn't understand most of the things I put there. I was googling, finding a solution on StackOverflow, adapting it for my needs, and just leaving it with hope that it will always work.   \n\n\nThis is just different. It is really simple and elegant. Folks talk about some kind of magic LaTeX typesetting quality. I don't really understand it. If it looks about right, I'm happy.  \n\n\nThank you very much for this project!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Congrats on the release! Nice to see how many of my crates it uses."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.07407433333334,
      "arousal": 53.21239599999999,
      "dominance": 62.055933333333336,
      "text": "Once you finish the dissertation (nice work!) and go out into the broader world, you will find that the need to collaborate with folks who only use word or google docs is why we don't have nice things. At least that's how it is in biology and a lot of fields outside math/physics."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.251701,
      "arousal": 52.664399,
      "dominance": 67.85714250000001,
      "text": "Do you have a way to handle some kind of style sheet conversion, or do you have plans to convert any of the style sheets for any of the major publications/conference proceedings? That's my first big thought. If there was a pre-existing LNCS style sheet, I'd be trying it out right now."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.25925933333334,
      "arousal": 61.22448966666667,
      "dominance": 55.40438399999999,
      "text": "My LaTeX times are long over, but I still have physical pain remembering those times. Wish you luck, you are doing a great favor for the next generation if you succeed. Hopefully they will appreciate it"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.64096766666667,
      "arousal": 59.448224,
      "dominance": 63.94557833333334,
      "text": "I've been at this \"I should build my own LaTeX\" point so often, but I never had the motivation or time to actually do it properly. So I'll be following with some interest. Good luck!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is 🔥🔥🔥"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This looks amazing! Do you have any vim/nvim compatibility yet?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nothing to say but this: great work!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.6099775,
      "arousal": 47.3922905,
      "dominance": 59.977324,
      "text": "Nice! Would it be possible to build a WYSIWYG editor based on the layout engine?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.62358266666666,
      "arousal": 53.099017333333336,
      "dominance": 71.39077866666666,
      "text": "I've left Reddit because it does not respect its users or their privacy. Private companies can't be trusted with control over public communities. Lemmy is an open source, federated alternative that I highly recommend if you want a more private and ethical option. Join Lemmy here: https://join-lemmy.org/instances ` this message was mass deleted/edited with redact.dev `"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.7165535,
      "arousal": 58.9002265,
      "dominance": 66.099773,
      "text": "I'll give it a shot, I've certainly wanted an alternative to TeX for a while (I'm reasonably comfortable with it, but it's proven impossible to get anyone else at my company to learn it, and we don't have the resources to to write pdfs directly so we're stuck with the HTML->PDF route which is _awful_ on just so many ways).\n\nThat said, we have some _extremely_ nitpicky styling needs and I wonder if this can accomodate that."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "been following The project for a while, glad to hear it's still going!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 38.77551,
      "dominance": 57.596372,
      "text": "Is there any (already) tree-sitter for typst impl that availble right now? (For editor support)"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "This looks bad ass and I am excited to try it out. Starting with building a resume with it of course."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That looks impressive, I'll gladly try it.\nWhat about Tikz though? 🙃"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.97732428571429,
      "arousal": 60.155491,
      "dominance": 55.23161642857143,
      "text": "This is great! I‘d love to see this succeed. I have lost too many hours of my life to latex bullshit. I hope it will have useful errors. I am sick and tired of latex‘s useless error messages."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.22297833333333,
      "arousal": 57.823129333333334,
      "dominance": 68.10279666666666,
      "text": "u/SymbolicTurtle  I wonder what is the business model behind all of this. It looks like the compiler is open source and free (will it always be?). The collaborative online editor is now free for try, but it is going to be paid soon?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.063492,
      "arousal": 53.6734694,
      "dominance": 63.5374146,
      "text": "I've always wanted to do/have a language as powerful as LaTeX but more friendly, with MD-like features. Thanks, mate !!\n\nI have a few questions though:\n\n1. Is there a way to benefit from LaTeX huge ecosystem? \n\n2. What is the scripting language? I guess it's custom made, does it have a name? Would it be worth making it an independent language?\n\nEdit:\n\n3. I just remembered there's the org mode, did you check its features to see if some would be interesting to integrate? I'm mainly thinking of linking to another file's content (and display a part of it), but I don't know org that well, and it might go outside of the aim of this new language."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.52532133333334,
      "arousal": 64.51247133333334,
      "dominance": 65.835223,
      "text": "This is a great design principle and fresh perspective!\n\n>\tIf there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other.\n\nI am impressed by this language. Ugh I wish my needs weren't so coupled to diagramming (I use TikZ). If you have ideas / design docs on diagramming, even if just starting with nodes and edges primitives, I would be happy to help on implementation."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Looks great, will definitely be playing around with it. Would be nice to have vim mode in the site like in overleaf"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.17233575,
      "arousal": 46.995465,
      "dominance": 55.952381,
      "text": "As someone who has recently had the displeasure of using latex the first time for a serious paper, I can say I really hope this gets popular"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.79818583333333,
      "arousal": 58.5978835,
      "dominance": 65.89191233333334,
      "text": "Feature request: would it be possible to add a resume template? \n\nI really want to try out typst but realistically, I'm never going to write a paper in my life. The only document that I send as a PDF is my resume. I'm currently using [jsonresume](https://jsonresume.org) for this, and I'm reasonably happy with it. \n\nCompletely understand if that would take focus away from your goal of being good at authoring papers. On the other hand, it might be a way to attract new users - they come for the beautiful resumes, stay for everything else."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.580498500000004,
      "arousal": 51.247165499999994,
      "dominance": 61.451247499999994,
      "text": "Building a community to adopt the alternative is hard, unless it is 10x easier to use."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.60922166666667,
      "arousal": 60.99773266666667,
      "dominance": 64.021164,
      "text": "So many projects with consonant clusters... I'm assuming it's not \"type S T\". Lapce has the same issue. I know it sounds like a dumb point, but it does matter to people hearing it and sharing it. Plus, we're talking about an API so making the cover match the book is pretty important in a lot of ways."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.42176866666667,
      "arousal": 65.43839783333333,
      "dominance": 73.05366583333334,
      "text": "Looks similar to markdown but with scripting and styling capabilities. This does the job of what html, javascript, and css do on the web. Now I'm sparked with a thought experiment.\n\nImagine this: An alternate web using this single language instead of 3 disparate languages.\n\n- A web browser that supports a markup language like typst instead of html, css, and javascript.\nThen you've just simplified the web down to one language.\n- Imagine an extension to the markup language, something like [turbo-frames/hotwire](https://hotwired.dev/) where you can have a website with dynamic content and SPA-like features without the need for javascript.\n- And imagine how much simpler it would be to whip up a web browser implementation for. Versus our ever-complex web standard that required a large dedicated team like Mozilla to build and maintain a browser. A single dev could build a web browser from scratch in their spare time as a hobby project. Am I crazy now for thinking this sounds like a fun project?\n- Bonus: Extend the language with webGPU support for 3D-accelerated application VR support and you have feature parity with the modern web.\n\nEssentially you have a web standard re-engineered from the ground up without all the historical baggage yet all the modern features we've come to expect from the web."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.72184433333334,
      "arousal": 58.84353733333333,
      "dominance": 61.526833,
      "text": "congrats on the release!\n\nanother project ive been following in the same space is https://willcrichton.net/nota.\n\ni am going give these a shot over the weekend to convert my invoice document from latex. my gripe with latex is not the syntax as much as the build process. its flaky, so there is no \"setting it up for good\" and its complicated!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "Even though I don't like (La)TeX syntax, this project would have a better chance if the syntax was compatible."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.38775483333333,
      "arousal": 63.15192733333333,
      "dominance": 55.21541933333333,
      "text": "For me, this has exactly the same features that make LaTeX frustrating: too powerful macro language to be \"markup\" that can be reasoned about without execution, context-sensitive parsing, and no way to avoid clashes between plug-ins. \n\nIt also managed to be even worse, though. It has imported all the terrible ambiguities of Markdown. It alienates many hard-core LaTeX users which are so used to the equation syntax. It allows users to easily change formatting, which is exactly why Word is terrible for productivity: enables user to easily wander away from content to a wonderland of bikeshedding."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> hash~~tag~~\n\npls"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "I am excited about the tech but worried about this being business oriented. A huge boon from the latex ecosystem is having a myriad tools to work with. Like a local editor/idea not exposed to the web for security sensitive work (as an example).  \n\n\nThe more liberties are given to the community to build tools the less opportunity for monetisation, that seems like a conflict of interests. I might be paranoid, this looks very interesting for sure."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.14512450000001,
      "arousal": 62.698413,
      "dominance": 66.4965985,
      "text": "People who don't like LaTeX will just use markdown with quarto. It's going to be hard to compete."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.20559333333334,
      "arousal": 65.98639433333334,
      "dominance": 70.48374933333334,
      "text": "Lout had solved the same problem and had typesetting equivalent to TeX. Didn't take off.\nWhat are you doing different?\n\nGreat idea BTW. Love the ease. Wish you all the best!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As someone who has fully learned latex and is comfortable writing large projects in latex (200+ pages) what would my motivation be to switch?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Chatgpt knew latex…"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.77777800000001,
      "arousal": 61.054422,
      "dominance": 68.93424,
      "text": "I had a thought about online collaborative editing as I’ve recently done a lot of that. You should think about rusts ownership and concurrency models because the same issues arise when a dozen or so people are editing the same document. I really wanted to be able to assign owners to sections who can edit directly and approve suggestions."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.670446,
      "arousal": 64.24792133333334,
      "dominance": 69.99244133333333,
      "text": "I love LaTex and I am a long time user but I welcome this modern approach to LaTex. The creators seem to have thoroughly considered how LaTex is used and what a modern replacement of it should look like. I envision this app being used in personal knowledge management and note apps like LogSeq or Obsidian to enhance the note-taking experience especially for Mathematics and Sciences."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.670446,
      "arousal": 64.24792133333334,
      "dominance": 69.99244133333333,
      "text": "I love LaTex and I am a long time user but I welcome this modern approach to LaTex. The creators seem to have thoroughly considered how LaTex is used and what a modern replacement of it should look like. I envision this app being used in personal knowledge management and note apps like LogSeq or Obsidian to enhance the note-taking experience especially for Mathematics and Sciences."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Looking good!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.54195,
      "arousal": 48.639456,
      "dominance": 34.46712,
      "text": "This looks so sick!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "This is super interesting. I would definitely welcome something besides latex that produces documents of similar quality.\n\nIs someone working on a treesitter parser?\n\nEdit:\n\nThere's already a LSP + vscode extension in beta, and someone else is working on a treesitter parser and neovim extension. This is getting more interesting by the day."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.97052149999999,
      "arousal": 54.648526000000004,
      "dominance": 62.3582765,
      "text": "I will probably give this a try. Last time I tried doing something with LaTeX I found I couldn't encode the rules I had in mind about where to insert page breaks."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "How does Typst compare to LaTeX in terms of compile speed? Of course LaTeX has many more issues, but the compile time is one of the things that bothers me the most."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Latex has been a bloated monster. Nowadays I just rely on overleaf to manage all dependency hells for me and my thesis was completely done there."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can declare variables and make calculations with them? Finally I can write the whole resume in a single file, I always wanted that for latex but the solutions I found were cumbersome"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Since it’s got built in html exporting, does that mean it could even be a replacement for Katex?\n\nLike you could use this to generate the html strings instead of katex.renderToString?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.6825395,
      "arousal": 69.2743765,
      "dominance": 70.9750565,
      "text": "If there’s one thing I’d love to replace then it’d be LaTeX. I’m not hopeful it’ll succeed but, here’s to hoping!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it possible to generate tables or grids that span multiple pages?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "These days I find I write technical documents in markdown and use pandoc to do the bulk of the latex for me. It's not perfect but it's close enough for me."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How can you style the page around your text? That's one of the main things not to use latex and the docs are not talking about it."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This would be really interesting for additional documentation in a given crate's docs.rs, but with extra LaTeX rendering docs.rs or even rendering it in a dev environment like CLion or VSCode.\n\n\n    /// This is a math func to calculate $Rust latex code$\n    /// bla bla bla bla\n    pub fn math_func(params...){\n       // impl\n    }"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The GitHub repo has 5k stars after one day of being online. At this pace, you'll be on par with rust-lang/rust in a bit more than two weeks."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.582766,
      "arousal": 53.741497,
      "dominance": 71.882086,
      "text": "Compiled it and tried it out, works great!\n\nThe online editor isnt really a viable option for me, but you could add typst syntax to Kate and use typst in a compiler script, view the pdf with okular, and have somewhat of WYSIWYG editor.\n\nAnyone want to do that? Never did this but would like to try!"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I will be taking a course requiring us to use either latex or word. Should I try using this instead?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it possible to give caption to tables?"
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you considering to provide a web editor that works with the local filesystem instead of in the cloud?\nIt could be a very simplified version (no collab etc) that works with the https://wicg.github.io/entries-api/ for file and directory access instead of (unstable) cloud. \n\nOr a language server following the Language Server Protocol for IDE support, but that might be a whole undertaking if it's setup differently as of now."
    },
    {
      "post_title": "Typst, a modern LaTeX alternative written in Rust, is now open source",
      "created_utc": 1679422812.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Loving this, will use it for my next presentation"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 74.5181405,
      "arousal": 57.59637175,
      "dominance": 65.95804975,
      "text": "We use AWS / Axum / Tower and deploying it as a form processing Lambda function with DynamoDB as the persistent store.\n\nIt works great. I just wanted to share this because some people still think Rust is a toy language with no real world use."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If you want big numbers [Pingora](https://github.com/cloudflare/pingora) is probably the biggest.\n\n>Pingora is battle tested as it has been serving more than 40 million Internet requests per second for [more than a few years](https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet)."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What's the AWS bill on that?\n\nEspecially for the compute."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.1088434,
      "arousal": 54.399092800000005,
      "dominance": 62.8571428,
      "text": ">  Rust is a toy language with no real world use.\n\nHaving worked at a FAANG, building key components in Rust for a service which is widely used, I would just ignore people saying such things."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.7226,
      "arousal": 61.866969000000005,
      "dominance": 66.099773,
      "text": "\\> some people still think Rust is a toy language with no real world use.\n\nWho?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 57.936508,
      "dominance": 69.047619,
      "text": "\"Rust is a toy language with no real use\" has to be bait fr"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.478457999999996,
      "arousal": 40.192743500000006,
      "dominance": 52.891156499999994,
      "text": "I have something similar written in Rust+Axum with API Key auth on MySql(existing user db), and also Postgres as backend, with Postgres as a queue.\n\nIt has continually ran around 10 req/s slow hours, and around 100 req/s during busy hours, around 10-7PM.\n\nIt runs on a DigitalOcean App deployment for like 10$/mo, and not given me a single issue since it was deployed about a year and a half ago.\n\nEvery once in a while I have to remember what I did and add some enhancements to it.\n\nIt powers the backend integration to about 80ish POS systems for txt messaging campaigns."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.44104300000001,
      "arousal": 57.73809525,
      "dominance": 64.0873015,
      "text": "> I just wanted to share this because some people still think Rust is a toy language with no real world use.\n\nNobody serious is saying that."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.2834465,
      "arousal": 56.6893425,
      "dominance": 65.873016,
      "text": "Nobody who knows much about coding thinks Rust is a toy language. And if they do, their opinion doesn't matter.\n\nPS: WTF is the backend doing for all of those requests?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Doesn't Lambda limit concurrency to just 1 in-flight request per instance? At 100k req/min it sounds like the bill would for Lambda be exorbitant. \n\nYou could probably serve that traffic from a single-core EC2 instance if you allowed concurrency. I've served 100k requests per *second* from Rust+Tokio on, uh, I think it was 8 cores / 16 hyperthreads?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "100k req/minute is nothing. You could run that on a microPC bought off ebay for < $200."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[That don’t impress me much.](https://youtu.be/mqFLXayD6e8?si=L9nEnx1iLDK1JB1g)\n\nThere are a number of APIs at my company with 600K req/min each and I’d consider all of them fairly small.\n\nAny language, especially if you put it as a lambda and have DynamoDB backing it, can achieve 100K req/min."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.48428885714286,
      "arousal": 54.53514742857143,
      "dominance": 62.212504,
      "text": "On the other end of the spectrum people think Java is slow as shit and a pig. Only useful in bloated enterprises.\n\nOne of the most famous developers ever called Java garbage (Linus).\n\nYet there are companies that have been running Java since the 2000s that would consider those numbers chump change.\n\nDitto for PHP and C#.\n\nRust is for sure not a toy language."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Aren’t you just measuring the elasticity of AWS serverless?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We serve more than times 10 the requests.\nBut yes, rust is working well on our team. In our case, we are using ec2 in AWS. \n(And we pay a lot more for Nat or Loadbalancing than for our instances)"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "what does it do?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.85260769230769,
      "arousal": 51.412873,
      "dominance": 60.96284661538462,
      "text": "With rust running on a bare metal server, I would find 100k/s somewhat disappointing. 400k+ is achievable for cached data which is being accessed using good algos such as graphs, hashing, etc. \n\nObviously large amounts of data or hard to index data isn't going to get these numbers, but with rust 100k should be achievable from a raspberry pi 4, let alone what some beastly machine could handle. For example, product search results, reasonable amounts of GIS data, etc.\n\n\nI love using rust for the parts which would require that I otherwise create some blathering miserable distributed system instead of a tiny handful of machines handling massive loads.\n\nWhere I love rust, even for smaller systems, is when you can produce query results measured in microseconds, not milli. With a proper encrypted stream setup, the UI responsiveness can be amazing. This can give products just an amazing feeling of quality.\n\nThen, for those results, which would be otherwise too slow for real time user interaction, rust can bring enough speed to the table to make uselessly slow features useful."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Deploying Rust code as lambda functions sounds awful to me 😅\n\nIs your usage profile super spiky or something?"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If it runs on lambda or any automatically scaled system the req/min is a pointless metric.  There a PHP blogs built on Wordpress and bloated plugins that have same if not bigger traffic because of horizontal scaling. If it was running on a single host, now that would be impressive"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.88321975,
      "arousal": 60.88435375,
      "dominance": 66.8367345,
      "text": "> I just wanted to share this because some people still think Rust is a toy language with no real world use.\n\nBut 100,000 req/min aka 1666 req/sec is a toy."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does anyone actually think that anymore? There are auto manufacturers using Rust in cars at this point"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "For those concerned about \"cost\". \n\nSavings plans cover Lambda compute, and even a relatively small enterprise is probably not paying list price for a whole range of AWS services."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 60.31746,
      "dominance": 59.637188,
      "text": "> no real world use\n\nIt's literally used in the Linux Kernel"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ". F.Z.  .dddszd .r . Sz"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.553288,
      "arousal": 53.74149666666667,
      "dominance": 59.07029466666666,
      "text": "I’ve been in the industry since 2011, this is the first time I learned that some devs think Rust is a toy language"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.122449,
      "arousal": 42.970522,
      "dominance": 60.997732,
      "text": "Using rust in lambda means you're limiting the potential of your rust app. It should actually go into vps or especially bare metal for pure raw performance. "
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "100,000 req/min sounds more impressive than it really is. That's barely 1700 requests/s. NodeJS can handle ten thousands of requests per seconds on a single core. So I must say that this is not saying anything about Rust."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Where I work we have the same stack lambda + redis + dynamodb but using nodejs, we have around 100k request min and it works great, what I mean I think here the language is not a factor, basically the performance is conditioned on I/O operations."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.0997735,
      "arousal": 59.1836735,
      "dominance": 70.861678,
      "text": "dam dazzling adjoining price fanatical humorous nail spoon terrific smell\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Rust is a performance animal. Anything IO or compute heavy (not business logic) it is a solid choice. My team had been troubleshooting a 300 line python script that took weeks to run and trying to get it faster. I moved it to rust and it's a 2 hour operation now."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Lambda is going to negate all your latency and resource efficiency benefits of using Rust lol"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.14512450000001,
      "arousal": 62.698413,
      "dominance": 66.4965985,
      "text": "It’s not it’s hard to manage the semantics of ownership and borrowing when writing complex programs so people ignore it because of that"
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 57.936508,
      "dominance": 69.047619,
      "text": "I really don't think anybody thinks Rust is a toy language."
    },
    {
      "post_title": "A Rust backend went live last year for a website that has 100.000 req/min for a fairly large enterprise",
      "created_utc": 1745965181.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.6712015,
      "arousal": 51.190476000000004,
      "dominance": 64.2857145,
      "text": "no one thinks rust is a toy language. but just because it's too heavy for building something like http servers.\n\nit's easier when using typescript + platform agnostic http framework. this combination has a wider adaptability."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why doesn’t Rust care more about compiler performance?"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.133787,
      "arousal": 40.873016,
      "dominance": 54.30839,
      "text": "The Eiffel compiler was so slow that they had a mode where when you recompiled a class it would compile changed functions into bytecode and hot-patch the executable to interpret the bytecode instead. When you had it working, you could do the full machine code recompile."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.599773,
      "arousal": 63.903061375,
      "dominance": 72.16553275,
      "text": "This is also a great example of how humans are seemingly happy to conflate \"outcome is not what is desired\" with \"this must mean someone or someones didn't care enough about my desired outcome.\" In this particular example, it's very easy to see that there are a whole bunch of people who really care and have even made meaningful progress toward making the outcome get _closer_ to what is desired. But it still isn't where lots of folks would like it... _because_ it's a very hard problem and _not_ because people don't care.\n\nIt's not hard to match this behavioral pattern with lots of other things. From the innocuous to the extremely meaningful. Imagine if we were all just a little more careful in our thinking."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.641723,
      "arousal": 68.253968,
      "dominance": 76.643991,
      "text": "In this post, I tried to provide some insights about why we haven't been making faster progress with Rust compiler's performance improvements. Note that these are just my opinions, as always, not an official stance of the compiler team or the Rust Project :)"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.5,
      "arousal": 47.16553275,
      "dominance": 59.4387755,
      "text": "My problem is less with the actual speed of the compiler, and more to do with how changing small areas of a codebase means recompiling half of the workspace.\n\nI work on bevy, which has tons of (large) crates in a workspace, and making any change often means recompiling 10+ entire crates. Spinning off modules into separate crates helps, but puts more maintenance burden on the project (more Cargo.tomls to maintain and runs the risk of cyclic dependencies), brings more issues when it comes to cross-crate documentation and item privacy, etc. There's only so many crates you can realistically create.\n\nDioxus's recent work on subsecond is great for helping Bevy users modifying game logic at least, but the incremental compile times Rust has when modifying large workspaces really slow down development of Bevy itself."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good read! (But there are way too many brackets 🙃)"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is a current bug to me:\n\nIf you are at the top level in a workspace and do `cargo build -p some_workspace_crate`, cargo currently builds ALL the dependencies, not just those used by the crate in the workspace you are currently compiling. If you swith to the some_workspace_crate/ dir and compile there, cargo only compiles the direct deps of that crate."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "I will say that I don’t really care if rust’s compile times are slow, I care if rust analyzer is slow."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.648526,
      "arousal": 38.095238,
      "dominance": 56.462585,
      "text": "I have a question, regarding Huge pages(mentioned in [the article](https://kobzol.github.io/rust/rustc/2023/10/21/make-rust-compiler-5percent-faster.html) linked by this article).\n\nAre huge pages enabled for the Rust CI? Even if they are not applicable across the board, the 5% speedup could reduce the CI costs."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.58956933333333,
      "arousal": 60.95993966666666,
      "dominance": 54.57294033333333,
      "text": ">When was the last time you “just wanted this small feature X to be finally stabilized” so that you could make your code nicer?\n\nLet chains actually, I've been wanting them since I heard they were considering adding them. \n\nHonestly though I'm pretty happy with the compile times of Rust, it's not been a major issue as the time lost due to compile times was gained in code that kinda just works (tm). So most projects I was breaking even in terms of development time."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thanks for all your work!"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.83446733333333,
      "arousal": 60.35525333333334,
      "dominance": 57.671957666666664,
      "text": "The cycle actually feels much better to me in Rust than in C, especially for large projects. The exception is initial compiles, and I believe that's just due to the fact that each Rust project builds its own static dependencies instead of linking the system ones (which, honestly, is so nice and has saved me a ton of headaches that more than makes up for the compile time it adds).\n\nAll my homies hate dynamic linking."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Similar to what /u/burntsushi says, I feel like this blog post misses the mark. The rustc-perf benchmark suite is based on code that is frozen in time, but the actual experience of Rust users is compiling codebases that are evolving, growing, and adding new language features. Even if all the lines on the rustc-perf benchmark suite are trending down, the experience of actual users can be that the compiler is getting slower and slower.\n\nFor example, the current compiler architecture has limited incrementality. If you keep adding new modules to a crate, the old modules will cause bigger and bigger recompiles when edited."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.54024925,
      "arousal": 66.2414965,
      "dominance": 64.016439875,
      "text": "I understand, it's a hard balance to whether make the compiler be performance friendly or contributor friendly. But making the compiler faster will lend pay for itself including for projects like the rust compiler due to improved iteration speed.  We have devs who are willing to move away just because of it.\n\nCan't paste the twitter link but here is the quote from Mitchell Hashimoto\n\n>But Rust needs like, a 10x speedup for me to be happy. Fundamentally, the compiler is broken for me. I'm happy others are happy, just noting for myself.\n\nAs for myself, 80k some LOC later, I am just sulking up the pain, sometimes questioning whether it was a right decision to use rust for a big project."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.20937283333333,
      "arousal": 59.46712016666667,
      "dominance": 62.66061966666667,
      "text": "For those of us who came from C++ world, the only fair comparison is to run a static analyzer on the C++ code and then compile it, because that's what you are getting with Rust (and more) every time you build. What you lose to that compile time is far more than made up for in the long run. You know you are moving forward against changes that don't have UB.\n\nOf course some folks' compile times are worse than others. Mine are quite good because I avoid most things that contribute to long compile times, whereas some folks don't have that luxury (because they are using third party stuff that forces it on them.)"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.393424,
      "arousal": 62.811791375,
      "dominance": 66.510770875,
      "text": "I'm pretty happy with the performance on a modern system, but pay to win isn't very user friendly especially for people just getting started. In my mind, it's slow because it's doing more work that I didn't have to do myself to verify correctness, and I'll always pick that trade-off bc it ultimately saves me time."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.623016,
      "arousal": 51.686507875000004,
      "dominance": 56.802721,
      "text": ">some C++ developers\n\nOne of the big problems with C++ is that every standards revision adds a tonne more stuff into the standard headers, so swapping between different standards can cause huge slowdowns in compile time performance. Its kind of wild, and its becoming an increasingly major problem that the committee is just sort of ignoring\n\nOn a related note: One thing that I've been running into in my current C++ project is a file with very slow compile times. Its a bunch of separate, but vaguely related functions, that are situated in the same compile unit - while they *could* be split up quite easily, it'd be a logistical nightmare in the project. Any of them could be (re)compiled totally independently of any of the others\n\nSometimes I think its strange that we can't mark specific functions with eg the moral equivalent of being in a fresh TU, so that we can say \"only recompile this specific function pls\". I suspect in rust given that a crate is a TU, it'd be helpful for compile times to be able to say \"stick this function in its own compile unit\", vs having to actually split it off into its own thing Just Because\n\nI know there's some work being done on the whole cache thing in this area (that I don't know too much about), but perhaps languages need to pipe this over to users so we can fix the more egregious cases easily by hand, instead of relying on compiler vendors bending over backwards for us even more"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.590325,
      "arousal": 38.548752666666665,
      "dominance": 52.07860933333333,
      "text": "One crate I ran into that was super slow to build was [rune]( https://lib.rs/crates/rune) (especially with the `languageserver` and `cli` features enabled). It is a single chokepoint in my dependency tree on the critical path.\n\nWhat would be my options for looking into why it is so slow?"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.6099775,
      "arousal": 47.789116,
      "dominance": 61.394558,
      "text": "What use is a fast compiler if all it does is spit out nonsense error messages? \n\nThis question could easily be flipped to: why don’t languages other than rust care more about useful error messages?"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.4172335,
      "arousal": 70.29478449999999,
      "dominance": 78.004535,
      "text": "This discussion also reminds me of a story about the Dart compiler(s): at some point there was \\`dart2js\\`, which was super powerful, but focusing solely on runtime performance. So the Dart folks made DDC (Dart Dev Compiler) kinda from scratch, so that devs can have something dedicated to a quick iteration cycle."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.709183625,
      "arousal": 60.55839,
      "dominance": 62.089002,
      "text": "This has been an issue from the very beginning and is an abject lesson in \"premature optimization often *isn't*.\"\n\nThe Rust compiler just wasn't designed with performance in mind. It really wasn't.\n\nYeah, yeah, \"smart people are working on it\", but the precise problem is that they've already dug a *very deep hole* over a decade and it will now take years of effort from smart people to get back to the surface, let alone make further progress past the baseline expectation of users.\n\nReally low-hanging fruit was just ignored for years. Things like: Many traits were defined for every sized array between 1 and 32 in length because the language was missing a core feature that allowed abstraction over integers instead of just types. Similarly, macros were abused in the standard library to spam out an insane volume of generic/repetitive code instead of using a more elegant abstraction. Then, all of that went through intermediate compilation stages that spammed out highly redundant code with the notion that \"The LLVM optimiser will fix it up anyway\". It does! *Slowly.*\n\nThe designers of other programing languages had the foresight to see this issue coming a mile off, so they made sure that their languages to had efficient parsing, parallel compilation, incremental compilation, etc... from the start.\n\nI don't mean other *modern* languages, but even languages designed the 1990s or 2000 such as Java and C#. These can be compiled at rates of about a million LoC/s and both support incremental builds by default *and* live edit & continue during debugging. Heck, I had incremental C++ compilation working just fine back in... 1998? 99? A long time ago, at any rate."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.117914,
      "arousal": 62.43386233333334,
      "dominance": 66.515495,
      "text": "Because you only compile once, and run the program often. Runtime is important, compile time not so much. \n\nAnd by the way, I've compiled turbo pascal programs end of the last millennium - I'm more than happy with rust compile times.\n\nY'all need to learn some patience 😄"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I did a small experiment by generating two identical Rust and C++ programs:\n\n    N = 100_000\n    with open(\"gen.rs\", \"w\") as f:\n      for i in range(N):\n        f.write(f\"pub const SOME_CONST_{i}: u32 = {i};\\n\")\n      f.write(\"pub fn main() {}\\n\")\n    \n    with open(\"gen.cpp\", \"w\") as f:\n      f.write(\"#include <cstdint>\\n\\n\")\n      for i in range(N):\n        f.write(f\"constexpr static const uint32_t SOME_CONST_{i} = {i};\\n\")\n      f.write(\"int main() {}\\n\")\n\nAnd got this results:\n\n    time rustc gen.rs\n    rustc gen.rs  2.47s user 0.14s system 102% cpu 2.560 total\n    \n    time g++ gen.cpp\n    g++ gen.cpp  0.29s user 0.04s system 103% cpu 0.316 total\n\nLooks like a lot of work todo still"
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Really good read."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.8390022,
      "arousal": 60.9297051,
      "dominance": 58.0498867,
      "text": "We've lived during fabulous improvements in computing technologies, ala Moore's law, but..\n\nWe [know](https://cap.csail.mit.edu/death-moores-law-what-it-means-and-what-might-fill-gap-going-forward) those direct improvemenet cannot continue, except by moving towards massive parallelism, so initially Apple's M chips, but really GPUs.  All this would benefit from being more memory efficent, not exactly a strong suit for Rust either.\n\nIn fact, there are pretty solid odds that computing technology slides backwards, so slower CPU, less memopry, etc because of on-shoring for security, supply chain disruptions, some major war of Taiwan, etc. \n\nIf we look a little further forward, then we might foresee quite significant declines.\n\nThe IPCC estimates +3°C by 2100 but ignores tipping points and uses 10 year old data, so +4°C maybe likely for the early 2100s.  Around +4°C the tropics should become uninhabitable to humans, and the earth's maximum carrying capacity should be like one billion humans (Will Steffen via [Steve Keen](https://www.youtube.com/watch?v=2kXKbQWA2EY)).  Some other [planetary boundaries](https://www.stockholmresilience.org/research/planetary-boundaries.html) maybe worse than climate change. \n\nNow this population decline by 7 billion might not require mass death, if people have fewer children, like what's already occuring everywhere outside Africa.\n\nWe might still make computers, but if resources and population decline then we might spend way less resources on them.  Rust has nicely distilled decades of langague work, and brought brilliant ideas like lifetimes, but we'll maybe need Rust to be more efficent, primarily in CPU and memory usage, but also the compiler, if we want these advancements to survive."
    },
    {
      "post_title": "Why doesn’t Rust care more about compiler performance?",
      "created_utc": 1749482412.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hsha"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What would Rust look like if it was re-designed today?"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 67.71946871428572,
      "arousal": 56.187236999999996,
      "dominance": 62.42306428571429,
      "text": "What if we could re-design Rust from scratch, with the hindsight that we now have after 10 years. What would be done differently?\n\nThis *does not* include changes that can be potentially implemented in the future, in an edition boundary for example. Such as fixing the Range type to be `Copy` and implement `IntoIterator`. There is an RFC for that (https://rust-lang.github.io/rfcs/3550-new-range.html)\n\nRather, I want to spark a discussion about changes that would be good to have in the language but unfortunately will never be implemented (as they would require Rust 2.0 which is *never* going to happen).\n\nSome thoughts from me:\n- `Index` trait should return an `Option` instead of panic. `.unwrap()` should be explicit. We don't have this because at the beginning there was no generic associated types.\n- Many methods in the standard library have incosistent API or bad names. For example, `map_or` and `map_or_else` methods on `Option`/`Result` as infamous examples. `format!` uses the long name while `dbg!` is shortened. On `char` the methods `is_*` take `char` by value, but the `is_ascii_*` take by immutable reference. \n- Mutex poisoning should not be the default\n- Use `funct[T]()` for generics instead of turbofish `funct::<T>()` \n- `#[must_use]` should have been opt-out instead of opt-in\n- `type` keyword should have a different name. `type` is a very useful identifier to have. and `type` itself is a misleading keyword, since it is just an alias."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The Rust GitHub repos has some closed issues tagged with \"Rust 2 breakage wishlist\": https://github.com/rust-lang/rust/issues?q=label%3Arust-2-breakage-wishlist+is%3Aclosed"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 61.337868,
      "dominance": 66.326531,
      "text": "We would probably not have to deal with `Pin` and other weird aspects of self-referential types like futures and generators if there were a `Move` auto trait in 1.0.\n\nI'd also expect a lot of thread and task spawning APIs to be cleaner if structured concurrency (e.g. scoped threads) were available from the start. Most of the `Arc<Mutex<Box<>>>` stuff you see is a result of using spawning APIs that impose a `'static` bound.\n\nI'd also expect more questions about `impl Trait` syntax in various positions (associated types, return types, `let` bounds, closure parameters) to be easier to answer if they had been answered before 1.0. More generally, a consistent story around higher-ranked trait bounds, generic associated types, const generics, and trait generics before 1.0 would have sidestepped a lot of the effort going on now to patch these into the language in a backwards compatible way."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 35.37415,
      "arousal": 79.591837,
      "dominance": 36.281179,
      "text": "Panic on index, arithmetic overflow, and the like was a deliberate choice for zero-cost abstractions over maximum safety."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.564625666666664,
      "arousal": 63.340892,
      "dominance": 60.12849566666667,
      "text": "In my mind Index should panic, whereas .get() should return Option<>, or even Result<>. Expectations are clear."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I love turbofish though"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.741497,
      "arousal": 36.054422,
      "dominance": 51.133787,
      "text": ">Use `funct[T]()` for generics instead of turbofish `funct::<T>()`\n\nDoesn't this have the same parser ambiguity problem as angle brackets, since square brackets are used for indexing?"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.55026466666668,
      "arousal": 64.96598666666667,
      "dominance": 60.27966733333333,
      "text": "> Index trait should return an Option instead of panic. .unwrap() should be explicit. We don't have this because at the beginning there was no generic associated types.\n\nIn principle, there's no *fundamental* reason we couldn't change this over an edition (with a `cargo fix`, and a shorthand like `!` for `.unwrap()`), but it'd be so massively disruptive that I don't think we should.\n\nThat said, there are other fixes we might want to make to the indexing traits, and associated types *would* be a good fix if we could switch to them non-disruptively.\n\n> Mutex poisoning should not be the default\n\nWe're working on fixing that one over an edition: https://github.com/rust-lang/rust/issues/134646"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.3809525,
      "arousal": 45.521542,
      "dominance": 50.9070295,
      "text": "Possibly a more intricate compile-time code and self-reflection system in the style of Zig, which would obviate probably 90% of proc-macros and probably if done right also make variadics less problematic.  \nThis is being slowly worked in but is slow because of less direct demand and having to make it work with everything else, but I expect easier advancements could be me made if the language was made from the start with it."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.99206375,
      "arousal": 65.73129275,
      "dominance": 63.718820750000006,
      "text": "I'm surprised to see how little attention has been given to the Effects System, or integers with a known (sub) range. Ofc you can write your own integer types that disallow expression outside their valid range, but we already have types like NonZeroUsize, and having this built in to the language or the standard library would allow so much more compile time verification of state possibilities.\n\nRustc being able to list proofs of program properties based on the combination of constraints you can apply within the type system would be the next level. I for one would love to have this as a 13485 manufacturer, as you could simply say \"this whole class of program properties are enforced at compile time, so if it compiles, they are all working correctly\""
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.7868479,
      "arousal": 62.73242640000001,
      "dominance": 64.5918365,
      "text": "* `Index`: Eh, when languages get caught up in the \"everything must return `Option`\" game, you end up constantly unwrapping anyway. It subtracts a ton from readability and just encourages people to ignore `Option`. Making common operations panic encourages people to *not* just view `Option` as line noise (like we do with `IOException` in Java)\n* What's wrong with `map_or` / `map_or_else`? Throughout the Rust API, `*_or` methods take a value and `*_or_else` ones take an `FnOnce` to produce that value. That's incredibly consistent in stdlib and beyond.\n* `dbg!` is short because it's a hack, meant to be used on a temporary basis while debugging and never committed into a repo.\n* Can't argue with the `char` inconsistency. All non-mutating, non-trait methods on a `Copy` type should generally take `self` by-value.\n* Poisoning: What do you propose instead? Thread A panicked while holding the mutex, what should other threads see?\n* Using `[]` for function generics and `<>` for struct generics would be inconsistent. If we decided to go `[]`, we should go all-in on that (like Scala) and use them for all type arguments.\n* `#[must_use]`: Same argument as with `Index`. If it's everywhere, then all you've done is train people to prefix every line of code with `let _ =` to avoid those pesky warnings.\n* `type`: Yeah, I agree. For a feature that's relatively uncommonly-used, it has an awfully important word designating it. `typealias` is fine. I don't mind a super long ugly keyword for something I don't plan to use very often. We could also reuse `typedef` since C programmers know what that means. Just as long as we *don't* call it `newtype`, since that means something different semantically in Rust-land."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I prefer turbofish though 😂"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "I heard someone talk about having a `Move` marker trait instead of pinning. So one would implement `!Move` for  types that can't be moved. Seems like it'd be more intuitive to me, but I haven't thought very deeply about it"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.19047633333334,
      "arousal": 52.68329566666667,
      "dominance": 66.13756599999999,
      "text": "> Rather, I want to spark a discussion about changes that would be good to have in the language but unfortunately will never be implemented (as they would require Rust 2.0 which is never going to happen).\n\n> - `type` keyword should have a different name. `type` is a very useful identifier to have. and `type` itself is a misleading keyword, since it is just an alias.\n\nThat could easily be changed across an edition boundary."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.6734695,
      "arousal": 58.701814,
      "dominance": 60.8843535,
      "text": "Since the type system is already so powerful in rust it would have been extra nice if we could also define type constraints that defines side effects.\nLike\n\n\"This function will read from network/local fs\"\n\"This function will make database writes\"\n\"This is a pure function\"\n\nI think this is called the effect system, but I'm not too sure.\nBut the fact that it will again increase the compilation time(correct me on this) also makes me think I'd be more upset lol."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I'd love for `no_std` to be the default for libraries. I know it'd add some boilerplate to most libraries, but so many give up `no_std` compatibility largely for no reason IMO. Although I'd also accept a warning lint for libraries that _could_ be `no_std` which aren't."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The `Map` types should implement a common trait, rather than a bunch of methods with the same signatures that can’t be abstracted over."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.76644,
      "arousal": 61.6780045,
      "dominance": 51.07709750000001,
      "text": "I'd restrict `as` to a safe `transmute`, so `some_f32_value as u32` is the equivalent of `some_f32_value.to_bits()` in canonical Rust. Converting between integers of different sizes happens via the `From` and `TryFrom` traits, with either a stronger guarantee that `u32::try_from(some_u64_value & 0xFFFFFFFF).unwrap()` will not panic or a separate trait for truncating conversions which provides that guarantee."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Probably go even further into the borrowing syntax it would be nice if you were better able to have 2 indipendents mutable borrows of an array by proving they don't overlap."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.269841400000004,
      "arousal": 67.30158759999999,
      "dominance": 50.249432999999996,
      "text": "> `Index` trait should return an `Option` instead of panic. `.unwrap()` should be explicit. We don't have this because at the beginning there was no generic associated types.\n\nEh. `Index` exists as convenience and correspondance for other languages, if it was faillible then `[]` would probably panic internally anyway. `[]` being faillible would pretty much make it useless.\n\nAlso what I think was the bigger misstep in `Index` was returning a reference (and having `[]` deref’ it), as it precludes indexing proxies."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.222222,
      "arousal": 58.276644000000005,
      "dominance": 67.00680299999999,
      "text": "Controversial opinion: Rust should borrow the postfix “!” operator from Swift as a shorthand for unwrapping"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 60.31746,
      "dominance": 59.637188,
      "text": "I think the biggest one that almost all non-trivial (hello world) projects have to deal with is the fact that async isn’t baked into the language. Great crates exist for sure but not having to debate which runtime to use for every project would be awesome."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If we'd totally 'solved' generators, a lot of stuff would be much more straight forward instead of scaffolding to support special casing."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.3197278,
      "arousal": 63.0158732,
      "dominance": 64.739229,
      "text": "Here are some things I think would be a good idea (I can definitely be convinced that they are not though):\n\n* static multiple dispatch, if that is possible, less emphasis on a single type and it's associated things, that would make design easier for me. As an alternative, more focus on the specialization feature\n* no panic, just return values everywhere (I know it's very complicated to have this done ergonomically, but I have a feeling it would be worth it)\n* distinguish not just ~~shared and exclusive~~ readable and mutable references, but references that allow you to move a value out of the type, so \\`Option::take\\` would take a different reference than \\`Option::get\\_mut\\`\n* more focus on avoiding schedulers on top of schedulers, if that's somehow possible"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.11111150000001,
      "arousal": 40.702948000000006,
      "dominance": 59.6938775,
      "text": "I think the turbofish is a better way to show generics then your proposed square bracket implementation, since your proposed one is very visually similar to selecting a function from a vector of functions, which is uncommon but not unused.\n\nwhy do you want to remove the turbo fish btw, if I may ask"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.78231266666668,
      "arousal": 54.34618333333333,
      "dominance": 56.764928,
      "text": "let's get recursive  \n  \nI like some of Mojo's value proposition; [https://www.modular.com/blog/mojo-vs-rust](https://www.modular.com/blog/mojo-vs-rust)\n\nI would like to see some of it's features come to Rust\n\n* basically some of it's ergonomics, like SIMD & GPU Compute support\n* possibly a better backend option? MILR\n* eager destruction sounds promising\n* but not the syntax please \n\n\\* only if there is no impact to performance, or unless it's possible to opt in if performance is not a major concern; making it a conscious decision on part of the developer."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 23.015873,
      "arousal": 71.201814,
      "dominance": 53.514739,
      "text": "I absolutely despise the inconsistent abbreviation in this language"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Reading this thread I realize how far I'm from being a Senior Rust developer 🤣"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102,
      "arousal": 66.099773,
      "dominance": 81.519274,
      "text": "Fixing the macro system, to be lot less complicated and powerful, something like [https://github.com/wdanilo/eval-macro](https://github.com/wdanilo/eval-macro)"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.78306833333333,
      "arousal": 55.177627,
      "dominance": 69.047619,
      "text": "Some way of addressing the combinatorics around Result/Option/no lamdas and returns, likewiese async or not, etc. It's hard to keep the chart in my head of all the methods on Option/Result and e.g. futures::future::FutureExt/Try FutureExt / ::stream::StreamExt/TryStreamExt. \n\nI've heard talk of an effects system. Unclear to me if that can realistically happen (including making existing methods consistent with it) with an edition boundary or not."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Returning an immutable reference from a function that has a mutable reference as an argument should not extend the borrow of the mutable reference. \n\nFor example \n\n    fn foo(&mut T) -> &U\n\nWouldn’t require T to be mutable borrowed for as long as U. "
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Maybe it would be specifically designed for fast compilation."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.680272,
      "arousal": 59.750567000000004,
      "dominance": 65.9863945,
      "text": "Considering the fact that Rust otherwise has a big emphasis on safety... I found it surprising that integer rollover behavior is different in debug vs `--release` modes.\n\nI get that it's for performance... but still seems risky to me to have different behaviors on these fundamental data types.\n\nIf people need a special high-performance incrementing number (and overflow is needed for that)... then perhaps separate types (or syntax alternative to `++`) should have been made specifically for that purpose, which behave consistently in both modes.\n\nOr maybe like an opt-in compiler flag or something.  \n\nI dunno, they probably know better than me.  Maybe I'm paranoid, but I found it surprising."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.426304,
      "arousal": 58.730159,
      "dominance": 43.764172,
      "text": "I think making `async` a keyword was a mistake. We already have language features that work solely on the basis of a type implementing a trait like `for` loops. `async` obscures the actual return type of functions and has led to a proliferation of language features to design around that. It would have been better to allow any function that returns a `Future` to use `.await` internally without needing to mark it as `async`. \n\nHopefully this mistake is not proliferated with `try` functions and `yield` functions or whatever in the future."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.66666666666667,
      "arousal": 63.94557833333334,
      "dominance": 62.433862000000005,
      "text": "To hear the way people talked 5 years ago, everything with async/await is pure garbage and should be completely rebuilt from scratch.\n\nNow in hindsight, people generally seem to like it."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`foo[]` for generics is essentially impossible if you also want to retain `foo[]`for indexing. It's the exact same reason that `<>` requires something to disambiguate. That's why Scala uses `()` for indexing (plus it fits the functional paradigm that containers are just functions)."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.6258505,
      "arousal": 65.759637,
      "dominance": 70.2380955,
      "text": "Colored functions is a really big thing I wish we didn't have to deal with. I also don't love how build.rs confusingly uses stdout for communicating with cargo."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.8526075,
      "arousal": 50.85034,
      "dominance": 59.297052,
      "text": "I would want to see an associated Output type on the Ord trait.  Specifically for the use case of computer algebra system stuff where you can construct an expression using operators, or delay the evaluation and pass a data structure around to be used in a later context with more information.  Using < operator in places that type-infer to a bool (such as an if statement) could still work by internally using a trait bound `where T: Ord<Output = Ordering>`.  Same for PartialOrd, Eq, PartialEq"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.328798,
      "arousal": 37.07483,
      "dominance": 48.752834,
      "text": "I think the `type` can be done over an edition boundary right? Just change the keyword and make type itself reserved. Onto 2027? :p"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.84580500000001,
      "arousal": 59.126984,
      "dominance": 67.8004535,
      "text": "More like Swift, Chapel, Ada/SPARK, don't push affine types into our face, have them when the use case calls for performance above anything else."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "I wish it was easier to implement async methods within traits"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Probably way closer to Gleam"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "I think we've all matured a lot and can finally agree that rust's packaging and project management tooling should be more like python's /s"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.21315212500001,
      "arousal": 53.2738095,
      "dominance": 60.11904775,
      "text": "Some things that would take some redesigning but maybe not a Rust 2.0: method macros (macros which can be called like `foo.bar!(baz)` and are declared like `impl Foo { macro_rules! bar( ($baz:ident) => { ... } ) }` ), static analysis up the wazoo to the point of warning the user when functions can be marked `const` or otherwise be evaluated at compile-time but aren't, configureable lazy/eager evaluation, a `comptime` facility (keyword, attribute, who knows) to force functions to be evaluated at compile-time or fail compilation, and better facilities for static prediction and things along the lines of the Power of Ten (aka NASA's rules for space-proof code)"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Packages would be contained into crates rather than the other way round."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.0090702,
      "arousal": 57.256236,
      "dominance": 57.664399,
      "text": "More of a runway look, a smokey eye perhaps?\n\nI dunno. The primary pain points I have are more in the tools, like debugging, making the borrow checker smarter. The sort of practical things I'd like to have are already on the list, like try blocks and some of the if-let improvements.\n\nI will agree on the large number of hard to remember Option/Result methods, which I have to look up every time. But I'd probably still have to if they were named something else.\n\nThe fact that, AFAICT, a module cannot re-export any of its macros to another faux module name like you can do everything else, bugs me. Am I wrong about that?\n\nI would probably have made variable shadowing have to be explicit."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Linear types. Please\n\nhttps://faultlore.com/blah/linear-rust/\n\nhttps://without.boats/blog/changing-the-rules-of-rust/\n\nhttps://blog.yoshuawuyts.com/linearity-and-control/"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "reflection and codegen. I hate proc-macros. I know we can add them in the future, but I think a lot of fundamental rust design might be different if we had them from the outset."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What about inheritance?"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "-1 explicit unwrap for indexing that would be extremely ergonomically painful"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Your ideas for Rust 2.0 are very shallow. Function naming and syntax changes aren't important. Others below have mentioned some worthwhile changes."
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.63492099999999,
      "arousal": 56.859410499999996,
      "dominance": 62.1882085,
      "text": "How much time it take to learn rust"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I want inheritance"
    },
    {
      "post_title": "What would Rust look like if it was re-designed today?",
      "created_utc": 1743980551.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "I haven't thought it through, but `funct[T]()` doesn't seem like it would be unambiguous when parsing. Not having stuff like this in the language is why the turbofish syntax was chosen."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is the New C"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This video affirms my preexisting biases. Therefore it's based."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "My favorite version of this point [comes from a Bryan Cantrill talk](https://youtu.be/HgtRAbE1nBM?t=4126):\n\n> I honestly think Rust is gonna be around forever. I really do. I think this is like the formation of ancient Greek. So I mean there's no rush, you've got thousands of years, you know, take your time."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am new to programming, so I am using rust because if it works, it’s working RIGHT. \n\nIs this assumption wrong?"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "I thought we had all agreed that zig is the new C and Rust is the new C++ :p"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.247166,
      "arousal": 72.675737,
      "dominance": 54.081633,
      "text": "I don't understand this obsession over programming languages. They're just tools, learning a new one isn't a big deal."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m not sure that such videos do not do us a disservice"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.24943329999999,
      "arousal": 51.3151927,
      "dominance": 62.8684807,
      "text": "Hey. I'm trying to learn Rust, but I am more drawn to Golang, and I wish I could say this wasn't the case.\n\nI understand the basics of the borrow checker (certain concepts). I understand about 6 months worth of C. I understand if the compiler doesn't track which functions can mutate data, then you have bugs unless you yourself track things meticulously.   I work in an embedded engineering company and watch the huge review processes involved with C (and why all the coders want to switch to Rust).\n\nMy problem is as soon as you finish the chapters on functions, you start getting into the borrow checker full speed, AND you're now looking at crazy source code markups like some kind of decorators or traits buried into \\`# comments\\`, and all this function definition that's got weird unclosed-single quotes and brackets. \n\nCan anyone tell me what I am referring to, and is there a book or tutorial suite that slows this down at this very critical point? It seems like several concepts get dropped on you at once and there's an expectation of \"Don't try to understand this, we'll explain it in 1/2 to 2 chapters later\".\n\nFor reference I've done most of Rustlings, and like half of the Rustlings book, plus a zillion videos, and I have started Learn Rust In a Month of Lunches.  I\n\n\n\nt seems like one can't ease through the borrow checker docs topic without bringing in traits, generics, and all these abilities that feel overwhelming (at least in piecemeal reading and practice). My problem is I can't see a new concept introduced and let my mind \"ignore this for now; we'll explain it later\". I have to understand in order to store it.\n\n  \nI'm probably complaining. But maybe this comment bears fruit (and I get a pointer to what it is I need to slow-motion through). Cheers all."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.387755,
      "arousal": 52.0975055,
      "dominance": 54.3650795,
      "text": "I like Rust, I honestly do, but it is not the new C, especially when we're talking about dependency management. The \"f it and ship it\" attitude is ABSOLUTELY the state of things with Rust, including in projects where it has no place. Rust projects are obscenely bloated compared to the average C project, and it's not close. I think it's easier to trim the fat than other languages, but you still have to, and with C you don't. There's pros and cons to each (I'm still more of a fan of cargo than someone's makefile) but I don't get why Zig is just being written off here, it's objectively the most like C, for better or for worse."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async framework is not well designed"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 60.544218,
      "dominance": 74.943311,
      "text": "I appreciate the optimism but I'm not sure that Games should be a tick vs. C++ when you consider actual professional games - https://loglog.games/blog/leaving-rust-gamedev/\n\nSpecifically difficulties managing global state, and the lack of [view types](https://smallcultfollowing.com/babysteps/blog/2025/02/25/view-types-redux/) makes it frustrating."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.8435375,
      "arousal": 70.068027,
      "dominance": 56.7460315,
      "text": "One Rust to rule them all. One day those web devs will scream when Rustaceans dominate the world"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "This guys cool but corny as hell"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 61.1678005,
      "dominance": 71.59863949999999,
      "text": "Swift is also becoming a lanague to do it all. I think there's a bright future for both of these languages."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ok but counterpoint: zig"
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.0521545,
      "arousal": 53.061224499999994,
      "dominance": 63.718821,
      "text": "This guy is good at marketing. He literally made the simple sentence \"Rust provides zero cost abstractions\" into a full video with slides and tables comparing arbitrary aspects of arbitrary programming languages, even the history of programming languages used in (without clear criteria) software careers can be related. Whatever he's smoking I will steer clear."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.285714,
      "arousal": 53.968254,
      "dominance": 62.018141,
      "text": "If anything's a successor language to C, it's Zig (with C3 being a runner-up). Rust? No way."
    },
    {
      "post_title": "Rust is the New C",
      "created_utc": 1741801903.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is not over engineered."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust 1.87.0 is out"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Always nice to see more functionality available in const contexts"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.69047625,
      "arousal": 66.24149650000001,
      "dominance": 68.90589575,
      "text": "Happy tenth anniversary for Rust! I have been using Rust from 0.11, circa 2014, and I'm so happy to see it as successful as it is today!\n\nThese days I can in all truthfulness say that not only do I enjoy writing Rust – something that was true already 10 years back, despite frequent frustrations – but I am also productive and feel that the language provides what it set out to provide. That's something that certainly _wasn't_ true 10 years back. A decade of iterative improvement is nothing to sneeze at.\n\nI hope stability without stagnation will continue in the coming decades. May Rust 1.174 in year 2035 be a thing of beauty!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Anonymous pipes are neat!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This didn't make the release notes but they also un-deprecated `std::env::home_dir`!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">impl TryFrom<Vec<u8>> for String\n\none of those things that i occasionally tried to do by default."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.115646,
      "arousal": 75.85034,
      "dominance": 66.099773,
      "text": "[Hello everyone!](https://blog.rust-lang.org/2025/05/15/Rust-1.87.0/party.jpg) \\^.\\^"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Oh, yay, `str::from_utf8` as an associated function! Now you don't have to import `std::str` to use it :)"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If you still had rls-preview for some reason, stable fails to install."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "OsStr::display is great, i really didnt like having to manually go via the ToStr route"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "What possible use case is there for the new [`String::extend_from_within()`](https://doc.rust-lang.org/stable/alloc/string/struct.String.html#method.extend_from_within)? That seems like such an arbitrarily specific behavior."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.9863945,
      "arousal": 74.6598635,
      "dominance": 70.9750565,
      "text": "Happy birthday Rust!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Vec::extract_if is one of the few apis I have been enabling the nightly feature for! My goodness it's been a long ride of watching that tracking issue!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "The unbounded_shr/shl functions are nice. Certainly a handy shorthand to the alternative. It's a shame that fully saturated shifting behavior is UB to begin with, but oh well."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pipes pipes pipes!"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Precise capturing in traits allowed me to remove many `Future` wrappers. I'm not entirely sure it's related, but I was also able to remove an additional layer of boxing in that code since now `.await`ing nested `Future`s inline works just fine there.\n\nOverall the feature saved around 600 lines of code in associated types (and copies of the respective implementations to not leak identities in the public API). The docs got a little easier to follow too 😁"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.9977325,
      "arousal": 45.7482995,
      "dominance": 61.451246999999995,
      "text": "Am I missing something or is the documentation slightly misleading in all the [stabilized `.split_off()`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_off) and derived methods? \n```rust \n\nlet mut slice: &[_] = &['a', 'b', 'c', 'd'];\nlet mut tail = slice.split_off(2..).unwrap();\n\nassert_eq!(slice, &['a', 'b']);\nassert_eq!(tail, &['c', 'd']);\n```\nThe example above(and others like it in the series) is described as “Splitting off the last two elements of a slice” which is true in and only in the case where the slice has 4 elements total, is it not? \n\nDoes range `(2..)` points at the two last elements in this context? \n\nIf not the description should be something like Splitting off from the third element” ?\n\nUpdate: I created an issue and a pull request has been done and pending approval. :)"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As of this release, the updated windows debugger visualizers are distributed with every toolchain install =D it should all Just Work™ now"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "Meh, I could have been there if I had known this beforehand. Happy anniversary all! 🥳🎊"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.77551,
      "arousal": 44.897959,
      "dominance": 55.498866,
      "text": "I wonder if you could use the asm label feature to imitate computed goto’s in Rust. I don’t think so, because it looks like this can only be used for direct jumps. You couldn’t use this to build a jump table of labels for example. "
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.371882,
      "arousal": 53.287982,
      "dominance": 45.351474,
      "text": ">Today's release day happens to fall exactly on the 10 year anniversary of [Rust 1.0](https://blog.rust-lang.org/2015/05/15/Rust-1.0/)!\n\nI'm feeling old all of a sudden."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.564626,
      "arousal": 61.3378685,
      "dominance": 71.9387755,
      "text": "Omg I love the io pipes so much, I've been wishing for that for so long \nNice to see more stuff in const. Overall really cool update"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Awesome 😎"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`unbounded_shl/shr` is exactly the thing I needed recently."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 52.154195,
      "dominance": 62.358277,
      "text": "When they stabilize rustc -Z flag threads? This anyway lock you on nightly build ... -\\_-"
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Congrats team, great work! \n\n\nIt is seriously nice that I can feel comfortable updating my build systems without expecting anything to break. That's not a guarantee for most languages, so I just want to express my appreciation."
    },
    {
      "post_title": "Rust 1.87.0 is out",
      "created_utc": 1747330267.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Which IDE do you use to code in Rust?"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "Im using Visual Studio Code with Rust-analyser and im not happy with it.\n\n**Update: Im planning to switch to CachyOS (an Arch Linux based distro) next week. (Im currently on Windows 11). I think I'll check out RustRover and Zed and use the one that works for me. thanks everyone for your advice.**"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "helix with rust-analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.888889,
      "arousal": 67.573696,
      "dominance": 73.92290249999999,
      "text": "if you want good suggestions tell us why you’re not happy with vsc"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "if you can call it IDE: nvim with rust-analyser  \n  \nI absolutely love it."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix editor. Written in rust and does not need much config. Super fast terminal based editor."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Emacs"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed with rust analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "NVIM is amazing for rust imo"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Spacemacs"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm using Visual Studio Code with Rust-analyser.  I think it's fine."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "[Emacs rustic-mode](https://robert.kra.hn/posts/rust-emacs-setup/)\n\n[Neovim](https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/)\n\n[Helix](https://helix-editor.com/) has a good section on [the Wiki](https://github.com/helix-editor/helix/wiki/Language-Server-Configurations#rust) about how to integrate rust analyzer."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix is the way"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "neovim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.873016,
      "arousal": 68.31065799999999,
      "dominance": 52.0975055,
      "text": "Lapce and Helix are less known than VSCode but have lightning-fast autocompletion :D\n\nI've always wished that once and for all they stop using web technologies for apps and go native, I understand that this increases the complexity but it's worth it for the performance. I hope Zed takes the place of VSCode in the next few years :)"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.81934991666667,
      "arousal": 55.97127750000001,
      "dominance": 63.62433866666667,
      "text": "i use zed full time. \n\nbut looking at your replies in thread, you're going to need to alter something other than editor. effectively all rust editors use rust-analyzer or something based on it. rust-analyzer is also quite fast and efficient, so its not like the problem is rust-analyzer.\n\nthe issue here is either:\n\n* your system is too underpowered\n* your code needs to be broken up\n\nfor the first option: you mentioned CPU \"only sitting at 50%\", in the context of compiling rust code, likely means the rest of your system is too slow. my first guess is your hard drive isn't serving files fast enough. for example, here's what my CPUs look like when clean building a project: [https://imgur.com/a/gKf9pya](https://imgur.com/a/gKf9pya)\n\nfor the second option: if your project is large, splitting it into different crates using a workspace will improve compile times.\n\nhere's a good series of blog posts written by the creator of Rust Analyzer: https://matklad.github.io/2021/09/05/Rust100k.html. of particular note for you is likely the \"fast rust builds\" post linked from that one but they're all good reads.\n\nhappy to help troubleshoot a bit with more specific suggestions if you have any."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "neovim + rust-analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.23356050000001,
      "arousal": 51.133787,
      "dominance": 57.8798185,
      "text": "I haven't switched full time, but Zed is really nice"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "neovim, it is fast."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Neovim. Just too good."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim with rust-analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "emacs"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Zed. I program in Rust and Python."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just Zed"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Emacs with rust-analyzer and some completion package."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If speed is your concern, nothing works faster than neovim. I've been using it for the past year or so and have never run into rust analyzer issues again. The problem is not with rust analyzer but in fact with VSC or RustRover itself. These two editors have a different way of rendering columns which causes the whole delay. Use helix or neovim and see for yourself :))"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.96901000000001,
      "arousal": 52.00302366666667,
      "dominance": 61.451247,
      "text": "I use jetbrains cuz I felt that managing a big project is easier\n- refactoring is very easy and fool proof\n- indexing may take time and once it's done, it comes in handy\n- git integration is far superior then vs code built-in source control\n- everything is at one place like db, source control, PR review and management. It's more designed to focus more on your product and minimize your time setting up your environment \n\nThings I don't like\n- vs code remote functionality is very lite, stable and superior than what jetbrains provide\n- it's very heavy\n\n\nThere is nothing that vs code can't replicate, but jetbrains is a full package."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "switched from VSC to RR recently because RustRover tends to actually show errors in my file even when there's an error elsewhere, and also because it uses far less memory."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I was using RustRover but the AI thing felt very unbaked and yet it is being heavily pushed. I have switched to Windsurf and I don't use the AI stuff only the fancy tab thing."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.28117950000001,
      "arousal": 64.9659865,
      "dominance": 67.517007,
      "text": "Rust Rover is probably the best Rust IDE I’ve used, also on Linux. If you can find a native package though, use it. I’ve had issues with the flatpak saying that there is a second instance started when there isn’t and not opening because of it. Zed is pretty good if you turn the AI suggestions to minimal, otherwise it will just take over and get in your way by populating and making random indents that you don’t want. It tries to predict what you want to do and then do it."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VIM with my big CoC setup."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.1723355,
      "arousal": 49.6031745,
      "dominance": 59.0136055,
      "text": "If you have a decent CPU and 16-32gb of ram then use Rustrover. If you have performance issues on a large project, disable macro expansion in the settings. I find it's the best complete solution. \n\n\nThat said, if you have a lower spec computer you should use vscode or one of the other suggestion. The Jetbrains products are great complete solutions, but they are serious resource hogs. \n\n\nI would not recommend on a lower spec Pc, that's just the downside of the jetbrains suite. "
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GNU Emacs\n\n- rust-ts-mode\n- Eglot\n- flymake"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rustrover isn't bad"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 97.959184,
      "arousal": 72.335601,
      "dominance": 75.056689,
      "text": "Try Rustrover. I used Pycharm a lot în college and loved to use it. It works for Rust just fine"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.596372,
      "arousal": 56.17913849999999,
      "dominance": 76.020408,
      "text": "I'm currently using RustRover. Just be aware that you need an easy downgrade path and DO NOT SET IT TO AUTO UPDATE. About every 2nd or so update breaks my workflow. Other than that, I think it's fairly good, definitely prefer it over VS Code although I think it's not that far ahead."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use RustRover from JetBrains."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576000000001,
      "arousal": 59.0136055,
      "dominance": 62.8117915,
      "text": "Rustrover is pretty nice."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rustrover"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "RustRover. Love JetBrains' IDEs"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Vim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Tried RustRover or Zed?"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim with rust-analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.344671,
      "arousal": 60.544218,
      "dominance": 70.748299,
      "text": "vim + rust-analyzer + ALE\n\nI also know people who use Helix and like it, if you want something a bit easier to configure and use.\n\nNeovim is also an option, I'm just resistant to change lol"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "On a side note, you should consider installing Linux, your older system will perform much better without all the background services eating up RAM and CPU. Throw on a lightweight editor like Zed or Helix (or even VS Code if you prefer), and keep Rusting your way to the top!"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "RustRover with the IdeaVim plugin for vim motions.  \n  \nThe biggest problem I have in RR is the scrolling; it gets a little sluggish in bigger files (this is a recurring theme with IDEs that are written in Java/Kotlin, and it exists in the entire IntelliJ suite). Also I think it leaks memory so I restart it every other day or so"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix! So much faster compared to VSCode 😂"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am using helix."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust analyzer is constantly breaking for me too 🥲"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 28.344671,
      "dominance": 50.680272,
      "text": "Pen and paper."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.984127,
      "arousal": 57.823129,
      "dominance": 66.326531,
      "text": "I've just started with rust, and I'm using gvim with COC.nvim plug-in. Great LSP, works great. \n\nNeovim is a bit more modern, but I don't like LUA (that's a very personal pet peeve of mine), so I stick to the classic version."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Helix. I've also tried Neovim, VsCode with rust analyzer extension and RustRover and they all worked great"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "I use RustRover. Tried switching to VSCode but didn’t like it. The only downside of RR is it is slow on my old 8GB Ram Intel Macbook while VSCode is very responsive. So I bought a newer MacBook with higher RAM because I can’t work with VSCode."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.281179,
      "arousal": 59.637188,
      "dominance": 43.424036,
      "text": "RustRover - Best available for refactoring, introspection, and managing a project holistically. Prone to severe performance problems."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed\n\nEdit: pleased to see many others here using it too!"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.6031746,
      "arousal": 46.4852608,
      "dominance": 55.736961199999996,
      "text": "Every one of these conversations is like:\n\nX is a piece of crap that won't run for five minutes without crashing\nX is really nice, it use it all the time without issues\n\nObviously there are environmental or code content or plugin issues with all of them for this to constantly be the case.\n\nIf you use Rust-analyzer your experience for any IDE will sort of depend on what mood Rust-analyzer is in at the moment when you decide to try. I've had to roll it back various times because the new version just went south in a bad way.\n\nAt the moment, VSC and Rust-analyzer are working quite well for me on Windows. The only thing that's bothering me for the most part is that auto-completion and type info and all that has just stopped working within macros for some reason. That's annoying. It used to work."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VSCode + Rust Analyzer extension. Not sure why I would need anything different. \n\n\nI also use Roo Code with various LLM services to make code modifications.\n\n\nI use the SourceGraph Cody extension for inline code completion."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "Ok i need to hear someones opinion. Ive been using rustrover for a while, but ive noticed that ever since 3 months ago the IDE hangs for a few seconds randomly on large projects"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just try them all. You're switching to linux. Why not just switch to vim or neovim, or one of the many ready to go out of the box distros while you're at it. I mean you're going to arch, you might as well go all the way. You could always just rebuild a copy of vscode when you start drowning."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Windsurf"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "CLion, it’s really great "
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rustup update\ncargo update\n\nAnd update rust analyzer\n\nDisable alternative code gen like cranelift (This is probably the problem )"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.024943,
      "arousal": 64.172336,
      "dominance": 66.666667,
      "text": "Acme from plan9port sometimes. Note: https://github.com/9fans/acme-lsp may be of interest. Or https://github.com/maddyblue/acre, which is written in Rust."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Helix or GNOME Builder depending on my mood"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "vim. Just good old vim."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I prefer to use rust-analyzer cuz that’s by far the most popular choice in the community so it has the most support. \n\nThe editor you pair with it doesn’t really matter that much. Use whatever you like."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use NeoVim🗣️"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Notepad"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix. It's great."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Notepad. "
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 30.952381,
      "arousal": 73.015873,
      "dominance": 54.988662,
      "text": "Vscode and rustrover are the major contenders.\n\nSadly rust is an IDE hostile language, so both are severely degraded and/or break down completely on larger projects."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.356009,
      "arousal": 57.312925,
      "dominance": 62.528345,
      "text": "I'm using Helix and came to this IDE after testing many IDEs. It's a question of taste in my opinion. Try out many IDEs and what you stick with."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ensure you’re closing all extensions except rust analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.72902500000001,
      "arousal": 56.7318595,
      "dominance": 68.197278875,
      "text": "There are unofficial builds for zed on windows and they work great, out of the box there is rust-analyzer (ra) if I recall correctly.\n\nI love how lightweight zed is... unfortunately ra is slow and uses a lot of ram but it is a must on all editors/ide, so ra is the bottleneck always.\n\nYou have to modify the settings.json of zed but it supports git and error lens (the equivalent of that plugin is integrated in zed but if I recall correctly you have to modify the settings by default jt is off)\n\nIn zed there are also inlay hints and other nice features, an integrated terminal, customizable tasks and snippets, it requires some expertise but it is worth it (not that much expertise, if you are already familiar with json files)\n\nAnd since you love it that much there is also AI directly inside of Zed (I have completely disabled it myself but it is on par with whatever you were using elsewhere)\n\nPreviously I was using sublime text (you can tell I love lightweight editors) with ra and codeium and it is basically equal to Zed, git support was non existent without paying and I didn't realise how helpful git is until I've discovered Zed integration which is so easy to use and intuitive.\n\nHaving said all of that Zed is currently probably not production ready and most have different opinions/preferences. Just choose one and start writing instead of procrastinating, it's the ide that chooses the wizard or something like that idk...\n\nedit: If you have a low-spec machine you could perhaps not use ra and compile often to see where there are problems in your code (not ideal if you are learning rust because it takes time to iterate)"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim all the way"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nvim with rust-analyser"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I personnaly use NeoVim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Neovim, but I still have a good amount of improvements for my rust setup, I have a good lsp and tooltips, but little extra tooling (definition jumps, inline documentation and inline clippy errors are displayed, but I dont have a debugger or anything"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Zed is really good for Rust. Would highly recommend it."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.24716550000001,
      "arousal": 53.48639475,
      "dominance": 68.65079375,
      "text": "VS Code really only makes sense if you're combining it with the GitHub Copilot extension and have a .edu email account set up with GitHub (mine's @saddleback.edu for context) which gets you free access — your write times go up sevenfold if you can take advantage of the integrated AI features. Otherwise, definitely second the Helix option."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VSCode is the best"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I just use vscode on windows 10/11"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "IntelliJ!"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.888889,
      "arousal": 67.573696,
      "dominance": 73.92290249999999,
      "text": "I tried RustRover but ultimately settled on Helix with rust-analyzer. I have lots of sometimes weird contexts that I develop around and Helix has been the happy intersection that serves them all the most consistently. And yes, I used vi/vim/nvim for eons but after a multi-year break, Helix was the way to go for me when I started up again. Good luck!"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I personally use Zed. It's incredibly fast, minimal but also has a growing set of features."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "emacs."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "emacs with rust-analyzer"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "On Windows, I use Vscode with rust analyzer and copilot activated \nOn Linux, I use rust rover \n\nI’d suggest you have 32GB ram to run rust on your pc conveniently"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.199546,
      "arousal": 67.460317,
      "dominance": 76.077098,
      "text": "Zed is perfection"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.1700685,
      "arousal": 57.9931975,
      "dominance": 57.76644,
      "text": "I've been using RustRover with Clippy, it can be a bit of whore with RAM, but is very nice to work with."
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Currently using AstroNvim + rustaceanvim plugin.\n\nAbsolute 10/10. (The plugin takes a while to load when opening a project, but still faster than VSC) 🦀"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 82.993197,
      "dominance": 78.571429,
      "text": "Neovim + rust analyzer, chef’s kiss"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "neovim with lazyvim rust extra :)"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nvim nvchad"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "CLion, always"
    },
    {
      "post_title": "Which IDE do you use to code in Rust?",
      "created_utc": 1746298175.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use neovim"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Rust: The wrong people are resigning"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "An initial response from the Rust Project can be found here: https://www.reddit.com/r/rust/comments/13vbd9v/on_the_rustconf_keynote_rust_blog/"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.27513233333333,
      "arousal": 59.863945666666666,
      "dominance": 73.46938766666666,
      "text": "\"It should be possible to be confident and optimistic about the future of the Rust project even without having back channels.\" Hot damn, that spoke my feelings much better that I could myself.\n\nI want to assume good intentions, engage, and be constructive. But as an \"out person\" with zero access to back channels, the last few months have just left me with sub-tweets (or sub-reddit-comments or sub-blog-posts, etc.) as actual sources for being optimistic. The official communication over the last few months has been, at best, lacklustre.\n\nMeanwhile, we can try and ignore/report the trolls and calm the reactionaries but with very little concrete to point to to say \"look at this, this is why we should be optimistic rather than nihilistic\"."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "Why does Rust need an in-group? FFS, just communicate in the open and stop with these back-channels, private chats or whatever else this in-group use for communication.\n\nI personally even think the Zulip stream doesn't help this either. Zulip is already not immediately discoverable but also it makes private messages way too easy. There is none of that on GitHub."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Please don't ruin the only language I actually like."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.5782315,
      "arousal": 63.038549,
      "dominance": 62.95351475,
      "text": "> But, at no point was there anything nearly as malicious as what everyone else, in the “true out” group, speculated.\n\n> ...\n\n> I was able to reassure myself, by checking these private discussion places, that there were good people, fighting for the right thing to be done. That things weren’t irremediably broken. That there was hope for improvement in the near future.\n\nThank you for posting this."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 61.819728,
      "dominance": 64.654195,
      "text": "I've read some of the articles surrounding the issue, but one of JT's arguments made itself abundantly clear: too much diplomacy is standing in the way of accountability.\n\nI'll definitely sound \"tyranical\", but what's really stopping the leadership people who disagree with what's been done from naming and requiring those who must resign? I don't think there's chance for accountability when anonymity protects whoever took the troublesome actions.\n\nGive whoever done this the obligation to explain publicly the reasoning behind their actions. Power requires responsibility, and owning up to mistakes is part of that."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.45427066666667,
      "arousal": 63.303099333333336,
      "dominance": 61.22448933333334,
      "text": "I think that's a really cool move to take, actually. Maybe the in-groups can make a decision to dismantle themselves, make themselves useless? It would certainly be a step.\n\nI have always worked on the assumption that these sorts of issues are caused by well intentioned people doing their best, and falling short. I am glad to have been right on that more than not, and I'm glad you say it's the case here too.\n\nBut you're certainly correct that we shouldn't have to rely on guesses and assumptions in a project that is supposed to be openly developed, and this move seems admirable.\n\nMay I ask, though, what you think the *next* move is? Do you think people are going to own up and commit - genuinely - to doing things more openly?"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.60771,
      "arousal": 59.46712049999999,
      "dominance": 48.8095235,
      "text": "What's funny is that the development of the language , the compiler, cargo and much of the ecosystem is open, in the weeds of RFCs, PRs, etc.  But then the one thing that's done out of sight is in chaos, in part because most folks aren't equipped to work within bureaucratic committees."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873033333334,
      "arousal": 61.451247333333335,
      "dominance": 67.49811000000001,
      "text": "Rust drama... There seems to be a lot of it, but I can never get myself to care about it. The drama never seems to have any technical aspect to it. Nothing about the language or the standard library or anything, just people complaining about process or community or whatever.\n\nI don't get it. The language continues to be awesome and Rust people are very nice."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.5034015,
      "arousal": 65.5612245,
      "dominance": 67.488662,
      "text": "So what's going on now with rust: \n1. Leadership is in turmoil.\n2. Good people are resigning.\n3. From reading around seems some rasicm implied within the team.\n\n\nI have just started learning rust and want to introduce in my organisation.\n\nYet it seems the future is becoming less clear and certain.\n\nWill it become a language that most loved and promised so much and delivered on some, but stopped?\nWill it come under some paywall? Is there a chance for that? \nCan it be that this will somehow sort itself out?\n\nThank you"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.43310650000001,
      "arousal": 52.891156499999994,
      "dominance": 65.1360545,
      "text": "support deserve crawl wrench possessive screw hard-to-find retire tap start\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.633786875,
      "arousal": 53.557256375,
      "dominance": 61.309523625,
      "text": ">Part of me was very disappointed in the enormous waste of time that is the “crablang” fork, and wishes the people involved could have engaged in a constructive manner instead.\n\nI really agree with this statement. \"Just fork it\" is not actually a reasonable solution in open source in most cases, especially for a huge project like Rust."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.47845799999999,
      "arousal": 62.9251705,
      "dominance": 64.6258505,
      "text": "I have no interest in this drama (and the others before it), but I sincerely hope the programming language evolution and adoption doesn't get hampered by it"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hi, is there even discussion somewhere on official Rust platform about this issue or are only discussions here on unofficial subreddit? Thanks."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.4829934,
      "arousal": 58.526077199999996,
      "dominance": 64.1043086,
      "text": "I'm sorry to hear about your falling out with Prime. I enjoy both of your content and while I understand he is very forward with his opinion. I don't see it as him milking the subject. He comes across as very passionate about Rust, in my personal opinion. I hope you can both work things out.\n\nRegarding your statement. I agree wholeheartedly with what you've said. It's a shame that we've gotten to this point. These repeated issues arising in the community has me worried about the language and its future. I really enjoy writing rust, but this sort of stuff really turns me off from working with the language. I wish I could contribute more to the community, but I don't get to pursue Rust as often as I'd like. And I'm certainly not a good programmer compared to most. I honestly don't know what I, or others in a similar position, can do to help.\n\nThanks for being a positive force in the community and all the work you put in to advocate for the language."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "that primeagen call-out is not a good look imo"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.19501149999999,
      "arousal": 59.240363,
      "dominance": 66.439909,
      "text": "Why do people join these inner groups if they don't want to call people out once they get there? Folks sidestepping around a committee goes go back to the dawn of committee making. Paradoxically that's why folks should be on committees, to keep everyone else on the committee in check, not to go soft on decorum and rules because they want committee buds."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.07029475,
      "arousal": 54.6201815,
      "dominance": 57.14285675,
      "text": "That Primeagen name-drop came out of nowhere. It kinda feels hypocritical when the causes of all the drama in Rust are never named and held responsible(at least to the public), but you have no issue blaming a content creator who shares his thoughts to cause harassment. Let alone that  the very name-drop might likely cause people to harass them as well.."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.02441999999999,
      "arousal": 61.42508292307692,
      "dominance": 62.97749846153847,
      "text": "    Except, it’s never just that one person, you know? Otherwise I could burn myself by outing them, and do the whole community a favor.\n    \n    It’s really more like those 4 or 5 persons.\n    \n    And it’s not like they’re really bad people, it’s more like they tend to… use back channels rather than follow process? Or they have too many responsibilities, and are unable to fulfill all of them properly? Or maybe they don’t listen enough?\n\nWell, I dunno, if Amos is going to outgroup-ize himself anyway, why not name the one, or the four or five, people? (It'd be damn sure to stick, in that case.) Being \"really bad people\", whatever cash value that expression has, strikes me as a red herring: using backchannels rather than following the right process and not listening enough are things that make one unfit for a leadership position, and if you have too many responsibilities to fulfill them all properly, many options are open to you beyond fulfilling them improperly, especially when, again, some of those responsibilities involve leadership and high-level decisionmaking.\n\nLots of people who may or may not *actually* know who the proximate cause(s) is or are in this latest episode have declined to name them, on the grounds that the problem is, after all, institutional, and thus not ultimately down to the individual(s) in question. But institutions are made of individuals, and especially when there's no reason to believe that the project/foundation/relevant institution *will* take action (much less take action legible to the public), applying some moral suasion seems like a reasonable choice. Probably no one really wants to render themselves open to retaliation or ostracization by naming whoever was involved, but that's a different class of reason. The institution, or its successor, won't reform itself if there's no pressure on it."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 72.44898,
      "dominance": 68.253968,
      "text": "I'm done. I'll check back in a couple of weeks from now to see if everyone decides to start acting like adults."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So, am I understanding this correctly? All the problems mentioned are communication failures, but instead of debugging the process and fixing it the engineers that established it are throwing shit at the fan?"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "removed"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.405896,
      "arousal": 70.351474,
      "dominance": 56.802721000000005,
      "text": "Journalists exposing corruption should not be considered as public lynching. Moist critical’s sarcasm isn’t treated as putting fuel on fire. Prime shouldn’t be presented as a man with all wrongs and without any merits."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.893424,
      "arousal": 73.84731666666667,
      "dominance": 66.25094466666667,
      "text": "“was not racially motivated, thankfully, but… if that’s what it looks like from the outside, and any form of official communication is still days or weeks away, does it really make a difference?”\n\nYes, it’s literally the whole difference. It changes the entire conversation. If you get a job or don’t get a job it matters if it’s due to merit or race. If you find success, or get picked for a team.\n\nI don’t follow exactly the issue even after having read thousands of words about it but it’s a really bad look to invite someone and then walk back the offer. Sure it isn’t striking up a race war like maybe some would like, but it’s a bad call to take back the invite. The people involved should get their act together and restore the invite and explain wtf happened."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.718317,
      "arousal": 55.80750811111111,
      "dominance": 64.10934755555556,
      "text": "Whatever is taking with Rust these days, please fix it, please. It is really hurting everything about the language and its ecosystem. Maybe it is a problem of growing too fast or something else, I am having serious concerns for its future state and reduced confidence in existing involvement, either through learning, development, or otherwise. This cannot continue to take place as newcomers taking an aim at what it has to offer to only find themselves in doubt as to its future, I am. I have been personally investing my time, resources, and otherwise to promote, support and find meaningful foundation for language to exist within my professional life, without asking anyone for any permission simply because I liked where it was taking me. Now, what takes place here is seriously concerning on many levels and due respect is much needed. People, please there is enough drama in the world, we do no need any more of it here, it poisonous. I ask that whoever is in charge take a stance and work with community to bring it together, not take it apart. Serious corporate sponsors got to have some concerns? If so, please come together without exclusion but with inclusion and respect, clear guardrails, and formitable future, if you still want it to be, otherwise it is starting to be a very concerning pattern that has serious ramifications for the language as a whole."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.17913825,
      "arousal": 59.24036275,
      "dominance": 67.23355975,
      "text": "You're completely wrong. What **ThePrimagen** did was provide his honest POV about the issue, and he was completely respectful while doing so. He should provide constructive feedback, and if people choose to harass...shame on them. He's just divulging & raising awareness about a real problem that could kill Rust adoption. Remain silent, in the face of undesirable  events that go against the community interests, is allowing that to take place. The reasonable stance is to speak up & respectfully provide feedback (exactly what he did)."
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.0725625,
      "arousal": 74.319728,
      "dominance": 62.1882085,
      "text": "Will all this chaos affect the rust Lang in any way?\nI am learning rust and I love it so far. And I want to build side projects using it and also planning to have a career in it too.\n\nWill all this effect a normal developer to do things that they want to do?\n\nThanks"
    },
    {
      "post_title": "Rust: The wrong people are resigning",
      "created_utc": 1685300809.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.749433249999996,
      "arousal": 55.272109,
      "dominance": 55.1870745,
      "text": "I'm not going to share the individual's identity to avoid possible harassment, but they've publicly identified themselves on both Reddit and Mastodon, possibly others. Personally, I think this should be viewed as a learning experience. Yes, the person made a mistake, and they have acknowledged this. I firmly believe that they will not make a similar mistake again. Given that, what would resigning accomplish?\n\nedit: spelling"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust running on every GPU"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Author here, AMA!"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Thank you for your hard work, it's impressive to see Rust running on so many targets!"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 64.512472,
      "dominance": 68.93424,
      "text": "How is performance compared to llvmpipe with wgpu compute shaders? I’m mostly struggling with getting performance there, so if this would improve that piece, that’d be really interesting!"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I once made a raytracer and converted my raytracing logic from multithreadded cpu to GPU compute and got a 100x speedup\n\nEver since then I have been asking why we don't use GPUs more for compute and running normal programs\n\nI guess this is a step in that direction"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "This is not just a great article about gpu programming with rust. It also is a great article that concisely conveys a ton of the reasons I love rust in general, I mean most of those points are selling points even in cpu land. "
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amazing"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great stuff!"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[https://github.com/RustNSparks/rocm-rs](https://github.com/RustNSparks/rocm-rs)\n\nif you want support for rocm"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Very hard to read (probably because I have no GPU coding experience). Do you have any recommendations for reading?"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Does it work with shared memory programming models such as with ROCm on the MI300A and strix Halo? Or would you still need to manually transfer memory on those devices."
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.77097499999999,
      "arousal": 57.301587399999995,
      "dominance": 62.8798186,
      "text": "This is a very high quality post. Thank you for your work!\n\nOne thing that boggles my mind is how can you prevent regressions while supporting so many fragmented targets?\nI get that rust helps a lot with code re-use and compile-time checks, but stuff like this is pretty hard to test"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.1927438,
      "arousal": 53.3333334,
      "dominance": 64.1723354,
      "text": "~~now we just need it as a simple library that makes it dumb easy to do~~ Great work, I've used rust-gpu in the past for some basic compute demos and was really impressed with this. Hope this opens the door to some nice compute libraries with opencl like ease of use alternative that will actually work everywhere"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.54976066666667,
      "arousal": 56.66414711111111,
      "dominance": 64.91559588888889,
      "text": "Problem is that classical languages like C/C++/Rust do not translate well to GPU architecture. To get good performance you need to use only subset - so all you get is just syntax sugar.\n\nFor example: slang is more fancy than GLSL but some slang features generate very slow code. programmer have choice - use language without known slow constructs or use more fancy language but you need to know what to avoid in performance critical parts. I still think that slang is good - getting adopted by major developers. easy to hire people.\n\nusers want CPU like features and not willing to adapt to write code in different style. Some CPU features like memory sharing are implemented in driver but at really huge performance loss. Question is why bother with implementing something in GPU driver (because programmers wants it) if it does 30x performance drop. Another problem are GPU flushes - nvidia recommends to stay with 15 or less per frame => Expect that your GPU code will have some latency, not suitable for short tasks.\n\nNot optimal GPU code is still better than no GPU code. I fully support idea running stuff on GPU just to use otherwise idle GPU."
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Looks amazing. Trying it out this weekend."
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "i can port inference code with this, excellent"
    },
    {
      "post_title": "Rust running on every GPU",
      "created_utc": 1753468170.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.596372,
      "arousal": 45.351474,
      "dominance": 58.049887,
      "text": "Why no opencl :(? If rust ever get's serious support for AD I might consider this."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 69.84126950000001,
      "arousal": 54.421769,
      "dominance": 71.371882,
      "text": "Rust is easy? Go is… hard?"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "\nI’ve written a new blog post outlining my thoughts about Rust being easier to use than Go. I hope you enjoy the read!\n\n"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.84126950000001,
      "arousal": 54.421769,
      "dominance": 71.371882,
      "text": "Go is simple. Simple ≠ easy. Brainfuck is simple, and therefore very hard.\n\nComplexity doesn't always make a language harder to use. Sometimes it does, but other times it allows features which are more understandable than composing the simple instructions."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "For fun, post this in the go subreddit and see what you get from each response pool."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.802721,
      "arousal": 59.070295,
      "dominance": 74.4897955,
      "text": "Why is the Brainfuck programming language always out of conversation, why can't the people see how easy and simple that language is, this saddens me."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.526077,
      "arousal": 63.208617,
      "dominance": 62.868481,
      "text": "I had a very similar experience when I moved from Go to Rust. After the initial learning curve, I find it far easier to turn my ideas into reality using Rust.\n\nThat being said, I find Go far easier to *read*. I can clone pretty much any Go repository and understand the codebase well enough to contribute within a few minutes. Usage of the features that make Rust easier to write also tends to look like magic to anyone unfamiliar with a particular codebase - past a certain level of complexity, every Rust project essentially becomes a DSL thanks to default implementations, macros, async runtimes, unsafe code, etc. That's not unique to Rust though... If anything, I'd say Go is uniquely readable, and you pay for that with how hard it can be to write."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.86772483333333,
      "arousal": 60.166289000000006,
      "dominance": 66.91232016666667,
      "text": "If you have a team of people who are totally comfortable with both Go and Rust, I think it's interesting to ask which will be easier to use in the long run. I have my opinions, and it probably depends on the project. But in most cases the biggest difference is that it's a lot easier to get a team comfortable with Go than with Rust. Experienced programmers can pick up most of Go in a weekend, with minimal support. Rust takes somewhere between weeks and years to get comfortable, depending on how much support/aptitude/whatever you have. *Many* people bounce off of it entirely. The original posts does mention this:\n\n> Before I get into this part, you have to be aware that I have used Rust as exclusively as I can for a while now.\n\nThat's important context, and it's not where most people are standing (or where they imagine their future hires will be standing) when they ask the same questions."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Maybe it’s me but when an article starts with an AI junk image I’m just going to assume the whole thing is AI slop"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.30839,
      "arousal": 57.1995465,
      "dominance": 59.5238095,
      "text": "I'm very frustrated with Go. It just doesn't have enough features and asks too much of its users. Besides the things you mention... most of its math library only works with float64, which is frustrating.\n\nAlso the ways in which Go tries to make things implicit/easy, I feel like they're making footguns, like with interface implementations working implicitly instead of how Rust traits must explicitly implement a specific trait."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Much of Go's simplicity comes from benefit of automatic memory management. Which is just not applicable to Rust or any system programming language. Technically yes you can make a GC like JVM itself is a C++ program but what's the point unless your project is making a GC language"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.555555500000004,
      "arousal": 53.004535000000004,
      "dominance": 51.814059,
      "text": "Could you show some real practice in your day to day works example instead of just some dummy foo bar code"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "It’s hard to explain, in rust at first is hard and once you get the hang of it, it becomes easier. Unlike most languages in my experience like JavaScript or C# it got harder - it’s something you can’t explain unless you experience it yourself but of course you can’t tell anybody that because at first glance rust syntax looks like a complete brainfuck - \n\nAnd this is why if I can do it in rust, I’m gonna do it in rust. Front/backend, system, etc \n\nI thoroughly enjoy writing rust code, something I was never able to say about any other language\n\nPraise the holy crab🦀"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.79818616666667,
      "arousal": 65.68405133333333,
      "dominance": 67.195767,
      "text": "The issues I have with Go and Rust are completely different from each other but both prevent me from liking them. The fact is that for most of the use cases I have I was able to produce solution in Go really quickly. Those include some API glues, operators for apps running in k8s, even some backend game servers to handle scheduling and some logic for web based game.\n\nThe biggest difference is that when I entered Rust it took me a while to learn it and I loved it, but I wasn't able to create things that quickly because of the amount of code I had to write, also I kept refactoring when new ideas came. With Go the start was really quick but because of the language features and design decisions I had to basically dumb down my brain to not really think about complex constructs, which I didn't like but I was writing functioning code in no time and it was kinda concise and simple to read, even though 1/3 of it is if err != nil.\n\nSo from the position of DevOps engineer I tend to go back to go more often since its simplicity doesn't let me overengineer the tasks I have."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Go is like English and Rust is like Chinese, think about it"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.0476195,
      "arousal": 55.045351499999995,
      "dominance": 63.77551,
      "text": "This article is a good start, but golang has so many other dark areas that make it much more complicated. Your examples are a great start, but I think there are so many others. Some ideas over on my bluesky article review: [https://bsky.app/profile/did:plc:wjyyltkrn7ppnwdtagyvpszk/post/3lmrulyyxzs2x](https://bsky.app/profile/did:plc:wjyyltkrn7ppnwdtagyvpszk/post/3lmrulyyxzs2x)"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.7165535,
      "arousal": 58.786848,
      "dominance": 47.5623585,
      "text": "I mean I get the sentiment, I'd take Rust any day before I reach for Go but the title is just a lie and  pure clickbait."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.37339366666667,
      "arousal": 53.02343133333333,
      "dominance": 62.50944833333333,
      "text": "I've enjoyed Golang quite a bit. But didn't enjoy as much using the serializer and deseriazer structs and error handling is to verbose; it's a great language for building microservices. \n\nBut there is a lot of unconventional things. Like declaring methods with uppercase to make public scope, really made question my life.\n\nOne thing I've started appreciating Rust is the error handling. Both rust and golang does exhaustive error matching, but i feel like Rust match pattern feels more natural."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 58.2482995,
      "dominance": 64.22902500000001,
      "text": "Nice article. I have a couple thoughts. Specifically on your opinion of go and it’s “shortcomings”. \n\nI don’t agree that Go’s error handling leads to bloated code and bad maintainability. Ok maybe more LOCs but worse maintainability is just not true. As a maintainer you see exactly how every error is handled. It can be wrapped, returned directly, invoke a logger in the if err block. This leads to easier to grok code than `?`s littered everywhere. My opinion. \n\nIf you actually maintaining large codebases, and not cranking out project repos as fast as possible like you seem to allude to in your article, Go’s verbosity and “simplicity” makes it easier to read and thus easier to maintain. \n\nJust because a language lets you write code _faster_ and with less LOCs doesn’t necessarily make it a better language. \n\nTo use your own point against you, Go has implicit interfaces. There’s no `impl Foo for MyType` block. The compiler just _knows_ you satisfy the `Foo` interface. Is that not boilerplate code? Why aren’t you against that in Rust?\n\nAll in all it was an interesting article, I didn’t agree with too much and think some of Go’s design decisions mentioned are incorrectly labeled as “limitations”. But, I can appreciate the effort to write such an article and commend you for that."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.357709875,
      "arousal": 60.189909375,
      "dominance": 67.00680275,
      "text": "I am mostly a Java dev and learning Rust with a few projects. I had a bit of experience with Go in the past and I have to admit that the error handling is one of the worst choices of the language. Better than throwing a callstack everywhere, I like the idea of remind the developer to handle errors, but it really bloats all the source code with that nil check that is awful.\n\nI am really liking Rust, trying to learn a bit more to not fight the borrow checker. I think that Go is easier to pick up and just do things without learning anything else, that maybe is an advantage because companies don't want or have time to let their developers learn a new language with features that they never saw in any other language.\n\nThe article was a good read. Do you find that coming with a lot of Rust background, maybe your approach was a little biased? That you were trying to do things in a Rust way while maybe a Go dev could just take a different method altogether, avoiding the limitations you mentioned?"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is that thumbnail ai?"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.39380166666668,
      "arousal": 53.212396333333324,
      "dominance": 74.03628099999999,
      "text": "Easy vs hard is a very subjective thing.\n\nTo someone just starting programming, go is the easiest thing, when they don't need to think about generics, algebraic enums, traits. They don't think about modelling their errors, and just have one error type.\n\nTo someone who is a veteran, and unable to express his ideas on other programming languages, facing constraints Rust would be easy and just make sense."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.68934250000001,
      "arousal": 59.0702945,
      "dominance": 66.0430835,
      "text": "The enums with associated data are genuinely game-changing. The ability to model domain states with proper type safety and pattern matching leads to more expressive, maintainable code than Go's workarounds. And traits with default implementations provide an elegant balance between code reuse and flexibility that Go's interfaces can't match."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.98752825,
      "arousal": 56.3492065,
      "dominance": 69.33106575,
      "text": "Go is easy to learn, hard to master in my opinion."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.4784585,
      "arousal": 55.612245,
      "dominance": 67.9705215,
      "text": "These are good points, but I think it becomes way more noticeable when working with mutexs etc. - Rust's RAII guards there are really nice.\n\nIt's much easier to start with async in Go with Goroutines though."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.73696150000001,
      "arousal": 63.2369615,
      "dominance": 60.48752825,
      "text": "Nice article. But I don't like your conclusion too much eventhough it is not wrong. But as you stated go was build simplistic therefore -- not really understandable -- is missing certain features. It is extremely easy to read, rust imho is way harder to read and understand. I prefer rust btw. but regularly coding in go and rust. Interface are a pain in the butt I hate them it feels like they only added it to be there. And as far as I could see it is only duck-typing."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I forgot who said it but \"liberties constrain. Constraints liberate\""
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async and lifetimes kill Rust simplicity unfortunately. There Go is much simpler (GC and goroutines). But other than that Rust is much simpler than almost any language, that's why I even use it for scripting."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm glad you reposted with the fixed title. Looks like it worked out for ya!"
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Simple or hard FOR WHAT PURPOSE?\n\nIf I'm doing middleware type stuff (read: backend in the modern enterprise) I'm using Go/\n\nIf I'm working in a scenario where I want tightly control resources (read: performance oriented stuff) and I can get away from C, I'll pick Rust."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Couldnt you use embedding for the default implementations in golang?\n\nThats somewhat the purpose of it to put common stuff there."
    },
    {
      "post_title": "Rust is easy? Go is… hard?",
      "created_utc": 1744584215.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.543084,
      "arousal": 54.42176875,
      "dominance": 70.43650775,
      "text": "There is no such thing as an easy programming language, especially when your dealing with something that has contraints like go and rust. This circle jerk needs to end. Go is good for some stuff, and rust is good for other stuff, and in a lot of cases go and rust could be used interchangeably so just pick the language you like and write amazing code."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Announcing Rust 1.82.0 | Rust Blog"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">With the semantics for NaN values settled, this release also permits the use of floating-point operations in `const fn`\n\n🥳"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.82086166666666,
      "arousal": 48.11035533333333,
      "dominance": 58.087679333333334,
      "text": "> It will also be particularly useful in combination with the never type !, although that type is still unstable at this time.\n\nAny moment now everybody!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, this is a great update. The tier upgrade for Apple Silicon is very much appreciated."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Feature packed! Lots of nice things for unsafe code. The raw place reference syntax is nice compared to having to use macros."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.895691799999994,
      "arousal": 56.213152,
      "dominance": 49.727891,
      "text": ">can produce a different result when executed at compile-time vs at run-time. This is not a bug, and code must not rely on a const fn always producing the exact same result.\n\nInteresting, there's been a lot of debate in C++ land about a similar situation around constexpr, and giving up this property in general, so its interesting to see that Rust has decided its alright. There's been a lot of discussion around floats on this especially, because even beyond the current issue, your host architecture which performs the compile time evaluation, and your client architecture which executes it, may not implement floats in the same way. I believe clang may emulate the client architecture (?), but there's no guarantee's in the spec afaik, and plenty of ways to get divergence\n\nThat said, I don't know if I've *ever* relied on the signedness of NaNs personally, and the only use case I've ever encountered for NaN bits is NaN packing pointers/etc in scripting languages which is just treating the bits as dead space anyway. Has anyone ever actually used this for anything other than that use case?"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Wow, so much stuff. So nice to see"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.5498865,
      "arousal": 47.98752825,
      "dominance": 59.18367325,
      "text": "Wow, TIL about [the possibility of UB](https://github.com/rust-lang/rust/issues/28179) if `no_mange` hits a name collision.\n\n~~I have to ask though: why aren't these functions required to be unsafe? If I'm calling a function that could have implications on my program's final compilation output instead of its runtime behavior, I think that's something that the caller should be aware of in some manner. Forcing the function to be `unsafe` would be one way of doing that.~~ ([see this comment for rationale for striking out this text](https://www.reddit.com/r/rust/comments/1g5vsb5/announcing_rust_1820_rust_blog/lseo8t4/) \\*)\n\nIt's a bit of a stretch because it would require:\n\n1. ~~A crate you legitimately want to use to export an interesting function with `#[no_mange]`~~ this isn't even required, see my own reply to this comment.\n2. A compromised crate in your dependency graph\n\nBut it seems like this could be abused for a sneaky bugdoor. If you can achieve #2 then you can definitely do worse things, so this is not the end of the world.\n\n~~If it's deeper in the code as well and not in a public API I guess I'd never notice it. Just feels weird for some reason, but maybe that's from my lack of sleep.~~"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I went looking for `is_none_or` just yesterday and was disappointed it wasn't available, and now, just one day later it is!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "> Patterns which match empty (a.k.a. uninhabited) types by value can now be omitted:\n\nOoooh that's a really nice one for the few `Result<..., Infaillible>` out there, and the lots of future ones I expect from this being enabled.\n\nLots of stuff for the raw / unsafe crowd too."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Huge release. Lots of good stuff here."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 66.439909,
      "dominance": 55.442177,
      "text": "This is a much bigger update than I was expecting! It has a little bit of everything!\n\nMy favorite one, however, has to be `Box::new_uninit`. Sometimes I want a buffer without going through a Vector or doing the allocation myself, and this is exactly what the doctor ordered!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yay for more MaybeInit stabilization!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.344671500000004,
      "arousal": 57.31292499999999,
      "dominance": 57.14285699999999,
      "text": "> There are some cases where empty patterns must still be written. For reasons related to uninitialized values and unsafe code, omitting patterns is not allowed if the empty type is accessed through a reference, pointer, or union field\n\n\nAnybody have a link to discussion explaining this? I'm confused as to how a reference could point to some invalid type. "
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> Omitting empty types in pattern matching\n\nnnnnnnnice."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 34.580499,
      "arousal": 61.564626,
      "dominance": 46.938776,
      "text": "Scrolling code blocks sideways is broken in Chrome on Android."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "\"This is not a bug, and code must not rely on a `const fn` always producing the exact same result.\"\n\nIf I understand correctly, it's because \\`const fn\\` really just means \"Known and available at compile time.\" Right? A bit of an unfortunate term given the meaning in C++."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.092971,
      "arousal": 64.965986,
      "dominance": 55.328798,
      "text": "So glad to see const asm hit stable!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.29365075,
      "arousal": 67.14852625,
      "dominance": 77.40929700000001,
      "text": "> We can't remove the + 'cx, since the lifetime is used in the hidden type and so must be captured. Neither can we add a bound of 'a: 'cx, since these lifetimes are not actually related and it won't in general be true that 'a outlives 'cx. If we write + use<'cx, 'a> instead, however, this will work and have the correct bounds.\n\nThis doesn't explain why having the `+ 'cx` bound would over-restrict the return type. It says this causes, and shows an example with it, but doesn't actually show the problem. could someone help me understand what would happen in this case?\n\n> There are some limitations to what we're stabilizing today. The use<..> syntax cannot currently appear within traits or within trait impls\n\nLove seeing traits always be late to get the features (I do understand that there are differences with parameter capturing and that it is a different problem to solve)\n\n> This is because in the new edition, opaque types will automatically capture all lifetime parameters in scope. This is a better default, and we've seen a lot of evidence about how this cleans up code. In Rust 2024, use<..> syntax will serve as an important way of opting-out of that default.\n\nI feel this \"default\" only obfuscates what's actually going on, no `use<..>` to me would read as it not _using_ any parameters. Are the number of captured parameters so commonly large to warrant wanting to imply it?\n\nI don't believe \"explicit is better than implicit\" is always true, but in this case i think it applies. Imagine getting an error about the opaque type implicitly capturing a parameter it shouldn't/doesn't, and having to go back to add the `use<..>` syntax that:\n\n> the examples above will \"just work\" without needing use<..> syntax (or any tricks)\n\n... love the quotes around \"just work\" lol\n\n> a proper native syntax for this operation: `addr_of!(expr)` becomes `&raw const expr`, and `addr_of_mut!(expr)` becomes `&raw mut expr`\n\nwhy the `const`?? Why not make it paralel the `&/&mut` syntax? i thought we were going with \"immutable by default\" in this language, and immutable here sure sounds like a reasonable default"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.7845805,
      "arousal": 46.54195,
      "dominance": 58.9002265,
      "text": "While raw pointer are nice by themselves but they should not allow implicit calls to deref and deref\\_mut.  \n[https://github.com/rust-lang/rust/issues/131847](https://github.com/rust-lang/rust/issues/131847)\n\nAt this moment, they are footgun because it looks like we are doing everything correctky while we are not."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this is a huge release, exciting!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "When can/should externs be marked `safe`? When we know the Rust data model couldn't be compromised? Would there be any performance difference (I assume not)?"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Can someone explain this to me? \n\n> Precise capturing use<..> syntax"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "There is a syntax inflation that I'm not sure I like. The `use` thing makes me feel like we patch a lot of things which weren't thought through with syntax additions."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m learning Rust intermittently, do someone has a link that sum up all the most interesting new features that appeared during the last months ?"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Guys, is it good to have constant updates? Things change a lot"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703,
      "arousal": 58.61678,
      "dominance": 52.154195,
      "text": "Awesome news!!"
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 34.807256,
      "arousal": 63.718821,
      "dominance": 41.269841,
      "text": "Was it the reddit post that was delayed or the release/blog post? Should've came out yesterday."
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> This is not a bug, and code must not rely on a const fn always producing the exact same result.\n\nDoesn't this sort of nondeterminism in const contexts allow you to subvert type safety? I would expect these operations to require an unsafe block due to that.\n\nEDIT: From reading the RFC (https://github.com/rust-lang/rfcs/blob/master/text/3514-float-semantics.md) I think the following guarantee is sufficient to preserve type safety even in the presence of \"nondeterministic\" behavior: \"The only guarantee the type system needs is that evaluating some_crate::SOME_CONST will produce consistent results if evaluation is repeated in different compilation units, and so that is all we guarantee.\""
    },
    {
      "post_title": "Announcing Rust 1.82.0 | Rust Blog",
      "created_utc": 1729184606.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.315193,
      "arousal": 53.174603000000005,
      "dominance": 61.791382999999996,
      "text": "Awesome release!  \nI do wonder why `&raw const | mut` is used for pointers and not `*const | mut`? That would have a nice equivalence with `& | mut` and is like casting a pointer from a reference without the intermediate step:\n\n`*mut x`\n\ninstead of:  \n`&mut x as *mut _`"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 58.390023,
      "arousal": 45.69161,
      "dominance": 54.988662,
      "text": "I turn 41 next month....learning Rust as a 1st language."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "selftext",
      "sentiment": "negative",
      "pleasure": 36.621315,
      "arousal": 62.414966,
      "dominance": 46.598639500000004,
      "text": "I've been debating over which language to code my application in and it always comes back to Rust.  I figure, why start at Python when I know I will eventually want the code brought into Rust.     \n  \n\\*I'm only posting this so other older noobs like me don't feel alone"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I learned rust at 42, which was about 7 years ago. \n\nIf I can do it you can too.\n\nThe only limit is yourself!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "Best of luck. I can't say I agree with your approach to learning Rust as your first language but then again who gives a damn. Have fun!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "What are you building?"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "My advice is if you *really* can’t understand it, that’s not because you can’t figure out programming as a whole - don’t give up. Try another language if you need to! Rust is a little more complicated than some, but also encourages some of the best practices and makes it really clear what is happening. It’s a great language to learn."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Go for it."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.91403818181817,
      "arousal": 61.83261190909091,
      "dominance": 63.06947027272727,
      "text": "I agree with Rust as a first language and I'll die on that hill.   \n  \nMy first language was C++ when everybody screamed I should start with Basic or Java. And they said I was too young (a mere teenager). While I was awful at math, I turned my school into a 3D game within a year.\n\nThe idea that Rust is hard to start with is blown out of proportion. It's simply because the on-ramp into the language is the Rust book, which references many other languages and assumes its talking to expert coders--as the foreword says. \n\nAll we need is better on-ramps and tutorials for people new to coding. A lot of what makes Rust \"hard\" is habits from previous languages that must be unlearned. For instance, IMPLs and STRUCTs are only hard if you're used to classes. Defining every type is only hard when you're used to not having to define anything (and getting in trouble for it when writing anything complex).\n\nI wish I could've started with Rust and programmed in the borrower-way in any language after."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.20037109090909,
      "arousal": 65.08967209090909,
      "dominance": 66.45021645454545,
      "text": "Don't get me wrong, Rust can be a fun language to learn.  However, I think that a lot of the joy in Rust comes from understanding the \"why\" behind ownership/borrowing rules in the language.  There are plenty of videos on this subject, and from what I've seen many agree with this sentiment.\n\nIf you are looking to learn more about how software interacts with the operating system/hardware, consider writing a couple of programs in C first.  This will teach you about memory and bugs that can arise from managing it, and is also the language which lots of imperative languages base their syntax off of (to some degree or another).\n\nIf you are looking to learn how to program a computer as a complete beginner, prefer Python or JavaScript.  These languages expedite the process of writing code, and introduce you to some basic concepts that are nearly universal among all languages.\n\nI would not recommend Rust to a complete beginner, but as I myself would probably ignore my own advice and do it anyways, you should learn it if that is what you want to do!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "One of us."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.6984125,
      "arousal": 66.32653049999999,
      "dominance": 78.2312925,
      "text": "I'm 51 (embedded sw engineer by trade) , and Rust made it fun to program again! And easy to leave for a few days, come back just where I left off, and do an hour or two before leaving it again."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "you got this 🫡"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.55102,
      "arousal": 64.05895699999999,
      "dominance": 57.3129255,
      "text": "why do you want to start on hard mode? Start with python. Rust will be here for you later."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check back in six months"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 58.049887,
      "dominance": 66.099773,
      "text": "It's never too late to start, though Rust as a first language will present challenges. You don't have to go the usual route, however - my first language was Lisp. First language writing something professional was Java, back in the days when Javabeans had first come out."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.37490533333334,
      "arousal": 53.59032466666667,
      "dominance": 50.793651000000004,
      "text": "go for it, im learning rust as my first \"proper\" language as well, is it a slow learning? hell yes, there are many things which i get stuck at and i have to google the answer as to why it is the way it is.... but eh, i like it..."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Learn C first IMO. Rust is very weird and doesn’t translate well to learning other languages"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Awesome!  I’m taking it on at age 61.  Never too late!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.88662149999999,
      "arousal": 55.7256235,
      "dominance": 60.3741495,
      "text": "A young person like yourself should have no difficulties."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.011337999999995,
      "arousal": 71.371882,
      "dominance": 51.020408,
      "text": "I sometimes wonder, would Rust async be such a nightmare if I had never learned other languages first.,"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.26368657142858,
      "arousal": 62.277291999999996,
      "dominance": 67.21736314285714,
      "text": "Hey mate, don’t worry about other people commenting on which language should be your first. I learnt C++ first and it set me up for all other programming languages. Rust will do the same. Also, the most important thing is you have fun learning and follow that interest of yours. If you want to code in rust, pick rust. Just one thing, it takes time to learn any new skill particularly a programming language. Good luck!\n\nAlso the rust book is great"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "The more I work with Rust the more I feel that it is a great first language. In fact, getting comfortable and proficient with the ownership and borrowing rules, will go a long way to understanding pointers in languages like c or c++.  The thing I struggled with the most is Rust is trying to trick it to behave like other languages. Without the baggage and expectations from other languages Rust will be a lot easier to learn."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.553288,
      "arousal": 68.707483,
      "dominance": 61.791382999999996,
      "text": "I learnt rust at the age of 41, but it was something like my 20th or 30th language (depending on how you count languages). That was a couple of years ago now. I maintain a rust crate that just hit 8M downloads today. Rust is great. Have a blast and enjoy the journey."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is amazing and the more languages you know the better!\n\n*I would highly recommend C first (even for just a few weeks) so you can understand the problems that Rust solves*"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You are inspiring"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.58294107692308,
      "arousal": 57.32600730769231,
      "dominance": 68.19291807692308,
      "text": "I'm in a similar boat, in some ways. Rust has been on my scope of 'wanting to learn' for a while, and I've tried. I've watched 13 hour intro videos, were they usually go though The Book. \n\nI have seen Rust described as this: Rust Syntax - Borrow Checker learning curve\n\nAdvanced Rust and Idioms as the next learning curve\n\nAsync as the circle that never ends. \n\nI think there is a skill to using Rust in it's most proficient manner, and like Cpp it looks like Magic when you read the code. \n\nHowever to get your boots on the ground you can learn enough Rust to get projects working. \n\nThe fact is that Rust has been jammed into everything, by very skillful people, and when they say Rust On Everything, they mean it. \n\nI think Rust is the Future, or a fork of it.  Rust the language is very good overall, the Community has an Ego, where if you ask the wrong question or suggest another language (like Zig/Odin/Go) you will be punished for it (I know)\n\nSo where do I suggest you start? \n\n# Learn Rust Programming - Complete Course 🦀\n\n13 hours going though the Exercises on Youtube\n\n# Learn Rust with Rustlings 5.2.1 (No C required)\n\n3 hours of Learning on youtube\n\n  \nI found these to be very good for beginners\n\nI'm looking for more info to make to learn better, maybe a course\n\nGood Luck"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.03099033333334,
      "arousal": 52.305366666666664,
      "dominance": 67.913832,
      "text": "You want to build planet scale systems with millions of concurrent requests or users and have a good night sleep without worrying about server crashes midnight? Only 2 languages can offer that out of the box or design:\nRust & Erlang/Elixir \n\nYou can take it to next level combining Rust & Elixir using Rustler library, a match made in heaven :)"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.88435357142857,
      "arousal": 65.84062200000001,
      "dominance": 60.73858128571429,
      "text": "I'm an amateur, and *theoretically* I like Rust a lot. \n\nFor many practical applications, Python is better. Want to automate stuff in windows? Do some quick calculations? Analyze data? Play around, with minimal frustration? Python does it better. You don't ever need to port that stuff into Rust.\n\nRust is great for learning deep topics in software engineering and for making high quality, fast, reliable programs. It's not as hard as people make it out to be, although the documentation isn't super accessible to a complete novice. It seems easier to do basic concurrency / parallelism than Python, which is a little surprising."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.64625865000001,
      "arousal": 57.56235845,
      "dominance": 65.1190477,
      "text": "The various suggestions that Rust is a worse first language than others is super frustrating. We just going to take as a given the language is hard?\n\nRust has better resources than almost any other language. In that I mean, if you pick up a random popular Rust book, it is likely to be good. There are at least 4 getting started level books (The Book, Zero to Production in Rust, the OReilly Programming Rust Book, Rust in Action) that can get you up and running and they're all good. Let me tell you finding a good C++ book is as hard as learning the language, then btw you learn a bunch of C++ then try to look at some open source repo and they've done it completely differently because idioms in that language have changed really dramatically over the years.\n\nThe difficulty is different. Rust asks that you invest time getting over the wall. Python may let you learn to do basic things quickly but it does so by hiding an awful lot and that's not inherently bad, it's different. And it's debatable whether that's good or not.\n\nLong enough ago that this was still a thing, I remember photography classes. Anyone else take one? Well they can go two ways. Some classes asked you to get a very modern camera that hides some details, and some ask you to get a 4x5 rail camera. Turns out, both approaches have merit.\n\nI wish folks would consider reframing this because this reputation that Rust has is bad. The main thing keeping folks from being successful writing Rust is that they perceive that it is hard to learn, not that it is hard to learn."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.7256235,
      "arousal": 62.377173,
      "dominance": 69.82237333333333,
      "text": "Rust is the coolest language currently. Sequence, Selection and Repetition is all languages. Have fun man! Go would be easier to start with. It was designed to be simple and powerful. And what you learn will be easily translated. These days you need to understand Context, Model and Prompt. Your friendly AI will teach you the rest."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do it."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thanks OP. I'm in my 40s and want to switch language from java despite the lack of opportunities if I don't have prior experience.\n\nActually I'd happily do C programming the rest of my career of I'd be considered"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "Best of luck! Feel free to DM me if you have questions 👍"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.49886649999999,
      "arousal": 60.487528499999996,
      "dominance": 67.687075,
      "text": "I took the same path man. Rust is great to teach you many things about computers and programming in general. BUT it can be very frustrating in terms of being productive. Good luck mate."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.3922905,
      "arousal": 60.090703,
      "dominance": 62.414966,
      "text": "The good news is it sounds like you stopped debating and just picked one. Rust has its way of doing things but basic types and control flow are universal concepts across most multi-paradigm languages. You’re basically splitting hairs for learning unless you’re using the language for its specific advantages."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hey who you calling old?  :D"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You’ve got this."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Then how are you speaking English then 🤔/s"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "I would say that’s too much too soon but certainly not impossible. Good luck…"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Let er rip dude you have absolutely nothing to lose!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.0430842,
      "arousal": 62.494331,
      "dominance": 64.8299318,
      "text": "I learned QBASIC as a middle-schooler. Eventually I find myself in front-end mud 20 years later. I went back and decided I want to learn Rust because I thought I was smart. I was overwhelmed and chose to learn C so I could understand whatever Rust was trying to save me from. \n\nProbably the most unlikely programming progression possible"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.863945333333334,
      "arousal": 56.689342333333336,
      "dominance": 59.10808766666667,
      "text": "Rust and Python were built with different purposes in mind.  They have different strengths and excel at different tasks.  There's plenty of overlap in functionality, and learning what language to use for a given project is part of the process."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.58276633333334,
      "arousal": 58.654573,
      "dominance": 63.000756,
      "text": "That's the spirit! It's exactly what I did at the age of 40. I wrote about the experience [here](https://github.com/Dhghomon/programming_at_40). Since then I've been working only at places with Rust, once as a developer for a Korean startup, then as documentation and devrel at EdgeDB which was moving steadily towards Rust and now in the same sort of role at SurrealDB which is built from the ground up in Rust. I make the odd PR whenever I see something I can fix or improve and write a ton of sample code to show others how to use the database using the Rust SDK."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.54724133333334,
      "arousal": 58.862433833333334,
      "dominance": 59.44822366666667,
      "text": "Not to discourage you but I would go with Python first. I tried learning Rust for the first time after a few years of professional experience and hit a wall. Only later on in my career did I manage to learn Rust and use it professionally. The most important part of your first app is to actually get it done and learn from it -- a lot of the benefits of Rust aren't necessary"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Im assuming you have no CS background since you say this will be your first language. I wouldn’t go this route. I would ask myself what is it that you want to built and find a language that is simpler and it does not relay some of the concepts, such as C, C++, or Rust will require to understand. I would also try to understand some CS along the way. \n\nYet, what do I know. I’m just a professor and this may work!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I learned Rust as a first language, mostly because I was interested in it. I think its often undervalued that learning something you're interested in is easier than something you're not. My take is that the best first language is the one that keeps you coming back to program.\n\nHowever, Rust could be a bit confusing at first if you don't understand the problems it solves. I would suggest a baseline understanding of C at some point as well."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just do it. I’m almost 40 and I build CRUD apps in Rust :)"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Seems like you write English just fine, which makes rust at least your second language"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 51.927438,
      "dominance": 60.544218,
      "text": "That's great and all the very best. I started learning when I was 40 years, in 2020. A bit piece of suggestion, the most important chapter is Ownership and be sure to have a solid understanding of it. Coming from C background for the last 30 years, I struggled a lot initially. That too way back in 2020, the community and support was not this great. Eventually you will figure out and oh boy, the way I see Rust in 2020 vs now is drastic different... for example Windows native API support ...."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "Hell yeah dude! Choose what you’re drawn to!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "I think something more mid level or some basic C might be better, but good luck! 👍"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "I am 27 and here i was wondering if i should learn rust or not"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.64366685714286,
      "arousal": 63.00615485714286,
      "dominance": 55.587949571428574,
      "text": "If you like it, then sure.\n\nAs an experienced programmer I still like to prototype in Python often, just because I can bash things out at the speed of thought. It's just so incredibly writable and readable of a language.\n\nIf I try to do that in Rust, too often I trip over something that distracts me from the aspect I want to focus on right now. Usually finding the right Option/Result/Iterator/slice combinator to do *exactly* what I want, or fixing a lifetime issue caused by a loop.\n\nIn Python I don't even think about it, it's just regular control flow or list/dict/set comprehensions all the way.\n\nHonestly combinator hell is the thing I hate most about Rust and it's not even close... I should add the caveat that it's probably to do with my brain as well, it despises verbosity so it really wants to go hunting in the docs for the \"right\" way to do something, telling myself that I'll remember it for next time."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.34977325,
      "arousal": 59.027777875,
      "dominance": 64.994331,
      "text": "Languages like Python, Haskell, Lisp, etc do have an advantage in having a REPL (read-eval-print-loop), which allows you to \"chat\" with the interpreter. And knowing multiple languages is generally seen as a good thing, as there are some concepts that are general to programming and some that are specific to whatever language you're currently using.\n\nI've also seen people claim that part of what makes learning Rust hard for some experienced programmers is that they have to unlearn some quirks that they've started taking for granted in other programming languages, and that Rust is surprisingly viable as a first language. No preconceptions or old habits standing in your way.\n\nProgramming doesn't really click for a lot of people, and I think those of us who stuck with it kind of just played around with it until it did. Go follow your \"what if …\" hunches and just try stuff out and things should work out. :)"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm not sure Rust is the best language to start with. It's better to understand the basics first, you can always switch to another language later."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.73393833333334,
      "arousal": 58.46560866666667,
      "dominance": 62.32048366666667,
      "text": "I really hope you succeed. However, you've decided on two difficult learning projects at the same time: learning to program \\*and\\* learning rust.\n\nI started learning rust in my 60's as something to do in my retirement. But I've been a programmer since the mid 1970's and had mastered several other languages. I first learned programming in BASIC, but I quickly branched out into APL and C/C++, then Java. So rust, while it has its difficulties, isn't the worst thing I've tried to learn."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.681028,
      "arousal": 61.37566133333333,
      "dominance": 59.183673666666664,
      "text": "Have you ever developed in any other language? It is not that you need to know any specific language, but there are some more \"generic concepts\" that will help if you have some level of familiarity with it.\n\nUnderstanding in general how variables, functions, references, flow operator, statement operators, and when to use each other, will be helpful. Yes, these can change slightly between languages, but the concept is similar.\n\nIf you are starting from scratch with rust it might be an uphill battle, or not, it depends on how fast you will pick on these up.\n\nEither way, good luck! I think rust is an amazing language. Whenever I code in C it is just a mess of NPEs that I couldn't even think about. Staying in safe you basically don't worry about it (there is an exception when dealing with runtime assignments, which will crash the program)."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I started learning Rust at 40. But I also learned Java at 19."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Go for it. And when you have a compiler error you don't understand, post it into google gemini and ask why you have that error, and that the AI should tell you the concept behind it."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.24565383333334,
      "arousal": 55.85789866666667,
      "dominance": 62.9440665,
      "text": "Always nice to see people learning to code. You're not \"too young\" at 11 and you're not \"too old\" at 50. Coding is for everyone.\n\nPersonally, I think Rust can be a little \"intimidating\" for beginners. If you find Rust to be a bit annoying, you can try C. It's still a low-level language and will teach you a lot of things (memory management, pointers) that will still be useful when you code in Rust.\n\nI'm not sure of what your project is, but if you're looking for cool libraries to fuck around with: i'd recomend \"Raylib\". It's a gamedev library that abstracts the \"more annoying\" parts of gamedev away, allowing you to quickly start building stuff. It has great documentation and rust bindings :)"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "sounds kinda like blockchain"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, you guys are awesome!😲"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.560091,
      "arousal": 55.839002,
      "dominance": 69.6712015,
      "text": "What is the application you want to code? Pick the language that suits your app. Maybe Rust, Go, C whatever is best to get the job done. Rust is nothing special no more special then Go . With Rust you will have to deal with a lot of new syntax, mutable, unmutable, borrow checkers , kind of verbose language constructs. I am sure if you want to learn Rust you will be able to so."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Your age +4. Learning Rust as well :) good luck to you!"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Age is not a problem.\n\nRust being your first language might be depending..."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I just turn 73 been with rust for 3 years, love it:))"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pick the language that makes you excited to sit at your keyboard every day"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am 31 now, learning Rust as a 1st language too. Le't go bro."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 65.8163265,
      "dominance": 61.961451499999995,
      "text": "Good luck!🤞 Personally I would start with other languages; python, typescript, golang."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "C should be the first languagevfor everyone. Then OpenCL should be next. They model the system very closely."
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Rust seems like Ada from 30 years ago - memory, thread safety etc etc.\nSee how it played out for Ada…"
    },
    {
      "post_title": "I turn 41 next month....learning Rust as a 1st language.",
      "created_utc": 1752870567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "I learned rust when I was a teen. \n\nNow that it’s being taken over by boomers I think I think I may need to rethink my life decisions"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.380952,
      "arousal": 59.580499,
      "dominance": 57.76644,
      "text": "Rust, Go, C++, I don't care.\n\n\nJust give me a goddamn binary that I can run. \nI don't want to install a full fledged development system of JS, TS, or Python to run a tool."
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.3061225,
      "arousal": 65.8163265,
      "dominance": 61.961451499999995,
      "text": "Prototyping with ts/python, then rewrite with rust (or go, c++, anything with a single binary) seems like good strategy, many teams are adopting this"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is the way! Rust bindgen has come leaps and bounds. Whilst there likely always will be a place for typescript the performance gains of moving to Rust WebAssembly cannot be ignored "
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.9070295,
      "arousal": 66.38322,
      "dominance": 51.587301499999995,
      "text": "Well I hope they're not using Gippity to help them, that guy is terrible at Rust. Vanilla elementary stuff even gets miffed. Much less projects with multiple libraries & moving parts. Forget about it."
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 60.090703,
      "dominance": 74.943311,
      "text": "In Rust we trust."
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.367347,
      "arousal": 56.689342,
      "dominance": 60.31746,
      "text": "Jeez I wonder why 🤔"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Un enshittified discussion for anyone interested](https://github.com/openai/codex/discussions/1174)"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "With AI assisted coding, it just makes sense to switch to Rust. If you are using AI to author the code, it doesn't matter if you are using Rust or Node, but for the end user the massive speed increase is certainly worth it"
    },
    {
      "post_title": "OpenAI is Ditching TypeScript to Rebuild Codex CLI with Rust",
      "created_utc": 1750876865.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Claude Sonnet 4 is actually pretty decent at writing working Rust code."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Git experts should try Jujutsu (written in Rust)"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.52324275,
      "arousal": 52.90532875,
      "dominance": 61.281179125,
      "text": "A theory I have is that `jj` is especially worth trying if you use interactive rebase a lot. I suspect that this also corresponds to whether you often polish commits/PRs for other people to review. This especially applies to multi-commit PRs or PRs that depend on other PRs (where the base PR occasionally changes).\n\nSome examples of projects where you wouldn't often polish commits for review are dotfiles, code for (or text of) a science paper you are writing (say, your grad school thesis), developing a quick hack intended to solve a single problem. For these, if you are familiar enough with `git` and have a settled workflow, `jj`'s workflow might not be worth the inconvenience of changing one's workflow. (Though, you might still like features like `jj op restore` 😀)\n\nWe've been chatting about this on jj's Discord a bit (feel free to join, the link is in the README at https://github.com/jj-vcs/jj).\n\n-----\n\nThis theory would also match the article's conclusion (emphasis mine):\n\n> If you're a Git expert **who prides yourself on your ability to manipulate history**, I urge you to give Jujutsu a serious try on a real project."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I feel like this is aimed right at me.  I can't count the number of times I've said \"I know git can clean up what I just did, but... I'd have to google how and spend five minutes with a complex set of commands I won't use often enough to remember and it's only a personal project anyway.\""
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "I learned JJ by using it through [GG](https://github.com/gulbanana/gg), a super nice UI which lets you drag and drop stuff around like a cowboy 🤠 \nI'm just wrapping up a PR which lets you drag hunks, which makes it much smoother to separate your WIP stuff into logical and consistent commits."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.47467866666666,
      "arousal": 51.209372333333334,
      "dominance": 56.840514000000006,
      "text": "I've been using JJ for a few months now, and I've already completely forgotten how git works. Now, either I'm an idiot and forget how tools work that I've used for over a decade (well, that's probably some of it), or as soon as my brain stopped reinforcing git knowledge, it willingly dropped it all on the floor.\n\nJJ is a tree of your source code. You can add bookmarks to the nodes if you want, or edit them. You can also move the nodes, combine them, or split them. There, you know JJ now."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.20181425,
      "arousal": 58.616780000000006,
      "dominance": 47.732426249999996,
      "text": "I use git for decades and I tried other new VCS like nest, pijul, saplin etc. My favourite is `jj` for this simplicity followed by `saplin` (pijul seems dead).\nIf you have already used trunk based VCS like mercurial/svn, you won’t feel out of place.\n\nOne of my favourite `jj` features is the snapshot taken at each command, you never lost untracked files. There is a drawback when you forget to explicitly add it to your gitignore but `jj file untrack` save your journey.\nIt also works well with git workspace and each collocated with `jj`."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Feel like they missed a trick on calling it Jugitsu"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.884354,
      "arousal": 62.046485,
      "dominance": 66.7517005,
      "text": "I wish one of these new systems would have first class support for large binary files, built in, just working. I have used JJ and loved it, but version control for game dev kind of sucks."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’ve tried a few times, but for my current workflow, Magit still feels faster. Maybe it’s because I rarely have to do anything complex with Git."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "JJ rocks. More people should give it a try tbh"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there any \"Rosetta\" page for comparing jj and git command? Like [pacman/Rosetta](https://wiki.archlinux.org/title/Pacman/Rosetta)"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How does it compare to the others that are up and coming too like sapling, pijul etc?"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.265306333333335,
      "arousal": 44.897959333333326,
      "dominance": 54.648526000000004,
      "text": "I've tried jj before but absolutely can't stand that *all* changes to the source tree are added by default. I normally use `git add -p` to select specific local changes that I want to commit, and to ensure that there's nothing I changed accidentally that ends up in the PR (or committed/pushed to the remote at all). I'd say about half the time I commit I don't commit everything that changed locally, because:\n\n* it's some weird build file change that xcode made automatically despite nothing changing in the build configuration, or\n* whitespace changes to a file that I added code to but later moved somewhere else, or\n* some other change that is for local debugging only (ie, adding a `MessageBoxA` call), or\n* some part of my changes that are better moved to a different PR to make reviewers lives easier.\n\nSo using `jj` breaks all those scenarios for me, unfortunately, and would mean that instead of selecting *what* I want to commit interactively, I have to manually go revert the things I don't want."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I still think Pijul looks better to me because conflicts are handled better and they don't come back. Plus it's just way simpler of a model to work with compared to git and friends."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "I'm curious what the commit log looks like if you view a jj project using Git? Will you be able to tell from the commits that jj has been involved or will it just look like a regular Git branch?"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.93801933333333,
      "arousal": 70.48374933333334,
      "dominance": 70.10582000000001,
      "text": "I’ve tried it a couple times but eventually decided that my current git workflow based on 20% git cli operations for simple things such as status/fetch/push and 80% git GUI operations based on sublime merge works better.\nI would be curious to try jj in sort of lockstep with a GUI application, even a minimalistic one like sublime merge that I absolutely love."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I tried it and i don't see it replacing git for me, I prefer the tracker workflow."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 29.931973,
      "arousal": 77.437642,
      "dominance": 56.00907,
      "text": "I ran the jj command in an existing repository and got \n\n    Hint: Use `jj -h` for a list of available commands.\n    Run `jj config set --user ui.default-command log` to disable this message.\n    Error: There is no jj repo in \".\"\n    Hint: It looks like this is a git repo. You can create a jj repo backed by it by running this:\n    jj git init --colocate\n\nAre jj and git compatible or will this destroy my repo (will i be able push / pull) if I run \n\n    jj git init --colocate"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This sounds very similar to sapling https://sapling-scm.com/"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 29.931973,
      "arousal": 77.437642,
      "dominance": 56.00907,
      "text": "Warning, don't use JJ and Git together! If your git is in a wired state and then use JJ it can destroy your Git index (happened to me some months ago)."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hahahahaha no"
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "This is really nice, but honestly doesn’t seem all that necessary nowadays. If I can’t easily figure out how to make git do what I want ChatGPT can."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It seems to me that Jujitsu is for git beginners. It only does half the things that I need."
    },
    {
      "post_title": "Git experts should try Jujutsu (written in Rust)",
      "created_utc": 1751593557.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "Interesting but avoid interactive rebase when possible.  \n\nWe should really put more work into [pijul](https://pijul.org/) too, because that's maybe the most interesting development in the DVCS space."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 75.12883945454546,
      "arousal": 55.27726236363637,
      "dominance": 65.74933,
      "text": "The GCC compiler backend can now fully bootstrap the Rust compiler!\n\nI have got some really exciting news about the [GCC compiler backend](https://github.com/rust-lang/rustc_codegen_gcc) for `rustc` \\- it can now do a full, stage 3 bootstrap of the Rust compiler!\n\nIt means that it can build a Rust compiler, which is functional enough to build the compiler *again*, and *again*. Each \"stage\" is such a compiler.\n\nAdditionally, since the stage2 and stage3 are byte-by-byte identical, we know that the stage2 compiler behaves exactly like the stage1 compiler(since they both produced the same output when building the Rust compiler).\n\nThis is an exciting step towards bringing Rust to more platforms.\n\nWhile the bootstrap process was only tested on x86\\_64 Linux, we plan on testing more architectures in the future. That includes some architectures not currently supported by Rust at all!\n\nDon't get me wrong - there is still **a lot** of work to do, and `cg_gcc` is not quite ready yet. Testing, bugfixes - even more testing. Still, the future is bright, and we are chugging along on a breakneck pace!\n\nKeep your eyes pealed for an aritcle with detailed bug+fix explanations :D\n\n# FAQ\n\n**Q: What about** `rustc_codegen_clr`**? Are you abandoning that project?**\n\n*A:* `cg_clr` *was put on the backburner, but is still developed. I just gave 2 Rust Week talks about it, so I am not about to kill the golden goose. There will be some updates about it soon - after the talk, somebody pointed out an easy way to support unwinding in C, and I am currently implementing that bit by bit.*\n\n**Q: Wasn't this your entire GSoC proposal? On paper, there is still a week left until your work** ***begins*****. What are you going to do now?**\n\n*A: I managed to achieve all my main goals... slightly early. I am very, very passionate about what I do(****Help, I see compilers in my dreams!****), and I have been eying this problem for some time now. So, things went better than expected. I still have* ***optional goals*** *to fulfill, and if all goes well, I will just add even more work to my list. I don't think anybody will complain about that. If you want to know about my plans, here is a* [*bucketlist*](https://rust-lang.zulipchat.com/#narrow/channel/421156-gsoc/topic/Project.3A.20Bootstrap.20of.20rustc.20with.20rustc_codegen_gcc/near/520068804)*.*\n\n**Q: Where can I learn more about your work?**\n\n*A: For GSoC work, this is* [*the official place*](https://rust-lang.zulipchat.com/#narrow/channel/421156-gsoc/topic/Project.3A.20Bootstrap.20of.20rustc.20with.20rustc_codegen_gcc/)*. I will post all updates there. Once university ends, and I start to work more regularly, I plan on posting there daily. You can also follow me on* [*Github*](https://github.com/FractalFir)*,* [*Bluesky*](https://bsky.app/profile/fractalfir.bsky.social)*. I also have a blog, with an RSS feed! If you want to know what compilers taught me about B2B sales, here is my* [*Linkedin*](https://www.linkedin.com/in/micha%C5%82-kostrubiec-85a037269/)*.*\n\n**Q: Where can I learn more about** `cg_gcc`**?**\n\n*A: The entire things is headed by* [*Antoyo*](https://github.com/antoyo) *- Whom I had the pleasure of meeting during Rust Week. Antoyo has a blog, with regular* [*progress reports*](https://blog.antoyo.xyz/)*.*\n\n**Q: Dogs or Cats?**\n\n*A:****YES****.*"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats! This is a great step."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.13492074999999,
      "arousal": 59.72222225,
      "dominance": 67.20521525,
      "text": "I'm impressed by the quality work you've contributed so far and it's a pleasure to be your mentor for the Google Summer of Code.\nKeep up the good work!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 28.344671,
      "dominance": 50.680272,
      "text": ">Q: Wasn't this your entire GSoC proposal? On paper, there is still a week left until your work begins.\n\n\nThis is a hilarious problem to have. Congratulations!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amazing work! I will be following for the perf metrics. Now we can gather data with one less variable on both the perf comparisons of LLVM to gcc and Rust to C++."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice. This is certainly a great milestone reached."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does it mean I can take a Rust program (let's say a very simple one) and use `cg_gcc` to compile it to a target that LLVM does not support?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.2335602,
      "arousal": 62.4036284,
      "dominance": 72.4943312,
      "text": "This is such a great achievement. I know this obviously isn't exclusively your work, but I've been following your work on the CLR codegen as well, and basically everything you've done is incredible. I hope you're proud--I certainly am proud of you. Good luck on your further activities, whatever you eventually decide to work on!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.57142866666668,
      "arousal": 49.58427833333334,
      "dominance": 69.95464833333334,
      "text": "> after the talk, someone pointed out an easy way to support unwinding in C\n\n[You're welcome! :D](https://github.com/FractalFir/rustc_codegen_clr/issues/66)\n\n`setjmp`/`longjmp` unwinding isn't exactly *nice* (thus the existence of side channel unwinding), but it's indeed useful as a common denominator."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I didn’t realize you were working on rustc_codegen_gcc for gsoc, so I’m excited to see you’ve already completed your main goal lol. Great work! Looking forward to more!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Which version of rustc does this compile? Also, this is different from gcc-rs, right?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "I'm happy to test on m68k, SuperH and VAX."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 34.807256,
      "arousal": 49.773243,
      "dominance": 50.0,
      "text": "Please pardon my ignorance, I might be misinterpreting. What are the advantages of having more than one rustc for the same platform? Like one GCC and one LLVM?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> I just gave 2 Rust Week talks about it, so I am not about to kill the golden goose\n\nWere the rust week talks recorded? Are they uploaded anywhere yet?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.09750600000001,
      "arousal": 55.6689345,
      "dominance": 62.92517,
      "text": "That is a very nice goal to reach. Congratulations. I hope this'll bring even more architecture compatibility to rust!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.986395,
      "arousal": 46.485260999999994,
      "dominance": 61.281179,
      "text": "Could you use this to automatically bootstrap a vendored copy of the compiler onto a machine with only SSH access? Would be a nice application in regulated spaces."
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Sorry I'm not sure I understand how the binary is identical to the one built with LLVM? I would expect they should apply different optimisations in the end. Or are you only building stage1 with gcc and the stage 3 is back on llvm?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Knowing little about compilers, does this mean it can bootstrap each rust version all the way up to the current release?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Did you vibe code this? /s\n\nAwesome work and contribution!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats!"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congratulations! Awesome work 💪"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.641723,
      "arousal": 68.253968,
      "dominance": 76.643991,
      "text": "Congrats with this milestone!\n\nHow does this relate to the progress of cg_gcc precisely? Are many features now 100% complete, or are the incomplete features unnecessary to bootstrap the compiler?"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GCC Rust bootstrap? Did I read that correctly?\n\n*rereads*\n\n*MORE PLATFORMS?*"
    },
    {
      "post_title": "[Media] The GCC compiler backend can now fully bootstrap the Rust compiler!",
      "created_utc": 1748021512.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why is everything in rust abbreviated?"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "Hi guys, I started studying rust recently (today) and I noticed that everything in rust is abbreviated, for example the int type, which in rust is just i, or the string type, which is just str, also has the keyword function which is just fn... I'm not complaining, I was just curious!"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "more_room_for_my_verbose_variable_names"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's just like human languages, the more frequently you use a word, the shorter it is"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "String != str"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "Dearest compiler,\n\nPlease accept this function definition urgently, and transform it as you see best. Let a function accept a signed integer of typical precision, for which I expect you will allocate some number of bits. We shall call this integer i. A second signed integer shall also be accepted, with similar precision, and shall be known as j. I wish this function to return the sum of i and j. We shall call this function \"fib\" in reference  to the most noble Fibonacci, a mathematician from the middle ages. Expose this function to users as a library.\n\nKindest thank you and well wishes,\n\nThe Programmer"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "FYI, *str* is not really a [String](https://doc.rust-lang.org/std/string/struct.String.html), but [string slices](https://doc.rust-lang.org/std/primitive.str.html).\n\nI think *i32* name is better than *uint32\\_t* (stdint in C, C++)."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "I remember reading somewhere that the philosophy is that common built-in keywords and common standard functions of the language are short so that your own program-specific names have space to be long"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.129252,
      "arousal": 56.122449,
      "dominance": 68.027211,
      "text": "It's mostly historical, to save some typing. Rust isn't overall a language that does that anymore, but the historical terseness in keywords has stuck around!\n\nOld Rust, before 1.0, was even more terse looking!"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.99092950000001,
      "arousal": 54.818594000000004,
      "dominance": 58.2199545,
      "text": "You should look up the language MUMPS.\n\nFrom the Wiki:\nSince memory was tight originally, the language design for MUMPS valued very terse code. Thus, every MUMPS command or function name could be abbreviated from one to three letters in length, e.g. Quit (exit program) as Q, $P = $Piece function, R = Read command, $TR = $Translate function.\n\n\nSo like, if could be abbreviated as i and i was also a valid variable. It led to some very obfuscated code.\n\nRust is downright English prose my comparison."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The more you use something, the more benefit you get from it being shorter.\n\nAnd I don't think any of the keywords are so short it compromises their readability. `fn` is short, but totally unambiguous"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.53741500000001,
      "arousal": 55.442177,
      "dominance": 55.7256235,
      "text": "Mostly because Rust tries to avoid having implicit and or multipurpose keywords. E.g. you need to use an explicit keyword to start a function, variable declaration etc. You need to add another one to make it extern.\n\nAt the same time line space is precious, in particular in these declaration lines. Having very short keywords like fn let pub and mut, means that all keywords can be written explicitly when needed but do not steal much space.\n\nThe author of Rust had at some point made it a rule that he only picked keywords with 4 characters or less.\n\nThis was later abandoned but many of the keywords from that time still survive."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.7120185,
      "arousal": 49.773242999999994,
      "dominance": 53.004535000000004,
      "text": "why waste time type lot char when few char do trick"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "More space for unwrap"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Just think about it.\n\n\nWhen you're writing thousands of lines of code... Do you want to be writing 'function' every time instead of fn? "
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.03514737500001,
      "arousal": 51.757369749999995,
      "dominance": 61.607142625,
      "text": "Not everything is abbreviated, but some things are. I find when I'm doing my typical work (looking at a page of code right now) most things I care about are actually more verbose and pretty easy to follow. Most of the abbreviations are things constantly typed -- `fn`, `impl`, `pub`, etc. That stuff gets quickly ingrained in my brain as easily as `{}` does.\n\nThere are occasionally some aggravating abbreviations though, usually in stuff like function/method names I don't constantly use. I'm not fluent in the lang, so it's just annoying additional cognitive load to do extra decoding of a method's name and purpose when I'm reading it. Sometimes it looks like quite a small % of space saved for such verbal clumsiness too -- `elem_offset()`? Why not `element_offset()`? Are those 3 characters really more bothersome than the lack of natural language patterns? I chose that example at random, but it appears [I'm not alone](https://github.com/rust-lang/rust/pull/132830) with that particular example. Names like that appear now and then and look really bizarre to me."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "public asynchronous function foo(unsigned32bit i) -> character {"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.750567000000004,
      "arousal": 67.85714300000001,
      "dominance": 58.843537,
      "text": "It's a compression algorithm. The more often something is used, the shorter it should be, especially when shortening it doesn't hamper readability. The number of people who have been confused by the fn keyword is probably single digits."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.870748,
      "arousal": 58.276644,
      "dominance": 58.956916,
      "text": "i always assumed it was because the language was already quite verbose what with generic types, lifetimes, where clauses, multiple wrapped enum return types, etc.. figured the terse keywords were for at least saving some space haha. either way i prefer it as long as the authors of the actual code use clear and descriptive function or variables names"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Having typed `int` and `float` a bajillion times in other languages, these short names were one of the many clever little details of Rust that drew me in initially"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There was the rule that every keyword should be 5 letters or less, initially. They eventually renamed `ret` to `return`, though."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "The big question is why is everything so long in some other languages!? Ain’t nobody got time for writing `function` or `Integer` all day."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If something is so common that you're guaranteed to encounter it frequently, and if the abbreviation is unambiguous, then abbreviations are acceptable, especially if there's an unambiguous and intuitive abbreviation that's less than half the length of the original term. Of course, maybe that just means you should try to pick a shorter synonym of the original term that doesn't need abbreviated, but compared to the unbbreviated alternative of `SignedInteger32`, `i32` is fine (although I think I'd prefer `SInt4` TBH)."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "I like short names for common things, it helps focus attention on less common things.\n\nI also like the rule of thumb that variable name length should be inversely proportional to its scope."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`int` and `float` are also just abbreviations :)"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wait till you see Go abbrvs"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.357143,
      "arousal": 57.14285725,
      "dominance": 51.445578,
      "text": "Huffman-coding the common stuff. If you're going to use something a lot, Rust gives you a short name for it. The integer and float types are going to be used a ton, so we call them `i32`, `f32`, etc. rather than `int32_t` and `float`. Functions are going to be used a lot, so we call it `fn`. `pub`, `mod`, `impl`, you name it. We say `use` instead of `import` because it's a keyword we use multiple times in every Rust file we write.\n\nYou'll notice that the things we _don't_ want you to use often don't get shortcuts: `unsafe` is written out as a full word, not an abbreviation, for example. `unwrap`, `expect`, and `panic!` aren't abbreviated, because we want them to stand out. `let mut` is intentionally twice as long as `let`, since you should be using immutable variables more often. `Vec::new` and `vec!` are much shorter than the other constructors like `Vec::with_capacity` (Note: also not abbreviated), since we prefer you to use those first unless you have specific needs.\n\nI have a project in Java at work, and I die a little every time I see\n```\nfinal List<Integer> weights = List.of(10, 20, 30);\n```\nwhen I *know* that it could be\n```\nlet weights = vec![10, 20, 30];\n```\nThe important parts of the line are `weights`, `10`, `20`, and `30`. To someone glancing at your code and NOT doing an in-depth code review or trying to change it, the rest is just line noise. The Rust line is 42% line noise. The Java line is 72% noise. Which one is easier to parse at a glance? How many times have you *not* written the `final` keyword on a Java local variable (or the `const` keyword on a C++ local variable), because it's added noise, even though the variable is `final`?"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.089731,
      "arousal": 59.03790085714286,
      "dominance": 63.783608571428566,
      "text": "Personally I also prefer to have things mostly unabbreviated and enjoy ranting on about how silly it is to have all these abbreviations all the time. I mean I am not working on some computer from the 70's where disk space is so limited that I have to be mindful of how much space my raw code is occupying so it can fit on that 5.25-inch floppy disk. Also, I am using Neovim which has builtin very convenient word completion (<C-n> in insert mode), so it would not even require much extra typing effort to have more unabbreviated type names etc.... This kind of simple word completion has probably existed for more than 3-4 decades or however old Vim is now. And these days we even get modern LSP completions on top of it which furthermore automatically can fill out functions in my \\`impl\\` or cases in my \\`match\\`...\n\nAnyhow, I never enjoyed the syntax and all the abbreviation in Rust, but I love its capabilities, typechecker and ecosystem so I keep calm and carry on!"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "idk"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At least less tokens are used when you use LLM to write your rust program /s"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "It's not just Rust. Many programming languages use abbreviations to make the code easier to read and write. \n\n> for example the int type\n\n... is the C abbreviation for \"integer\" or the Java abbreviation for \"32-bit integer\", etc. After a while you think of it as a regular name rather than as an abbreviation for something else."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So I don't need to use the full-width of my widescreen for every line!"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Yes i come from java land, but while i most def dont miss null and try catch I do actually miss the convention to write out stuff.\n\nMost of my lines have no more than 3-5 words because i like to format my code very vertical and always prefer functional chaining. But even with a procedural code style it should be possible to write out some words. For mut pub and fn I am totally fine. These are keywords that dont need to be English words. But pretty much everything of std or things like tx rx. Really just codification (and hereby i mean to encrypt words so that individuals can feel smart for themselves because it creates an artificial barrier for newcomers).\n\nSadly low level land has quite some of these guys and so it's no surprise that the shortism has developed to what it is. But as others pointed out. It's in all low level languages"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Start writing some functions/methods with some generics in it and we'll revisit this question. 😂"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.49811000000001,
      "arousal": 48.18594133333334,
      "dominance": 64.17233533333334,
      "text": "Yep, lot of things are abbr. Like IpAddr, Option, and so on.\n\nBut hardcore abbr lowercase are reserved for fundamental type which are almost universal : str, fn, i8, f64, ... are all in some sense fundamental. While Fn, Option, String, ain't. We could reinvent them, but not the fundamental one.\n\nNote that even if str is often paired with String and it's confusing, both have nothing in common in practice."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Keywords rarely change, user defined identifiers do. Don't pay much attention to them except as delimiters/terminators/introducers"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All programming is a form of compression.\n\nRust just helps you by pre-compressing the most common stuff..."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "idk"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.945578,
      "arousal": 51.70068,
      "dominance": 57.256236,
      "text": "The \"int\" type is an abbrievation itself. Abbreviating things in this manner isn't specific to Rust at all. It isn't even specific to programming languages. It's a STEM thing. Rust probably just uses different abbrievations to languages you are used to."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's still readable. I'm ok if it was just f. I however think APL took it too far. Everything is a maths symbol instead of keyword in that language "
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.67447744444445,
      "arousal": 60.128496000000005,
      "dominance": 63.970773444444454,
      "text": "The answer is \"accept it, move on\". Every language has the syntax it has because the people who created it (at least at that time) thought it was good. Once you've used a language for a reasonable amount of time in anger, you'll stop noticing it. Or you should, since it's really just not that important, relative to whether the language provides the features and safety and such that you need.\n\nI thought it was really weird looking at first, now I don't even notice it anymore and find it quite nice to work with."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "int is in and of itself an abbr. of integer :P"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 22.675737,
      "arousal": 75.623583,
      "dominance": 45.124717,
      "text": "Because many systems programmers are still afraid of monitors more than 80 characters wide."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I love very short keywords as long as I can recognize it easily. Maybe the devs were the same."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "to spend less time typing types so you can type more :'s"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like ui64 more than unsigned long long"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We are tired of typing `Arc<Mutex<HashMap<K, V>>>`"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It was forgotten to mention that no crate reaches version 1.0, never!"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Typing = bad"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "fn main() {\n    let typing = “bad”;\n    println!(“typing = {}”, typing);\n}"
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 47.845805,
      "dominance": 58.61678,
      "text": "i isn’t a type, i32 is. i is only one half of the type, and in that context it isn’t actually that different from int. It’s just more descriptive."
    },
    {
      "post_title": "Why is everything in rust abbreviated?",
      "created_utc": 1738185192.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 29.2517005,
      "arousal": 67.403628,
      "dominance": 48.356009,
      "text": "Shortened names are common in most programming languages.\n\nFortran could have used names like INTEGER\\_NOT\\_TOO\\_FAR\\_FROM\\_ZERO and APPROXIMATION\\_OF\\_A\\_REAL\\_NUMBER, but for some reason they went with the much less accurate names INTEGER and REAL.  How angry should we be with them?\n\nSince almost every language had fixed-width integers, K&R decided that it was enough to say int -- everyone would quickly find that descriptive enough.  Were they wrong?\n\nLater they decided that uint64\\_t was better than unsigned long long int.  How stupid was that!\n\nThe Rust designers decided that u64 tells you everything you need to know.  Curses!\n\nI really like that in Rust you say fn instead of function, impl instead of implementation, etc.  I much prefer names that are just long enough for an experienced user to quickly know what you mean.  Don't make me wrap lines with unnecessarily descriptive names!"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Introducing RustRover – A Standalone Rust IDE by JetBrains"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this feels like a bit of a double-edged sword, personally - i'm glad that there will be a standalone editor for rust that's able to provide more features, but the fact that the open-source plugin will no longer be updated in favour of this closed-source program is disappointing."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How do they always come up with those weird names. XD"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.37641733333334,
      "arousal": 51.889644999999994,
      "dominance": 68.631897,
      "text": "As a long-term Jet brains user. I can't wait. I'm hoping that they manage to make debugging Rust as easy and good as VSCode.\n\nThis isn't a slight. I'm on windows and VSCode manages to be better debugging experience than CLion. In part because MSFT owns the C++ debugger for Windows"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I tried to purge all the cpp stuff out of clion and failed, so this is welcome. I’m assuming it will also keep the web frontend support."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.761149,
      "arousal": 63.888889,
      "dominance": 65.117158,
      "text": "I pay for JetBrains All Products Pack and I'm very conflicted about this change. As much as I like the idea of increased investment into support for Rust, I already suffer from the fact that each language has a separate IDE. I regularly have to keep CLion, PyCharm, WebStorm, DataGrip, and Rider open at the same time, and, as you could imagine, it's not a very pleasant experience juggling all these windows around, not to mention the amount of RAM they take up when opened together... Adding one more IDE instance to this list? Not a very appealing thought.\n\nFrankly, working with JetBrains IDEs makes me miss Eclipse with its Workspaces, Perspectives, and EGit. Eclipse handled large multi-language projects like a champ and working with monorepos is such a huge pain in IntelliJ. I might actually give VS Code a go as my primary IDE, given the circumstances.."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 83.560091,
      "dominance": 78.911565,
      "text": "This feels strange. JB was stern on not providing a Rust IDE because CLion with the plugin already provides everything they can do. So why the change now? Is there actually any gain or is it just a PR move / cash grab?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "What about the opposite: support for C/C++ in RustRover?\n\nI use CLion mostly for Rust, but I still sometimes need to make some light C/C++ work for the underlying libraries. I hope that this will remain possible if I switch to RustRover."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why they can't just make clion fully compatible with rust ecosystem.i don't want to install another jetbrains product just to code rust."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.6009075,
      "arousal": 68.65079349999999,
      "dominance": 69.50113400000001,
      "text": "I'm a CLion customer currently. I'd have no problem migrating to a standalone Rust IDE. Specially since I'd expect it to be cheaper than CLion.\n\nI think Rust developers either go in the systems-direction which would profit from C-support. \n\nOr we go in the web-direction. Lacking good native GUI-frameworks, my main project is WASM in the web browser. Ideally I'd have HTML, CSS and Javascript support in the Rust IDE as well as specialized support for the Rust web frameworks (backend and frontend)."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.324263,
      "arousal": 54.761905,
      "dominance": 41.950113,
      "text": "That sucks. CLion alone was much cheaper than getting the All Products pack. Just almost doubled in price…"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm not sure really sure what exactly they can offer specifically for Rust that they don't already offer with the plugin, but I'm all for it if it's actually nicer"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I'm not sure if I'm the only one, but as my Rust project has grown larger, the JetBrains Rust Plugin has slowed down and slowed down, and it's now taking >10 seconds just to show suggestions or syntax highlighting on a newly opened file.\nHopefully with it becoming its own thing more time can be put towards performance in larger projects."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "I really hope they keep CLion support as a plugin in the future. Rust is ultimately a systems language, so it's common to also be interfacing with Cpp. For me, losing the ability to use both languages in one IDE would be the same as not being able to use the IDE. At that point I think only VScode would work for me, which is disappointing."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "Clion with the rust plugin currently allows me to step from rust into cpp code thru an fffi.  I hope we don't lose thus feature with a rust only ide."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.150416,
      "arousal": 62.43386266666667,
      "dominance": 71.42857133333332,
      "text": "I guess I will just stick with VSCode then. \n\nWhile JetBrains makes \"great\" IDEs, VSCode is \"quite good\"... and also free. \n\nOut of curiosity, for the people who already do use IntelliJ for Rust development, what are the features that you would miss if you used VSCode instead?  Or in other words, what do you think VSCode needs to have in order to bring it up to par with IntelliJ?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.10733200000001,
      "arousal": 63.340892,
      "dominance": 54.08163266666667,
      "text": "The unbundling of jetbrians ides is starting to annoy me. They are already too ressource heavy for some of my workloads and having 5instances open is not helping. Also, as other have said, it's essentially dubling the price of Clion alone so I really hope they don't force me to buy two licences for two different ides just to work on systems languages.  If they do that they will lose me as a customer"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.9229028,
      "arousal": 57.7777778,
      "dominance": 65.1247164,
      "text": "People usually ask what language they should learn. One of my arguments always was: “check if there is a dedicated IDE from JetBrians for the language”. I think JetBrains creates the IDEs instead of plugins when they expect that the market share of the language will grow. The last example was Goland, since then Go has become much more mature and JetBrains was right about it.\nConclusion, it’s time to learn Rust!"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it possible that there will be an open-source “community edition” like PyCharm and IntelliJ? If there does end up being a RustRover CE that would be awesome imo!"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "Am I the only one? They missed the chance to call their Rust IDE something that is actually abbreviated to `RS`, btw. Some ideas:\n\n- RustShell\n- RustScope\n- RustStudio\n- RustScribe\n- RustSphere"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> RustRover will be offered under a commercial plan.\n\nstill hoping there will be a community edition like pycharm and IntelliJ"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.90929716666666,
      "arousal": 59.01360533333334,
      "dominance": 58.144369000000005,
      "text": "Insane. I decided to try digging into Rust for the first time this morning with a little pet project. I am an android dev full time so i'm used to kotlin/java and android studio, so naturally I prefer an intellij based IDE. I was looking up how to use IDEA Ultimate and rust pluggins, but the rust pluggin was deprecated, with 0 community discussion online about it. Turns out it all happened this morning with the rollout of RustRover. I'm giving it a shot as my first foray into Rust, wish me luck!"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.952381,
      "arousal": 63.8322,
      "dominance": 47.505669,
      "text": "All I hope is that rustover doesn't suffer the same fate as AppCode when it was EOL'd, the source was forever lost."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Awesome... just renewed my subscription... glad i got it."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well, well, well, just a day or two before I needed to renew my clion subscription...."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": ">Like many of our IDEs, the functionality of RustRover can be installed as a plugin in IntelliJ IDEA Ultimate.\n\nI have idea ultimate so this is a BIG relief.\n\nThis is a new plugin which you need to install from marketplace and will override existing one."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.396825,
      "arousal": 60.997732,
      "dominance": 36.734694,
      "text": "They're making FFI more painful by omitting the support for C and C++, yet they include things like XML and HTML/CSS, because obviously everyone only uses Rust for web applications.\n\nAlso, who the *hell* uses RELAX-NG with Rust? Well, RustRover includes support for it anyway."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "LustLover"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Deprecating the open source plugin isn't the way to go unfortunately. I'm sticking with Neovim"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.5487525,
      "arousal": 73.015873,
      "dominance": 71.712018,
      "text": "This was what I was talking about a couple of years ago. Intellij did the same with Golang too. The community version of Golang plugin slowly stopped pushing updates and one day, it became incompatible with newer community versions of intellij. It all started when gogland, which they renamed to goland was in EAP and eventually became a paid product. I'm sure this will happen with the Rust community plugin as well. I am glad I never used Intellij for my rust development and I was happy with vscode, rustanalyzer and lldb. They did an amazing job, intellij won't be missed."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "This is cool, but I bought Intellij iDEA only to be used with the Rust plugin. \n\nSince they might stop supporting this plugin. Will they offer a “license swap” from iDEA or CLion to RustRover?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "FINALLY! I've been begging for this for years"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, I guess I’m moving to RustAnalyzer/VsCode then. Bummer, I really liked this."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "No I must use vim now."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.4603175,
      "arousal": 68.8208615,
      "dominance": 75.7369615,
      "text": " looks awesome always love their products so I should never try it since I don't want to spend my little money on the fancy IDE :("
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Damn it, another paid jetbrains IDE. I love their stuff but not when I have to pay to write code. I'll stick with intelliJ for now I guess"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Not a fan of this. \"Today we’re opening the RustRover Early Access Program (EAP) and we’d love for you to try it\" - cannot be found on their website, nor with extensive web research. No mention about the program other than in the linked blog article. Clickbait?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does it support Rust Web Framework? \\[1\\]\n\n\\[1\\] [https://levkk.github.io/rwf/](https://levkk.github.io/rwf/)"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thank you for the information 👌 (I'm totally not downloading it right now, nooo)"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.79969766666667,
      "arousal": 62.92517,
      "dominance": 57.33182166666666,
      "text": "Crashes on every start with something like: https://i.imgur.com/XcMXuZ9.jpeg\n\nNo submission of bug report because it is totally unclear how detailed my system and configuration is reported (see last line in screenshot). This is not acceptable.\n\nGood: still \"old UI\" and not the garbage \"new UI that wants to be VSC\"\n\nSo far we've been running CLion for Rust+C combined projects, PyCharm for Python+Rust projects, and recently RubyMine for Ruby+Rust projects. Now.... what do we run in the future?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does the EAP have parity with today's Clion + Plugin?"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I see no reason to use it, especially if it is end the end pay to use.\n\nLSP is doing it all you do not need anything hung else.\n\nGo eMacs or vscode all, lighter and really great."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 47.3922905,
      "arousal": 57.086168,
      "dominance": 49.7165535,
      "text": "Autocomplete / Intellisense inside macros is still broken. Bummer.\n\nEdit: uhh, why the downvotes? Rust Analyzer works just fine with the vast majority of macros, the Intellij Rust integration does not. I run into this issue all the time with json!, actix web, occasionally format!,  select!, etc."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I will just keep writing code in VS Code and running it in the terminal. Dont need no IDE for that"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.995465,
      "arousal": 64.965986,
      "dominance": 32.199546,
      "text": "> Windows required\n\nAs far as I can tell, this is dead on arrival."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover powered by Fleet :D\n\nFeature parity with VSCodium and RustAnalyzer estimated in 2026."
    },
    {
      "post_title": "Introducing RustRover – A Standalone Rust IDE by JetBrains",
      "created_utc": 1694599139.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does anyone find a link or something?"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What next Rust features are you excitedly looking forward to?"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 97.505669,
      "arousal": 86.734694,
      "dominance": 60.657596,
      "text": "I haven't been psyched about a language as much as rust. Things just work as expected and there's no gotchas unlike other languages. I like that you know exactly to a big extent what happens under the hood and that coupled with ergonomic functional features is a miracle combination. What are some planned or in development features you're looking forward to in Rust?( As a new Rust developer I'd be interested to contribute)"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I want traits with async functions to be dyn compatible."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If let && other_condition"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "const generic expressions. it would be so nice to have them, but it's a really long way before stabilization, if that even happens."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.888888900000005,
      "arousal": 59.80725629999999,
      "dominance": 56.0770975,
      "text": "I’m hoping Polonius finally becomes stable. It may not affect many people but in my opinion it’s a very fundamental improvement.\n\nFor some reason I never had much trouble with the borrow checker. It always felt pretty natural to me so I was confidently writing code in Rust. But the first time I encountered this issue, I went insane. I just kept reading the compiler message over and over for hours and couldn’t understand what it was trying to say. Since I didn’t know what to search for in this case, I asked a LLM for help. Instead of telling me it was a false positive, it tried to argue that the behavior was normal and fine which only made me even more frustrated because nothing made sense anymore.\n\nI really hope no one else has to go through that."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Generators.\n\nI want my \n\n    yield"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "try blocks, generators, async trait objects"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "I really want allocator API. But it seems to be pretty much stalled."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Parallel compiler frontend, Cranelift as default dev compiler backend, Wild as default linker.\n\nWhat I want is faster compile times!"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.2267575,
      "arousal": 45.011337499999996,
      "dominance": 66.043084,
      "text": "const traits, if-let chains, safe transmute, default struct field values, crate namespaces, a stable Try trait"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "let chains, the \\`matches!\\` macro is great but it will be nice to no longer need it for such a basic operation"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "`portable_simd`, the API is so nice.\n\nAmusingly moving a bunch of arrays within some numeric code to `Simd<f64,6>` instead of `[f64;6]` yielded a massive performance boosting, without barely change in the code. \n\nLLVM started passing values in registers, and doing indexing via swizzles. It was like magic."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "const generics, const traits, pattern types"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.092971,
      "arousal": 64.965986,
      "dominance": 55.328798,
      "text": "Higher Kinded Types, or maybe the ability to write async code that doesn’t mysteriously hit GitHub-documented issues that have existed for years after a certain level of complexity. Maybe keyword generics?"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Idk if this is a feature they even plan to add, but I would love variadic generics / variadic arguments."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Compile time introspection."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.360544,
      "arousal": 55.158730000000006,
      "dominance": 67.403628,
      "text": "I would be really happy if there wasn't **can't use generic parameters from outer item**"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "pub macro <macro_name> instead of #[macro_export] macro_rules! <macro_name>\n\nit is in unstble I think"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "Stable AVX-512 support in Rust 1.89!\n\nThis new const generics work is also exciting: https://github.com/rust-lang/rust-project-goals/issues/100\n\nIf I could just use an associated constant as a const generic (e.g. an array size), const generics would be so much more useful to me."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Polonius!"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.1383222,
      "arousal": 54.8979592,
      "dominance": 62.6077097,
      "text": "I'm looking forward to these features whose development is currently in-flight:\n\n* if let chains, if let in guards\n   * This is such an ergonomy improvement! I'm already using 1.88 beta for this.\n* Generators/coroutines\n   * I've been wanting them since 1.0. But coroutines that borrow over a yield point are very non-trivial, given Rust's core semantics. Async showed it's possible, so I'm hopeful.\n* Default fields.\n   * A big QOL/ergonomics improvement, and hopefully helps with APIs that take a lot of parameters too.\n* Finishing impl Trait\n   * I guess return type notation and impl Trait in associated types comes first, but eventually, I just want to store closures and iterators etc. in structs, and have them to have a nice type.\n* Safe(r) transmutes.\n   * More often than not I try to parse some file formats and whatnot, and having safer transmutes would be a lifesaver.\n* Polonius\n   * I still remember the sense of freedom NLL gave me! From time to time I still encounter borrowing cases that \"ought to work\", so this will be another QOL improvement.\n* CrABI / dynamic linking / FFI impromevents\n   * Multiple times I've felt that doing separately compiled plugin-like-systems could need some work.\n* Range<T>: Copy where T: Copy\n   * I want to believe! Currently using Range is often unergonomic.\n* Try blocks\n   * The current, stalled state is unfortunate. I've seen some really nice and clean error/none handling example code using try blocks\n* Generic const args\n   * I feel these will open another avenue of API design for statically checked invariants that will make people go \"oh wow I didn't realise that's even possible\"\n\nWow, a hefty list. These are all things I've felt the need for as I've been writing Rust. Then there are dreams of future capabilities such as place-based lifetimes that Niko has been writing about that would lift all kinds of restrictions of the current system, but as there's still little concreteness and buy-in, I didn't list those. I wish, though!"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "specialization but i doubt it's ever coming :')"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'd like to see more support for const"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "`is` operator, which is pretty much like `if-let` but also an expression and much bettes than `if-let` imo\n\nhttps://github.com/rust-lang/rfcs/pull/3573"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "- AsyncDrop\n\n- Polonius\n- OnceCell `get_or_try_init`\n- OnceCell `get_mut_or(_try)_init`."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.789116,
      "arousal": 56.689342,
      "dominance": 62.018141,
      "text": "Named Parameters.  \nIf there is a function that takes multiple parameters of the same type, there should be a clean and automatic way to make sure my parameters aren't in the wrong order.  \nE.g.   \nfn f(this : &str, that : &str)  \n...  \nf(this = \"foo\", that = \"bar\")"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "min_generic_const_args and coroutines"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.50000025,
      "arousal": 60.91269825,
      "dominance": 70.15306125000001,
      "text": "things that are actually coming: async drop and generators. eventual coroutines will be awesome too.\n\nwhat i really wish for: higher-kind types and effect tracking. I would also love to have a good library or something that enabled applications to opt-in to a GC."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`try blocks` is the main reason I use nightly."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.138322,
      "arousal": 56.575964,
      "dominance": 51.700680000000006,
      "text": "I really want the effects system to be worked on, but there has been very little work in the last few months….\n\nIt could improve safety quite a bit, like having a static infallible mutex would be sick."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "cargo script"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Specialisation!\n\nI’m aware it’s a tonne of work to get it over the line. I run into cases that need it several times a year."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "never type and trait aliases"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "- Allocators API for containers\n- AVX-512 intrinsics in the toolchain\n- Provenance for pointer math"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I j-just want generators 😢"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "autodiff \n\nhttps://github.com/rust-lang/rust/issues/124509"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.115646,
      "arousal": 75.85034,
      "dominance": 66.099773,
      "text": "All the cool stuff has already been mentioned, but I'm also excited for cargo script. There's already a bunch of third party solutions foe this, but having something built in with rust analyzer support will be so much nicer."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All the const stuff please 🥺"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.61678,
      "arousal": 45.124717,
      "dominance": 52.721088,
      "text": "Mentioning this one since others haven't yet:  [`loop match`](https://github.com/rust-lang/rust/issues/132306)!  (Or whatever it'll end up being called.)  It's being [experimented with right now](https://github.com/rust-lang/rust/pull/138780) (with bad-on-purpose syntax to avoid bikeshedding that during the experimental implementation phase) but it's genuinely one of the coolest control-flow constructs I've seen in a while and I think a lot of code could be rewritten more clearly when it stabilizes."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.294785,
      "arousal": 46.258503,
      "dominance": 66.213152,
      "text": "- Default field values\n- Type alias impl trait\n- More proc-macro capabilities, like the ability to emit warnings and mark files as macro inputs\n- Derive and attribute `macro_rules!`"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yeet keyword"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "specialization and generic const expressions"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.1530615,
      "arousal": 53.31632675,
      "dominance": 62.41496575,
      "text": "Pointer arrow syntax. Some alternative using dot or arrow syntax to having to write out `<type as trait>::method(args)` everywhere. Arbitrary code being able to run at compile time like Zig instead of the procedural macro mess we have now.\n\nAnd random people not hating on Rust for no reason would be a nice public perception of the language feature."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.873016,
      "arousal": 52.2675735,
      "dominance": 60.317460499999996,
      "text": "Postfix macros.\n\nfoo.matches!(Foo::Bar(_))\n\nbaz.match! { ... }\n\nqux.expect!(\"context is i={i}\")\n\nEtc."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.804989,
      "arousal": 60.884354,
      "dominance": 62.868480500000004,
      "text": "I’m surprised not many mentioned [macro improvements](https://rust-lang.github.io/rust-project-goals/2025h1/macro-improvements.html), as I think the current macro system is extremely poor. \n\nAlso anything related to making async behave like idiomatic Rust without foot guns, macro workarounds, debugging difficulty, etc."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "> there's no gotchas unlike other languages\n\n\nOh, you certainly are new then. I do wish that would be the case."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "More receivers (things like `self: Box<Self>`) and more dyn compatible receivers."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Async drop??\nI wanna be able to leverage structured concurrency, but Rust as of now makes it fairly difficult"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "From all the things people mention AsyncDrop is the thing that is the most hacky to workaround the lack of."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Let chains, generators, Polonius, and Cranelift are my top four."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\"Use\" statement grouping in rustfmt. I'm sure it will be stabilized someday."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Const generic expressions."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Cannot wait for keyword generics to become a thing some time in the next decade!"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Full \"Deref-aware matching\" for boxes"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 26.190476,
      "arousal": 53.514739,
      "dominance": 33.786848,
      "text": "I just want deref patterns. I know why we don't have them, but come on. Not being able to match over recursive boxes or slices is such a stupid hole"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "spread and rest syntax."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.61451233333334,
      "arousal": 63.038548666666664,
      "dominance": 65.154951,
      "text": "From the \"what will make my life much easier\" point of view the top is following:\n\n\\- First and topmost. Generators.\n\n\\- Also on the first line, and not on a language side itself. BUT! Libraries completeness and maturity.\n\n\\- Second. Allocator API in std.\n\n\\- Third. Every possible improvement to make type system smoooother: polonius, hkt. Especially with async and dynamic dispatch.\n\n\\- portable\\_simd\n\n\\- Everything to do with other language interop, especially that will easy integrations with mature foreign libraries.\n\n\\- Calls with named arguments, like in python."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A stable abi"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "\\`try {}\\`"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm excited to see where ergonomic_clones goes"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Practical day to day stuff like AsyncDrop and try blocks. So far async drop hasn't been a big issue, but it could become one at any point. I'm fine with the language not getting into any big new stuff, since the inevitable result of all of these 'what do you want?' questions will be a bloated, far more complicated language."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Generators"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "TAIT will be nice"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Something to solve 'conflicting trait implementations'. Maybe negative trait bounds."
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ergonomic Clone"
    },
    {
      "post_title": "What next Rust features are you excitedly looking forward to?",
      "created_utc": 1748977794.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "a few years from now when \"ai\" based automated translation from one language to another gets more reliable - I'm looking forward to porting a bunch of stuff. it's viable today with handholding but I think in a few years it's gonna be pretty hands off\n\njust to throw out a random porting example, xz compression\n\nthis would go along with improvements to linting tools and error messages, if you wanted to work on something"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Viasat is hiring 30 Rust Devs"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I got contacted by a recruiter and he said that if I knew any people who might know Rust and are US Citizens to direct them here:\n\n[https://careers.viasat.com/jobs/4717?lang=en-us](https://careers.viasat.com/jobs/4717?lang=en-us)"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.027211,
      "arousal": 58.8435375,
      "dominance": 61.111111,
      "text": "> US citizenship and an active SECRET or TOP SECRET security clearance is required\n\nIt was always my understanding that secret clearance itself is secret and employers can't mandate you have it ahead of time?\n\n> $111,500.00 - $176,500.00 / annually\n\nComp feels on low for the education/location/clearance requirements."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "111k to 176k onsite in carlsbad?\n\nGet yourself 1-2 roommates in Santee **lmao**"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.802721,
      "arousal": 68.87755100000001,
      "dominance": 70.578231,
      "text": "\\> $111,500.00 - $176,500.00 / annually. \n\n  \nFor people who are US citizens AND HAVE clearance AND willing to travel AND have that particular skillset?\n\n  \nFuck that."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "half the pay for what is probably a way more difficult job then what i do lol\n\nsoftware companies please pay more"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.0498865,
      "arousal": 67.57369650000001,
      "dominance": 74.886621,
      "text": "...How many people have 2 years of (embedded) Rust experience AND security clearance like that? Either of those two things I would imagine aren't the most common. Even if they overlap a lot, still, this feels a lil specific 😅"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That's cool. I have Rust and Viasat experience. Used to be a telecommunications contractor and now I just code crazy shit for hobby"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There's the [jobs megathreads](https://www.reddit.com/r/rust/?f=flair_name%3A%22%F0%9F%92%BC%20jobs%20megathread%22) for job ads."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Where’d you find how many they’re hiring?"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.12622866666666,
      "arousal": 57.369614500000004,
      "dominance": 59.65608483333333,
      "text": "Wish I could write Rust at my company, NGC.  Shoot, wish I could write anything C++11 or even higher.  JSF is stuck in the stone age with C++03.  My comp is wayyy higher than what Viasat’s offering, so even though I could throw a rock and hit their campus, I’m not jumping.  Guess I’ll just have to continue writing Rust in my free time."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.303855,
      "arousal": 59.410431,
      "dominance": 62.698413,
      "text": "30 Rust devs? Damn Man Viasat really going all-in on Rust huh?"
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pay is too little for those qualifications. Secret clearance, Rust & C/C++, CS degree, AND that skillset. You should be making way more than that."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Pay is too little for those qualifications. Secret clearance, Rust & C/C++, CS degree, AND that skillset. You should be making way more than that."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Remind me to flee this hellhole which is the EU."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.3854875,
      "arousal": 71.995465,
      "dominance": 68.0272105,
      "text": "US developers: If you are mad at people on this thread complaining the salary is too low: consider your own salary might be too low.\n\nIt is just about knowing your worth and what companies are willing to pay for the work/price ratio."
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.49886649999999,
      "arousal": 60.487528,
      "dominance": 64.22902500000001,
      "text": "An experienced rust dev with a clearance and willing to live in that area and willing to work onsite 5 days a week no remote with crappy coffee 200K is the absolute minimum. I don’t think these companies realize how rare the pool is for those requirements especially if they expect an existing clearance and not willing to sponsor one. \n\nThe base package for this should be closer to 280K/yr. If you find yourself applying for one of these roles and questioning/sweating over your value don’t. These government contractors act like they have no money but they are drowning in it from these contracts. \n\nDon’t settle for less than you are worth, and don’t water down the compensation in your area by begging for scraps. "
    },
    {
      "post_title": "Viasat is hiring 30 Rust Devs",
      "created_utc": 1753899795.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 73.129252,
      "dominance": 70.9750565,
      "text": "I got contacted by a recruiter too. I was surprised since I have like 6 months of Rust exp \\*cries in imposter syndrome\\*\n\nThe recruiter seemed OK with my $160k number. The online interview was very practical - no leetcode. Just C++ and Rust. Good luck everyone!"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How I got a Rust job through open source"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 66.00640252941176,
      "arousal": 54.781912999999996,
      "dominance": 61.75803647058824,
      "text": "I posted about this [here on Bluesky](https://bsky.app/profile/wellofcarse.bsky.social/post/3lmvmry2tpc22), but I thought some people in this sub might find this helpful as well. This is the story of how I got a Rust job through open source.\n\nFirst I made a list of companies to target. Most I found by searching google jobs for remote Rust jobs. After a couple months I had \\~50 small companies on my list (this would have been >100 if I was interested in large companies and crypto companies). Depending on your goals, you may find more prospects.\n\nNext I tracked down the Github orgs for each of the companies. Probably about 25-30 of the companies had open source repos with open issues. Many had open sourced parts of their core product, with clear instructions on how to contribute. This was true for both small companies and many larger companies as well.\n\nThe next step is making contributions. There is a lot to this, and there is a great book called [How to Open Source](https://howtoopensource.dev/) that can be helpful if you are new to this. One thing the book points out is that the first step in making contributions is building context. This was the hardest part for me. I read a lot of documentation and code up front. It is also important to reach out on Slack or Discord, or even file issues when you are stuck. You can demonstrate your communication skills while you're at it.\n\nWhen I opened my PRs, I was careful to not only follow contribution guidelines, but to also match the style of the existing code, leave comments when needed, and add tests. Most companies will be excited to receive high quality code. Often after 2-3 commits someone would reach out to get to know me. This is when I would start a conversation about my employment goals.\n\nMany companies have trouble hiring because it is hard to verify experience, aptitude, and communication. The great part of letting your work be your introduction is that you have already done this verification for them. This puts you far ahead of anyone that has submitted an online application.\n\nThis method worked well enough that I would do it again, and I would recommend it to anyone. I got far more interest through a few contributions than from many applications. In the end, this strategy led to my current full time Rust job."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517,
      "arousal": 48.185941,
      "dominance": 58.503401,
      "text": "Congrats.  How many PRs did you raise?  Didn't you have about 5 years experiences a back end dev too, or are they someone with the same name as your Bluesky account?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.12320506666667,
      "arousal": 62.607709799999995,
      "dominance": 64.98866213333334,
      "text": "I have got multiple (3?) jobs in my life through open source contributions over 20 years, including one that landed me a work visa and job at Nvidia, and eventually US citizenship.\n\nI have not done it any time with a goal of getting a job - each time I was genuenely interested in the project / tech, so I wanted to play with it and contributed in my spare time, just like I publish my open source projects just for fun of it. When I was offered a job, each time I was surprised event though it made sense for both me and the company to join indeed, because I would be getting paid for what I was interested in, and company got a hire that was genuinely interested in what they are doing.\n\nSo I would say in response to some comments thinking this is some kind of a \"free labor\": You're free to pick whatever projects you want. Pick something you are genuinely interested in, do want to learn / get more familiar with, and it will benefit you greatly even if you will not get any job offers because of it. If you treat everything as a \"chore\" to get a \"job\", than you have no passion for the craft, you'll never get really good, and you'll always struggle. Maybe consider carrier that you actually enjoy. Also, remember: for an existing project accepting external contributions is additional work, since typically new contributors require a lot of help, reviewing code, etc. It's not even clear who's making who a favour."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats! What type of software will you work on? (if it can be said ofc)"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.070295,
      "arousal": 46.825396999999995,
      "dominance": 59.637187999999995,
      "text": "Well how good were you at Rust before contributions? I've done like 6 prs in open source, buts its mostly typescript.\n\nLike what level of expertise where you at before being able to contribute to this rust repo ?\nCould you only be able to run simple math problems using rust?\n\nWere you able to create your own projects, like say a cli ?\n\nOr were you able to do a bit more advanced project, maybe like a distributed store ( not fully fledged tho) in rust. ?\n\nCurrently I'm learning rust to do the same. Kinda desperate to get myself a job although I started learning rust since I got bored out of doing web development."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "\"Just do free labor to get noticed!\" isn't quite the marketing ploy you think it is..."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.654033142857145,
      "arousal": 58.16326528571428,
      "dominance": 56.624554571428575,
      "text": "This is the inverse of my sophisticated plan:  open source things and organize meetups to talk about them.\n\nEngineers that would fall asleep listening to a pitch will pay perfect attention and reverse-understand a company while looking through its implementation details.  I'll throw in some super obvious bugs so irritating that nobody can keep their hands off.  Before they know it, we give them a laptop.\n\nI'm going to focus on *super* bike-sheddable topics like ID generation and which flavor of JWT to put on ice cream.  Then I'll come up with adorable HN titles like, \"The Little Token That Could\".  It's a heartwarming tale about Cthulhu the Cuttlefish (our mascott).  Irresistable T-shirt on the (broken) swag store.  Bam, now they work for us.\n\nWhile I was living in SF, a brownie startup got funded.  I am the world's leading expert on brownie recipes.  If there is one thing I'm not going to tolerate, it's living in the shadow of people who bake, but Stanford."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "Any chance of sharing your list of companies?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "Congratulations! Do you mind sharing your salary range?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've tried to trace the track of yours and literally failed at the first step \"searching google jobs for remote Rust jobs\".\n\nDid you just type \"rust remote jobs\" on Google and search for it?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.0725625,
      "arousal": 55.498866500000005,
      "dominance": 66.950113,
      "text": "Thank you for presenting a new approach. Although the message is short, it contains a lot of valuable know-how. Even if people are aware of this method, I don't think many will actually put it into practice. If it aligns with an area interested in, it could be a truly great strategy."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm sorry OP, but don't most companies have their code being confidential? Some big companies have open source projects, but most only have closed source projects not available for the public."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.303855,
      "arousal": 59.410431,
      "dominance": 62.698413,
      "text": "Congrats man 👏"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Excellent! Thank you for posting."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice work! Saving this."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 96.2585035,
      "arousal": 65.70294799999999,
      "dominance": 76.303855,
      "text": "love this hustle although there is a bit of free labour. you probably learned a bit too!"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congratulations. This is great advice!"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.941043,
      "arousal": 67.120181,
      "dominance": 76.870748,
      "text": "From my understanding, it's also related to having experience relevant to available roles at the company. Even if you have impressive contributions, you likely won't be picked over someone else with slightly less impressive but more relevant experience. That's also probably why it is helpful to contribute to the company's existing projects.\n\nI'm using impressive to refer to the level of knowledge and skill required, especially in multi-domain tasks (e.g. Linux kernel vs. full-stack website)."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Would you say that you could be able to contribute to open source and getting a job from that, with 1 year of experience?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This relates to the latest post I made about Open Source, your advice is greatly valued. Thanks!"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.637187999999995,
      "arousal": 54.3650795,
      "dominance": 59.5238095,
      "text": "I will try this. I want so hard to break into this industry. Heck I'd even take minimum wage."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.352986,
      "arousal": 54.53514766666666,
      "dominance": 58.994709,
      "text": "While you were doing this, did you have another job and did it in your free time or were you unemployed at the time?"
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Hey, I am new to Rust.  Which book is recommended?\n\nIs it this one https://doc.rust-lang.org/book/?\n\nAnd/Or anything else apart from this which some of you  here might have used to upskill or generally find it interesting."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.05328825,
      "arousal": 59.580499,
      "dominance": 67.488662,
      "text": "Can you please share some good resources I am  early in career and want to do rust ...like the books or github repo for learning rust from scratch and also if you could dm me some good repos which i can contribute as a beginner like few of them just to look at prod codes and improve my skills before entering the rust industry."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The only rust jobs I've been approached for are shady crypto projects."
    },
    {
      "post_title": "How I got a Rust job through open source",
      "created_utc": 1744816572.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats you have handeled it very well 💪"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.7528345,
      "arousal": 61.734693500000006,
      "dominance": 62.471655,
      "text": "Absolutely amazing. I feel like this should be promoted in Bevy's showcase of examples (which will promote Bevy itself as well 😳).\n\nI'm not a game dev, and this says it uses the \"ECS\" specifically. I wonder how much of the heavy lifting it means. What implements the stuff like physics and rendering?"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.39002283333333,
      "arousal": 65.58956916666666,
      "dominance": 64.83371116666667,
      "text": "It is great to see a game written in Rust release, especially to such warm reception(96% positive reviews on steam)!\n\nI like that the more mainstream introduction to Rust and bevy is such a good game, since it should help convince people making great games in Rust is possible.\n\nCongrats to Pounce Light for making something so ridiculously pretty and cute!"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It looks absolutely awesome"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.80952366666666,
      "arousal": 64.058957,
      "dominance": 65.87301566666666,
      "text": "Surely it must be damn hard to create a game, how do people get to that level of programming ?"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.75736933333333,
      "arousal": 63.038548666666664,
      "dominance": 66.25094466666667,
      "text": "Crazy timing. I just saw this game on steam a few hours ago and pointed it out as one that my wife might like. Had no idea it was written in Rust."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "I’ve had my eye on tiny glade for ages as it looks gorgeous! Had no idea it was don’t in Bevy too. Inspirational!"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.596372,
      "arousal": 58.673469,
      "dominance": 66.0430835,
      "text": "Really great work. How long did it take to finish the game? Could you also share what kind of libraries have you used apart from Bevy?"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.31746000000001,
      "arousal": 64.4557825,
      "dominance": 71.882086,
      "text": "Really amazing! It looks like Townscaper on steroids. I suspect my wife will love this. The fact it was written in Rust makes it even more interesting :)"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.6349206,
      "arousal": 57.2108844,
      "dominance": 61.6553286,
      "text": "I wonder if they'll ever release the game as an engine system for constructing scenes, you could pretty easily flip this as a developer tool and charge 3x now that the consumer version is so well liked imo"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.79777381818182,
      "arousal": 63.811585181818174,
      "dominance": 64.34755709090909,
      "text": "Steam Deck compatibility: Unknown. Hmm. I'm gonna test that then :)\n\nEdit: \n\nHere are some first impressions:\n\n* The game starts and runs nicely, no weird glitches or crashes so far :) And it looks pretty awesome.\n* The UI is obviously not meant for such small screens. But it's almost good. My only issue is really with the welcome text, which is too small to read.\n* Also, no controller support, which is expected from this game. It works fine with the default keyboard/mouse emulation, and the touch screen. And with some custom mapping, it could be made even better. Also, nothing is stopping me to dock my steamdeck and use a proper mouse and a keyboard.\n* I only get 42-44 FPS when the game starts, which is a bit disappointing (using the native 1280x800 resolution). The game looks pretty great, but there is hardly anything on the first screen that justifies not having 60 FPS (or more) on this hardware. Probably there is lots of room for optimizations. I also miss having the options to change quality settigs. The only thing I can do to improve my frame rate is to use scaling, and with a 0.7 value I get 60 FPS, but this is pretty blurry."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Is this the first bevy game on steam???"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.777778,
      "arousal": 56.17913849999999,
      "dominance": 68.31065749999999,
      "text": "Wow this looks so good! I wasn't aware that Bevy is mature enough to support the creation of games of this quality."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "You two people are awesome. I’ve been following you in the newsletter (and a little before that, I’d say). Lovely work you have done. Absolute congrats"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.9274375,
      "arousal": 57.653061,
      "dominance": 61.224489500000004,
      "text": "This looks absolutely gorgeous, wow! I'm so impressed! I'm definitely buying this when I'm at my computer next."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Oh I didn't even know it was in rust! I got my gf to play it."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.047619,
      "arousal": 55.952381,
      "dominance": 60.657596,
      "text": "I'm currently making a game + engine in rust and also only using the bevy ecs. For graphics and as a compatibility layer I prefer SDL2."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 69.954649,
      "dominance": 71.315193,
      "text": "This is really beautiful"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Awesome 🥹🙌🏻"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.9161,
      "arousal": 64.1723355,
      "dominance": 68.65079349999999,
      "text": "Looks like it would be a good fit as bevy’s missing editor hahaha. Game looks awesome too!"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Clicked on the link, having never heard of this. Ended up watching the stream for a half hour. Well done, this is awesome. I don’t even game anymore, but this makes me want to go through some loopholes to get it running on my mac"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Probably runs 60fps on a toothpick. Very nice"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If it’s based on WGPU, why doesn’t it run on macOS (?)"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "cool. gona buy it lol"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.41836725,
      "arousal": 64.143991,
      "dominance": 66.978458,
      "text": "Love the art style of this game, been following for awhile. I hope it sells well for them."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "That looks great! Any plans for a Mac port?"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "Oh wow, I wishlisted this because it looks great. Had no idea it was made in Bevy"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It looks amazing! However, would there be release on [GOG.com](http://GOG.com) ? I prefer to buy games there."
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.3911565,
      "arousal": 68.59410425,
      "dominance": 74.63151925,
      "text": "Heck I love this game but didn't know it's built with rust. Love it even more. Good job guys👍"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "This looks super sweet, any chance that you will get it working on wayland in the future?"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.641723,
      "arousal": 68.253968,
      "dominance": 76.643991,
      "text": "I am definitetly buying it. I've been following the progress on Twitter ❤️"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "The game looks amazing"
    },
    {
      "post_title": "The release of Tiny Glade, a game built in Rust and using Bevy's ECS",
      "created_utc": 1727533241.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "What is your “Woah!” moment in Rust?"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Can everyone share what made you go “Woah!” in Rust, and why it might just ruin other languages for you?\n\nThinking back, mine is still the borrow checker. I still use and love Go, but Rust is like a second lover! 🙂"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.9455785,
      "arousal": 45.464853,
      "dominance": 62.1882085,
      "text": "Making invalid states unrepresentable via the type system.\n\nThe example with Reports from the book is just great.\n\nThe new method for a Report returns a DraftReport. The only methods you can use for DraftReport are edit or submit. Submit returns an UnpublishedReport. The only methods you can use for UnpublishedReport are reject or publish. Reject gives you a DraftReport, publish gives you a PublishedReport. PublishedReports have no methods.\n\nIn this way you can never accidentally go from Draft to Published. You can never edit an Unpublished without rejecting it. Once it’s Published, you can never go back.\n\nThe invalid paths do not exist."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.35034025,
      "arousal": 52.49433125,
      "dominance": 54.19501125,
      "text": "I’m a hobbyist so nothing super important, but I do Advent of Code in both Rust and Kotlin. I usually start with Kotlin which is more flowy for me, since I don’t have to worry about memory. Day 6 part 2 took me a while, but I after I got it I added parallel processing and improved times by 40%.\n\nBut then I was coding the change in Rust and it refused to compile because I was using a non-atomic array to track whether an obstacle was already placed previously. So I tried running the Kotlin solution a few more times and half the time it was right and half the time it was one off. Race condition! One that I didn’t notice with Kotlin and literally refused to let me run in Rust. Chalk one up for fearless concurrency!"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "Move semantics. Such an obvious idea, like all the best ideas. Instantly cuts out a huge wodge of the complexity that you get in C++."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Enums (discriminated unions)."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "As someone who has never programmed a low level language before. It was when I wrote my inefficient brute force algorithm in rust for an Advent of code problem. And I managed to brute force the problem in 20 minutes vs 17 hours in python."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.97052149999999,
      "arousal": 54.648526000000004,
      "dominance": 62.3582765,
      "text": "I spent hours implementing a non-trivial feature without having to actually run the code once. Then it worked the first time. Mind blown."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the borrow checker was a big one\n\nbut the main one for me was probably traits and generics. being able to implement a trait for any type, or any type that implements some other trait, felt like magic at first"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.335601,
      "arousal": 60.770975199999995,
      "dominance": 56.507936400000006,
      "text": "The first time I realized how much control flow could be replaced by maps, etc. Instead of writing and thinking about branches and jumping around, I could just write things in a linear way.\n\nThe next one was realizing that with option, result, and enum, that as soon as the compiler was happy to let me compile, all the possibilities and most of the corner cases were already covered or at least marked with a panic. there were far fewer things to keep track of.\n\nFinally, it was realizing that everything was an expression. This is nothing new, especially in the functional realm. however, having it in an imperative language lets you write some things that are much more based on logic than branches."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.882086,
      "arousal": 65.759637,
      "dominance": 68.027211,
      "text": "Not had it. But I have tried using other languages after learning Rust and felt totally naked."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Changing iter to iter_par and it goes brrrrrrr"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rayon"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.38888875,
      "arousal": 50.878685000000004,
      "dominance": 67.77210875,
      "text": "I've spent a year in haskell and a couple years as a fp, well not enthusiast, because fp enthusiasts are a different breed, but let's say as an fp appreciator. Rust doesn't have a lot language-wise that haskell and other high level functional languages don't. Rust is interesting though because 1) it's not stubbornly dedicated to mathematical purity and makes a lot of pragmatic choices and 2) it doesn't require a large runtime. It manages to be fairly high-level and fairly fast and fairly type-safe and fairly readable and fairly close to the metal in a way that any other language can match (or even beat in some cases) for one of those categories, but no other language comes close across all of those categories."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "The moment I froze Doctest with a loop in a comment."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Installing it is a one-liner? Updating it every sixth Thursday is a one-liner? Srsly? Woah!"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.142857,
      "arousal": 62.585034,
      "dominance": 57.860921999999995,
      "text": "Option and Result types are just wow. Coming from a TypeScript world (which I still enjoy quite a bit, because of the flexibility of the types you can create), error handling felt like a bit of a pain in Rust earlier, but now I miss it in TS - which I use for web frontends - and icba to use try catches."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.006803,
      "arousal": 58.61678033333334,
      "dominance": 65.26832933333334,
      "text": "This series of steps...\n\n* Glancing over the error messages, but mostly ignoring them, because \"they're usually not that helpful\" (in other langs)\n* Jumping back into the code to try and figure out what the issue was, on my own\n  * Waste 10-30 minutes, didn't get far\n* Recall that people are always banging on about how good the Rust errors are\n* Go back to the terminal and ***actually read the errors properly***\n  * Issue solved within a few minutes.\n\n...a few times, before finally sticking."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.021164,
      "arousal": 60.733182,
      "dominance": 55.89569133333333,
      "text": "It's kind of silly in hindsight, but I was a little blown away when I was first battling the borrow-checker and wondered: *\"How exactly does `drop()` work?\"*  \n  \n  \nSpoiler, it's dead simple:\n\n    pub fn drop<T>(_x: T) {}"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.014739,
      "arousal": 49.37641725,
      "dominance": 60.4591835,
      "text": "My \"Woah\" moment in Rust is me waiting PHP Code hat work and struggling so hard something working that would be such a breeze with Rusts trait and generics system."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102,
      "arousal": 66.099773,
      "dominance": 81.519274,
      "text": "When I discovered how powerful macros are."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.6145125,
      "arousal": 53.939909375,
      "dominance": 60.643424,
      "text": "Not so much a woah! moment when using rust, but the opposite of that when I went back to C++. \nI wasn't familiar at all with rust's use of move semantics and the borrow checker when I saw my first mutex, so having the data inside seemed like a cute idea at the time. \nAnd then after actually using the language I had to investigate a deadlock in C++ code and I was shocked to rediscover that C++ did not do that. The bug came from the fact that  in of the uses of a structure, the wrong mutex was used, so not only did it not actually protect anything, it actually locked another structure that was supposed to be independent. \n\nSo this lead me to investigate mutex usage in the same project, and I found a structure where read access was done by locking the mutex in a method then returning a clone of the data. This would usually be a sound idea, but in this case mutable access was made by having a method obtain a lock to the mutex, then return a reference to the data. With the implicit release of the mutex this meant that writing to the structure would actually start right after the mutex was released, therefore *increasing* the risk that a read would happen at the same time as a write. \nThankfully, this was for display only data, that would be refreshed (read) far more often than it would be written to, so any incorrect value would both be rare, and quickly replaced.\n\nSo with C++ you can end up doing the exact opposite of what you meant, just because it doesn't have a borrow checker."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Enums. Enums in Rust are so good I miss them everywhere else."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.52758866666666,
      "arousal": 57.14285733333333,
      "dominance": 68.70748300000001,
      "text": "Probably the Result and Option types. I always hated exception-based error handling, and having my eyes opened up to Result and Option was like finding an oasis in a desert.\n\nAlso all the syntactic sugar that comes with it, like `if let ..` or `let .. else`"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Error messages being very precise about what went wrong and what you should do to fix it.\n\nComing from C++ where your program just exists with code \"139\", this is night and day."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.40589580000001,
      "arousal": 63.537414999999996,
      "dominance": 64.82993160000001,
      "text": "Out of all the popular languages, Rust is the only language that I had to dig deeper in order to find real design mistakes. In every other popular language, you can find 5 huge design mistakes just from reading the first few tutorial pages.\n\nAnd I mean design *mistakes* not *trade-offs*. For example, most popular languages have a \\`null\\` as a valid value for many types. This is a design *mistake*, and if the language was designed by people who knew better it wouldn't exist.\n\nIt honestly feels like every popular language has been designed by some random dude who just made random design decisions with barely any profound knowledge in programming languages, and Rust is the only language that has been properly designed by engineers and every feature was debated by people with the right expertise.\n\nNow, there are quite a lot of design mistakes in Rust, but nowhere near as much and not so in-your-face as in the other top 15 used languages."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.097506,
      "arousal": 63.492063,
      "dominance": 75.623583,
      "text": "Postfix await, bold choice, but amazing programmer experience."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.2517005,
      "arousal": 60.88435375,
      "dominance": 52.1258505,
      "text": "The fact that I can checkout a pretty massive project like the helix editor on many different platforms like MacOS and Linux, simply type cargo run, and actually get something that runs is amazing to me. \n\nAnother big moment is when I read the blogpost by Cloudflare about pingora and how every crash they had, after months of using it, and handling trillions of requests, was related to corrupt hardware and not incorrect code."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.995465,
      "arousal": 73.412698,
      "dominance": 66.213152,
      "text": "I was working a C++ job when rust hit 1.0, and I think I found rust just a bit before that milestone.\n\nFor me, the biggest thing was move by default. rvalue references are... not fun.\n\nTagged unions with match syntax were also huge, compared to unions"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.963719,
      "arousal": 53.85487533333333,
      "dominance": 65.079365,
      "text": "A good use of affine types, that brought attention to the masses of type systems that control resource usage, where affine types is one approach among others.\n\nEverything else is already present in any programming language whose influence traces back to Standard ML, and I am old enough to have used most of the key ML languages when they were starting out in academia, e.g. Miranda => Haskell, Caml Light => Object Caml => OCaml, Standard ML of New Jersey."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "My whoa moment was [#20400](https://github.com/rust-lang/rust/issues/20400)"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Enums and functional code. Learning about chaining maps, and_thens, transposes, etc. was awesome.\n\nI still love when I refactor a function full of 'if let' into a single chain"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Coding for 3 days. First time run... Shit it works.\nNever happened to me with other languages."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Procedural macro crates like serde and clap - it saves so much time and lets you focus on the interesting parts of your application."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "It was when it took 28ms for SIMD-accelerated boundary checking (all my own code and Wikipedia) for roughly 300-400 million checks. (13k shapes and some shapes were huge). In Java, it was 20 times slower to do effectively the exact same thing, and I had been writing Java code for over 5 years. (It was parallelized on both platforms and used the same algorithms, and produced the same results)\n\nThat was really my true “woah” moment."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.04081625,
      "arousal": 52.097505749999996,
      "dominance": 66.6666665,
      "text": "For me it had to be the moment I realized rust treats immutability really strict. Like I love that so much. Just by reading the signature you can reason so much about what a function will do to your state. It's not like in other languages where for example a sort(a: list) -> list, method may return a new sorted list, or may just sort the list given to it and you have to read the description of the function. In rust when you read sort(a: &vec) -> vec you know you're getting a new list wheras sort(a: &mut vec) almost certainly will sort the list given to it.\nIt's so useful for reasoning about the mutations your code will perform."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.21768700000001,
      "arousal": 58.73015875,
      "dominance": 62.216553250000004,
      "text": "I’ve always been impressed by the tooling. In Java or python or JS land, you’ve got a million and one tools to contend with to write and test some software and get it deployed, but with Rust there’s exactly one option — Cargo. \n\nOther languages are catching up, but Rust was the first one to really get it right and they’ve kept it really nice."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I came from java so its like ... *everything.* I love Rust error handling, macros, trait system, enums, borrow checker and also cargo is awesome."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.433107,
      "arousal": 44.331066,
      "dominance": 46.712018,
      "text": "Fewer undefined behavior cases are a benefit; other language specifications often avoid defining behavior for corner cases."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.115646,
      "arousal": 45.8049885,
      "dominance": 56.519273999999996,
      "text": "I wouldn't call it my woah moment but it is definitely something I miss when coding in C#: the ability to redeclare a variable that is already in scope and give it a new type and value. Just cuts down on intermediate variables in certain situations where you end up using wonky names because you can't reuse the same variable name."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "When I learned how to use Result , I know it’s not a big deal but I faced some problems understanding it in the first place"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Result and Options! Also the out of the box performance 😉"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "I still remember that \"whoa\" moment when I first grasped pattern matching with enums!"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "The moment I knew Rust was the one was watching a Jon Gjengset video. The language seemed pleasant, but I was not sold. Then he showed doctests.\n\nrustup.rs could not load fast enough."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.755102,
      "arousal": 48.015873,
      "dominance": 53.514739000000006,
      "text": "I regularly have a woah moment when I finish a long battle with compiler errors, and everything just works as expected on first run. It doesn't happen every time, but it happens a surprising amount with Rust."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.580499,
      "arousal": 67.460317,
      "dominance": 64.965986,
      "text": "Borrow checker and the ability to see errors before you compile i.e tooling e.g Rust analyzer. \n\nMagical!"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.20030216666667,
      "arousal": 53.722600166666666,
      "dominance": 62.69841266666666,
      "text": "Compiler error messages. They are immensely helpful, which is not something I am used to when learning other languages.\n\nWay too many compilers spew out some incomprehensible error messages which makes you go back to your last edit in your source code to see if you can find the error.\n\nrustc on the other hand gives you error messages that - especially when you are learning the language - are so helpful that they often give you the precise answer to where in your source code the error is located and which changes you should make to make your code compile.\n\nAnd having seen these error messages is also very helpful once you dive into The Book. They give valuable context to the so called hard parts of Rust like borrowing and lifetimes, which you are bound to run into already on the first day. Thankfully rustc has the friendly borrow checker which will provide the content of most of the error messages you will get in the beginning (besides the obvious syntax errors that you will make in most languages until you get familiar with the language)."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 39.569161,
      "arousal": 57.44520033333333,
      "dominance": 44.82237333333333,
      "text": "Rust always slaps me in the face: \"You fucking idiot, you're sizecoder, you know 15 languages and a handful of Assembly, you write programs for 40+ years, and you make such a rookie mistake?!\" Then I say: \"No, it's not a mistake, because no other one will use this pointer...\" But Rust interrupts me: \"Then write that! Stupid bastard.\""
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "The type inference. Coming from C++ where \"auto\" was a big reliever, how little you have to tell the Rust compiler for it to understand what type your variable is is amazing, especially since it takes into account everything in scope, not just your current line. That last part triggered the \"Woah!\"."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.716553,
      "arousal": 46.371882,
      "dominance": 63.151927,
      "text": "The syntax, and borrow checker. I came from Java and kotlin mostly. Rust just feels so natural and right."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "I’d say ADT and how parser combinator use ADT. Really a Woah moment."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.2244895,
      "arousal": 63.378685000000004,
      "dominance": 76.2471655,
      "text": "Option and Result. I love to be forced to handle null values and errors. Might take more code but less bugs at the EOD."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I got excited when I saw that Rust adopted Haskell type classes, with minor changes, to make traits. I like that Rust combines some of the best ideas from Haskell and C."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.72562350000001,
      "arousal": 61.054422,
      "dominance": 67.1201815,
      "text": "Option::transpose is pretty lit."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust analyzer. Comprehensive, fast and feature rich."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 53.968254,
      "dominance": 72.108844,
      "text": "The expressiveness of pattern-matching in `match` blocks is brilliant if you take advantage of it"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.755102,
      "arousal": 48.015873,
      "dominance": 53.514739000000006,
      "text": "I really had that moment when I was implementing Matrices and their addition/multiplication and the type system was able to check the dimensions of the 2 matrices involved in the operation at compile-time."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.596372,
      "arousal": 45.351474,
      "dominance": 58.049887,
      "text": "I first wrote rust back around 2014/2015 (though only got serious about it much later), so the usual suspects about borrow checker, cargo, etc slowly crept into my brain.\n\nOne thing stood out from the beginning though: I had a background in high performance computing (C++ / CUDA, OpenMP, etc), but then moved to web development (namely Ruby, where the performance was on the opposite end, but the tooling and attention to developer experience was top notch)\nBefore Rust, I didn't think you could have the best of both worlds"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 56.31141366666666,
      "dominance": 64.47467866666666,
      "text": "Lifetimes, but not immediatelly. At first, I thought of it as an added complexity (for a good reason but still). After some time, I realized that the exact same problem exists in every single language and is either covered by GC with its up- and downsides or silently left to the user."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Discourage shared mutable state. Ensure thread-safety when you have to have it."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The typestate pattern with a zero sized data type: Phantom Data. This is super helpful when you want to remove invalid states from your API"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Shear speed (I guess using stack for everything)"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "threading that just works."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Having a language with more modern features that ties C/C++ in terms of runtime speed for my application. I always expected all languages to either be slower or as hard to write correctly like C."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "Coming from C, having a standard library that worked cross-platform, and contained useful data structures and algorithms.\n\nI was so much more productive, because I wasn't inventing my own HashMap, Stream, and Arc."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.390023,
      "arousal": 45.69161,
      "dominance": 54.988662,
      "text": "A 6 month job has taken 6 years. Woah!"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "std::mem::drop()"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The result and some types are just normal structs....."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "When I found I could `Box::pin` a particularly complex `Future` to avoid a stack overflow.  It just works, and makes total sense because of all the other nice things about Rust."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "Attaching methods to enums and the whole idea of enums"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Error handling."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.5102045,
      "arousal": 57.1995465,
      "dominance": 64.6825395,
      "text": "Derive macros. Also procedural macros in general. Used to write Golang and Typescript before moving to Rust (and C++ before that). The fact that I can simply derive a serde deserialize etc is soooo good. Automatically generated OpenAPI specifications. Custom binary formats using Speedy. Exchanging data with my frontend using bitcode instead of json. Put HTML or GLSL directly into my code. It's freaking awesome, it's like magic."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "For me (coming from C), realizing how thought-out and intricate macros actually are"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "Macro, coming from someone who only knew how to code in Javascript and Python at the time."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 49.546485,
      "dominance": 56.122449,
      "text": "Once I got into it enough to realize the cohesive nature and design through and through the entire language.  Once you understand the underlying design principles and semantics used, the language as a whole just seems to become easier to work with and makes a lot more sense, versus other languages where there's always way more exceptions and \"it usually works like this, but in these instances you need to do this\" type of things."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Fearless concurrency."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "First time I tried --release 🤪"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "To me, the greatest thing about Rust is how the discussions about future language extensions teach me new things. First it was affine and linear types. Then the language made me understand monads. Then the community made me understand stackless coroutines, and structured concurrency, and algebraic effects. I work as a Java developer at my day job, and there were a number of situations where I'm convinced that simply being immersed in Rust has made me pick a better design and implementation in Java."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.96901000000001,
      "arousal": 52.00302366666667,
      "dominance": 61.451247,
      "text": "Definitely Cargo! Coming from raw C and embedded development, and even though I manage all my projects with CMake for cross-compilation, I'd always find some painful dependency that I had to deal with through some workaround and lose tons of time to do so. Then the first time I needed a dependency in Rust and saw how easy it was to add it, how easily configurable the whole build is, and all the other functionalities you get \"on the go\" like clippy, formatting, native testing, etc. It really was like \"Woah!\" I definitely want to work with this 😂"
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.0487525,
      "arousal": 56.8594105,
      "dominance": 66.78004525,
      "text": "For me it's the borrow checker and that safety is the default. With C and C++ it's easy to allocate and deallocate memory on the heap manually (in C it's the only option), which means that you have to make sure memory is handled correctly.\n\nIn C++ there are classes like std::vector (Vec in Rust), std::unique (Box in Rust), and std::shared\\_ptr (Rc or Arc in Rust) to do this in an easier and safer way, but you need to known about them and include the right files to use them, while manual heap allocation and deallocation don't need any includes.\n\nIn Rust Box and Vec are usable without a use statement or writing the full path for those datatypes, while you need to use unsafe and use a use statement or the full path to the alloc and dealloc functions (or allocator) to use manual heap allocation and deallocation."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.96598639999999,
      "arousal": 60.975056800000004,
      "dominance": 65.2380952,
      "text": "Result and Option.\n\nThese Enums changed a lot for me. I know that there are certain operations you definitely know will return a good result so you can just unwrap() them but I still prefer to handle the result as if there could have been an error. I know it's slow and causes bloat but I really loved them getting rid of magic numbers and now I hate seeing \"return -1\".\n\nAlso, I LOATHE the javascript API I've seen where they do something like:  \nif (err) return (null, error)\n\nelse return (value, null)\n\nAnd then they CHECK for error to be null in the callback. OMG Result FEELS so much better..."
    },
    {
      "post_title": "What is your “Woah!” moment in Rust?",
      "created_utc": 1743801131.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.020408,
      "arousal": 59.580499,
      "dominance": 68.707483,
      "text": "Lifetime annotation.  \n  \nWhile other features I know of are present in other languages such as Kotlin, Swift and Haskell, lifetime annotation is the one I have never seen before."
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Announcing Rust 1.69.0"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "In acknowledgement of the overwhelming serendipity of this once-in-a-lifetime memetic intersection, we will be relaxing the \"No memes\" rule in our towering magnanimity. However, please keep all meme comments confined to the replies of this comment. Have fun. :P"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.260771,
      "arousal": 54.2176872,
      "dominance": 55.714285800000006,
      "text": "Memes aside, shameless plug for my first real contribution to Rust in the form of a Clippy lint: [`extra_unused_type_parameters`](https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters) :)  \n\nIt detects generic type params on functions that go unused in the signature/body of the function, e.g:\n\n    fn unused_ty<T>(x: u8) {\n        // T unused in body as well\n        // ...\n    }\n\nHere, the concrete type of `T` isn't possible to infer, so calling this function requires a turbofish that doesn't actually do anything.  \n\nUseful for library authors that don't want to accidentally expose this mistake to downstream users. However, by default, it won't lint on publicly exported functions, since removing the parameter on an existing function is technically a breaking change (because users will have been calling the function with a turbofish for a now-nonexistent parameter). So, set `avoid-breaking-exported-api = false` in `clippy.toml` to allow it to lint public functions."
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The [release notes](https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1690-2023-04-20) aren't rendered by Github now: *This blob took too long to generate.* (Yes I can read the MD source, but it's annoying and seems like something you might not intend?)"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.900227,
      "arousal": 48.979592,
      "dominance": 55.272109,
      "text": "I was waiting long time for the .69 numbered release. It's a bit unspectacular, unlike what I was expecting something revolutionary or what. On a less serious note, does anyone use automatic fixing already? I would be hesitant to automatically fix my code and always do it manually."
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.54195039999999,
      "arousal": 57.68707500000001,
      "dominance": 69.0929704,
      "text": "Suggesting `cargo fix` is a good addition. I'm mostly using in-IDE suggestions for applying auto-fixes, but it's useful when going back to older codebases or during refactors, and it's good to tell people it exists. (I'm using `eslint --fix` in JS/TS codebases a lot.)\n\n>! Using `hash` for the example today is a nice touch. !<"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why does `from_bytes_until_nul` spell null with 1 l instead of 2?"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "I'm assuming all the removed comments relate to version 69 being released on 4/20. The blog post winks to this with a \"Nice version\"."
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.61678,
      "arousal": 45.124717,
      "dominance": 52.721088,
      "text": "Why is rustup downloading components twice? First in downloading phase, second in installing phase.\n  \n`info: syncing channel updates for 'stable-x86_64-pc-windows-gnu'`\n  \n`info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)`\n  \n`info: downloading component 'cargo'`\n  \n  `6.8 MiB /   6.8 MiB (100 %)   6.2 MiB/s in  1s ETA:  0s`\n  \n`info: downloading component 'clippy'`\n  \n`info: downloading component 'rust-docs'`\n  \n `13.4 MiB /  13.4 MiB (100 %)   6.3 MiB/s in  2s ETA:  0s`\n  \n`info: downloading component 'rust-mingw'`\n  \n`info: downloading component 'rust-std'`\n  \n `25.3 MiB /  25.3 MiB (100 %)   6.2 MiB/s in  4s ETA:  0s`\n  \n`info: downloading component 'rustc'`\n  \n `71.2 MiB /  71.2 MiB (100 %)   6.5 MiB/s in 11s ETA:  0s`\n  \n`info: downloading component 'rustfmt'`\n  \n`info: removing previous version of component 'cargo'`\n  \n`info: removing previous version of component 'clippy'`\n  \n`info: removing previous version of component 'rust-docs'`\n  \n`info: removing previous version of component 'rust-mingw'`\n  \n`info: removing previous version of component 'rust-std'`\n  \n`info: removing previous version of component 'rustc'`\n  \n`info: removing previous version of component 'rustfmt'`\n  \n`info: installing component 'cargo'`\n  \n`info: installing component 'clippy'`\n  \n`info: installing component 'rust-docs'`\n  \n `13.4 MiB /  13.4 MiB (100 %)   1.3 MiB/s in 12s ETA:  0s`\n  \n`info: installing component 'rust-mingw'`\n  \n`info: installing component 'rust-std'`\n  \n `25.3 MiB /  25.3 MiB (100 %)   7.9 MiB/s in  3s ETA:  0s`\n  \n`info: installing component 'rustc'`\n  \n `71.2 MiB /  71.2 MiB (100 %)   8.6 MiB/s in  8s ETA:  0s`\n  \n`info: installing component 'rustfmt'`\n  \n`info: checking for self-updates`\n  \n\n  \n  `stable-x86_64-pc-windows-gnu updated - rustc 1.69.0 (84c898d65 2023-04-16) (from rustc 1.68.2 (9eb3afe9e 2023-03-27))`"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice one 😂"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[\\[YouTube Link\\] My video highlights of Rust 1.69.0 (+cargo & clippy, and rustup 1.26.0)](https://youtu.be/uun_9A3eaGM)"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Announcing Rust 1.69.0",
      "created_utc": 1682001699.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why is \"made with rust\" an argument"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 79.047619,
      "arousal": 61.269841,
      "dominance": 68.52607739999999,
      "text": "Today, one of my friend said he didn't understood why every rust project was labeled as \"made with rust\", and why it was (by he's terms) \"a marketing argument\"\n\nI wanted to answer him and said that I liked to know that if the project I install worked it would work then\\\nHe answered that logic errors exists which is true but it's still less potential errors\\\nI then said rust was more secured and faster then languages but for stuff like a clock this doesn't have too much impact\n\nI personnaly love rust and seeing \"made with rust\" would make me more likely to chose this program, but I wasn't able to answer it at all"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.2630385,
      "arousal": 55.102041,
      "dominance": 52.324263,
      "text": "I think the phrase \"built with Rust\" is more of a marketing phrase intended to attract open source contributors rather than users (although the two might sometimes correlate). If I see a project that's built using Rust, I am more likely to start using it because I know I could contribute a new feature or fix a bug if there is one. This is not specific to Rust alone, but I feel that Rust is much easier to understand (and this is just my opinion) than many other languages, especially for large codebases. Starting to contribute is not as painful as it might be with other languages."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.347695,
      "arousal": 58.42781566666667,
      "dominance": 67.76266066666666,
      "text": "It's a move to attract developers to contribute.\n\nThe [blog post on the Fish Rust rewrite](https://fishshell.com/blog/rustport/) provides a pretty good overview of why they moved to rust; and one of the big reasons is to attract new contributors."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.86621333333333,
      "arousal": 61.33786866666666,
      "dominance": 47.99697666666666,
      "text": "In a vacuum, given equivalent engineers, time and time in production, it is less likely to suffer from some types of vulnerabilities or to crash."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "The assumption is that said software is built to a higher standard of security and quality and less likely to contain bugs. This isn't a guarantee but it's a heuristic.\n\nAlso when it comes to marketing, it's marketing. It's not that far removed from saying where and how it was put together, which has no direct impact on the product as it exists."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.4195012,
      "arousal": 54.68253969999999,
      "dominance": 60.44217690000001,
      "text": "Copying my answer from [last time this was asked](https://www.reddit.com/r/rust/comments/1di33ye/comment/l910u58/)\n\nMy general impression has been 2 things:\n\n- Because Rust compiles to native assembly and doesn't use tracing garbage collection, it *on average* tends to produce higher performance code for a given problem, especially when that problem isn't bound by network i/o. Slower rust code also seems to have more low-hanging-fruit potential for easy speedups; there are countless stories of a 2x speed improvement because of an easy removal of allocations in a hot loop.\n- Because of Rust's nature as a language, it tends to attact developers who are much more obsessed with robust and correct code, relative to what we might call the median. Often this obsession comes at the cost of perfectionism or \"unreasonable time-to-ship\", but when combined with Rust's policy of \"ship a whole static binary that only dynamically links to libc\", it means that ON AVERAGE you tend to find that a particular random rust project is more likely to have fewer bugs and continue working correctly with minimal maintenence than an equivelent in a random other language (no fighting with virtual environments 2 years later, for example).\n\nIt's worth noting that both of these impressions are entirely anecdotal, and I have no data to backup my impressions of either rust software or rust developers. But since your question was about Rust's  reputation, these are my impressions of why the reputation arises."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.43083899999999,
      "arousal": 66.21315200000001,
      "dominance": 73.015873,
      "text": "Agree with him, it's marketing, people think it's cool.\n\nWe saw the same thing with Java, everything was called \"JSomething\" or a tenuous coffee reference.\n\nI think your friend is right, we've seen this before, and we'll see it again."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the enlightened do not question why the crab adorns its shell"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.92894933333334,
      "arousal": 60.40564377777778,
      "dominance": 66.55328788888889,
      "text": "C++ dev whose Rust toolchain only exists for installing third-party tools here.\n\nIt's kinda like a favorably-viewed country of origin marker to me. Just as being made in France doesn't make a wine inherently good, being made in Rust doesn't make a piece of software inherently good. Nonetheless, my experience has been that they make damn fine dev tools in Rustland. It's a cultural thing – French people care about quality wine, Rust people care about quality tooling."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.6938775,
      "arousal": 55.3287985,
      "dominance": 57.936508,
      "text": "Its important in case you need support or modify the code. \nIf your tools are all close source and build with an obscure language, you are going to have a hard time when something goes bad"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.2845805,
      "arousal": 56.037414749999996,
      "dominance": 63.40702950000001,
      "text": "He's kind of right IMO. That's also why Apple doesn't focus on the specs of their hardware or the tech stack of their software when they announce something. Instead, they focus on more user-oriented arguments and the problems the products solve.\n\nIn the case of Rust, for devs that argument may imply the code was more rigorously statically analyzed by the compiler, is memory safe and so on, but for the users it's pretty irrelevant."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.01108566666667,
      "arousal": 62.01814055555556,
      "dominance": 67.57369611111112,
      "text": "I'd give it two reasons.\n\nOne of them is that we, as developers, love to give ourselves labels and to brag. Currently, it's \"made with Rust\", but I'm old enough to recall the \"made with JavaScript\" generation, the \"made with Python\" generation, the \"made with Ruby\" generation and the \"made with Java\" generation, all worn with the same pride. We're happy to have proven that task X can be done with our toy Y, especially if it looks hard, and especially if toy Y makes it easier.\n\nAnother one is that \"made with Rust\" is actually increasing the baseline of the entire industry in terms of safety, security and performance. So yes, \"made with Rust\" means not only that we're contributing to that, but that, unless we've written maverick code, our program will be better than most in terms of safety, security and performance. It's a mark of quality."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.38473166666667,
      "arousal": 57.4074075,
      "dominance": 63.189720333333334,
      "text": "I tend to agree with your friend.\n\nPutting \"made in Rust\" *up front* is unsolicited information, comes off as fanboyish and unprofessional, and can rub some people the wrong way. If your software is so great then it should show its greatness in production, tests, benchmarks, etc. The language you wrote it in doesn't guarantee anything. If you claim that it does, then it seems you don't understand software development well enough, so if anything it is a mark *against* the quality of your software.\n\nIt *is* OK to mention it deeper in documentation, of course. And if it's a library, well, duh, the language chosen is kinda important.\n\nContext matters, too. If all the similar software is written in Python, then it could be important to point out that you chose a language that compiles to machine code (pros, but also some cons, perhaps?). But if you want to make a big deal out of choosing to use Rust as opposed to C++ or C, then ... I will suspect that your software might not be as great as you claim.\n\nMy profound wisdom on this matter comes from seeing a lot of bad Rust code out there..."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.151927666666666,
      "arousal": 50.869236666666666,
      "dominance": 58.163265333333335,
      "text": "For one, last decade was a time when alot of application was written in slow and error prone languages.\nIt feels good to know that this app does not suffer the same problem."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "it's the same as made in japan"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.9138322,
      "arousal": 60.430839000000006,
      "dominance": 54.807256200000005,
      "text": "Is not, being investigating rust. And most if not all that it does can be done with a good C++ compiler at maximum warning level and a linter to catch strangers. \n\n  \nThe \"security\" rust brings is compile time avoidance of memory problems.  That's it. You can still have logical problems and other bugs. And you can still remove that security by placing everything in the unsafe zone. \n\nIs this an argument against rust? No. Is this a (Rust not a silver bullet and you are insane if you change already debugged and tested C/C++ code for something untested just because new shiny thing) post."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because “made with rust” is hype. ( BTW, I am experiences rust developer)"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 47.505669,
      "dominance": 60.657596,
      "text": "It's marketing. There are some kinds of mistakes that are difficult to predict when they will be exposed that are not possible by rust. But you can certainly write buggy code and vulnerable code in rust, and the person who blindly says \"rust is better because rust\" is the type of engineer who will write buggy rust code.\n\n  \nI had someone tell me in an interview once that \"Rust is great because if it compiles you know it works\". Fastest way to end an interview I've ever had."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "But... Blazing Fast!"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.716552999999998,
      "arousal": 74.8866215,
      "dominance": 40.8163265,
      "text": "Because no null pointers mean you're less likely to crash the internet by accident "
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 57.898715333333335,
      "dominance": 67.64928166666667,
      "text": "It helps manage expectations for a project. Useful for people that know rust.\nIt means you can likely assume a specific build system, standard library, etc. If not that (like in the case of embedded systems), you can often assume rusts safety features to be present."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rust won't let me do a lot of shit other languages would. That's already a lot."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.177626333333336,
      "arousal": 56.65154933333334,
      "dominance": 52.83446733333333,
      "text": "There an assumption in this that marketing is either worthless or bad, neither of which is necessarily true\n\nThe phrase \"Made with Rust\"\n\n1. Advertises that the project is less likely to have latency spikes than apps written in Java; less likely to be slow than apps written in Python/Ruby/etc; and less likely to have memory errors than apps written in C++\n2. For open-source tools, advertises that the tech stack the app uses is in Rust and/or is modern which might attract contributors"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.76417239999999,
      "arousal": 71.5873016,
      "dominance": 74.0589568,
      "text": "But he is 100% right it is all about marketing/branding.\n\nBut also It simply is a win win. There is simply no reason not to do it.\n\n- your project may attract talent for tech you are using\n\n- your project may get attention thanks to exposure to group of users using that tech\n\n- it’s seen as a wholesome thing to do to give back to tech you are using\n\n- you may attract more people to tech you are building your stuff on\n\nEspecially when rust is seen by most devs as a hip/cutting edge tech. "
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.76644,
      "arousal": 65.617914,
      "dominance": 59.5238095,
      "text": "It is insanely easy to contribute to rust projects.\n\nI have never managed to get compile_commands.json fully working, meson for vscode has been broken for years, cmake is finicky with version requirements, make is a pain to write and debug, C/C++ documentation is a joke... Need I go on?\n\nIt's not just the language. rustdoc, cargo, rustfmt and rust-analyzer are godsends."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Go fanboys started the trend, Rust seems to be taking over.\n\n```\n$ apt-cache search \"written in go\" | wc\n    135    1172   10039\n$ apt-cache search \"written in rust\" | wc\n     32     325    2296\n```"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "i think all these comments about speed and security are a cope. rust users are fanatical and they like to tell everyone they use and like rust and they will definitely definitely definitely use other tools that are also written by rust people."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Rust as a language strives towards usability, safety, efficiency and correctness and it built a culture that attracts people who share those values. \n\nIt’s okay to not share any of those values, it’s a tradeoff you have to make. But I do care about it and people who like to associate themselves with rust seem to do too."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because otherwise there would not be way to tell what language was used to write the application."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.61451225,
      "arousal": 52.60770975,
      "dominance": 64.56916075,
      "text": "Rust is to software engineering what double entry is to accounting. There are times when it’s overkill, and times when it’s not a good fit. But if it’s a reasonable choice for the problem at hand, it’s likely the best choice for the problem at hand. So I’d say it’s both marketing and raising awareness of trying to use the best tool widely available. "
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Products made in Rust are more reliable in my experience. They're often much faster too."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.276644,
      "arousal": 45.578231,
      "dominance": 52.947846,
      "text": "I disagree, a clock runs constantly, code that runs constantly needs to be efficient."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Most of my programmer friends are Rust programmers, so if something is made in Rust, the odds that one of my friends made it or at least that someone they know made it are much higher than if it was made in other languages."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well it does help if your target audience are devs 😂"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "If it's a Python library that's made in rust with pyo3 bindings then it's going to be faster than if it's written in actual python."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Probably compatibility with other rust projects, and if it's been designed in a relatively sane way, also assurances that it won't work against you later.\n\nAlso if No_STD and embedded are supported, probably some assurance that it can be converted into web assembly and run in a container or browser."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.554422,
      "arousal": 59.325397,
      "dominance": 62.3582765,
      "text": "It's definitely used as a bit of a \"marketing\" term in some cases, whether it be to appeal to people who like Rust stuff and may bias towards trying tools using it, or to entice contributors who would like to work on Rust stuff, or other stuff. I personally don't put it on my Rust projects because I don't think it's necessary for me, and it kinda shows for itself it's in Rust if people care, but I can definitely understand the sentiment behind it.\n\nAlso, you see it with Rust a lot (and it is probably amplified by the rewrite-it-in-Rust meme/trend, as well as Rust's growing popularity), but I see projects in other languages do the \"made with X language\" all the time as well so it's definitely not _just_ a Rust thing."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.425656,
      "arousal": 51.603498571428574,
      "dominance": 65.24133442857143,
      "text": "I think it means something different to different people (more than one thing for each person).  \n  \nFor a junior programmer, could mean hope that Rust is still active and worth learning. For another it could mean security and speed- a label of quality of sorts.  \n  \nSure, logical errors, async errors, data race errors, etc. are not guaranteed (safe code) to be absent, but a lot of other errors are, which does give peace of mind to some degree."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Among other things that were mentioned, it shows people what can be done in Rust and gives Rust some credit. It allows people to gain more confidence in switching to Rust."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 31.972789,
      "arousal": 65.986395,
      "dominance": 32.426304,
      "text": "I have to say I'm not that big of a fan when projects do this, but I can also say that there's some \"signal\" in that phrase for me. I usually expect it'll be fast, but easier to deal with, less likely to get into weird environment and build issues and there'll be more focus on correctness. I also expect better focus on user experience - docs, error messages, examples. I think the phrase lost a bit of its meaning as rust got more popular, though."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.0076530625,
      "arousal": 54.46428575,
      "dominance": 60.076530625,
      "text": "I like this quote from Greg KH of the Linux Kernel https://lore.kernel.org/rust-for-linux/2025021954-flaccid-pucker-f7d9@gregkh/\n\n> The majority of bugs (quantity, not quality/severity) we have are due to the stupid little corner cases in C that are totally gone in Rust. Things like simple overwrites of memory (not that rust can catch all of these by far), error path cleanups, forgetting to check error values, and use-after-free mistakes. That's why I'm wanting to see Rust get into the kernel, these types of issues just go away, allowing developers and maintainers more time to focus on the REAL bugs that happen (i.e. logic issues, race conditions, etc.)\n\n\"Made with rust\" is a strong sign your tool will have very few of those classes of problems. \"Okay, but what does that mean for a normal user? in practice?\" it usually means less random crashes and other random heisenbugs that memory issues tend to cause, and fewer serious security issues like RCE's. As a user I like when my software does not crash or give \"the hacker known as 4chan\" the ability to run code on my PC.\n\nOf course the average user probably doesnt know any of that, because it depends on knowing what Rust is and what benefits it brings, and usually only developers know that stuff, so it might as well market as \"fast, secure, reliable\". Its useful information for *developers* though, and also serves as a strong signal for a bare minimum of enforced code quality and thus ease of collaboration."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The authors of such projects want to signal that they are cool, they are intelligent, they have fought the borrow checker and won, and that their weewee is big."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.79994966666666,
      "arousal": 58.16326522222222,
      "dominance": 67.4729148888889,
      "text": "By your friend's logic, the app's name and semantic versioning are \"marketing arguments\" too. So what? Different users need and use different information for their different use cases. \n\nIt sounds like he's trying to imply that it's 'only' a marketing argument and that would somehow be a negative. In my experience, that type of claim comes from people with a narrow scope of knowledge, usually concealing their lack of knowledge by flipping the narrative on to you as if it's on you to invalidate their claim. \n\nOthers have explained the specific method of knowing about Rust's inclusion so you have that to fall back on here. In the future, it's probably worth it to learn how to side step or call out that kind of logical fallacy."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.97505683333334,
      "arousal": 52.758881333333335,
      "dominance": 64.7203325,
      "text": "My experience is that, given two similar projects where one is written in rust and the other is not, the one in rust will often have/be\n\n- a better and more coherent UI (e.g. CLI argument structure)\n- more features\n- more actively developed\n- generally prettier (e.g. bat vs cat)\n- better cross-platform compatibility\n- easier to compile myself (cargo, no cmake, if I need an older compiler rustup does that, too)\n- a more modern approach to the problem\n- a bit faster\n\nIt's like putting \"Made in Germany\" on a physical product, it's a general sign that the product is *likely* of higher quality.\n\nNone of the points above are impossible in other languages, nor does rust guarantee any of them. But e.g. the existence of `clap` makes the first point extremely consistent. I guarantee that you'll be able to find counter examples, but my personal one counter example (nushell vs fish) isn't one anymore since fish was recently rewritten in rust...\n\nAlso, it's just not a bad thing to know the technology a project is using, as you can infer quite a lot of things from it. For example, a project written in Electron will automatically come with certain up- and downsides (like the ability to run it in the browser directly vs. potentially high memory usage). Rust is no different (typical downside being the fact the project likely is very young and missing some core features, or often has a few more bugs)."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.6077095,
      "arousal": 52.6077095,
      "dominance": 61.904762000000005,
      "text": "What the argument really should be is \"made with a memory-safe programming language\" but that's long, cumbersome and the only modern trendy memory-safe language around (that I know of) is Rust."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.24943316666666,
      "arousal": 52.26757383333333,
      "dominance": 60.54421766666667,
      "text": "Also I'd argue that \"made with rust\" has some beneficial advantages for users as well:\n\n* Better CLI. Most of Rust cli applicaitions use clap for command line argument parsing, which is significantly more user friendly compared to anything from C/C++ land. I've only seen some applications written in Go that tended to have similar polish.\n\n* More modern/less abandoned. Since Rust is relatively new language, applications written in Rust tend to be more modern: the authors have decades of experience to draw upon (see [zellij](https://zellij.dev/tutorials/basic-functionality/) for example; the closest alternative in C/C++ land is tmux). \n\n* Furthermore, because adding new crates to projects is so easy, you can relatively easily add new functionality to your projects. As a result, applications written in Rust might be more featureful.\n\n* Rust TUI applications tend to look plain better compared to alternatives, most likely thanks to availability of high quality TUI crates (see [dua](https://github.com/Byron/dua-cli) or [yazi](https://github.com/sxyazi/yazi)).\n\n* Rust applications are easier to install. `cargo install` is typically all you need. Most of the time you don't need to play with `apt install` to find the right dependencies for project to compile. Once installed, the application is most likely a single binary that lives in `~/.cargo/bin` that has no external dependencies. Thus if you upgrade your OS you don't have to worry about dependencies getting broken as everything in Rust is mostly statically linked.\n\n* Great performance."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "It's the same way with every new tech. I have seen this with c++, c#, java, python, go and now rust. A passing trend."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Being a rust dev myself for 7+ years this has to be one of the most turn-off rust moments for me. It's actually a gimmick."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.37717300000001,
      "arousal": 54.383975666666664,
      "dominance": 71.54195,
      "text": "I have programmed with php, ruby, elixir, ocaml, js, ts, c#, among others. I love all those languages. But never ever have I felt the peace of mind I had lately programming in Rust. Could it still fail even if it compiles? yes. does it? mostly, not. I think that reflects directly to the user experience. Sure, it could be hype. But I think not, not really."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.22449,
      "arousal": 63.3219955,
      "dominance": 74.54648549999999,
      "text": "Your friend is right. Plenty of good software is written without Rust, and Rust does not guarantee security or performance, it only makes it easier to get right in some very important cases."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The more accurate term might be \"rewritten in Rust\"."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Logical errors will exist in any language. But rust moves many of those errors to compile times. "
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "> every rust project was labeled as \"made with rust\"\n\n\nI'd love someone to show proper data to support/counter that claim. I suspect it's largely observation bias, as there are also plenty of Rust software that doesn't boast about it, and plenty of $OTHERLANG software that do."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.625850375,
      "arousal": 56.457860875,
      "dominance": 57.82312925,
      "text": "Well, let's consider some of the other options and what we can derive from those situations and contrast that with rust.\n\nIf someone said they wrote something entirely in assembly, what can you be \\*damn certain\\* about the program?\n\n1) It's not going to be too huge. Development in assembly is slow and difficult and has a huge amount of mental overhead to any progress. Impressive, but there is a reason that large, complex, projects are not written entirely in assembly. In a lot of cases, libraries come with lots of details the programmer isn't aware of our concerned about, so the work they do in assembly instead of leaning on a library will \\*mean\\* whatever they make will do \\*only\\* what they intended to do and will not do anything further. Railroad Tycoon is a tour de force of assembly and an amazing game, but I can promise you that adding translation will take a lot of work. Adding in any kind of human interface easing (oh, you aren't a bog standard fully healthy human with all the normal limitations? Well...good luck!). Other languages often make things easier and encourage (subtly or blatantly) on leaning on other library resources. That has a pretty significant effect on the size of the work involved vs features.\n\n2) It's going to be complex right from the start. Not because the problem becomes more complex just from being written in assembly, but because you can't leverage other's work in libraries. If you write it in assembly, \\*you\\* are responsible for every detail and you will damn well need to think about those details.\n\n3) It's likely to be fast. It won't innately be fast just because it was written in assembly, but if the person knows what they are doing, they can do a whole lot of optimizations when it comes to the details. The 'hot loop' will almost certainly get the most attention because it's very obvious to the programmer where \\*exactly\\* the real pain point sits.\n\n4) it's going to be a slog to get anything done. Since they need to keep track of every detail and work through every complexity and interaction, it's going to \\*require\\* the programmer to work through those details and keep things on the right track. Worse, any mistake is going to just be lost in the noise so they can't lean on the tools to make things simpler. They will \\*need\\* to work through things mentally.\n\nSo, we can see that a programming language definitely changes the development process and the end result. Sure, assembly is probably the most extreme example of this taken to a level of almost silliness, but it's important to note because it's only in \\*severity\\* not in \\*kind\\*.\n\nThe next step up is structured programming, something that at the time was considered controversial since it limited the options of the programmer rather significantly (what do you mean I can't make my program run in a figure eight pattern of code flow and instead have to work through a \\*stack\\* and tree structure! Do you know how many kinds of optimizations that removes! MY GOD MAN!). #snicker#\n\nup from that is procedural programming (which isn't precisely the same thing but it's related and came about at the same time and is usually lumped together)\n\netc etc etc.\n\nRust is just another leaf in this branching effort of shuffling through the computer science language research and turning it into computer engineering for programmers. It's a \\*significant\\* advancement and almost as important as structured programming in my opinion. Memory safety fixes so many of the issues that hackers and fat fingering has broken that I can't express how important it is. Almost as important is the escape hatches that let you work around many issues and in many cases while \\*keeping\\* that safety intact!   \n  \nIt's just staggering."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.14966,
      "arousal": 55.7539685,
      "dominance": 65.0226755,
      "text": "It's not; when something pitches \"made with rust\" heavily it normally means it has little to no \"real\" value. People care what software can do for them and by and large not how software is made.\n\nSomething that puts \"made with rust\" is advertising it's novelty factory not anything it can actually accomplish and is normally a sign of low quality, limited feature set compared to alternative projects, and likely to be abandoned before ever reaching feature parity.\n\nOverall \"made with rust\" in and of itself isn't bad to be but if that \"selling point\" it a big part of the pitch it's normally a good sign to look elsewhere. Honestly that tag is probably the biggest indicator the project was started by a junior dev who still hasn't learned what something can do is more important than how it was made."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.37415,
      "arousal": 56.0657595,
      "dominance": 70.068027,
      "text": "Well, yeah, it's kind of annoying sometimes. It's good, because it's made with Rust. Ok...."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "There are a lot of different names for that: [clique](https://en.wikipedia.org/wiki/Clique), tribalism, [echo-chamber](https://en.wikipedia.org/wiki/Echo_chamber_(media\\)), etc.\n\nBut every subreddit lives inside that very same mentality, so I don't think many people here can understand the concept."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.3900225,
      "arousal": 60.430839,
      "dominance": 57.596372,
      "text": "Reasons\n\nContributes to the Rust Ecosystem: When you see a project made with rust it means you (as a rust developer) likely know many of its dependencies and might be able to easily extend or contribute to the program. It might also mean you might be able to pick parts of the software to use for your own stuff.\n\nFocus on Quality: It means that the developers prioritized correctness and performance when they made the program. It also means the code is likely written only in one programming language without the requirement for external dependencies (like a Python or Node environment, docker, Visual C++ Redist, Electron, etc). This also means it's likely to be available for your platform."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.596372,
      "arousal": 56.17913849999999,
      "dominance": 76.020408,
      "text": "- Likely to be fast\n- Likely to be reliable\n- Likely to be easy to install (with `cargo install`)\n\nIf pointing out good things about your product is \"marketing\", then yes, it's marketing."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.5555554,
      "arousal": 50.068027,
      "dominance": 62.06349200000001,
      "text": "\"made with Rust\" should not make you more inclined to install or use a program. \n\nRunning any program written by another person, (or even yourself when trusting your dependency chain) carries with it significant security risks.\n\n\nRust is not \"more safe\" than any other programming language and this sound byte should be eradicated. \"Safety\" in this sense is referring to memory safety, not the inherent safeness of the program from not screwing up your computer.\n\n\nRust is just as dangerous as any other programming language. Please stop using phrases like \"Rust is safe\". \n\n\"Made with Rust\" should not compel you to run any piece of software."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "because, very often, rust programs are of significantly higher quality than similar programs written in any more popular language."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.10052866666666,
      "arousal": 51.92743766666666,
      "dominance": 72.373394,
      "text": "Built with Rust == Built with/to trust...as in, trust us to be fast and secure..."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust has some security features built-in in the language. Even though it's not any absolute guarantee that the program actually has any security given the possible use of unsafe, the possibility of logic and specification errors and that the programmers might have made mistakes and incorrect assumptions; being made in rust surely helps to make the program more robust."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.049886833333325,
      "arousal": 60.430839,
      "dominance": 57.350718,
      "text": "Main argument for Rust is you get code that runs faster with less likelihood of bugs that are typical of other fast languages like C and C++ - buffer overflows, data races etc.\n\n\nSo it has an implication of being reliable, less exploitable, and fast. As a customer / user that's a good thing. As a developer that's a good thing too for your reputation and time.\n\n\nBut of course you could write absolutely terrible dogshit Rust if you really tried. Slap unsafe everywhere, use pointer arithmetic, don't write unit tests, deadlock your mutexes etc. Nothing is perfect but the same is true of any language so it's not much of a counterargument against using Rust."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "As a former C++ and Python dev, I find it way easier to avoid logical errors in Rust code, thanks to its type system, constraints that force developers to better structure their code and ease to write tests and document code."
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "`fn main() {`\n\n`println!(\"Because everything should be written in rust.\");`\n\n`}`"
    },
    {
      "post_title": "Why is \"made with rust\" an argument",
      "created_utc": 1750099461.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[Media] Rust, compiled to Holly C, running on TempleOS"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 69.727891,
      "arousal": 55.839002300000004,
      "dominance": 60.566893500000006,
      "text": "In the spirit of April Fools, I decided to do something silly, and run some Rust code on obscure software.\n\nI am a fan of history of Computer Sience, and language / OS development. Despite its obscurity, and tragic backstory(the author of Temple OS, [Terry Davis](https://en.wikipedia.org/wiki/Terry_A._Davis), suffered from mental illness), [Temple OS](https://templeos.org/) is a truly fascinating and inspiring piece of software.\n\nEquipped with a C-like language(Holly C), a JIT compiler, and a revolutionary text format(which could embed 3D models, sounds, and [much more](http://www.codersnotes.com/notes/a-constructive-look-at-templeos/)) there is always something new to discover.\n\nBy modifying my [Rust to C compiler](https://github.com/FractalFir/rustc_codegen_clr), I have been able to make it output Holly C. There is a surprising amount of odd syntax differences between C and Holly C. Still, in spite of all that, I managed to get a simple Rust iterator benchmark to compile and run on TempleOS(after some manual tweaks).\n\nI don't plan to do much more with this - I mostly wanted to do something silly - and show it to the world :D.\n\nHere is a sample of Rust compiled to HollyC(names de-mangled for readability):\n\n    U0 iter_fold(\n        Range self, RustU0 init, Closure2n23Closure1n12Closure1pu32v *f) {\n      Option L0;\n      I64 L1;\n      U32 x;\n      RustU0 L3;\n    bb1:\n      spec_next(&self, &L0);\n      L1 = ((L0).v)(I64)(U64);\n      if ((((L0).v)(I64)(U64)) == (0x1(I64)))\n        goto bb3;\n      if (!(L1))\n        goto bb5;\n      goto bb14;\n    bb3:\n      x = (L0).Some_m_0;\n      fn_call_mut(\n          (&f), (L3), (x));\n      goto bb1;\n    bb5:\n      return;\n    bb14:\n     \t\"Unreachable reached at \";\n             \"/home/michal/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/\";\n             \"rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2548:5: \";\n             \"2558:6 (#0)!\";\n      abort();\n    }"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "By the way, the language is named \"Holy C\"."
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.0181405,
      "arousal": 74.3197275,
      "dominance": 70.861678,
      "text": "The fun thing about TempleOS is that since everything runs in kernel mode with full access to everything you can make a game that gradually rewrites the OS in rust while you play"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.887376999999994,
      "arousal": 65.192744,
      "dominance": 68.51851866666667,
      "text": "Amazing. Terry would be proud (except if he would hate Rust, which is a viable option)"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.489796,
      "arousal": 45.578231,
      "dominance": 68.93424,
      "text": "Mmm.  Great.  This post is gonna send me down an April fools rabbit hole.  RIP Terry Davis."
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.99319733333334,
      "arousal": 53.47694633333333,
      "dominance": 65.154951,
      "text": "I've always sort of wanted to write a new version of TempleOS (without all the religious overtones) because it seems like it would be darn useful as a learning environment. And without the networking stuff, seems like it would be pretty safe, too."
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 28.344671,
      "dominance": 50.680272,
      "text": "This would have made a great  [sigbovik](http://sigbovik.org/) paper. Alas the deadline has passed for submissions but maybe think about writing one for next year."
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.324263,
      "arousal": 53.854875,
      "dominance": 71.428571,
      "text": "Divine Intellect"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Holy crab 🦀"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, great job!"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Godly Rust 🥲 It's so glorious!"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amén"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amazing!  \n\nIs there a straightforward way to run TempleOS nowadays, like in a container, or does it still need a special VM or hardware emulator?"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "o7"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.487528,
      "arousal": 65.306122,
      "dominance": 66.326531,
      "text": "The comment section is gold fr ✨"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this is absolute heresy"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I always wondered if Terry would've been able to build a badass LLM from scratch if he was still around. Dude was truly a brilliant programmer."
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.836735,
      "arousal": 76.417234,
      "dominance": 69.727891,
      "text": "this is joke or have github source?"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What makes the C so Holy? (Naive Question)"
    },
    {
      "post_title": "[Media] Rust, compiled to Holly C, running on TempleOS",
      "created_utc": 1743547113.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Transpiled*"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 72.13500784615384,
      "arousal": 52.82574576923077,
      "dominance": 65.35845076923077,
      "text": "I got tired of the expensive “email discovery” tools out there (think $99/month for something that guesses email patterns), so I built my own in Rust. It's called email sleuth.\n\nYou give it a name + company domain, and it:\n\n* generates common email patterns (like `j.doe@company.com`)\n* scrapes the company website for addresses\n* does SMTP verification using MX records\n* ranks & scores the most likely email\n\nFull CLI, JSON in/out, works for single contact or batch mode. MIT licensed, open-source.\n\nI don’t really know if devs will care about this kind of tool, or if sales/outreach people will even *find* it (or be willing to use a CLI tool). But for people in that weird intersection, founders, indie hackers, maybe it’ll be useful.  \n  \nThe whole thing’s written in Rust, and honestly it’s been great for this kind of project, fast HTTP scraping, parallelism, tight control over DNS and SMTP socket behavior. Also forces you to think clearly about error handling, which this kind of messy, I/O-heavy tool really needs.\n\nAnd the whole SMTP port 25 thing? Yeah, we couldn’t really solve that on local machines. Most ISPs block it, and I’m not really a networking guy, so maybe there’s a smarter workaround I missed. But for now we just run it on a GCP VM and it works fine there.\n\nAnyway, if you want to try it out or poke around the code, would love any feedback."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Cybersecurity subreddits might be interested. Could be a decent OSINT tool"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.82086183333332,
      "arousal": 52.30536683333333,
      "dominance": 63.69992416666667,
      "text": "Technically cool project. Probably a great one to learn Rust. The only bad thing about it is its primary use case of finding emails to send SPAM and scam/phishing mails to.\n\nA nice tool for people who are part of the problem. But at least it's not an orphan crushing machine."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 27.664399,
      "arousal": 76.643991,
      "dominance": 66.439909,
      "text": "I'm not mad at your for creating this. I'm mad that something like this exists in any form"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.948412625,
      "arousal": 56.150793875,
      "dominance": 63.732993,
      "text": "Just want to point something out because I honestly don’t get the tone in some of these replies.\n\nI’m a founder, I use this tool for cold outreach. That’s how most of the industry works. Like it or not, 99% of sales and recruiting start with email discovery. And if you think this isn’t legitimate, I’m curious: how do you think multi-million-dollar tools like RocketReach or Hunter operate? They’re doing the same thing, but behind a paywall.\n\nSo when I build something open-source and free, suddenly it’s shady?\n\nCan this be abused? Of course. So can compilers, so can web scrapers, so can literally any general-purpose tool. That’s not a reason to shut down useful software. That’s a reason to use it responsibly."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "literal reason we have spam"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "Cool project but why? I hate receiving unsolicited emails. Go away"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.2471655,
      "arousal": 53.741496999999995,
      "dominance": 68.1405895,
      "text": "Very cool tool and thanks for the explanation on how it works.\n\nAre you worried others will take it and wrap it into a SaaS to compete with RocketReach, benefitting for free from your efforts?"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.2108844,
      "arousal": 55.827664600000006,
      "dominance": 65.7369614,
      "text": "Don't listen to the haters OP, I think u made something really great. Don't expect generosity from the same world that crucified christ LOL. But I, for one, am very, very grateful you offered this tool for free. Cheers, man!"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.011338,
      "arousal": 87.528345,
      "dominance": 83.786848,
      "text": "Open Source is always a win. At least it is democratizing."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Not sure about all of the whining and whinging, any tool can be used in a nefarious way.  🤷\n\nOP, I have a need for this, so thank you. "
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "and of course you have an avatar made by the plagiarism machine. do you just feel entitled to everything that isn’t yours?"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am not sure how old your GCP project is, but currently GCP blocks all outbound 25 ports."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "i could do a review of the code if you want"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The best thing is that you made it to solve your own itch. That’s always a MVP."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "this stuff is inherently malicious and I love it"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.0287225,
      "arousal": 58.8813305,
      "dominance": 65.60846533333334,
      "text": "This seems like a good tool to use before falling back to paid services like gem. Op, great tool, idk why people are whining about it, it's clear they don't understand people who need to do cold outreach even though you clearly stated the purpose of being an alternative for rocketreach..."
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built an email finder in Rust because I’m not paying $99/mo for RocketReach",
      "created_utc": 1745682662.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Could you explain why MIT licence?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My Rust development environment is 100% written in Rust!"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 72.59475228571429,
      "arousal": 51.279559428571424,
      "dominance": 71.12082914285715,
      "text": "&#x200B;\n\n[Screenshot of my development environment](https://preview.redd.it/j53b5rgmoekc1.png?width=1920&format=png&auto=webp&s=b2d3683ca0f58dd310e3ff19aded11821bc297ea)\n\nMy current Rust development environment is 100% written in Rust. This really shows how far Rust has come as a programming language for building fast and robust software.\n\nThis is my current setup:\n\n* Terminal emulator: [alacritty](https://github.com/alacritty/alacritty) \\- simple and fast.\n* Terminal multiplexer: [zellij](https://github.com/zellij-org/zellij) \\- looks good out of the box.\n* Code editor: [helix](https://github.com/helix-editor/helix) \\- editing model better than Vim, LSP built-in.\n* Language server: [rust-analyzer](https://github.com/rust-lang/rust-analyzer) \\- powerful.\n* Shell: [fish](https://github.com/fish-shell/fish-shell) \\- excellent completion features, easy to use as scripting language.\n\nI specifically chose these tools to have all the necessary features built-in, there is no need to install additional plugins to be productive.  \n"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Redox, btw."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.5351475,
      "arousal": 61.904762,
      "dominance": 62.528345,
      "text": "\"Helix - Editing model better than Vim\"\n\nWell, you are entitled to have a wrong opinion 😉\n\nJk, I agree with the core of your post. Especially when it comes to tools on the terminal (and the terminal itself), the Rust ecosystem has grown to a really healthy size, and the fact that you can have a setup like this shows that pretty well."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.7913836,
      "arousal": 53.6734694,
      "dominance": 68.61677979999999,
      "text": "Last I checked, fish has yet to release a version with the Rust rewrite. The current version is 3.7.0, which according to the [fish release page](https://github.com/fish-shell/fish-shell/releases/tag/3.7.0) still is just C++.\n\nBut still, I share the same excitement with you about these dev tools being ported/written in Rust."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "Oh, I didn't realize fish is mostly written in Rust. They migrate it recently?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44897950000001,
      "arousal": 46.371882,
      "dominance": 67.913832,
      "text": "Zellij + helix + alacritty is my current workflow too!\n\nI've just setup some shell functions to change the font size in alacritty (do a sed on the alacritty toml configuration)\n\nZellij is awesome for me because I can use the same key map  I know from tmux and it provide a bunch of features out of the box.\n\nHelix principle of cursor moving first is great, I appreciate to put quotes or brackets on a selection using ms.\nNavigating between buffers, symboles and references is super easy, that's definitely what I use the most."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You could use nushell"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.006803,
      "arousal": 45.011338,
      "dominance": 55.668934,
      "text": "Which window manager do you use?\n\nYou can check LeftWM(written in Rust btw)."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This but wezterm"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.58579,
      "arousal": 55.93348433333333,
      "dominance": 64.39909300000001,
      "text": "I use atuin for shell history. fd and rg are nice replacements for find and grep. Also super happy with zed."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Isn’t your Alacritty config a yaml file? 100% rust mein arse. More like 99.99%. Jk but noice"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You need to add [starship](https://starship.rs/) in there."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I haven't even fully learned Rust, but I would appreciate a faster editor for my other (Java & Kotlin) projects. It's a shame that Zed editor is only available on MacOS."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "helix 🤤 (i still use vscode for everything)"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Ooooo I like how zellij does the panes"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "But you didn't tell us what operating system you are using."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You're missing one last critical ingredient:\n\n^(Linux.)"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 61.337868,
      "dominance": 66.326531,
      "text": "I skimmed the zellij page and I couldn't find the answer to \"why should I use this instead of tmux?\" In their FAQ. So why should I?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There’s no other language where writing something 100% in that language is a selling point"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">Code editor: helix - editing model better than Vim, LSP built-in.\n\nCould you tell about what's different? What's different from vim? Why does it make it better?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "bro, living in the future but today"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "nushell is my pick. It's an upgraded, truly cross platform version of powershell that's written in rust. Best one I have used. It's not just a nicer shell. It's a very cool paradigm for shell scripting."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.303855,
      "arousal": 59.410431,
      "dominance": 62.698413,
      "text": "Oh man, thanks for that! I've never heard of helix and now I've learned that I've been waiting for it for so long. Like neovim without all that burden of configuring LSP :-) Thank you!"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "How about (nushell)[https://github.com/nushell/nushell] instead of fish (while it's RiiR) ?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "Fish isn't written in Rust, not yet at least.  You should use nushell instead.  Written in Rust and my personal favorite shell."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Lets talk about the OS?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.7619045,
      "arousal": 47.1655325,
      "dominance": 63.8321995,
      "text": "It's so cozy! Well done! Do you mind sharing the dotfiles?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 42.630385,
      "dominance": 50.907029,
      "text": "The chicken or the egg."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check out Zed too as a code editor. Very cool"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "When will the OS be part of this list?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Wowww nice!!!!"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.453515,
      "arousal": 56.519274,
      "dominance": 72.9024945,
      "text": "I tried to have almost this setup, except nu shell. But everything was just 1 degree off right:\n- zellij has no unusual leader key combo, so lots of its keys clash with things it’s hosting\n- helix has no copilot/tabnine, which is a productivity loss I didn’t want to take\n- nu is just so incompatible with everything\n\nIt’s a real shame because there’s so much to like about these tools. But I’m back to astronvim in tmux"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why not zed for text editor?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.76492822222222,
      "arousal": 54.11942533333334,
      "dominance": 54.686319,
      "text": "I just downloaded helix for a play... and was more impressed than I expected to be. It felt like out of the box it was close to my Lazy setup. LSPs just seemed to work, as did syntax highlighting and all the git sugar.\n\n  \nHowever, then I went looking for the file tree... and was sad. The editor feels really snappy (more-so than nvim IMO). The file tree is a killer feature (for me) though. \n\n  \nMy workflow normally involves zipping around using fuzzy finding (which helix has great support for). However, in nvim I'm so used to opening the filetree to:\n\n1. Get my bearings in a new project\n2. Create new nested directories / files while laying out a project\n3. Move files between directories\n\n  \nIs there a \"helix\" way of doing this?\n\n  \nAside from that minor gripe... I'm impressed enough I may switch."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 31.632653,
      "arousal": 67.573696,
      "dominance": 37.414966,
      "text": "but what about your operating system ?\n\n  \nif its linux, it isnt 100% rust and this reddit post is a blatant lie /j"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "nice I gotta try Helix"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Who tells him that the libc he is using among other crates are `-sys` with C underneath"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.480726,
      "arousal": 45.351474,
      "dominance": 68.253968,
      "text": "I am not fan of Fish since it is not compatible with Bash unlike Zsh"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Run on all these tools in a debugger to see all the glibc and syscalls, *then* tell me it's 100%"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "This is such a cult-like Rust thing, using everything in Rust just because it’s Rust. Not sure whether I like it or hate it."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "you know these are just tools right?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rust this rust that, whats next? your grandma write rust?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "just curious: Do you have the setup to use a debugger with breakpoints, call stack etc.?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Can you actually select 1 character in helix? I couldn't find a way to do that."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What operating system are you using?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.94217725,
      "arousal": 47.22222225,
      "dominance": 65.3628115,
      "text": "Unless your fish shell is a custom build, you're probably still using the C++ version:\n\n> fish 3.7.0 (released January 1, 2024)\n\n> Although work continues on the porting of fish internals to the Rust programming language, that work is not included in this release"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "If only alacritty supported Font Ligatures. That's the only reason I swapped from it to Kitty. Never heard of zellij before, I'll have to look into it. As for helix... we'll have to agree to disagree. :D Neovim FOR LIFE!"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "wezterm also written in Rust"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The important question here are your knee highs made using rust?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Really really nice! But what there are you using? :D"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.024943,
      "arousal": 64.172336,
      "dominance": 66.666667,
      "text": "Out of interest, whats your reasoning for Helix's editing model being better than vim?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have you tried Nu shell?"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What do you use for `git` ? I tested `gitui` but `lazygit` feels better"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Warp is available on Linux now. Written in Rust. Best terminal I've ever used."
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Same for me, but I'm using [`rio`](https://raphamorim.io/rio/) as my terminal instead of `alacritty` (giving WGPU a try :D)"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.3718825,
      "arousal": 47.505669,
      "dominance": 65.759637,
      "text": "Is this all on Linux? Is there a reason you’d use Alacritty on Linux and not just start the zellij and fish from the default terminal? \nI am nee to this type of setup. Used Cmder for Windows and mainly use the default bash and terminals on Linux. \n\nVery nice setup though thank you. I’ve now got on my local dev server"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.510204,
      "arousal": 59.183673,
      "dominance": 62.358277,
      "text": "This but Vim/Neovim haha\n\nBut everyone has their own taste"
    },
    {
      "post_title": "My Rust development environment is 100% written in Rust!",
      "created_utc": 1708726054.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Once I can write helix plugins im down, but I ended up learning vim motions back when it was still a tossup. \n\nNow I am entrenched firmly in \"tweak what folke has\""
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are games actually harder to write in Rust?"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 81.82161766666667,
      "arousal": 59.48601666666667,
      "dominance": 68.36734666666666,
      "text": "I've been using bevy for a week and it's honestly been a breeze. I've had to use UnsafeCell only once for multithreading in my 2D map generator. Other than that, it's only been enforcing good practices like using queues instead of directly mutating other objects.\n\nI don't know why people say it's harder in Rust. It's far better than using C++, especially for what long term projects end up becoming. You avoid so many side effects."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.2046485,
      "arousal": 60.473355875,
      "dominance": 63.18027175,
      "text": "I've been writing C++ for almost 30 years and more than 12 of that working on C++ AAA games.  I've written dozens of game engines in C++ to various degrees of completion.  Last year I developed a game engine and wrote a small mobile game in Rust with Vulkan API using the ash crate and put it on the app store.  I'd say it's quite a bit easier to write games from scratch in Rust than C++.\n\nMost big games are actually a huge patchwork of third party middleware mostly written in C and C++ and some kind of scripting engine.   Wedging Rust into these ecosystems could be a lot of work and I think it most cases it might be easier to keep things in C++, but if I were working on a game team today I'd be looking for opportunities to use Rust for sure."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.13997118181818,
      "arousal": 56.64811381818181,
      "dominance": 62.15213345454545,
      "text": "So, in my opinion, often times people are talking past each other when debating the difficulty of games in Rust. Games programming is a highly multi-disciplinary field that also has quite a few \"non coders\" that need to make contributions to the code base. Rust as a \"systems\" or game engine language is excellent in my opinion. You get the typical Rust advantages of safety, great multi-threading support, Rust enums, cargo, etc. However, as you move closer to \"non coders\", that is artists, designers, and even technical artists, Rust's strictness and verbosity become a bigger and bigger disadvantage. This is why, in my opinion, Rust as the primary language a team writes \"gameplay\" code in is likely \"more difficult\" than something like C# or even a well established C++ legacy system (like Unreal). This is hardly insurmountable for a game engine, as game engines having scripting languages is a very old pattern and Rust can play nicely with essentially any other programming language. Rust's strictness is also a negative here as often a designer or artist just wants to try something out (\"throwaway code\"), which is much more time consuming in Rust than \"simpler\" alternatives. As a sidenote, I have met technical artists who are fantastic programmers and could easily conquer Rust, but learning a new programming language might not be the easiest sell to many of them."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.75881254545455,
      "arousal": 54.112554,
      "dominance": 62.079983272727276,
      "text": "Game dev exists on a continuum, with a lot of decisions that intersect. A small game developer can perhaps start from scratch and adopt a new language as they want, but large game studios can use and evolve the same engine for years and years - as an example, Bethesda's Creation Engine being tailored to the games they make. \n\nA large studio might have, say, 150 engineers, and using Rust might impact a significant number of those to get them productive. This is a non-trivial cultural and educational shift.\nBuilding new engines is a multi-year investment (5 is not unreasonable) and a huge cost in an industry environment that tends to be lean already. \n\nIf you want to introduce it incrementally you have 2 languages on the go, which is not easy, and you have C++ to Rust, which likely means CXX... While CXX is a great help, it's also not trivial, nor really complete for what you might want.\n\nNote that you are almost always dealing with various SDKs, and those are almost always exposed in C or C++. \nYou also have to deal with the assumptions of the platforms you are shipping on, which means even more tools geared to C++.\n\nAs much as I enjoy Rust, the industry is challenging enough at the moment that few studios are going to see the value proposition vs concentrating on shipping and getting money, and actually focusing on what players want."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.46402809090908,
      "arousal": 59.09090904545455,
      "dominance": 63.39414540909092,
      "text": "As somebody who's worked in the game industry for quite a while. Rust dramatically reduces the number of paradigms/patterns that are available to you, at least without pulling your hair out. It also makes it nigh impossible to throw together some quick crap code that barely holds together to rapidly prototype an idea or whatever. Microoptimizations (which are almost always required in the hot paths that deal with the crunchiest bits) are in my experience also significantly harder to write, even when using unsafe (I guess you *could* use inline asm... still harder), and debugging/profiling tools are significantly behind the industry standard (at least, as far as I'm aware; if somebody can prove me wrong, please do!)\n\nThere's also the engine issue. Bevy's not bad, but to be blunt, it's not really even close to being competitive with UE/Unity for professional use. Maybe with Godot, which isn't really used outside indie productions, for various reasons, many of them completely unrelated to anything to do with programming (I'm not going to write a dissertation, but suffice to say if studios could skip paying royalties without it impacting the timeline and the end product too much, they would be jumping at the opportunity) \n\nYes, if you stick to Rust-friendly coding patterns, and are just developing some lightweight indie game that would run just fine on 15-year-old systems, and do all of that as a solo dev for good measure, it will be smooth sailing, no doubt. And it goes without saying, Rust also has upsides that could balance out all of the costs depending on your project's circumstances and your utility function.\n\nSo, is it harder overall? I guess that's subjective, depending on your personal experience/skills and the specifics of your project. I would say, as far as the game industry goes, 99% of the time the answer will be \"yes\". I do think one day, if a Rust-based game engine becomes mature enough, alongside other tooling, and more people in the industry become comfortable with Rust and Rust-friendly paradigms, the answer could absolutely change -- and I hope that day does come. But today, I really couldn't in good faith recommend a brand new project at work use Rust (we do use it for some libraries, by the way, works great there)"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It’s more the lack of mature libraries than the language itself. For example if you want to do sophisticated VFX/particle effects there’s nothing available in Rust that’s even close to the level of Unreal 5 (or even Unity) but that’s not a language thing."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.058956875,
      "arousal": 55.13038575,
      "dominance": 61.125283375,
      "text": "I say this as someone who spent the last 12 years writing mostly C: my personal opinion is that Rust is a very easy language, because there's a lot you don't have to worry about if your code even compiles. In the same sense, I think C and C++ are difficult languages because you have to think about these things all the time, and always think about how new code interacts with existing assumptions.\n\n\n\nSome people think Rust is hard, so to them writing games in Rust is hard.\n\n\nAlso, I dabbled in Bevy and I liked it a lot. But through no fault of the Rust Godot folks, writing Rust in Godot was a lot harder, because C++ concepts leak into your code all the time."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.6247165,
      "arousal": 60.85600925,
      "dominance": 53.2312925,
      "text": "If you have a lot of experience using C/C++ to the point that it has already shaped how you tackle problems, especially if you have developed bad habits, it is indeed much more difficult. And this is especially true if you want to reinvent the wheel.\n\nIf you decide to use some of the [many helper libraries that exist](https://arewegameyet.rs/), and do not attempt to do things that are intrinsically hard in Rust (such as cyclical graphs), you'll be more than fine.\n\nThere was a great post that went into some of the problems that a game dev ran into some time ago on this subreddit, but sadly, I've lost track of it :("
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.8911565,
      "arousal": 62.936508100000005,
      "dominance": 69.12698400000001,
      "text": "The answer to the title is No. This has nuance to it. As far as I can tell getting rust on all gaming platforms is a challenge. As I can tell at this time C++ 20 is supported all on platforms win/linux/osx/ios/android/ps5/xbox/switch/switch2/steamdeck. \n\nSo for a language while I love Rust, I picked C++ 20 for my engine. Sure rust might have some compiles for those platforms I can find nothing publically available stating your Rust game will work on ps5 or switch. \n\nNow that you have a language you need a graphics / platform library. Which is a whole can of worms. \n\nSDL3 supports all the platforms above. I picked that for OS /platform abstraction. \n\nGraphics another grab bag. While OpenGL is easy it’s nothing like modern pipeline based graphics libraries. For this I recommend vulkan for Lin/win/steamdeck/android, metal for osx/iOS and platform specific libraries for ps5/switch/xbox. \n\nHope that helps and some."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.031746,
      "arousal": 57.42630375,
      "dominance": 63.4637185,
      "text": "There is a big difference between doing a game as solo developer, or trying to introduce Rust on an industry that has been using C and C++ since the early 1990's, with all the knowledge and tooling that most studios are used to.\n\nAdditionally for most studios, coding is a minor role, yes the folks are critical to the core engine, however what the large majority of the studio is doing is done via scripting, thus the advantages of Rust over C++ don't came up as much as in other industries."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.24619385714286,
      "arousal": 59.29705214285714,
      "dominance": 62.16391314285714,
      "text": "> good practices like using queues instead of directly mutating other objects\n\nI'm not sure who claims this is good practice, and I'd really question why. Some of my most frustrating bugs to debug have been due to message queue systems deferring actions in game engines. Message queues separate the what from the why and make breakpoint debugging far less useful.\n\nIf you are doing this, I'd recommend including a string of the callstack at message creation time in the message itself in debug mode, so you can at least tell where a message came from. Or if that's too costly, at least a unique enum tag from each callsite. It makes debugging game message queue systems slightly less of a headache as they grow and age."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.940287,
      "arousal": 58.54119433333333,
      "dominance": 69.12320466666667,
      "text": "You need to spend more than a week making a game, or several games, I feel to definitively say if it's easy or hard. [Leaving Rust gamedev after 3 years](https://loglog.games/blog/leaving-rust-gamedev/)\n\nAlso the r/rust post about it: [https://old.reddit.com/r/rust/comments/1cdqdsi/lessons_learned_after_3_years_of_fulltime_rust/](https://old.reddit.com/r/rust/comments/1cdqdsi/lessons_learned_after_3_years_of_fulltime_rust/)"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ganes are harder to make without an editor, yes.\n\nso far Fyrox has been the only one with an editor."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.92290249999999,
      "arousal": 57.086168,
      "dominance": 63.038549,
      "text": "That's the beauty of rust. It forces you to think about information flow. Hard at first but then it gets easier. It suffers from lack of software but for this maturity level I think it is normal."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.06916100000001,
      "arousal": 60.090702750000005,
      "dominance": 64.34240325,
      "text": "> I've been using bevy for a week and it's honestly been a breeze.\n\nYou're on the first 1% of Pareto's 80/20 and wonder why your experience differs from people that are actually trying to get a game into production."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.079365,
      "arousal": 54.45956133333333,
      "dominance": 64.512472,
      "text": "Yeah, I think if you're building things with code-only engines like Bevy I agree that Rust's support is fantastic and frankly easier than most other languages, particularly C++. So many issues that I bumped into in C++ before just aren't a thing in Rust.\n\nThat said, compared to something like Unity it's definitely one of the more difficult ways of building games. Definitely not a place to build quick prototypes!"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I have no experience in this but I have read a relevant article \nhttps://loglog.games/blog/leaving-rust-gamedev/"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "> I've been using bevy for a week\n\n> I don't know why people say it's harder in Rust\n\nThe case of https://en.wikipedia.org/wiki/Dunning–Kruger_effect ?"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's not just that it's harder, it's that by having to work around so many of the borrow checker issues you end up not actually benefitting from the borrow checker at all."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.53741500000001,
      "arousal": 55.045351499999995,
      "dominance": 59.2403625,
      "text": "I don't do game dev but I think the hardest part I've heard about is making inventory systems where you can give things, trade them, or borrow them. Something about ownership or borrow checking. /s"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.93485881818182,
      "arousal": 57.23562145454546,
      "dominance": 61.152339454545455,
      "text": "\\~2021 I did a rewrite of one of my existing games in Rust.  \nMostly to learn Rust, but also to understand it's usefulness in game development.  \n[https://github.com/AndreasOM/fiiish-rs](https://github.com/AndreasOM/fiiish-rs)\n\nI wrote 99% from scratch, mostly avoiding existing packages -- to get the maximum pain/gain.\n\nI created a lot of games, for a lot of platforms from scratch,  \nand I must say: This was so most relaxed, and enjoyable project I had done until then.\n\nNote - If you look at the code:  \nI had no clue about Rust back then, and would probably do a lot of things differently today, but the end result worked.\n\nSince then I added Rust to every single project and company I touched.  \nI do a lot of freelance work in games, so that are \\*a lot\\*.\n\nKey observations:  \n\\- There is still some resistance, mostly due to the \"Rust's learning curve is so steep\" FUD. Which is just not true.  \n\\- It is super easy to add Rust.  \n\\-- Tools. Converters.  \n\\-- Libs.  \n\\-- Backends.  \n\\-- Game code. Game Play & Engine.  \n\\- I never had Rust code removed after it was introduced, and it tends to spread like wild fire through the code base, and the dev team.  \n\\- There were at least 2 Projects that were literally saved by Rust. One of them one of the Top AAA games ever. (Can't name it due to NDA.)\n\nps:  \nI used C++ since v2.0 and had a ton of career capital in that. I am not sure I would go back."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.826530500000004,
      "arousal": 65.70294775,
      "dominance": 58.956916,
      "text": "Almost every other language is going to be easier to use than C++ for initial development, the big advantage of C++ in gamedev is not having to go to war with the garbage collector when dealing with performance issues, but since rust doesn't have gc that issue is not a problem.  the primary issue with rust gamedev imo are the immaturity of the game engines/libraries/ecosystem in comparison with C++."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "This post comes to mind https://loglog.games/blog/leaving-rust-gamedev/"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.15873020000001,
      "arousal": 59.0589569,
      "dominance": 62.732426399999994,
      "text": "Have you read [this article](https://loglog.games/blog/leaving-rust-gamedev/)? Maybe it would be a good idea to get in touch with the person who wrote it.\n\nI think the crux of this article is as follows: “When you're in the design iteration phase, ie when you need to keep writing and throwing away code _just to figure out what it is you're supposed to be building,_ then Rust is much more pain than it's worth”. Your post reads as if you already have a pretty good idea of what you're trying to build, so maybe that's what all the difference in opinion boils down to."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.54371388888889,
      "arousal": 52.771479,
      "dominance": 62.71101022222222,
      "text": "My honest opinion is that it's a mixed bag. \n\nPro C:\n\n - You can save a huge amount of time by using \"unsafe\" practices\n - You can save more time by writing spaghetti \"for now\" which isn't that big of a deal if you're a solo dev, or close to the finish line\n - macros and templates are _very_ flexible and easy to use (and misuse)\n - Compiling is much faster in C/C++. A difference of a second or two is gigantic when you're hot reloading.\n - C libs are much easier to use and most of them are the industry standard\n - If you rely on a rust wrapper or rust implementation of a c lib, it's likely a bus factor 1 open source project. I've found that you'll have to vendor and rewrite/update a lot of anything you use.\n\nPro rust:\n\n - Rust has much better error messages. You'll rarely get a side effect bug that you can get in C++ by missing a return type, not initializing a variable, etc.\n - Cargo is significantly better than anything C++ has available.\n - Rust typically works if it compiles, and typically compiles if you're not getting intellisense errors.\n - testing is easier and better\n - if you work with +1 dev or more, a lot of the benefits of C++ above are actually footguns."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.671201499999995,
      "arousal": 56.349205999999995,
      "dominance": 46.995464999999996,
      "text": "Personally, with bevy, I just miss a way to properly do asset management. The AssetServer works for a lot of cases, but I want eg. To be able to load numerous assets based on a different file, which would not work with the asset server out of the box. Preprocessing and everything has to be done in a suboptimal manner..\n\nPost processing is even worse because you end up in a multi frame loading process due to entity hell\n\nOther than that tho, bevy is just great"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.1156462,
      "arousal": 64.8752832,
      "dominance": 58.7301586,
      "text": "Yeah Rust probably not a great use case, rust gives you reliability long term runtime at low memory footprints games are like the opposite use case (not that you want the game to crash more typically game times are short and so pushing the limits of the cpu/gpu and resetting it is kind of accepted)"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "It might've already be linked, but this article about gamedev rust raises some valid points worth considering. It's a good read, and the author apparently speaks from experience.\n\n\nhttps://loglog.games/blog/leaving-rust-gamedev/"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.62358259999999,
      "arousal": 54.421768799999995,
      "dominance": 59.9773242,
      "text": "I think if you are used to the idioms and design patterns of multiple mutability by default, then getting used to rust's design patterns and way of doing things is the hard part. It's probably easier in the long run to do it in Rust, given the ownership guarantees, lifetimes, etc, and that makes fitting in external packages easier. No longer is it necessary to keep a mental mind map of lifecycles and lifetimes. That is the positive of rust. I just think its different. Some trivial things in C++ like collision detection require thinking about borrowing in rust, and workarounds, but because it is data driven, you become more aware of time complexity and memory access efficiency."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If your are using Bevy to create GUI (menus, windows, widgets, etc), I would like to know what you are using."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.46371880000001,
      "arousal": 64.18934215,
      "dominance": 65.25510185,
      "text": "(Note: This comment is more about the title than the description, and just giving some thoughts because I don't think this question have a definitive answer: each project and developer will have a different stack of choice for different reasons)\n\nTL;DR: I don't know, however, I suspect that most of Rust gamedev difficulty has more to do with ECS than Rust.\n\n\\---\n\nI'm still learning Rust and never made a game with it (yet!), however, I did made games with many different things, like WASM-4, Nelua, C#, Lua, C (in this case, a game framework on top of SDL2 and a mega-drive retro game), and a little pong with Carp (which has ownership semantics), and that with game frameworks or game engines.\n\nSo.. I don't know if using Rust is harder for making games to be honest.\n\nI mean, of course it is, in the same way C++ is also harder to make games than, say, C# with Unity or Lua with Defold, maybe harder than Rust I suppose, but that also depends on the engine being used: using C++ with Godot or O3DE is probably easier than from-scratch C++ games, because you can rely on a good ground.\n\nAlso, I certainly would write Rust instead of C++: mostly because learning Rust is easier thanks to vast official documentation; I also don't want to write CMake again (but I need to, because I use Linux and Windows), and I did at some point wished that I had ownership system when I was freeing resources by hand on the game I made last year.\n\nThat said, as someone kinda outside from the Rust world and don't follow it much closely (I used to watch with passion on the Amethyst days), it really annoys me that it seems most of Rust gamedev talk I heard is more about ECS and graphics than making games, especially because I tried ECS sometimes, and for me it was very counter intuitive: making games is about game design, game feeling, feedback.. not only about running a \"simulation\" through \"queries\" (that works well depending on the mechanics of your game).\n\n(Worth saying that I mean ECS, and not \"EC\" \\[or CES\\], like Unity and O3DE, which is fine, in fact is what I like the most)\n\nThat said, I know Bevy improved ECS, and I'm also a better programmer than when I tried ECS, so I want to give another try with it, but ECS is very far from the norm, and if I make a game with Rust (I want to!), it certainly would be with SDL3 first, just following a CES pattern.\n\nAnyway, I did had not really great experiences with ECS, and I have the suspect that most of Rust difficulty we see online has more to do with it than Rust by itself; in fact, it is becoming quite infamous, and I even saw game frameworks removing it recently.\n\nThere is, of course, the borrow checker, but I think any C++ dev also has the same lifetime problem to solve, but implicitly; at least on C hunting down why the Address Sanitizer is reporting a problem is not exactly fun, I can't say on C++.\n\nedit: typos"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.020408333333336,
      "arousal": 58.42781575,
      "dominance": 53.90211633333333,
      "text": "It's equally hard. There's no silver bullet.\n\nWith C++ you have free outsourced ultra high quality dependencies, but the language itself is verbose and error prone and miss some modern features, which is a pain and waste of time.\n\nWith Rust, you have free language features that are modern, but you have to work on your FFI to interface with C++ library, which is a pain and waste of time.\n\nPick your poison."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Sure you could probably make a game like lethal company in rust, but the game is literally made in Unity where the languages used are JavaScript and C# which are easier than rust."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.3446715,
      "arousal": 59.070295,
      "dominance": 62.783446500000004,
      "text": "Language is as good as the community that supports it. Rust is really unique and shining angel in this regard. Fully open source and community driven development like nothing that has happened before. Its a matter of time, more people will became stake holders in Rust driven mainline software development."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.6621315,
      "arousal": 71.315193,
      "dominance": 66.213152,
      "text": "Anyone who thinks otherwise probably isn’t very good at rust. And or constantly writes spaghetti, fight me on it!"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.031746,
      "arousal": 56.235828,
      "dominance": 63.151927,
      "text": "I think it's because Rust doesn't have an engine like Unity or Unreal so people say it's harder, which it is."
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yeah look at all those successful Rust games"
    },
    {
      "post_title": "Are games actually harder to write in Rust?",
      "created_utc": 1741527609.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.0929706,
      "arousal": 62.7210884,
      "dominance": 58.2312926,
      "text": "C / c++ are dangerous languages, that can be unpredictable unless you're a god tier programmer who knows when to predict a dangling reference, zero-after-free error, race conditions, freeing memory and lots more. Rust, while a pain in the ass, eliminated these and give more time to develop"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Why don't you use Rust at your company?"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 74.0929705,
      "arousal": 61.3378685,
      "dominance": 57.596372,
      "text": "There are plenty of readers here who us Rust at their company, but I am sure there are also many who would like to use Rust in a professional setting, but can't. I would like to collect the excuses you get from your boss and the valid concerns and reasons you and your boss might have about Rust.\n\nI hope that knowing the issues will give us a better chance addressing them.  "
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 54.421769,
      "dominance": 68.027211,
      "text": "I work in firmware and rustc and llvm do not support the family of microcontrollers we use."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Simply because we're entrenched in a Microsoft Dotnet ecosystem"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My company was started by Berkeley academic-types that really liked Scala. Now we're stuck on scala 2.12-2.13 ish\n\nEven still, we recently officially adopted support for Rust, and are slowly integrating it into several of our peripherals."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.098639250000005,
      "arousal": 65.079365,
      "dominance": 60.090703000000005,
      "text": "Take your pick…\n\n1. Talent pipeline. We are large organization and generally want to have skills which are easier to hire for. For example a lot of our data scientists use pandas, and python, and would not retrain. Data engineers are also typically familiar with python and other ETL tools.\nWe use a lot of contractors, so not sure what premium they would charge for rust.\n\n2. Rust does not have an extensive, production ready ecosystem for many areas. If you want to develop Spark, for example, you are far better off with PySpark, Sql, or a JVM based language. Rust doesn’t really bring much here.\n\n3. Consistency. I’d rather standardize on a few tools and use them widely than have a different tool for every job.\n\n\nPerhaps things will be different in the future, but the safety of rust or perceived speed doesn’t provide much benefit when it’s simply interacting with legacy systems. Or when we are relying on cloud services (databricks, etc.) for the heavy lifting."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.13378720000001,
      "arousal": 53.2879818,
      "dominance": 58.07256220000001,
      "text": "My biggest hurdle is debugging async rust code. Coming from .NET the Rust debugging experience is poor. \n\nFor example, when I set a breakpoint on an await statement and I hit step next, it will end up taking me down into the executor code, most likely the parking lot. This makes sense  what I have to do is set a breakpoint every line and hit continue to debug my code. When the future resumes the method is re entrant due to the state machine nature of futures. This leads to a confusing debugging experience. \n\nCompare that with .net where you can naturally step over awaits and it naturally flows like non async code. \n\nI personally think this is a major gap in the rust async story. Other debugging experiences also apply here like poor handling of enum variants."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Using C++  \n  \n\\- not enough time to rewrite libraries that don't exist in rust and/or don't want to depend on an unmaintained github repo of rust wrapper with comments like \"TODO\" \"Might work\" \"50% of the code is probably working\".\n\nI've only used rust to write simple CLI:s so far in my career."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "No time to train the team and recent downsize on company makes it even harder."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very large C++ code base and very old developers"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We are a dotnet consultancy company."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Because we don't have any projects for which it is a good solution.\n\nActually, we do have a system that could use a significant performance boost, but it's extremely complicated and it would be very difficult to guarantee any rewrite would not introduce any regressions of functionality.\n\nIf the cost of scaling the existing code gets too high, it may change the ROI on doing a rewrite."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I did for quite a while, worked in a security team and we had a very large data set and a ton of data we pulled in. Had a leadership swap that was deeply offended by any database that wasn’t MySQL and any language that wasn’t C# spent two quarters rebuilding a years worth of rust. \n\nIt was fantastic while it lasted."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.578231,
      "arousal": 57.936508,
      "dominance": 67.120181,
      "text": "I work at a finance firm. We must pull every package from an internal package repository. For us that is Sonatype Nexus, which has recently added Cargo support. \n\nThey also support SCA for flagging vulnerable packages, which is also critical. \n\nrustup is a problem. We can’t have users going out to the internet to pull compilers, so that would have to go through something like Nexus. We would likely want to control what versions can be installed.\n\nBasically, assume no internet connection and then think how you would bootstrap a project in a developer friendly way."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.4920635,
      "arousal": 65.589569,
      "dominance": 61.564626000000004,
      "text": "I’m the only senior and only one working in the backend. We’ve only built internal micro services and are B2B so don’t have high load / throughput. \n\nI don’t use rust because using it would screw my team, simply because they don’t want to / are unable to learn it. The learning curve is steep. \n\nI only just convinced the team to use go as a replacement for python for greenfield projects for the type safety, better async, and performance"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.947846,
      "arousal": 47.3922905,
      "dominance": 55.8390025,
      "text": "- Absurd compile times\n- IDEs can’t cope with large projects \n\nRust seems great at first, but then lets you down as you get to serious project sizes."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.249433,
      "arousal": 48.299319999999994,
      "dominance": 62.471655,
      "text": "I'm currently working on a small internal tool as a side project in Rust, but I have been considering other options because I'm the only person on my team (and on all related teams, as far as I'm aware) who has learned Rust.  So it's ultimately a contribution and maintenance issue, I can develop the initial release but I can't spare the bandwidth to be the sole maintainer, which is an issue when there's no one else equipped to maintain it."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because simcards only support Java Embedded"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Our 18 year old, half a million LOC Java application was built before rust really was a thing, and with 18 years of development, and not to mention the half a million lines of code, a rewrite does not seem feasible. \n\n\nI guess it would be more feasible to add rust modules for the C frontend, but once you have a few thousand C devs on payroll, switching to rust just doesn't make as much sense anymore."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.09750566666666,
      "arousal": 57.48299333333333,
      "dominance": 70.521542,
      "text": "We can’t trust the 3p code that comes in so we need a reliable and scalable way to vet the code for quality and security. In C++ our OS vender does this and can manage it with library releases. I haven’t found a good way to do this with crates yet."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 57.142857,
      "dominance": 64.285714,
      "text": "The problems that Rust solves are not the problems companies face in developing software. Lifetimes, borrow check, segfaults, etc. are non-issues in 99% of business use cases. The Rust compiler would basically be like a pedantic QA process that cares entirely about things that the company doesn't care about."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.9637185,
      "arousal": 55.1020405,
      "dominance": 53.004535000000004,
      "text": "Business pov hates losing control and see programmers as indistinctive mind assets. So they tend to see languages as big frontiers between teams. For example, if you are a c# programmer, they think you could do anything c# regardless of the domain of application.\nThey think limiting languages is a garanty for maintenability, which is partly true but highly overestimated. It allows them to underestimate peoples true value, limit compensations and simplify management.\n\nThis leads to high conservatism regarding languages.\n\nIt's stupid from a project pov, languages are just tools in your toolbelt."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.024943,
      "arousal": 64.172336,
      "dominance": 66.666667,
      "text": "Steep learning curve, lack of interest from most of devs, lack of fancy FP things in rust, current stack is decent enough."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.84612885714286,
      "arousal": 59.10268885714286,
      "dominance": 66.26174271428572,
      "text": "as a software business owner:  It's 100% staffing.\n\nSeriously.  I can pick up a really good C# programmer in a day.  They all program in the same way, using the same tools, they speak the same language, they integrate into the existing team, whether they've been here for 1 year or 20.  Rust programmers are all over the map. \n\nHonestly, I think it's pretty slick and powerful and really like it, but....  Unless you're starting from scratch, or your already in a rust-friendly environment, it's very very hard to compete with the staffing benefits of the microsoft system.  (or Java or whatever that has been around a long time and has an established tool suite that everyone knows)"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.611111,
      "arousal": 69.38775475,
      "dominance": 65.2210885,
      "text": "1. The other developers don't know Rust, so there would be a learning curve.\n2. All our software is JAVA we can't exactly just start adding Rust pieces to it.\n3. We are not going to rewrite our ENTIRE code base to be Rust.\n\n\\#1 is probably the big thing, many developers see programming as a job, they don't want to learn new languages outside of work \"for fun.\" You should have seen the hell they inflicted on me when I started replacing our JavaScript with TypeScript....they were NOT happy."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The deficits around rust are in tooling.\nFor example, in Go you have a builtin debugger and profiler that works the same way everywhere. Profiling Rust on Mac is annoying. Random half assed unmaintained crates that produce a profile that doesn't show your actual code. Rust should have a builtin pprof."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "We use go which is simpler, shorter learning curve and good enough for what we do (rtb dsp)."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results.html"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "We just don't have any active projects where there is a good use-case, and the ecosystem is fleshed out. If Bevy was more mature, with a more mature ecosystem, we'd likely be looking at moving to that. As is, some of the tools we rely on simply aren't available, and we're not in a position to even consider contributing to those tools."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Had a tight deadline and the other guy only knew C++. We are considering migrating some things but what worries me a bit is the maturity of the  scientific ecosystem in rust"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.54535150000001,
      "arousal": 52.522675750000005,
      "dominance": 60.090702750000005,
      "text": "If something goes wrong in production and I have very few people to ask for help, I can only blame my self for pushing onto Rust. I am taking the slow approach by writing test tools, dashboards etc to increase my confidence over time. This non-critical portfolio can be used to convince other teams that we have some experience in house. The more devs with rust exp, the marrier. The cognitive load to switch between languages, domains, technologies, frameworks etc must also be taken into account."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.517007,
      "arousal": 56.972789500000005,
      "dominance": 61.281179,
      "text": "Because we do not develop new software but support and improve a project thats nore than 20 years old.\n\nThe successor has just been scrapped (again), so perhaps we can start implementing a standard build system, rewrite the K&R C-Code - or at least comment it; drop the absurd process handling (main process forks - depending on settings, default is up to 1000 times, and keeps at least 10 processes running at all times; this is so buggy, that we have to stop the processes with kill -9 and restart daily)..."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We have massive code base on top of C++ and C# that cannot be replaced by rust without years of investment."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.02299971428572,
      "arousal": 63.39488171428572,
      "dominance": 60.25267257142857,
      "text": "Massive codebase of C# and Python. People don't want to use it because they don't have the time to learn it. Meanwhile even if we build something small non-critical there is a small chance of anyone else supporting it. Finally, there is still some preconception that it is mostly hype. \n\nIn my previous company it was used for some low level networking cases. In my current one I can't seem to find a good use case to adequately support using it. There is Go used in some cases but this shop is 99% C# and Python."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "My company is deep in different typescript technologies. No one will accept a switch. While it would be an improvement for some of our base technologies the switch would probably kill the company and as our base technologies are pretty stable there is no need. There are better goals for us even ignoring that management is priorritizing them wrong anyway."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hardly anyone knows it but they do know the languages they currently use"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.58352233333333,
      "arousal": 62.13151933333334,
      "dominance": 69.53892633333334,
      "text": "I dont think rust Is beginner friendly, i would rather make the people that work with me learn racket or idris2"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.505669,
      "arousal": 54.5351475,
      "dominance": 61.02607675,
      "text": "We do a lot of embedded stuff and a most people would like to switch from C to a more modern language like rust. besides the safety certification problems, which will/addressed by projects like ferrocene, the rust ecosystem still lags Support for lots of embedded systems and hardware. One example is the lag of embedded friendly CAN bus crates that can deal with higher level protocols like J1939 and UDS. Our team simply has not the time and capacity (and probably also not the rust expertise) to write it from scratch ourselves"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 38.435374,
      "arousal": 47.052154,
      "dominance": 54.988662,
      "text": "There are a lot of missing or immature libraries. Standard lib is relatively small in scope, so you end up needing more libraries. Anybody who starts a Rust project then has to import those libraries into our build system so they can be used. So Rust is used less.\n\nPerformance is not a concern for like 95% of the projects."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "We have people with decades of experience writing code in Java and Kotlin and forcing everyone onto a new language or framework will not be beneficial to the company."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "It is quite easy to start new project in rust. To do it u need bunch of c++ programmers and one rust enthusiast to review their code for a half year ☺️\n\nFor existing (enterprise) projects switching to another technology is a _pain_. Not only due to technological issues kinda linkage or multilanguage environment which devops have to manage but bureaucracy😌"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust type level metaprogramming is not on par with C++ and this makes it more difficult to write high performance code that is very generic. Rust is fine for high performance code that is *not* heavily parametrized, but the const fn limitations, no variadics and no if constexpr make it very difficult to use when it is. Zig is also better at this."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "We use C++ Builder and Delphi with MSSQL server.\n\nLittle bit Angular and NestJS.\n\nI wrote backend in rust but poor MSSQL support took a lot of time to finish."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.328798,
      "arousal": 37.07483,
      "dominance": 48.752834,
      "text": "In all the companies I have been, we are using outsourcing consulting companies for devs. The place where I live is expensive, so headcounts for permanent position are very well reserved. But we are having very cheap outsourcing companies on the same timezone, so they prefer to hire there.\n\n\nAnd often, in order to get clients, consulting companies are using well used technologies that can give access to a big pool of clients, like Java with Springboot or Typescript."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038548666666664,
      "arousal": 52.947845666666666,
      "dominance": 54.87528366666667,
      "text": "Haven't had the chance yet. Boss man gave the okay, but everything so far has been relying on things only available in other languages. And writing wrappers around stuff (where possible) is tedious and slow."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "It is too sophisticated for devs with mostly Python experience"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because the core product is built on a framwork that only exists in Java/Kotlin. And our frontend is web based and that is still easier to do in javascript."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We have a LOT of C++ and no will at the management level to push towards rust. Plus it's already very high performance code and it would take a lot of effort to get equivalent rust to match it. Individual tasks are mostly single threaded but there's enough individual tasks in our process that we can easily use every core from our Zen4 EPYC servers to the fullest extent, so no benefit to be gained by local parallelization."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "PITA to use it in Zephyr RTOS. Lots of the RTOS system calls are actually macros, so FFI isn't straightforward without updates."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.03023433333334,
      "arousal": 66.175359,
      "dominance": 64.24792133333334,
      "text": "Usually doing web stuff, people want to use Python and write tests.  More proven, they don't have to learn anything."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "My company rely on Python and C++. It is mostly impossible to move data scientists from python to anything else. For C++, we use two libraries that has no equivalent in Rust."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "They've been using .net for ~15 years, the codebase is hundreds of thousands of lines. There'd be no benefit to changing languages and it'd be an incredible undertaking"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673500000005,
      "arousal": 62.414966,
      "dominance": 59.750567000000004,
      "text": "I thought about using rust at first but honestly it just lacks what I need in terms of development speed. \n\nI'm the only developer in my company / coder so I needed something or so low developer could make a suite of software for. \n\nSo I ended up having to go with Python / Pyside6 / reportlab.\n\nI really wanted to use rust but it just wasn't feasible.\n\nNote:\nThe end points that I'm working with are all Linux based.\n\nRaspberry pi is in the workshop (12) and Fedora Linux in the offices (10)"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "Building mobile and web apps. The learning curve for rust is too high compared to any benefits over go."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 61.111111,
      "dominance": 71.315193,
      "text": "Because Swift devs are cheaper and the company I work force doesn't like change.\n\nI work on a desktop application using electron, fyi."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.52154200000001,
      "arousal": 55.328798500000005,
      "dominance": 61.734693500000006,
      "text": "People recognize some of the benefits of not using Go for part of the stack and certified ASIL-D compilers are expensive af and I don't even know how many thousands of lines of C code"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.997732142857146,
      "arousal": 57.58017485714286,
      "dominance": 59.36184014285714,
      "text": "I work for a huge telecommunications company, in an AI department as a Data Scientist.\n\nMy team builds ML/AI solutions for internal customers, and we mostly use two languages: Python for the data pipelines and as backend, and JavaScript/TypeScript for the frontend.\n\nNow actually I started to implement some algorithms in C (we have them currently in Python), but at the end it might occur that I will use Zig. Yes, Rust and PyO3 is also an option here, but C (and therefore Zig) is a natural fit for CPython, and actually I find Zig a friendlier language, because it is smaller and simpler.\n\nOther teams in my company, who develop customer facing backends etc. mostly develop in Java and recently Kotlin.\n\nI really don’t know if any units who would have started to adopt Rust in this company, although I do not exclude; but I haven’t heard anybody using it yet. But, I already met C++ and Go developers here, so who knows.\n\nAs a summary: Rust is just not competitive against Java or Kotlin for ERP systems if you already have a JDK-based ecosystem; and also not widely required for data science. Although for data scientist it might be useful for building Python packages and high performance API-s. But the problem with the language is its high complexity and steep learning curve."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.61224475,
      "arousal": 67.94217675,
      "dominance": 56.60430875,
      "text": "We actually use a mix of rust and python.\n\nBecause python is good for really fast development and everyone knows how to work with it, and then we make rust backend libraries called from python for any task that requires the performance.\n\nI think it's a perfect balance of usability and performance this way."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At my job they gave me the opportunity to make a microservice in Rust with Tonic but the problem I have is that, as they say, we are sunk in the Microsoft environment and the platform they use to deploy (their own servers) is IIS and I have not yet done tests to see if a Rust service can be launched in IIS"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.7800455,
      "arousal": 67.2902495,
      "dominance": 76.643991,
      "text": "Biggest thing is I would have to have a really good reason to be starting a new project in a different language than normal, and I would be on my own to get it deployed/secured and successfully interacting with our existing apps and tools. Which I then would have to justify why that effort was worth it. I would love to write Rust at work but there isn’t a great business case for doing so."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.750566500000005,
      "arousal": 61.904762000000005,
      "dominance": 61.564626000000004,
      "text": "I use _some_ rust at my company. The rest (most) is C, or glue in bash/Python. I mostly work with large open source C projects where using rust is not an option, like Linux (rust In Linux is only experimental and only for drivers) and QEMU."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.0612245,
      "arousal": 61.3378685,
      "dominance": 51.870748500000005,
      "text": "We have some rust components but we’re largely a python shop, and we’ve too much feature dev work to do for most of the team to do the required upskilling and still deliver on time."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.45880566666666,
      "arousal": 69.27437633333334,
      "dominance": 72.297808,
      "text": "We're a small shop and mainly have monolithic CRUD API's with a few microservices here and there. \n\nSo, C# and Go are enough for now, and mentioning Rust makes people go like \"for the love of god please no\"."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.4452,
      "arousal": 63.643235000000004,
      "dominance": 60.61980366666666,
      "text": "There's an existing investment in Go, Python, and Typescript. As much as I like Rust, I can't really justify the uplift.\n\nFor Python it would limit the pool of developers, I'd lose some libraries, and the AI/ML stuff isn't anywhere near as widely supported.\n\nFor Go, there are maybe some libraries that would be an issue, but it's mostly that the existing code is fast and stable enough, deployment model is the same, and concurrency is really easy.\n\nFor Typescript, there's an existing investment in React (vs, e.g. WASM and a Rust framework). Also, if I do migrate to something more robust, I'd rather move from SPA to SSR using Templ and HTMX, which means more Go."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.23356033333333,
      "arousal": 70.521542,
      "dominance": 60.92214666666666,
      "text": "Despite the size and talent in my company, there is an aversion for compilation. My team has a complicated CI, manages all its IaC and an artifact repository but there is still that fear of being stuck by the compiler \\^\\^. If it was just me, I'd enforce using Rust for microservices and explore it in the front end as well. It's just that good for exposing apis right now."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Gotta build a windows app that can grab text from inputs from other running apps, probably will use Tauri which is like Electron but with Rust backend. Will use it."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Much easier to hire for go than rust for my domain(ml infra)"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Trading company. So much of the ecosystem, both within our own walls and from third parties, is written in C++ that Rust just isn't a reasonable language to use.\n\nAlso, our main trading systems are written in a proprietary framework that makes extensive use of template metaprogramming. It would be extremely difficult to replicate that in Rust, even with macros. At the very least, specialization would have to be stabilized."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.814815,
      "arousal": 45.08692366666667,
      "dominance": 58.73015833333333,
      "text": "Bus number.  If only one person is doing it, then only one person can do it."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.24603175,
      "arousal": 52.749433249999996,
      "dominance": 60.31746025,
      "text": "We're a Java microservices shop (sigh) using Spring Boot.\n\nThe safety part is moot, and rewriting microservices in Rust would take a lot of time, we don't have. Because we need features shipped yesterday, high quality and cheaply."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.0090705,
      "arousal": 58.163265499999994,
      "dominance": 57.312925,
      "text": "Because of most projects are collaborative work and tech stacks are fixed. Also co-workers usually don't know about Rust. I am trying to find a good project that I can do alone where Rust's efficiency and productivity can shine."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We use Rust where it makes sense, i.e. realtime systems.\n\nThe rest of our software is basically GUI applications and Rust doesn't really make any sense there."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.2097505,
      "arousal": 44.69954625,
      "dominance": 60.544217749999994,
      "text": "My software and security consultancy company does mostly Java \"because that's what the customers use and want\".\n\nI think it's odd to keep choosing a way less secure and correct technology for green field projects, especially since we have security as a niche."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.52380933333333,
      "arousal": 56.235828,
      "dominance": 59.750567,
      "text": "Because most my collegues have a hard time learning new things. Introducing them to git was hard enough..."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.34315933333334,
      "arousal": 67.38473133333333,
      "dominance": 53.85487533333333,
      "text": "Dude, you got orgs out there still running python 2.7. No way in hell you’re going to convince the bean-counters to do a top-down rewrite of something that already exists. If it doesn’t exist, you might have a little more luck. But you’ll probably still get some pushback because of the smaller talent pool and the fact that “[some other language] works perfect for [some other thing] so just use that for this”"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.63492099999999,
      "arousal": 56.859410499999996,
      "dominance": 62.1882085,
      "text": "Mine just says that the project is already done in c#, and we won't start everything over. He also says that not everyone knows rust, so we would lose a lot of time for everyone to learn it"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I DO use rust in my company."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The companies that contract me have a bizarre notion of risk.  \nSo they stick with the Javas and Microsofts. Because apparently less risk... :S"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "I'm a frontend developer (React, etc) at the place where I recently started working, and they mainly use Java for backend services, and React on the frontend. There's an upcoming desktop app they're proposing, and they want to use Electron for it. They had already made the decision to go with Electron before I joined recently, and I asked why they didn't choose Tauri instead, and it's mainly because they themselves don't have the experience of using Rust (though I do) and didn't want to introduce its complexity, since with Electron there's no need to learn any other language than JS/TS"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.03887278571429,
      "arousal": 60.71428578571429,
      "dominance": 58.81114342857143,
      "text": "I can only comment for the area of software my company operates in, which involves backend services for solving various large scale optimization problems, mobile apps, real-time processing of signal data, some ML/AI and some websites.\n\nMy comments do not apply to low level systems (OS, embedded) or game development, or low level tools.  \n\nI picked up Rust in 2017, and have been using it on and off ever since, always kept an eye on it. I have rewritten as PoC some of our services in Rust. I am currently considering Rust for some new projects. \n\nHaving quite a few computation heavy services running, Rust would at least in theory lend itself very well to our use cases. Indeed there are many brilliant design decisions about Rust. \n\nHowever, the reasons I can't (yet) go to production with it:\n\n1. No official Google Cloud SDK, protobuf and gRPC. Google is currently working on all of those things so I expect there will be official support within a year or so (at least preview). \n2. Async is not yet ergonomic enough. There are RFCs open for everything needed to improve this, but unclear how long it will take before they make it into the language. Having an inconsistent experience or using macros to hide complexities is not good enough. \n3. Tooling around debugging, performance profiling and benchmarking is quite poor (more so on a mac). When you add async to the mix for all of them, it gets worse yet again.  \n4. Macros, while powerful, add cognitive load. They are more difficult to read, difficult to debug, need a separate crate (proc macros), are used to hide some language shortcomings in some cases or are used to create custom syntax for specific domains.\n5. Refactoring can cause a big blast radius of changes which again adds cognitive load. We deploy to production continuously a few times a day and iteration speed and feedback from users are the top priority metrics. Software is constantly evolving and changing. The most important thing is that you can change it fast with low cognitive load.  \n6. The standard library is quite thin and relies on external crates. For some things, having a highly opinionated default in the standard library that removes choice would also decreases cognitive load. \n\n  \nFor me the most important choice when choosing any technology is developer time, DX and iteration speed. Code is a means of communication and is read far more frequently than it is written. Tooling is also very important for this. \n\nWe currently use Go, and while it has a lot of shortcomings, it absolutely excels at DX and iteration speed. \n\nThe performance difference to Rust is not that big, even in low latency computation heavy services. DX and iteration speed are far more important than having to put up a few more machines. It can't be 10x or 100x slower (e.g. Python), but if it's 20% slower..or even 2x slower, it doesn't matter.  \n\nRust code is more robust and eliminates certain classes of bugs completely. However, our whole system is designed so that it keeps working even when services crash. You have to design this into any scalable system regardless of what programming language you use. On rare occasions (and it is rare) that a nil pointer makes it to production, it is trivially fixed and redeployed.\n\nI think that many of the things will be addressed in the future which will make Rust an easy default choice for us. Because all the rest of it is absolutely brilliant, and other stuff I can make a compromise on (as with anything). \n\nI really believe Rust has a very bright future."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Skill issue"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 61.337868,
      "dominance": 66.326531,
      "text": "Any answer I offer here will get me severely downvoted by the Rust community."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Barrier of entry is too high, we care about velocity of delivery too not just correctness."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.773243,
      "arousal": 39.909297,
      "dominance": 53.401361,
      "text": "Boss has a boner for JS (not TS, plain JS) and therefore its a requirement that he also wants to be able to contribute, so tools are written in JS. I for myself write my own automation tooling in Rust."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.52154200000001,
      "arousal": 55.328798500000005,
      "dominance": 61.734693500000006,
      "text": "The first and major reason is that the existing application is written in c++. Using Rust would mean having to train people and slowing down releases. You will also need to find rust engineer, there are not a lot of them compared to c++ and/or would require higher salary.\n\nFor the product itself, Rust would not be that much of an improvement. At least a year ago it would have not, but we're rewriting some part and it may have been a choice to consider bearing what I said above. But essentially we are dependent on LP solvers like ortools or xpress, and they're developed in c++"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.3197278,
      "arousal": 51.54195,
      "dominance": 59.705215599999995,
      "text": "We do use rust and in my opinion it’s a bad choice for what we do in a lot of cases. \n\nWhere we need it rust is great for highly performant memory safe code - but I think it is wasted on building APIs and due to the longer development times, longer time to up-skill, lack of devs already familiar with the language etc just isn’t worth it."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.172336,
      "arousal": 46.712018,
      "dominance": 59.750567,
      "text": "Because teaching Dev's rust is more difficult job than finding someone with Java experience in market."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "20 years of legacy Java code. And for tools programming it doesn‘t really make sense. Rust isn‘t a good scripting language."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.283447,
      "arousal": 74.489796,
      "dominance": 74.489796,
      "text": "Because I need to get work done and not have to help my teammates figure out why the borrow checker doesn't like what they're doing. \n\n\nThe performance we get from Go is perfectly fine for what we're doing, plus the quick build turnaround times far outweigh any positive we could get from Rust's safety."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.96850588888888,
      "arousal": 56.997984388888895,
      "dominance": 63.61803977777778,
      "text": "We do use Rust for smaller things and tooling, but we don't use it in our core codebase, so I hope this counts for me having to field excuses.\n\nOur main project is a Windows desktop application connected to a bunch of hardware instrumentation, performing data acquisition, real(ish)-time signal analysis, data postprocessing and visualization.\n\nWe don't use Rust for the GUI since no Rust UI framework can compare to WPF (! - WPF still being the best Windows desktop GUI framework is a tragicomedy in its own right...) in terms of maturity, completeness, documentation or tooling support yet. There is also no data visualization library that quite fits our needs. Egui is actually surprisingly close for data visualization, and I will say that Rerun is an awesome project, but overall .NET is the better fit for us here.\n\nWe currently don't use Rust in the \"backend\", since :\n\n* We have a bunch of capable C++ devs and just two hobby Rustaceans.\n* Since we need to shuffle around (or have several services access) a large amount of data, we make use of shared memory via memory-mapped files for IPC at places.  We always have an eye on Arrow, but for now, we didn't have a clear need to take on the complexity overhead of adopting it. However, dealing with Windows memory mapping from Rust features a certain \"impedance mismatch\". Operations are inherently unsafe, and crates helping out with memory mapping didn't support named non-persisted shared memory out of the box when we started. We could have rolled our own, and by now, there are projects like \"winmmf\", and together with a crate to deal with SEH exceptions one could for sure make all of this work, but in general this feels like fighting Rust instead of leveraging its qualities. In C++ it's just a matter of wrapping necessary Windows API calls in a class with no other dependencies whatsoever.\n* Talking to hardware (all of it coming with C driver libraries, often with C++ example code) is still more convenient from C++; while I personally don't mind using bindgen and wrapping the result in a safe interface layer, it is more work than wrapping it in C++, and a hard sell to other people in our team.\n* Compared to C++ we are missing libraries for dealing with 3d point clouds / surface reconstruction / meshes ...\n* ... that interface with libraries like Eigen for matrix / tensor operations. Rust does have ndarray, but right around the time when we were starting our project, maintenance status was a bit worrying. C++ has a plethora of tensor libraries or even full-fledged HPC frameworks supporting heterogeneous compute (such as Kokkos), and now also std::mdspan allowing to easily write interfaces against these libraries, or to do simple things without need for a library.\n* Along the same trajectory, C++ also offers several options to leverage GPGPU, while the Rust ecosystem is still quite thin here.\n* There are parts of the code that we could write in Rust. But as long as we have to rely on C++ somewhere, it would be unwise to add another language to the mix without very good reason. Cargo is ludicrously more convenient than CMake, but CMake always wins against Cargo + CMake + an FFI boundary (or code duplication to support a shared IPC interface).\n\nSo in summary, although I like Rust a lot, I managed to join a project which still seems to be a uniquely good fit for C++.\n\nI will say, though, that if upcoming regulations (or customer compliance guidelines) make use of C++ considerably more expensive or painful, and if we find solutions for some of our library conundrums, our service-based architecture is a good fit for a piece-by-piece rewrite. Currently, influential parts of the C++ committee seem to go out of their way to push us along this direction."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.919879,
      "arousal": 58.04988666666667,
      "dominance": 61.866969000000005,
      "text": ">excuses you get from your boss\n\nThe is a very strange wording tbh. You don't use tech at work just to play with it or because it's \"cool\".\n\nMore often than not - you already have some sort of stack and people who are familiar with it. And that's it.\n\nIf you thing that migrations from tech A to tech B will provide some serious behefints - it is your job to prove it.\n\nAnd even then - you have to to take many things into account. Not just the ammount of cpu cycles saved or memory used."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.691862,
      "arousal": 60.26706988888889,
      "dominance": 57.87351977777777,
      "text": "Because at my current job I‘m only shuffling databases and am doing the internal IT. I needed a timeout to get some rest so I‘m doing 30h per week dumb fuck baby sysadmin stuff. \n\nBut in my free time I‘m playing around since I got more time. It‘s sometimes making me a bit crazy since I‘m hitting dependency hell quite or I get the casual „fix 1 bug, gotta get 14 new ones“ stuff. Even with Gentoo I never had so much trouble with dependencies. Meh.\n\nSo back to topic. Normally I‘m doing network or DevOps stuff and when I‘m coding it‘s basically shell scripting. So there‘s no need for Rust since I would be compiling throughout the whole workday instead of just typing and executing. I‘m just coding in my free time, because I got the weird idea of me learning Rust and doing my own ports of the casual small CLI tools I use for work."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.8843535,
      "arousal": 48.639455999999996,
      "dominance": 61.3945575,
      "text": "I'd like to say that we can't address all of them. No language is suited to all problems, and that's not a bad thing. Sometimes Rust enthusiasts work in a very different environment at their day job where Rust really isn't the right tool for the job. And we shouldn't try to force it into where it doesn't really fit, as that gives Rust a bad name."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.3650795,
      "arousal": 70.181406,
      "dominance": 64.9659865,
      "text": "The place i work has some tools and such written in rust, but only for things that dont need to interop with our main product directly, which is in typescript.\n\nThe main reason for less integration? Because Rust / serde doesnt have a good way to differentiate between null and undefined/missing fields, which is something our main codebase relies on for a number of places (and i hate it)"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Node.js packages go Brrr.."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "FAA DO-178B"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.64512475,
      "arousal": 56.6043085,
      "dominance": 54.478458,
      "text": "Luckily me and my partner talked our company into switching to rust, we were using.net but we got so sick of C# and it breaking all the time. The selling point was rust applications “just work” we even built a sample CLI and content management system and pitched everything, and the unfortunate part is we have to build everything on rust - but we’ll have fun doing it🤣"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Because for the product we develop it doesn't make sense. Each tool should be used according to purpose."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.303855,
      "arousal": 59.410431,
      "dominance": 62.698413,
      "text": "Hey, man, I’m trying, you know? But I had an open Pabst and that’s the way that goes…"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.843537,
      "arousal": 49.092971,
      "dominance": 64.285714,
      "text": "Magento, though made cli tool in rust to speed development"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We make VR/AR/MR apps. arewexryet.com isn't even a used domain."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.21768700000001,
      "arousal": 47.0521545,
      "dominance": 66.609977,
      "text": "Reasons:\n* Our architecture is (for the most part) a monolithic Go webapp. We have hundreds of thousands of lines of code in play. The period of interop between Go and Rust would be painful to manage.\n* The hurdle of having to get everyone up to speed on Rust. A lot of my colleagues are not PL nerds and don't have experience writing it. I've come to really enjoy how easy Go is to read, understand, and teach, despite its many shortcomings.\n* Our workloads are mostly I/O bound so there are very few big performance wins to be had by switching languages."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Clients are ... unsophisticated."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I [blogged about this in 2017](https://llogiq.github.io/2017/06/16/no-rust.html) and the reasons I listed are still valid today (to be fair, I use Rust in my day job now, but for those who don't, they are)."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Because the current code base doesnt have Rust, very simple."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.2048375,
      "arousal": 61.77248666666666,
      "dominance": 62.660619833333335,
      "text": "A 10x speedup of a core workflow couldn't be proven to make the company money. One hour to 6 minutes... but I guess the pattern I used can be applied to another language(go).\n\n\nI'm waiting to see what they say when node has issues(wth 2.5 gb memory) and the Polars wrapper we're using would transition to Rust fairly painlessly.  Python isn't a preferred language and also has bindings, so it's a matter of time before that decision comes to a head.\n\n\nTo be honest, I don't know Rust well enough to make it a supported language internally at my company. The above isn't scheming.  Dataframe libraries are minimal/undeveloped in go, or are all spark based on the jvm. If I/my team keeps producing good products using libraries that depend on Rust it feels like an inevitability.  \n\n\nThe hack week project mentioned in the first paragraph exists in a repo we own and it fits into our security/dependency scanning.  Someone is keeping it up to date and it's been minimal work(one PR for a version bump). I suppose I need to keep adding there to keep it from becoming marked abandoned."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My company mainly uses Rust. It is the main development language for the RFID retail system server. Even the C interface for operating the RFID reader is called through Rust FFI. The front end uses Tauri. \n\nThe reason for this is that this company did not do anything related to programming before. After hearing that I can program, they asked me to write a system. So I can decide what language I want to use."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.37415,
      "arousal": 56.0657595,
      "dominance": 70.068027,
      "text": "Where I work, we currently have a large (and old) C++ code base. But, I'll push Rust into the picture at some point. For us, we actually have a reasonably good story for a RIR, because it's a system composed of quite a few different programs that cooperate. So it's fairly amenable to incremental replacement. And it's the kind of code where safety matters."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.70521550000001,
      "arousal": 63.378685000000004,
      "dominance": 66.1564625,
      "text": "entrenchment...\n\nWe're still running server side software on Perl my man. They don't want to dedicate resources to learning Rust and so the new features/products are written in whatever people know."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "We do! But uncommon, because of it's high development time. Only projects that need to be ran on Raspberry Pi's or embedded hardware we use Rust"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.50599285714286,
      "arousal": 57.952704857142855,
      "dominance": 63.71882071428571,
      "text": "We work in game development and we need a fully-featured game engine with an editor and first-class support for iOS and Android. \n\nWe've looked into Bevy and Macroquad in the past, when evaluating the move away from Unity, but the amount of work needed to build in-house tooling around them would mean that we ship less games/features. \n\nFor the time being, we're still using Unity for our old games and we settled on Defold for almost everything else, going forward. \n\nI'd love to move over to Bevy eventually, but for now I'll just use it on my personal side-projects."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.46598625,
      "arousal": 54.59183675,
      "dominance": 73.41269825,
      "text": "I work on cloud infra/devops, in a Java-heavy team, with nowhere to apply Rust in my own domain that isn't just shoehorned in because I like Rust. I've written some little utilities in Go, which is very widely used and easy to ship in cloud-native stuff (as well as easy for devs with no Go knowledge to read and change!). As far as I know, none of the devs know about Rust other than what casual comments I've made."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use a tiny bit - we have one service that leverages pingora"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.809524,
      "arousal": 54.875283499999995,
      "dominance": 65.589569,
      "text": "We tend to have elements of a type that are then expanded through inheritance, like a base object with a name and a parent object that inherits the base one. Assume something like this: you have a base light and then multiple different classes for the various types of lights, all inheriting from the base light for its features and common data. I haven't been able to find a good implementation of this on rust going through multiple implementations of raytracers on github. Ever implementation I find is very hacky, or incredibly verbose and requiring lots of maintenance if you dare changing something. I assume that a scene description just doesn't fit the rust programming style."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We use Flink for data streaming."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.5873018,
      "arousal": 68.25396839999999,
      "dominance": 58.321995400000006,
      "text": "Rust is good for single app, but is gigantic undebuggable dumpster fire for firmwares full of offloading actions to another CPUs, dealing with external buggy binary blobs etc. It's too easy to mess up the things in C, but one can also debug and fix the broken things, decompiling the Rust is the nightmare."
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust has not matured enough, Microsoft has announced support, but Rust has not yet touched their DCOM onion. Rust community still very small, the other problem is: non of the giant companies are launching any major systems that have been written in Rust, except some back-ends and Rust Api Applications for the backend.\n\nJohnnyB"
    },
    {
      "post_title": "Why don't you use Rust at your company?",
      "created_utc": 1739984859.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "I do product development in highly regulated industries. It's mostly greenfield development, and there's often a safety element for our products (e.g. medical devices). A lot of our products are based on STM32. So, there's no technical reason why we can't. But we are a development team 80 strong and our clients technically own the code we write (engineering services) so not only do we have to get buy in from our managers and developers, and then train our team, we also have to get buy-in from our customers' teams. And the projects are only a year on average, so we have to convince the next client's team next year."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Microsoft rewriting core Windows libraries in Rust"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.51052792857142,
      "arousal": 50.78555228571429,
      "dominance": 64.99028185714286,
      "text": "Link is a talk called Default Security at BlueHat IL 2023 by David Weston. He covers a bunch of areas and the final part of the talk (around 10 minutes) is about Microsoft introducing Rust in some self-contained areas in Windows.\n\nSome highlights:\n\n- Their focus is on \"killing bug classes\". More context in this post by Microsoft Research from 2019 - [A proactive approach to more secure code](https://msrc.microsoft.com/blog/2019/07/a-proactive-approach-to-more-secure-code/).\n- They want to do this with memory safe languages, CPU architectural changes and safer language subsets. This talk focussed on memory safe languages, specifically Rust.\n- First area they've introduced Rust in - a cross platform rewrite of a font parser called DWriteCore. The team reported that parsing was \"incredibly easy\". Font shaping performance increased by 5-15% compared to the C++ version.\n- It took about 2 devs working for half a year to complete this. The speaker says this is pretty good value for an area that is notorious for security bugs.\n- Second area is the REGION data type in Win32k GDI. Currently in consumer Windows, disabled by feature flag. Will be enabled in insider builds soon. Performance has been good, some small wins for the Rust version.\n- There is now a Windows SysCall implemented in completed safe Rust.\n\nTLDR - Rust is inside the Windows Kernel, will be enabled widely soon."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.818594000000004,
      "arousal": 62.528345,
      "dominance": 52.4376415,
      "text": "The presenter sounds so defeated when he says \"I'm sure people will be excited about Rust\"."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 60.31746,
      "dominance": 59.637188,
      "text": "I've heard Rust links with libc basically to call the C API of the operating system for all sorts of stuff.\n\nIs there a world where existing operating systems will create a similar API written directly in Rust? So Rust wouldn't even have to link with libc?"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.40136050000001,
      "arousal": 67.176871,
      "dominance": 61.904762000000005,
      "text": "Very interesting. I'm curious about their C++ integration because the best I've seen is the `cxx` crate and it's still pretty painful due to various things (layout incompatibilities, no move constructors, etc.)"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As a developer who has wanted to do some Windows stuff, I am excited about being able to avoid C++."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Omg finally, they made the obvious choice! I'm excited about Windows' future."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Anybody else notice the rust code on some of the slides had `pub interface`, seemingly instead of `pub trait`?"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Linux is already interested in Rust.   \nMicrosoft is starting to use Rust.   \nThis is a good sign !"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "10-20 years from now windows will just be another Linux distro."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The problem is not in programming language (MS has plenty of them) but in developers who could write bad code on any language."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703,
      "arousal": 58.61678,
      "dominance": 52.154195,
      "text": "Very interesting news! As a senior software engineer, I'm thrilled to see Microsoft taking Rust seriously.👍"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Now the Foundation proceeds to sue them… Jokes aside, intelligent move, let’s see how this evolve."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.993197,
      "arousal": 67.800454,
      "dominance": 80.15873,
      "text": "Imagine chrome in rust... I can't even..!"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Siuuuuuu"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "They have the budget to do it. Good for them. Maybe they will come up with a good product one day."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "I guess up-talking is becoming the new way to talk. I wish it didn't drive me nuts."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Microsoft: rewriting core components yet another time\n\nAlso Microsoft: can't even provide posix support since 80-es"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.696145,
      "arousal": 60.31746,
      "dominance": 59.637188,
      "text": "Rust will dominate the world"
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "The timeline is quite important: how much is pre-Copilot and how much is post-copilot.\n\nAlso MS had access to GPT-4 before others, so they could have used it to help with transpiling code.\n\nBut what's even more important: now that a part of the codebase is transpiled, it's easier to use GPT to help with the rest."
    },
    {
      "post_title": "Microsoft rewriting core Windows libraries in Rust",
      "created_utc": 1682420821.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Anyone use winapi-rs, crates io didn't have much info on it"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I built a Zoom clone 100% IN RUST"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 78.23129266666668,
      "arousal": 54.79969766666667,
      "dominance": 69.65230533333333,
      "text": "I wanted to learn how to do video and audio streaming in RUST so I built it.\n\n\n**Conclusion**\n\nIt is possible to build such system 😄 and it is damn awesome.\n\n**Stack**\n\n1. **Server**: Actix Web\n2. **UI**: yew\n3. **messaging**: protobuf + WebSockets\n4. **Video Encoder**: vp8 & vp9\n5. **Audio Encoder**: RAW, ogg\n\nIt is licensed under MIT, so feel free to clone + fork it.\n\nAlso, PRs are appreciated to make it much better 😄\n\n[https://github.com/security-union/rust-zoom](https://github.com/security-union/rust-zoom)\n\nhttps://i.redd.it/ezrpwmoebrv91.gif"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.2993195,
      "arousal": 53.7414965,
      "dominance": 68.0839,
      "text": "Have you looked into the OPUS audio format?\n\nIt's by far the best lossy audio encryption format. It preserves quality better at lower bitrates and it's also explicitly designed with VoIP software in mind (low latency). Which is also why most of the popular VoIP services use it.\n\nIt's also open and licensed under MIT."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "Does it have huge vulnerabilities? An RCE in the installer? Send data to china?\n\nIf not, it’s not a clone 😂\n\nSeriously though, this is pretty cool"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Damn do you think you might release a tutorial on how on to proceed to a similar product, step by step? Very interesting!!"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.5600905,
      "arousal": 50.6802725,
      "dominance": 58.61678,
      "text": "Did you test it against double natting, firewall rules? IMHO that's the hard part, in some cases you need to have peering servers."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I don't think you can call it Zoom, but you can definitely call it Room."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.791383499999995,
      "arousal": 47.5623585,
      "dominance": 55.2154195,
      "text": "This is cool. However over TCP even a moderate amount of packet loss (say 3%) will cause head of line blocking and the real time-ness will suffer as a consequence.\n\nThis is why we have WebRTC, which does this over UDP and works also with dodgy internet connections (it got built-in error correction and can decide to not so resend of every single old packet)\n\nwebrtc-rs is possible to use for the server side to build a Selecting Forwarding Unit (SFU)."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Going to short Zoom stock now"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.08843566666667,
      "arousal": 56.95389266666666,
      "dominance": 61.829176,
      "text": "I wonder how good does it scale? Can it handle 100+ users at the same time?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.3809525,
      "arousal": 45.521542,
      "dominance": 50.9070295,
      "text": "this is awesome. is vp8/9 too slow for encode though for real-time video?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Very nice.\n\nIf anyone is interested, a mature, open alternative for zoom already exists: https://jitsi.org/"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.1099775,
      "arousal": 61.47959175,
      "dominance": 67.4603175,
      "text": "So I guess this is as good a place to ask as any.\n\nYou know how YouTube and Twitch (Amazon) are currently the only viable platforms for video streaming for profit? With Twitch kind of faltering it's looking like YouTube might have a full blown monopoly which is always great (for them and for noone else).\n\nSo how hard would it be to just take something like this code and make a peer-to-peer streaming platform (possibly based on torrents to enable instant VODs of streams) that protects the IP of the streamer from getting located? It should be possible, right? There are video sharing platforms that are peer-to-peer, right? They're just doing a lot of things wrong that keeps them from ever becoming relevant."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "AFAIK ogg isn't really suitable for low latency audio streaming. Consider the [Opus codec](https://opus-codec.org/) instead."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you using WebRTC?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "What learning path did you take to learn this?  Were there any blockers?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is so cool. At what point in your rust journey can you attempt making something like this? I have about a year of experience"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.82539650000001,
      "arousal": 56.1791385,
      "dominance": 62.301587,
      "text": "Awesome job, I'm very curious to look at your solution. I was looking into a similar project to try to make a video chat with as low latency as possible to help make online meetings feel more natural.\n\nWere there any deliberate decisions you made to reduce latency compared to another solution? Or any pieces of the pipeline you found added more latency than you expected?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Probably works better than Zoom on Wayland"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "cool!"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it possible to build a decentralized analog without any server purely peer to peer?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Call it Virdeo aka virtual video."
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Super cool. \n\nHow long of a project was it?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Damn, interesting!"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "call it FE2O3  :)"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "That's pretty cool! As far as video/audio encoding/decoding goes, are you also doing that in pure rust, or is that handled by the browser?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this is so damn cool"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Very nice!"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amazing stuff. How long did this take you?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Doesn't rust use libc? =/"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Really cool project. Well done! 🥳"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Really cool, How you maid the UI ?"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Grande"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Call it Zoomie ??"
    },
    {
      "post_title": "I built a Zoom clone 100% IN RUST",
      "created_utc": 1666618682.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Perhaps consider `RoomZ` (Room is not a Zoom clone)"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 81.122449,
      "arousal": 67.063492,
      "dominance": 67.120181,
      "text": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 80.527211,
      "arousal": 65.47619025,
      "dominance": 66.63832175,
      "text": "The comments seem to lean towards Rust is not a good choice for game dev, I have seen 3 arguments.  \n\\- No company is making games in Rust, so you will never find a job  \n\\- Rust is too strict with the borrow checker to do rapid prototyping  \n\\- No crates are mature enough to have all the tools a game needs to develop a complete game"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.595341181818185,
      "arousal": 59.75056690909091,
      "dominance": 56.905792545454545,
      "text": "This was discussed around a year ago in [this thread](https://old.reddit.com/r/rust/comments/1cdqdsi/lessons_learned_after_3_years_of_fulltime_rust/) and its [linked article](https://loglog.games/blog/leaving-rust-gamedev/). I personally agree with most of the points and there's only been limited change since then. That said, I still use Rust for my personal gamedev projects despite these hurdles and I'm optimistic that the language will fix some of them over time (orphan rule, compile-time reflection, debugging perf/optimization controls).\n\nGames are big amorphous blobs of self-referential mutable data, and working that way performantly in Rust requires a paradigm shift relative to other languages like C++ or C#. The ECS paradigm is heavily favored in Rust gamedev for this reason, but ECS architectures aren't always ideal or ergonomic for every gamedev use case. As a result, you have to be fairly dedicated to using Rust to make a game in Rust. You're also missing out on mature tools ecosystems for debugging, profiling, crash dump reporting, etc. that you'd get with C++ and especially C#.\n\nIf you're comfortable making games in C++ or C#-based engines, it's difficult to justify switching to Rust. C# already offers a good portion of memory safety tools relative to Rust, and a C++ engine like Unreal also provides memory safety tools through its own garbage collector. Personally, I mostly use Rust *despite* some of its language features. In many ways I care more about cargo than Rust itself (though I do love Rust's enums and move semantics)."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.671202,
      "arousal": 59.6938775,
      "dominance": 58.5600905,
      "text": "You just can’t compare it. Unity and UE have graphical interface, so you can do almost everything graphicaly.\nBevy - cool, so awesome architecture, but, common, as a game dev - most of the time will be spent on creating locations and design 🤷‍♀️"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.88921314285714,
      "arousal": 56.83511514285714,
      "dominance": 57.790735285714284,
      "text": "I've written 11 games in Rust for various gamejams (half of which were as short as 72 hours). I use my own engine(s), and heavily use ECS. While gamejams are very time constrained, I don't find Rust an impediment to making decent games. Really, the only common annoyance I still hit after a decade of Rust programming is that untyped integer literals don't coerce to floats. Also, NAlgebra is really annoying to use due to its overly complex (IMO) type hierarchy; there are simpler math libraries out there which I may switch to in the future.\n\nPreviously I used D and C++, and despite being stricter, I find Rust to be a lot more enjoyable to code in in this setting than those two other languages. I've tried Godot (via GDScript) and found the experience annoying due to the node structure and the primitive language. Perhaps with more experience I'd have a better time with Godot, but what I can say is that with a lot of Rust experience, I already have a pretty good time with Rust."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.32086175,
      "arousal": 67.1768705,
      "dominance": 64.05895675,
      "text": "There are dozens of released games written in Rust on Steam. \nSeems pretty suitable for game dev to me.\n\nHere are just some: \n\n[Tiny Glade](https://store.steampowered.com/app/2198150/Tiny_Glade/)\n\n[Fields of Mistria(Game Maker, but uses Rust dlls)](https://store.steampowered.com/app/2142790/Fields_of_Mistria/)\n\n[the Gnorp Apologue](https://store.steampowered.com/app/1473350/the_Gnorp_Apologue/)\n\n[Way of Rhea](https://store.steampowered.com/app/1110620/Way_of_Rhea/)\n\n[Gnomes](https://store.steampowered.com/app/3133060/Gnomes/)\n\n[BITGUN](https://store.steampowered.com/app/1673940/BITGUN/)\n\n[Unrelaxing Quacks](https://store.steampowered.com/app/2331980/Unrelaxing_Quacks/)\n\n[Hydrofoil generation](https://store.steampowered.com/app/1448820/Hydrofoil_Generation/)\n\n[Factor Y](https://store.steampowered.com/app/2220850/Factor_Y/)\n\n[Tunnet](https://store.steampowered.com/app/2286390/Tunnet/)\n\n[USG](https://store.steampowered.com/app/2837160/USG/)\n\n[Robo Robo_Instructus](https://store.steampowered.com/app/1032170/Robo_Instructus/)\n\n[DEATHTRIP](https://store.steampowered.com/app/2909010/DEATHTRIP/)\n\nGenerally, most languages are suited for game dev, and it just boils down to personal preferences."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.8344672,
      "arousal": 59.84126972,
      "dominance": 64.36281168000001,
      "text": "I just want to debunk a few things that are being said about the gamedev industry. I have around 7 YOE as a C++  programmer in different industries. Almost 3 of them are in game dev, I worked at 2 AAA games and one of them I would actually call pretty complex.\n\nFirst of all, it's not true that in game dev we don't care about crashes. This is not true at all. To give an empirical example, I also worked in a critical safe industry, and I can say that the game I'm working on now treats safety more seriously. ( there are a lot of caveats here, in the critical safe project most of the logic was written in Ada, which is a safer language than C++, which was used mostly for UI ) But games do care about safety very much. If in the fist week, when game reviews starts showing up, you do not want youtubers saying that the game doesn't have good performance, or God forbid it has crashes. This can have a significant impact on how well the game does at the box office, bad reviews and a terrible first week can be fatal for some studios.\n\nThe second, it's that quick prototyping are a bit overrated and Rust is bad for game dev because of this. Prototyping in C++ is not always very as easy as people say and Rust has something rustacens call \"Rust on easy mode\", just impl Copy and Clone makes life significantly easier, and I'm sure there are more ways you can make prototyping in Rust faster. It's also very nice, that you can impl those traits in a certain file, and they will be valid only in that file ( and where it is used ), so you don't have to worry about much.\n\nA problem that I had with Rust is lack of documentation. A few weeks ago I had some free time on my hands and I tried to make a small renderer with wgpu and winit, there are 2 tutorials that use Rust, which are old and use an older version on winit. The rest of them are JS. Reading the Rust docs on wgpu would've taken me all the time that I had so I dropped it ( to be clear, I just wanted a cube that I can move, nothing fancy, just to get a feel for the API )"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.070295,
      "arousal": 64.28571450000001,
      "dominance": 70.748299,
      "text": "Because people who argue in YouTube comments aren't very bright."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.32296728571428,
      "arousal": 57.08616778571429,
      "dominance": 61.32167121428572,
      "text": "Not a gamedev, but I use rust in industrial settings, and this is generally true at the moment, and in no way it is Rust's fault\n\n- Rust gives you guarantees that game developers don't really care about. Game crashes? No one dies. Game has a buffer overflow bug lurking somewhere? Just pay attention to the mods you download or servers you connect to. \n- You are either using a big game engine or doing everything from scratch. Rust is currently useless if you're using an engine or too much of a burden if you write all from scratch.\nThere's the bevy engine which is really just a framework of libraries to build games. \nReally rust is suitable for gamedev only if you love the language and belong to the \"from scratch\" tribe, i.e. if you're willing to contribute and build some of the ecosystem.\n\nIf you're a low level programmer who loves game development (or vice versa!) you'd actually probably be more comfortable in good ole C++ or Zig since you're probably do a lot of \"unsafe\"-s for that kind of code."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Game dev is a little harder in Rust compared to other languages, but once you get used to it, it isn't so bad. It just takes careful design considerations, which you should be doing anyway."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.82993200000001,
      "arousal": 62.6077096,
      "dominance": 61.882086,
      "text": "It's very much a situation where the *design tooling* is not yet mature. As someone who is currently working on my own game project with commercial intent, the main issue I find is how much game design information is tied currently up in code because that's what programmers are comfortable with. I wrote a bit about this [in a blog post of mine](https://blog.fallible.net/programming-isnt-enough/).\n\nRust is my favourite language and one I've been using for almost 10 years. But there are a lot of things that are difficult in it because the infrastructure for non-OOP languages is less developed. I'm hopeful for ECS architecture as the answer to to the questions of dependency injection & Big App state management & manipulation, but there's plenty of time left before we're truly there.\n\nBevy is still in the gamedev equivalent of the turing tarpit. It is climbing out, and I'm excited for it to get there, but we're still in that pit for now."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.2086166,
      "arousal": 56.1904762,
      "dominance": 61.65532880000001,
      "text": "I’ve made a few indie games. I’ve used love2d, godot, and tried bevy.\n\nI think Rust is awesome for making an engine, but not for making a game.\n\nBoth godot and love2d have a C and C++ core. Rewrite that in Rust, sounds like a great idea. Let’s make a RustyLove, where the core is all Rust, for better performance and parallelisation. I’d certainly try it out.\n\nBut, I’m not currently writing my little enemy AI scripts in C++, I’m writing them in Lua or Godotscript. I have no interest at all in rewriting that code in Rust, and when I tried it with Bevy it was extremely slow and painful."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.03628125,
      "arousal": 57.39795925,
      "dominance": 64.79591825,
      "text": "As a 6 year rust vet, and long time hobbyist/enjoyer of game dev. Dabbling with most all engines, and making some of my own, Bevy has been by far and above the best experience so far. I know it’s still early and needs a lot of work, but man is it so easy to express what you are trying to do, and no need to fiddle with some crap UI, or bloated unclear code path."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.00680266666667,
      "arousal": 61.29062716666667,
      "dominance": 60.53476933333334,
      "text": "Not suitable is the wrong wording. I would say it’s not the best tool for the job in this case. Rust focuses on the correctness, robustness, performance, and maintainability of the code. Out of this, the only thing that matters in the game industry is performance. It’s ok to have bugs in your game if it doesn’t propagate to the player. It’s ok to cut corners, and write ugly code - the main goal is to ship the game. But at the same time, game dev requires flexibility, that Rust doesn’t provide. \n\nOf course, there are exceptions, like the development of commercial game engines, and AAA games that have more “enterprise-like” product lifecycle, that would require maintainability and a certain level of correctness. \n\nWith that being said, I like Bevy and the way it uses Rust. It’s a joy to use."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I disagree with the comment that rust is not suitable for gamedev. Not because I disagree with the points being made, but because to me that turn of phrase means that the language itself is unsuitable, and yet, the points made do not actually disqualify the language, just the things adjacent to it. It would be the same as saying C++ is unsuitable for gamedev, because CMake/autotools is shit."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.7309145,
      "arousal": 60.80876800000001,
      "dominance": 67.66817816666666,
      "text": "From a little bits of game dev I've done before, it tends to be very event driven so state changes can get messy.\n\nThis would probably butt heads with Rust, but I imagine it might be doable with some workarounds. There's some front-end frameworks that manage to pull this off. Although it does sometimes feel like circumventing some of the intentions of Rust.\n\nI haven't used Bevy, but I imagine maybe they do something similar. If not, it would make game dev very tricky."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.283447,
      "arousal": 74.489796,
      "dominance": 74.489796,
      "text": "i wouldnt say rust is bad for gamedev, it's just different. a lot of the guarantees are just too much for the quick fast paced dev cycle you'd be doing especially with some larger games. maybe some compiler tools or dynamic compilation(? like hotswapping) can help but its tough"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.671202,
      "arousal": 59.6938775,
      "dominance": 58.5600905,
      "text": "I think long therm the issue of rapid prototyping is the biggest one but at the same time it is the norm to have some scripting language for game development and you might convert to native code later once the feature is well defined and with that approach there are lots of advantages on having a performant language that aids correctness and reliability"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.44444458333334,
      "arousal": 58.219954666666666,
      "dominance": 60.459183583333335,
      "text": "I am a huge advocate for game development in Rust, but I also agree with the assessments made in that other thread. At this time, that is. \n\nBut, as the ecosystem evolves, especially as Bevy evolves, I think this will change. The ECS model in particular alleviates much of the (completely legitimate) concerns that they have. The borrow checker is a fickle beast when trying to develop in an OOP mindset, but is much more tractable when approaching things from a data oriented mindset. ECS is a great architecture for this. \n\nWe already see a handful of small but successful projects on Steam. I expect this to grow over the coming years. And once the Bevy team finally nails the Scene/UI/Editor efforts, which I have full confidence that they will, we'll see even more successful projects, and the snowball effect shall commence. \n\nI remember back in the late 90's and early 2000's when people on slashdot and the like were making similar arguments about using C++ over C and assembly. The prevailing opinion at that time was that the overhead of the virtual tables and the narrowness of early OOP made C++ a poor choice for games. That opinion has obviously turned around. I suspect that it will with Rust and ECS as well, once this model proves its advantages in the market and community. \n\nAlso, u/PhaestusFox I just want to say that you, Chris Biscardi, and Tan Tan, have provided very informative and entertaining content for Rust and Bevy game dev, and I hope it continues. If I'm right, y'all will be looked back at the OGs of the scene and will have played an important part in setting the stage for the next generation of game developers. Please keep it up! You are appreciated."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "I heard game devs say they'll gladly use sticks and glue if it were faster. Seems like speed is most important in commercial development. Rust is an especially verbose and tedious language."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.935374,
      "arousal": 56.7743765,
      "dominance": 69.0759635,
      "text": "I think the public exposure to Gamedev is primarily through lone-savants who basically do everything on their own. For that kind of developer, Rust isn't a particularly attractive tool, since its guarantees around safety and reliability don't matter as much when you're your only API consumer.\n\n\nBut where Rust _really_ shines is in projects with many contributors, especially when some number of those people are relatively inexperienced. I can trust a junior Dev to get multithreading working in Rust. Maybe not as performant since they'll use a Mutex or some other bottleneck, but it'll work. I can't make that assumption about basically any other language, even C#."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.82766425,
      "arousal": 53.88322,
      "dominance": 59.04195025,
      "text": "The  Rust  behavior of making everything an error  instead of a warning is truly a problem with prototyping. I already  worked on 2 teams that dropped Rust because  time to POC was too slow and management kept  complaining, while the C++ teams were  getting better results. Developers must understand that business is not ONLY about the final result, the timing to show a POC to a client in some fields is super important. Maybe hard for developers to understand, but it can be easier to fix some bugs later than to try to find a new sponsor/client because you took too long and some other company got the opportunity before you. How to solve that? No Idea, but would benefit Rust a lot if it had simple options to make prototype development faster."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.9765685,
      "arousal": 56.72713516666667,
      "dominance": 63.416477500000006,
      "text": "i'm just a junior new to the field and industry but am I wrong in saying it just takes time? As the ecosystem matures and more games get written in Rust, there are bound to be more notable games that entice people to switch. Until then, some pioneers who can afford it (accursed barrier, I know) will have to make their own projects in Rust and share their process to show that it's possible. They can be the ones to hire Rust game devs and eventually some of their projects will be the ones that inspire existing teams/companies to switch.\n\njust my initial thoughts, I might be totally misinformed about how things work 😅"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.81034836363636,
      "arousal": 64.50216427272727,
      "dominance": 61.739847454545455,
      "text": "I don’t do game dev. So maybe don’t weight my opinions very highly lol. But I do write rust professionally and rust/zig/go stuff for random personal projects and whatnot. Addressing your three proposed arguments:\n\n\n1) Correct. If you’re trying to get a job in gamedev, just learn the tools that you see job postings asking for. \n\n\n2) This probably has more to do with your familiarity with the language. Like I said, I don’t do gamedev, but comparing it to the software domains I work in— I never use untyped languages like js or python which are often heralded for having “faster iteration” or whatever. But the reality for me is I need a type system to feel comfortable understanding what I’m doing. So for me, I will always be faster writing software in a typed language like rust, go, java, whatever.  And the more rust code I write, the more I’m finding brain feels comfortable working with the rust type system. Idk where you fall on this. \n\n\n3) again, idk game dev. This might very well be true. But as more of a “systems engineer” or whatever, this sounds like a python/js take to me.  The rust ecosystem seems to be consistently growing, but in general, I don’t like the take of “no crates exist for the thing I want to do, therefore I won’t do it”.  Especially if this is a personal passion project— go learn how to write that code for yourself. Learning is the whole point!\n\n\nTLDR: I like rust. If your priority is to write rust (and you just happen to be excited about building a game for yourself) I recommend using rust. If your priority is purely game dev (and you’re only considering rust because it seems interesting in passing), I probably recommend sticking the tried and true basics."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.32653066666667,
      "arousal": 59.901738333333334,
      "dominance": 62.81179133333333,
      "text": "https://loglog.games/blog/leaving-rust-gamedev/ is the best summary IMO.\n\nIn a game you want quick experimentation, not slow implementation for correctness - especially when dealing with graph structures, areas where you might want runtime reflection, etc."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "The only valid point imo is the third one. The ecosystem is undoubtedly more mature in C++. Point number 2 is completely wrong imo, the borrow checker saves more time than it costs."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "I don't do game dev but FWIW I reckon it might be true. From what I know game development requires frequent refactoring and generally an \"agile\" approach and Rust uniquely not suitable for that."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.240362875,
      "arousal": 55.32879825,
      "dominance": 54.648525875000004,
      "text": "I've recently moved my studio into developing a game. Honestly the only drawback currently is the lack of libraries and maturity in the space. But complaining about a language is a very stupid thing to waste time on, most of the time the best language to use for a project is the one your team is the most well versed on.\nObviously our project is very artistic and indie, so the game engine really doesn't matter since most of our code is inhouse."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I once made a meme about gamedev in Rust - [https://www.reddit.com/r/rustjerk/comments/1819vtc/true\\_state\\_of\\_game\\_development\\_in\\_rust/](https://www.reddit.com/r/rustjerk/comments/1819vtc/true_state_of_game_development_in_rust/) . It is still true."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.6043085,
      "arousal": 55.980725500000005,
      "dominance": 66.80838975,
      "text": "There are a lot of people in here giving an opinion that don't do gamedev or don't do gamedev with Rust.\n\n\nRust is fine for gamedev, if you hold it right. Just like any language. There is not, in general, a language-level obstacle that makes any kind of program not suitable for a language. What it might require you to do is rethink a bunch of your assumptions about how to write a certain kind of program but, imo, that's a 'you' problem, not a domain problem."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.29705200000001,
      "arousal": 64.739229,
      "dominance": 69.50113350000001,
      "text": "The author of Tiny Glade, a game nominated for BAFTA in the \"technical achievement\" category, is extremely positive about their use of Rust and calls it a \"superpower\": https://youtu.be/jusWW2pPnA0?si=qnV5S_kXMSSHd4uz&t=3266"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "No rust is suitable for game dev, it's not an issue if the language.\nBut no i'd not use bevy for anything too big.\n\nGodot + rust is wonderful though."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Rust is perfectly suitable for gamedev. Rust is not suitable for productivity in game dev. \n\nIf your objective is make games go for it, if you wanna make games fast, with a big community, libs and examples, c++ and c# are literally decades ahead."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.61375666666667,
      "arousal": 60.27966733333333,
      "dominance": 62.66061966666666,
      "text": "I think our mind are very biased to object oriented stuff in gamming its make easier, create a enemy class … for gamming it helps a lot create, destroy, hierarchical stuff and so on… thats the only thing that i think is the main issue with no object oriented languages…\nBut if you start using rust for everything you will familiarize and do differently.\n\nbut gamedev is all biased in c++ and c#. Its like 90% of the market that the real reason"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.473923,
      "arousal": 57.1995465,
      "dominance": 67.403628,
      "text": "Tiny Glade is made in a modified Bevy engine so there is commercial success with Rust."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.111678,
      "arousal": 62.202380875,
      "dominance": 66.411564375,
      "text": ">Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev? \n\nThat comment is \"horribly inaccurate.\" So, extremely strongly disagree.\n\nSome game developers legitiamtely developed parts of their game in a hex editor. So, putting this all into context, what you suggesting is clearly wrong. \n\nDo what works for your customers...\n\nWe don't pick the programming language based upon our feelings, we pick the language based upon the requirements of the project...\n\nIf this game needs something super fast and it doesn't exist, well Rust might be a good option for that component... Maybe it would be a bad choice... With out specific requirements, we can't tell you anything..."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.82766436,
      "arousal": 65.54648504,
      "dominance": 65.1383218,
      "text": "I'm looking at starting two companies in the next 6 months, to leverage rust language specifically. One is a game Dev co-op, and the other is small scale automation consulting business.\n\nI'd like to have one run similarly to how motion twin originally set out with their intentions.\n\nAlso due to having no capital lmao, the offer of employment would be an anarchistic even split of profits, or a representative split that the staff ought to unanimously agree upon. \n\nThe goal is to make games we want to play, and the reward is getting to play them. If the community enjoys it too, we may be able to make a decent return on our efforts, and influence the gaming community positively, exactly like dead cells set out to do! \n\nThe indie community is the best community and I want to participate, and represent it where I can, and I want to do so using rust, and I'm sure I'll find like-minded people, and we could, for example, game jam to practice rust game design flows, and experiment with different styles and mechanics.\n\nI love how games like balatro, animal well, Undertale, and even things like stardew valley, and maybe not an indie game, but even cavestory, influence gaming culture and bring humanity closer towards the simple shared value of universal fun. I want to make fun, and if we can make a compelling story or a gripping gameplay loop in the process, that would be incredible.\n\nI love simple games with minimal mechanics, I really enjoy Jonathan blows style of game Dev (minus the hiatuses), in that complex gameplay should be pushed to its limits as it emerges from simple game mechanics interacting with eachother, to see what the logical consequences are, from extending those interactions as far as we can. Again baba is you is an incredible example of this. I am not aspiring to make another brilliantly new type of game, but a rogue like or a novel idle game would be fun to get our hands dirty. \n\nThat being said, I don't think rust is fully accessible for game Dev in rust to be holistically recommended currently. It echoes through the community that rust is immature and hasn't settled into its niche, with the community most often contributing to what takes their fancy, I think that has meant that some things like graphics, haven't really been fully explored in rust. That ought to be taken into consideration.\n\nSo yeah rust for game Dev is kinda like... Starting the game Dev technology journey from 1995. If you want anything fancy you'll have to invent it, or translate it directly. Both difficult.\n\nI made a sokoban game in rust though, and with a hand-coded state engine, it ran successfully, and had graphics, although hot damn they were the worst Dev graphics I've pumped out since I was 11 years old.\n\nSo yeah, I guess if you are interested, pending some study I need to accomplish over the next few days, and some big appointments in April, send me a DM, and we can brainstorm a lil, maybe we set up a \"company\" discord?"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just a few days ago in our local Rust userGroup, someone posted a job in Europe where they were looking for a Rust dev , four days a week, remote to port code from C to Rust...500-800 Euros / day.🦀"
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.85325571428572,
      "arousal": 59.36993835714286,
      "dominance": 60.17168757142857,
      "text": "Rust isn't unsuitable for game development.  There are two main factors that play into recommending against Rust for game development:\n\n1. The Rust game engines are much less mature and usable than engines they're competing against.  This will get better over time, but the ease of use and the number of different types of games you can efficiently build in Unity vs Bevy heavily favors Unity at this point in time.\n\n2. In general, the benefits of Rust apply most substantially in large projects vs small projects.  If my program is only doing two things asynchronously, then having to spend any mental energy on parallelization safety is a waste of my time as a developer.  Similar situation for strong typing and memory management.  While most successful games usually end up being fairly large codebases, most indie game WIP projects are very small at the point where they stop being developed.  For the average hobby game developer using Rust, the work required to understand all of Rust's safety features will cost them a lot more game dev time than it saves them.\n\nIn the long arc of history I think we're going to have some extremely impressive games either entirely written in Rust or using a primarily Rust backend.  I suspect such games will lean towards feeling much less sloppy and poorly crafted and buggy than games developed in C++ and Unity tend to.  This will likely at some point lead to a large adoption base in AAA studios.  We're just early in the timeline right now.  That's all."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.1303855,
      "arousal": 66.9217685,
      "dominance": 65.87301550000001,
      "text": "> No company is making games in Rust, so you will never find a job\n\nYet people made game in Rust. Rust is such a small sector, you might as well said anything but C# (Unity), C++ (Unreal). \n\n> Rust is too strict with the borrow checker to do rapid prototyping\n\nThis is argument for familiarity. You can rapidly prototype in any language. Not sure about Bevy.\n\n> No crates are mature enough to have all the tools a game needs \n\nWhat languages do have mature enough ecosystem? C++, C#? I assume game needs to get on all platforms including consoles."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.5161565625,
      "arousal": 52.26757375,
      "dominance": 59.573412625,
      "text": "It is great if you are not really interested in releasing games and just want to have that shiny and perfect hobby project that brings you peace during weekends after dealing with undocumented prototypes for some ordinary business-company running in production for actual income.\n\nIn theory, it could be good.  \nHaving nice type system is definitely helpful.  \nNative support for proper enums and pattern matching is huge benefit.  \nEven the borrow checker can be ignored and escaped from.\n\nI am personally not a fan of ECS at all.  \nI am fan of packing your data in specific way so it can be processed quickly), but there are other options if you want to open gates of hell by ignoring borrow checker besides using ECS.\n\nBut that is not enough.  \nI could even live with compilation times, because I know from experience that once it compiles, it will probably work correctly.  \nAnd even with \"rewrite significant chunk of codebase to keep type safety\".\n\nBut I don't have time to write all the missing components in an engine.\n\nEngines are not even remotely close to big players in the space.  \n**That is not a limitation of Rust itself, just the amount of resources poured into the projects.**\n\n  \nIs it possible to use it? 100% yes.  \nIs it suitable choice for some genres or ludum dares. Yes.\n\nIs it suitable choice if you want to make 3d first/third person game with action elements?  \nI don't think so.\n\nI really do hope that I am wrong.  \nThat Rust and for example Fyrox/Bevy is **more suitable** for my \"espionage RPG thriller with supernatural twist and great movement mechanics\" which would play like something between Deus Ex, Cyberpunk, Dying Light and Morrowind than Unreal.  \n(yes, I dream too big, completely aware)\n\nStill, finger crossed for Bevy/Fyrox or some other engine getting good enough to contend as a serious choice."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "Yes, rust add way too much friction for fast iteration loop game dev require."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.4557823,
      "arousal": 64.93197265,
      "dominance": 65.4251699,
      "text": "> - No company is making games in Rust, so you will never find a job\n\nThis is currently true. But I also think there are more reasons to do game dev then just to \"find a job.\" It's a fun way to learn a new skill. Plenty of people do game dev as a hobby. You can also work as an independent developer in Rust (there are multiple people doing this right now).\n\nThere are plenty of people who do game dev as a hobby and work as software engineers in their normal jobs. In those cases, I think learning Rust is a great idea, and a lot more tech companies are turning to Rust.\n\n> - Rust is too strict with the borrow checker to do rapid prototyping\n\nThis is the most tired take. I personally completely disagree with it.\n\nYes, using Rust initially is hard, because you're not used to the borrow checker. You're not used to the compiler stopping you from writing bad code. But after you write Rust for a bit, you begin to understand what the borrow checker is actually checking, and why those things are good to keep in mind constantly. At that point, it no longer is in the way, and it instead helps you. \n\nAt this point, I can write Rust as fast as any other language. Sure, there's slightly more key presses than writing python, due to the syntax, but that's a small price to pay for being able to write a program that is more easily scalable. \n\n> - No crates are mature enough to have all the tools a game needs to develop a complete game \n\nI'm not sure what exactly is missing? Bevy is continually being developed, and people make games in it currently. They have a semi-regular game jam to try to expose the parts of the ecosystem that still need help and address them. \n\nSure, it's a *newer* ecosystem, so you may face a few more pain points, but I don't think there are any major gaping holes at this point."
    },
    {
      "post_title": "Do people who use Rust as their main language agree with the comments that Rust is not suitable for game dev?",
      "created_utc": 1745638895.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "The naysayers are usually the one's who are just not good enough with rust yet. So it's quite literally a skill issue. If you're good at rust, you can gamedev in it just as well if not better as in any other language. As bevy and it's ecosystem will mature, it will prove this right. It's a good bet to be the next Godot/Unity for professionals."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congratulations! But also bah! I was hoping to find some sweet new trick. There’s only so many crates in a workspace a mere human can manage!"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.003023500000005,
      "arousal": 50.51020416666666,
      "dominance": 49.54648516666666,
      "text": "It is unfortunate how the structure of Cargo and the historical challenges of workspaces have encouraged the common practice of creating massive single-crate projects.\n\nIn C or C++, it would be uncommon and obviously bad practice to have a single compilation unit so large; most are only a single `.c*` file and the headers it includes. Giant single-file targets are widely discouraged, so C and C++ projects tend to acheive a much higher level of build parallelism, incrementality, and caching.\n\nSimilarly, Rust crates tend to include a single top-level crate which bundles together all of the features of its sub-crates. This practice is also widely discouraged in C and C++ projects, as it creates an unnecessary dependency on all of the unused re-exported items.\n\nI'm looking forward to seeing how Cargo support and community best-practices evolve to encourage more multi-crate projects.\n\nEdit: yes, I know that some C and C++ projects do unity builds for various reasons.\n\nEdit 2: u/DroidLogician [pointed out below](https://www.reddit.com/r/rust/comments/1jzzavh/comment/mnbui22/) that only 5% of the time is spent in the rustc frontend, so while splitting up the library into separate crates could help with caching and incremental builds, it's still surprising that codegen takes so much longer with `codegen_units = <high #>` than with separate crates:\n\n```\ntime: 1333.423; rss: 10070MB -> 3176MB (-6893MB)\tLLVM_passes\ntime: 1303.074; rss: 13594MB ->  756MB (-12837MB)\tfinish_ongoing_codegen\n```"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.73922933333334,
      "arousal": 71.995465,
      "dominance": 58.91912333333334,
      "text": "Did the generator just spit out a single source file before? That's pretty much a complete nightmare for parallel compilation.\n\nHaving the generated code be split into a module structure with separate files would play better with how the compiler is architected, while having fewer problems than generating separate crates. That might give better results from parallel codgen.\n\nThis might also be a good test of the new experimental [parallel frontend](https://blog.rust-lang.org/2023/11/09/parallel-rustc/)."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.961451,
      "arousal": 52.4376415,
      "dominance": 60.1473925,
      "text": "Microsoft's C# compiler does one pass to parse all the declarations in a file, and then compiles all the bodies of the functions in parallel. (Annoyingly, this means compiles aren't deterministic without extra work.) It's a cool idea, but probably not appropriate to a language using LLVM as the back end when that's what's slow. Works great for generating CIL code tho"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Hm, you mention caches as possible point of contention. That seems plausible, but it could also be memory bandwidth. Or rather, they are related. You should be able to get info on this using `perf` and suitable performance counters. Another possibility is TLB, try using huge pages.\n\nReally, unless you profile it is all speculation."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What does compiling sql into rust mean? I have heard this twice now."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think the root cause of the issue is the stalemate situation between Rust compiler developers and LLVM developers. Clearly, rustc generates LLVM code that takes much longer to compile than equivalent code in any other language that uses LLVM as its backend, including C and C++. This is even true in the absence of generics and monomorphization.\n\nThe Rust folks believe that it is LLVM's problem and LLVM folks point to the fact that other frontends don't have this issue. The result is that it doesn't get fixed because noone thinks it's their job to fix it."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Bunch of show-offs.  :)\n\nEdit: Does a smiley not imply sarcasm?  Guess not."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.74829933333334,
      "arousal": 53.51473933333333,
      "dominance": 58.65457266666667,
      "text": "I can think of two potential issues at play here.\n\n### Files, more files!\n\nFirst of all, NO idiomatic Rust codebase will have user-written 100K LOC files.\n\nThis doesn't mean rustc shouldn't work with them, but it doesn't mean that it's unlikely to be benchmarked for such scenarios, and therefore you're in unchartered waters: Here Be Dragons.\n\nI would note that a less dramatic one-crate-per-operator would have been a simple one-file-per-operator move.\n\nAs a bonus, it all likelihood it would also fix some incremental compilation woes that you've got here. There are still some spurious incremental invalidation occurring on items when a character is inserted/removed \"above\" them in the file, in certain conditions, so that any edit typically invalidates around ~50% of a file. Not great on a 100K LOC file, obviously.\n\n### Single-threaded front-end\n\nI believe the core issue you're hitting, however, is the one reported by Nicholas Nethercote in [July 2023](https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html): single-threaded LLVM IR module generation.\n\nCode generation in rustc is done by:\n\n 1. Splitting the crate's code in codegen units (CGUs), based on a graph-analysis.\n 2. Generating a LLVM module for each CGU.\n 3. Handing off each LLVM module to a LLVM thread for code-generation.\n 4. Bundling it all together.\n\nSteps (1), (2) and (4) are single-threaded, only the actual LLVM code-generation is parallelized.\n\nThe symptom you witness here \"maybe 3 or 4\" cores busy for 16 codegen units, despite code generation being the bottleneck, looks suspiciously similar to what Nicholas reported in his article, and makes me think that your issue is that step (2) is not keeping up with the speed at which LLVM processes the CGUs, thus only managing to keep \"maybe 2 or 3\" LLVM threads busy at any moment in time.\n\nIt's not clear, to me, whether a module split would improve the situation, for 16 threads. I have great doubts, given how rustc can struggle to keep 16 threads busy, that it would keep 128 threads busy anyway...\n\n### Mixed solution\n\nFor improved performance, a middle-ground solution may do better.\n\nUse your own graph to separate the operators to fuse together into \"clusters\", then generate 1 crate per cluster, with 1 module per operator within each crate.\n\nThis could be worth it if some operators could really benefit from being inlined together... I guess you'd know better than I where such opportunities would arise.\n\nYou'd still want to keep the number of crates large-ish -- 256 for 128 cores, for example -- to ensure full saturation of all cores."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.06500366666667,
      "arousal": 61.640211666666666,
      "dominance": 65.154951,
      "text": "I work with the OP. If any of you are curious and want to explore the Rust compiler's behavior here yourself, try this:\n\n\\* [Start Feldera](https://github.com/feldera/feldera?tab=readme-ov-file#%EF%B8%8F-quick-start-with-docker) from source or use Docker and go to localhost:8080 on your browser:\n\n    docker run -p 8080:8080 --tty --rm -it ghcr.io/feldera/pipeline-manager:0.43.0\n\n\\* Copy paste this made up [SQL](https://gist.github.com/lalithsuresh/bcc02a99bfb470f15e0be65cb4156b57) in the UI\n\n\\* You will see the Rust compiler icon spinning.\n\n\\* Then go to `~/.feldera/compiler/rust-compilation/crates` inside docker (or on localhost if you're building from sources) to see a Rust workspace with 1300+ crates. :)"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.57898733333334,
      "arousal": 54.308390333333335,
      "dominance": 54.76190466666667,
      "text": "Crate as codegen unit was a mistake. I hope someday we could use modules instead."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.61742785714286,
      "arousal": 49.368318571428574,
      "dominance": 57.434402285714285,
      "text": "Usually when I criticize huge dependency trees, it's because the chance that for a given crate you only use 10% of its code or less is very high (due to complex abstractions and having multiple use cases), which means that there is necessarily a significant amount of work that the compiler is doing in the void only to compile the thing away. But here this is not even a problem, because it's just the same monolith separated into crates so that `rustc` can use all the threads. Not only that but without using any monomorphization or other features that would slow down compile times by a lot. I would assume that every single function that's been generated for this program is being used somewhere, thus actually needs to be compiled and does end up in the binary at the end.\n\nThis is honestly mind-blowing. It's kind of the perfect example to show how bad Rust's compile time is, and that there's so far no reason it couldn't be better. With the additional context provided by some comments under this thread, LLVM code seems to be abnormally slow to compile _specifically in Rust's case_ as even C++ doesn't take that long and C takes even less than that..."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.49433100000001,
      "text": "The workspace is super convenient for centralizing version management, but becuase it cannot be defined remotely, it also centralizes crates.\n\nI'm at too early of a stage to want operate an internal registry, but as soon as you start splitting off crates, you want to keep the versions of dependencies you use tied.\n\nI've done exactly this with Nix and all my non-Rust deps (and many binary Rust deps).  I can drop into any project, run `nix flake lock --update-input pinning` and that project receives not some random stack of versions that might update at any time but the versions that are locked remotely, specific snapshots in time.  Since those snapshots don't update often, the repos almost always load everything from cache.\n\nA lot of things about workspaces feel very geared towards mono-repo.  I want to be open minded, but every time I read about mono repo, I reach the same conclusion: it's a blunt solution to dependency dispersion and the organization, like most organizations, values itself by creating CI work that requires an entire dedicated team so that mere mortals aren't expected to handle all of the version control reconciliation."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038549,
      "arousal": 43.650794,
      "dominance": 64.285714,
      "text": "> Instead of emitting one giant crate containing everything, we tweaked our SQL-to-Rust compiler to split the output into many smaller crates. Each one encapsulating just a portion of the logic, neatly depending on each other, with a single top-level main crate pulling them all in.\n\nThis is fucking hilarious. Props to working around the compiler with this method!"
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.12925200000001,
      "arousal": 54.81859425,
      "dominance": 66.9217685,
      "text": "Ok, who else thought they were reading about RedHat engineers doing something with rust in Fedora? I thought I was, until about the middle of the damn article! What a poor/good choice of a name..."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.098639500000004,
      "arousal": 48.6678005,
      "dominance": 53.826530500000004,
      "text": "By the way, this is how C++ while being famously slow to compile as well, usually we get faster compile times than with Rust.\n\nThe ecosystem has a culture to rely on binary libraries, thus we seldom compile the whole world, rather the very specific part of the code that actually matters and isn't changing all the time.\n\nAdd to the mix incremental compilation and incremental linking, and it isn't as bad as it could be.\n\nNaturally those that rather compile from scratch suffer similar compile times."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 26.870748,
      "arousal": 64.739229,
      "dominance": 46.598639,
      "text": "Use Bazel with remote execution and caching. "
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.925169999999994,
      "arousal": 56.190476000000004,
      "dominance": 50.2267572,
      "text": "Thanks for the article. FWIW, I've seen the exact same symptoms:\n\n* \\`LLVM\\_passes\\` and \\`finish\\_ongoing\\_codegen\\` dominating my build times\n* increasing codegen-units having no impact.\n\nIn my case, I noticed that going from \"fat\" LTO to \"off\" or \"thin\" made a huge difference. In \"thin\" LTO mode increasing the number of codegen-units also took effect.\n\nNote that \\`lto = true\\` is \"fat\" LTO, I'm wondering if you mixed up the settings, since there's also a related note in the article? You could try setting LTO specifically to \"thin\" or \"off\" and see if that makes a difference. Also, \"fat\" vs \"thin\" didn't result in a measurable difference at execution time in my benchmarks."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.579932125,
      "arousal": 51.658163375,
      "dominance": 60.459183625,
      "text": "I got linked this article, so here's a response to some of it as someone who has worked a fair bit on codegen unit partitioning in the compiler.\n\n> You might wonder what about increasing codegen-units in Cargo.toml? Wouldn't that speed up these passes? In our experience, it didn't matter: It was set to the default of 16 for reported times, but we also tried values like 256 with the default LTO configuration (thin local LTO). That was somewhat confusing (as a non rustc expert). I'd love to read an explanation for this.\n\nThere are three likely causes of this.\n\nWhen functions are instantiated in codegen, they are either instantiated as GloballyShared or LocalCopy. GloballyShared items actually partition in the intuitive way. But LocalCopy items are never partitioned, and a copy of each of them is added to every codegen unit where its GloballyShared items reference it (perhaps transitively). So it's possible to end up with just a few GloballyShared items, and one of them pulls in basically the entire program's worth of LocalCopy items.\n\nThe second possible culprit is that codegen unit partitioning never breaks up modules. The compiler has a benchmark suite of dubious quality, and this heuristic serves well on the benchmark suite. But it's likely that in your case, all the compile time is taken up by one module, and CGU partitioning is just refusing to split it.\n\nThe last is that in a release build, we do thin-local LTO at the end. Though this is thin and it is local, I have seen this have very strange build time implications through interactions with the rest of the compilation pipeline. If the per-CGU optimizations don't optimize out enough code, thin-local LTO can increase build times.\n\nOne thing that you could do to investigate this is compile with 256 CGUs and `RUSTFLAGS=-Cno-prepopulate-passes --emit=llvm-ir cargo build --release` then look at what's in all the `.ll` files in `target/` (I forget where they are exactly, but they're in there and they will look like one per CGU). If there's one huge one, then the size of that CGU is probably the issue.\n\n> Of course, we can't expect linear speed-up in practice, but still 7x slower than that seems excessive\n\nIt would be very interesting to know how this overhead scales with various `-j` values. It sure does sound like contention, but if it's over system resources I'd expect you to be able to run a few builds at once without any contention."
    },
    {
      "post_title": "Cutting Down Rust Compile Times From 30 to 2 Minutes With One Thousand Crates",
      "created_utc": 1744741825.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is solid advice"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Keep Rust simple!"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Minor nitpick but if/else is an expression rather than an statement in Rust, so there is actually a construct that is equivalent to a ternary"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.6213155,
      "arousal": 44.9546485,
      "dominance": 56.5759635,
      "text": "Operator overloading is an interesting exception. Languages that don't have function overloading, named arguments, etc. due to simplicity reasons typically omit custom operator implementations with the same argumentation. There's also ongoing RFCs on default values for fields and named arguments. I think that ultimately, Rust doesn't try to be simple first and foremost (that'd be closer to Go), but it does try to stop you from shooting your foot, and that often aligns with simplicity."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I assume “named arguments” means allowing the caller to include the names?\n\nI would love that, even if it didn’t allow passing them out of order - sometimes I just want to see them at the call site.\n\nNOT having this I feel encourages me (for better or worse) to create more structs than I might otherwise."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.798186,
      "arousal": 49.6031745,
      "dominance": 50.9637185,
      "text": "I'm with you, mostly. \n\nOnly thing I'm not sure about is named/default (and maybe also variadic) arguments. I kind of want those. I'm sick of builder patterns."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.55102,
      "arousal": 66.099773,
      "dominance": 81.519274,
      "text": "I agree about not adding too many new features on the.language surface level. However, when it comes to the type system, I'm all for making it more powerful to make it possible to express more invariants about your application logic. As long as it remains provably sound of course."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "Great point about the \"one more thing to remember\" list with other languages. I recently started a job using Scala, and the number of things I've had to add to my list to remember is crazy. So many features that make me go \"why do we even have this? Oh, looks like it's just for convenience.\" \n\nRust is really easy to fit into my brain. There are significantly fewer things to remember, and I find myself being caught by dumb edge-casey rules way less frequently. It's really easy for me to jump into a new Rust codebase and get going quickly, because there's way less weird stuff the author could be writing."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Funny thing that all agree that Rust should remain simple, but everyone has their own “one more feature” that is the exception. Of course if everyone gets their way we will have something worse than C++ :). If you really want simple Rust than you must accept that it means your favorite feature also does not get added."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.746032,
      "arousal": 61.723356,
      "dominance": 67.845805,
      "text": "The Rust maintainers have done and continue to do a good job of motivating new features. The [default field values](https://github.com/rust-lang/rust/issues/132162) mentioned should be landing in the near future, and the RFC does a good job explaining why this feature is desirable. So while I agree with the overall thrust of the article, I do think this is a good language feature that will resolve some ergonomic issues with the language.\n\nIn contrast, the [is operator] (https://github.com/rust-lang/rfcs/pull/3573) has had a bit of trouble sticking the landing for its motivation. It may eventually land, but the proposal is being carefully considered. I think this could be a better example of how Rust doesn't just adopt every convenience feature."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.7868482,
      "arousal": 56.5986396,
      "dominance": 62.31292520000001,
      "text": "\"Simple\" is the buzzword of choice for people who have nothing useful to say but still want to say something anyway. It's always so fascinating that \"simple\" is usually the subset of language features that already existed (or the language features the author is familiar with), and \"complex\" is the set of language features that don't yet exist (or the language features the author is unfamiliar with). \n\n> Here is an example of an awesome nightly feature that I would use all the time if it were stable... that I don't think should be added. It's default_field_values and it allows you to do this:\n\nWhy not? The alternative is nonsense like ``.. Default::default()`` (already special syntax with not much similarity to other languages, hardly simple) or god forbid the builder pattern which is not by any definition simple. Just doing ``= value`` is much clearer and much simpler."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.235828,
      "arousal": 57.2562355,
      "dominance": 64.90929700000001,
      "text": "Half the \"10 features rust does not have\" are deep design decisions which make Rust the language it is—exceptions, nulls and inheritance especially would turn Rust into a different language—and half are just syntactic sugar which, beyond some minor convenience and/or annoyance, make little difference. Their lack serves more as a signal to the kind of language Rust is more than shaping it into that language."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "> And I admit that there was probably a simpler design possible. But not one where you can just remove &str or String from the language and still do everything you could do before\n\nWhy is this? What's so special about String and &str that I couldn't define types myself that do exactly the same thing? I thought these were just stdlib types provided for convenience rather than fundamental parts of the language that we couldn't replicate ourselves?"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "In my opinion not having null is a feature instead 😂"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.42428811111111,
      "arousal": 60.12849577777778,
      "dominance": 60.10330066666667,
      "text": "i think that articles like this overfocus on syntax. I don't think it actually matters all that much whether rust uses `condition ? x : y` or `if condition { x } else { y }`: sure, the ternary operator might be slightly less clear, but when you see it, you can just take a few minutes to read what it does and be done with it.\n\nor, to take another one of your examples:\n\n```\ndef f(pos_only, /, standard, *, kw_only):\n    # Imagine being a python beginner encountering this syntax\n\tpass\n```\n\nsure, this looks \"weird\" if you're a beginner but you can literally like, look at the documentation, read what it does, and now you've learned this feature! (okay, maybe it's a bit harder if you don't know how keyword arguments work normally in python, but still) it isn't like, fundamentally very difficult to grasp – descriptors, for example, use no additional syntax at all, but they are more difficult to grasp, in my opinion – the complicated part isn't how the feature is expressed, it's what the feature actually _is_.\n\nthis argument syntax is also a product of Python's decision to make keyword arguments and position arguments interchangeable by default as opposed to being inherent to adding keyword arguments – for example in Dart it's the somewhat simpler syntax `void f(int pos_only, [int optional_pos], {int kw_only})`. \n\n> This is the type of complexity I'm okay with, and it's notable that nearly all of the complexity of rust is kind of like this. There is a little syntax sugar, like if let and let else and ?, but it's all very \"local\". Adding default arguments would be \"nonlocal\", because someone's choice to add default arguments to their library would affect all the users of their library. On the other hand, someone's choice to use let else is not visible outside of the function it's used in.\n\ni mean, it's not like it's _irrelevant_: if you click the little \"Source\" button in the documentation or if you're working in a team you're going to be reading their code. also, programming Rust without knowing what `?` does is just going to be painful."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.84807266666667,
      "arousal": 55.55555566666667,
      "dominance": 68.93424033333334,
      "text": "I definitely agree with keeping it simple. But it probably won't happen. Everyone wants something, and they will push and push, and languages have this 'swim or sink' thing usually, where there's a need to put out an impressive new feature list for every release, so as to make sure everyone feels it's still got momentum.\n\nI'm all for things that are very localized and make it easier to write safe code in a day to day sort of way, like try blocks and let chaining. And definitely things that are fully transparent to us as code writers but which will improve all our lives, like the borrow checker and compile speed. Feel free to go completely crazy on those fronts."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Near the top of my wishlist is to simply infer struct types and enum types based on the use.  Rust already does this with many other types, even complicated nested types. \n\nI don't have to write `let x: u32 = 10;` in order to pass it to a function that takes a u32.  I don't have to write let `x:(u8, String) = (...);` in order to pass it to a function that takes a tuple (u8, String).\n\nWouldn't it be nice to be able to omit long (esp nested) struct names, and just use a anonymous struct construction syntax that is simply inferred by how it is used, or give an error if it can't infer?"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "Not having function overloading etc was a bad idea.\n\nIt is used all over the place in the rust standard lib, just faked with macros."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I agree on the ethos of this, but is None value for an optional type not basically a more complex null?"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Variadic functions would be nice, though. Just don't use them if you don't want to."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Calling null a feature is borderline anti-humanity."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.09693875,
      "arousal": 63.973923,
      "dominance": 59.963151875,
      "text": "Rust kind of has operator overloading via trait implementation of e.g. std::ops::Add & friends though? I would not really claim rust to be a simple language by any means:\n- ownership enforcements can get nasty (just grep for Arc<Mutex in any large enough codebase, those are the folks that had enough and decided to go full ref counting so compiler would finally shut up)\n- distinct types for ref and mutable types, lifetime annotations, and use of generics everywhere make quite the recipe for verbose and overly abstract, making code harder to reason about\n- a lot of std types are awkward and require re-reading docs every now and then (e.g. what does RefCell do exactly again, oh right another ownership bypass with slightly different use case)\n- familiarity with standard traits is pretty much required (but derive macros often aid learning curve)\n- some traits are hard to work with and perhaps a tad over engineered (e.g. iterators)\n- let's not talk about macro_rules! and other proc macros, the developer experience there is very lacking, the syntax is ugly as well. That said it works, and it definitely has its uses, not as clean/simple as I'd have hoped though\n- the async story is well...\n- even the whole module system and namespacing is way over engineered, not surprised by the absurdly long compile times honestly \n\nAnd if they keep adding features at this pace, it's going to get C++ level of bloat in no time. This is what I usually brand as enterprise software, too many hands, too many ideas, not enough care for minimalism. Heard the saying \"the battles you choose not to fight are just as important as the ones you choose to\", same with features IMO."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.81065775,
      "arousal": 59.63718825,
      "dominance": 68.84920650000001,
      "text": "If I had a major issue if with Rust, it's the fact that Rust has to many features. To many way to achieve the same result, which the compiler take advantage to desugar new features into their old-school form. Often, there's language hole that you discover when you use specific feature (like if let && vs if let ||). Not everything is complete.\n\nTo many way to overabstract with types that end up not representing in a meaningfull way their physical memory. Which is good for an application developer perspective, but extremely bad for engineering perspective.\n\nTo many fragile behavior that are compiler dependent and undocumented (autovectorization vs sequential assembly, register vs simd register, stack overusage, elided bounds checking, ...).\n\nAn universal low level programming language can not be Rust, because of theses issues. It's currently the closest with Zig, but still far away. And it will not change in good direction since the more features we add, the more it growth."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What if there would be 2 version of Rusts:  \n1) Rust  \n2) Rust++"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is so shallow and distorted. Please do not write anymore."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It has implicit type conversions most certainly. '1.0', despite being an f64 literal, will coerce to an f32. '1' is an i32 literal, but will coerce to any signed or unsigned integer type.\n\nThere may be others, but there are these at least. It's minor, but your statement of there being *none* is definitely incorrect."
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.244142000000004,
      "arousal": 47.581254666666666,
      "dominance": 48.94179866666667,
      "text": "I would rather only have named arguments or non at all. Theres too many effing ways to do any one thing jn rust, just stop and write the damn code.\n\nfor example, theres close to zero practical reason why bool have all the functions that it has except for one liner column length measuring contest.\n\nI know because i was one of those elitist that uses and then for bool but there’s literally no point other than to confuse the reader. Just write the stupid function , give it a name and be done with it"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.825397,
      "arousal": 44.9546485,
      "dominance": 61.6780045,
      "text": "Keep internet open!\nWhy I have to enable VPN just to open this paper? Are you think you're better than me?\nOr, probably, my country thinks it's better than other....\n\nIt's really good question: WHO blocked the connection?\n\nP.S. I'm in Russia"
    },
    {
      "post_title": "Keep Rust simple!",
      "created_utc": 1749326916.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "I find funny that python is considered the example of \"large surface\" and yet it doesn't have basic features like sum types"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Tritium: the Legal IDE in Rust"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 65.4761905,
      "arousal": 53.401360499999996,
      "dominance": 62.74092975,
      "text": "$1,500 an hour and still using the software my grandma used to make bingo fliers!?\n\nHi r/rust! I'd like to submit for your consideration Tritium ([https://tritium.legal](https://tritium.legal/)).\n\nTritium aims to bring the power of the integrated development environment (IDE) to corporate lawyers in Rust.\n\nMy name is Drew Miller, and I'm lawyer admitted to the New York bar. I have spent the last 13 years in and out of corporate transactional practice, while building side projects in various languages using vanilla Vim. One day at work, I was asked to implement a legal technology product at my firm. Of course the only product available for editing and running programs in a locked-down environment was VS Code and its friends like Puppeteer from Microsoft. I was really blown away at all of the capabilities of go-to definition and out-of-the box syntax highlighting as well as the debugger integration.\n\nI made the switch to a full IDE for my side projects immediately.\n\nAnd it hit me: why don't we have this exact same tool in corporate law?\n\nCorporate lawyers spent hours upon hours fumbling between various applications and instances of Word and Adobe. There are sub-par differencing products that make \\`patch\\` look like the future. They do this while charging you ridiculous rates.\n\nI left my practice a few months later to build Tritium. Tritium aims to be the lawyer's VS Code: an all-in-one drafting cockpit that treats a deal's entire document suite as a single, searchable, AI-enhanced workspace while remaining fast, local, and secure.\n\nTritium is implemented in pure Rust.\n\nIt is cross-platform and I'm excited for the prospect of lawyers running Linux as their daily driver. It leverages a modified version of the super fast [egui.rs](http://egui.rs) immediate-mode GUI library.\n\nDownload a copy at [https://tritium.legal/download](https://tritium.legal/download) or try out a web-only WASM preview here: [https://tritium.legal/preview](https://tritium.legal/preview) Let me know your thoughts! Your criticisms are the most important. Thank you for the time."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.89417966666666,
      "arousal": 60.393046,
      "dominance": 69.72789133333333,
      "text": "Hello! I have acquaintances who could find this useful. My questions are:\n\n1) Is the desktop app fully private? i.e. no telemetry data, no api calls, just a rag to a local llm feeding off of my case files and contracts?\n\n2) Does your model readily generalize to foreign languages and different legal systems? I'm European, for instance.\n\nAnyway, cool idea to try making this! Kudos to you and your team for trying this idea out."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "PSA: from now on all other IDEs are declared illegal 🙃"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hey another rust loving New York lawyer!"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've always wondered if lawyers would benefit from LaTeX. You can use may of tools programmers have used for the past decades (git, diff, etc...) and is the choice of many scientists and mathematicians for their writings."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.7052155,
      "arousal": 58.503401499999995,
      "dominance": 48.412698500000005,
      "text": "Looks pretty sick, tbh. If someone made a legal language server that'd probably be awesome too. Maybe it'd be interesting to support [Catala](https://github.com/CatalaLang/catala), though I don't know if anyone actually uses it (outside of I guess France?)"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Precious tritium is the fuel that makes this project go. There's only 25 pounds of it on the whole planet. I'd like to thank Harry Osborn and Oscorp Industries for providing it."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "Hey I’m interested in contributing, any chance we could chat?"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Honestly looks great. I think you made a smart choice with a target audience at that price point though. I don't deal with enough related documents to bother with something like this. But I can absolutely see the value for folks who are processing, storing, and referencing hundreds of documents submitted and written by dozens of different entities. Well done."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it responsible to link an LLM to it when it lead to some disbarments already?"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.294785,
      "arousal": 46.258503,
      "dominance": 66.213152,
      "text": "I'm very sceptical about AI usage in the legal field."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Will lawyers understand the interface? Tabbed and side by side files seem like they'd confuse lawyers."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.19727900000001,
      "arousal": 51.1564628,
      "dominance": 60.498866,
      "text": "Super interesting. It seems it could be really useful to anyone who is working with multiple related documents - not just legal.\n\nI found a couple of issues on linux - kde (kubuntu 24.04)\n\n* There seems to be a bug where the modal windows (\"open document\", \"Open folder\") open behind the main window - so the app gets stuck with an unreachable modal window.\n\n* I can't seem to be able to resize the main window.\n\nMaybe I'm doing something wrong."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.401361,
      "arousal": 48.526077,
      "dominance": 54.875283,
      "text": "Very cool. Just want to point out there are at least a few users who will find this product unusable without a dark mode."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "For $1,500 I would use vim."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.315193,
      "arousal": 52.437642,
      "dominance": 63.265305999999995,
      "text": "Hmm I am not a lawyer but I think it would be a good feature to bookmark or highlight part of text so it's easily accessibly through a menu the different notes. (maybe this exists already?)"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Looks very cool. Sadly all my lawyer friends retired or left the profession so i dont have anyone to suggest this to."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is cool! Question. Is there software like git for law?"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.115646,
      "arousal": 69.727891,
      "dominance": 75.79365100000001,
      "text": "Love this idea, I think you should consider expanding your marketing to HR and other admin roles"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263033333334,
      "arousal": 50.18896433333333,
      "dominance": 64.51247133333334,
      "text": "Wow, awesome work. Incidentally I have been working on some kind of Word/docx processor myself for a completely unrelated project. I hadn’t gotten around to the editor/ui part yet, seeing this is very humbling — did you write it from scratch? Docx support is absolutely not great in Rust, so I ended up writing libraries for it myself, sans zip/xml.\n\nMaybe we can get in touch, I’d be interested in exchanging some ideas if you’re interested, mind if I contact you directly?"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "I am a lawyer who may find this useful, I will take a look! I have been struggling with the lack of cross-platform PDF support lately, in particular."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.208617,
      "arousal": 62.018141,
      "dominance": 73.356009,
      "text": "I linked it to a bro who will be working in justice in future. Looks really interesting.\n\nHow is most of this extra functionality implemented? Is it in the core or could it be added as a plugin to other programs like nvim/decode?"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Hey just a heads up, lawyers aren’t supposed to be cool ;)\n\nJust joking around, looks incredible. Good luck!"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.54972471428572,
      "arousal": 53.20699714285714,
      "dominance": 59.97732428571429,
      "text": "Hello, love to see an IDE implemented in Rust, since I’m also designing an IDE as a hobby. I’m curious about your reasoning for using egui instead of cloning VSCode’s Electron or creating a VSCode plugin. If you needed real-time responsiveness(for example, a notetaking app) or required extensive modifications (for example, full control over telemetry or features beyond plugin capabilities), that would make sense. Was that the case?\n\nFor my project, I decided to go fully native without a GUI library, because I’m building a VSCode-based note-taking IDE that requires real-time performance and overlays a native window on top of a WebView. You can see my [WIP experiment ](https://github.com/ik1ne/Notetaking/tree/625116b8b8a5194c49f7f09f13d685cd632faad0)of overlaying an HTML canvas over the Monaco editor panel; its poor performance was the deciding factor for me."
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 57.029478499999996,
      "dominance": 57.482993,
      "text": "I'm more impressed by the fact that this guy is a software developer and lawyer at the same time"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "you are on way to recreate FontoXML"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Maybe add an llm where it directly goes to the reference"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "People advertise their projects in the most annoying way possible"
    },
    {
      "post_title": "Tritium: the Legal IDE in Rust",
      "created_utc": 1750684070.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Isnt this post straight up advertising? What does this have to do with the rust programming subreddit?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 71.46636433333333,
      "arousal": 54.42176866666667,
      "dominance": 61.33786833333334,
      "text": "I landed my dream job making a Rust game engine. Now what?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "Hi! I'm the post author: feel free to ask me anything!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Who are these foresight spatial labs fellows?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 68.253968,
      "dominance": 75.623583,
      "text": "What a charming read. I'm feeling inspired to finally try out Bevy."
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.743764,
      "arousal": 54.705215499999994,
      "dominance": 63.038549,
      "text": "Glad that with my small donation I could contribute just a little to make your dream come true ☺️.\n\nThank you so much for all the hard work, especially the last release notes where a massive undertaking!\n\nWhat a fiery start at the new job 🔥"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.7188209,
      "arousal": 54.8412698,
      "dominance": 62.9138322,
      "text": "> But what would it take to convince teams to write the next Factorio, Terraria, Slay the Spire, Hollow Knight or Hades in Bevy? Time to find out!\n\nI think the price point is already a solid argument ;)\n\nBoth Unity & Unreal have license fees, and are willing to substantially change their licensing models, so that using them is somewhat building on shifting sands, financially, which is tough for indie games/start-ups.\n\nSo for price-sensitive users, there's only one major name remaining: Godot.\n\nAnd I hear there's quite a few performance issue with GDScript.\n\nFactorio's rise to success is for a large part due to its _extensive_ modding community, made possible by the commitment of its developers to empower modders. It requires good-to-excellent modding performance.\n\nAnd yet, being written in C++ and using Lua for scripting... there are regularly crashes provoked by mods. Always a pain, as you may imagine.\n\nFast & safe scripting could be a huge differentiator over Godot. And I believe there's already been efforts to build a safe Lua runtime for integration effort ([Piccolo](https://www.reddit.com/r/rust/comments/1ci1xiy/piccolo_a_stackless_lua_interpreter_written_in/), for example)."
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.04988700000001,
      "arousal": 56.575964,
      "dominance": 70.1247165,
      "text": "They are hiring? Who’s paying I thought bevy was free, open source and made primarily by a single author?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.9161,
      "arousal": 59.3424036,
      "dominance": 62.3582768,
      "text": "Thanks so much for all the work you do and congrats on landing the extremely well deserved job! \n\nI passively but regularly follow development and one can definitely see that, since you came on board full time, things seem to run pretty smoothly and are all well organised, with fewer loose ends etc. \nThe positive impact is definitely visible (not to say that it seemed very bad before.. but now it appears to be running pretty smoothly). \n\nI think the working groups are a significant success too."
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.1292515,
      "arousal": 60.37415,
      "dominance": 51.700680000000006,
      "text": "I'm very curious: How did you manage to come up with this phenomenal dependency injection pattern? Did you have prior experience with other ECS systems?\n\nI often start my programs from a \"what do I want the interface to look like\" perspective but with Bevy I dont think I could have even have come up with such an intuitive interface in the end, let alone the implementation thereof.\n\nUsing the Type system to enable things like `Query<T>` is something that never even would have occurred to me as an example.\n\nDid you start by designing the interface and then trying to implement that or did the implementation of the logic behind it come first?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.954648500000005,
      "arousal": 53.7414965,
      "dominance": 50.4535145,
      "text": "I'm currently making a 3d action roguelike (like risk of rain 2) in bevy and so far i've been loving the experience. \n\nAnyone involved in bevy is a hero to me!\n\n(also holyyyyy your github graph is insane)"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.43310675000001,
      "arousal": 57.5821995,
      "dominance": 64.10147375,
      "text": "Dope. u/alice_i_cecile  Congrats on the new hobby / full time job. I guess you're not making as much as you could, but I feel like if you can stick with it and keep getting more donors, things will look up eventually.\n\n  \nI actually started to learn Rust recently specifically to make a rogue-like game, and for potential career opportunities. I will eventually make a game using Godot with Rust functions. But at the moment I'm just going through the rust programming book since, you know, I kinda need to learn Rust before I can use Rust lol. \n\n  \nBut maybe bevy will have a good UI eventually. i haven't used it yet since, again, I'm learning the basics first. Maybe I'll try using Bevy first before Godot.\n\n  \nKeep it up!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 92.148526,
      "arousal": 74.6031745,
      "dominance": 74.34807275,
      "text": "I absolutely love your work and email the other contributors work to bevy, it is so very fun to use for me and made making games fun again. I hope it's equally as rewarding for you to work on it!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.32312925,
      "arousal": 66.0714285,
      "dominance": 58.27664375,
      "text": "Based on your experience as an open source project manager in Bevy, do you think that an open source small indie game could be an interesting project at some point in the future? Do you think it’d be feasible or a chaos to manage code + art + even game design contributions?\n\nSimilar to what Unity did a few years ago with their open projects initiative "
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.11451255,
      "arousal": 59.257369700000005,
      "dominance": 63.27664395000001,
      "text": "There is a lot that really resonates. \n\nWhen you work in a flexible way to optimize your efficiency, there is this self-consciousness that people will believe you just aren't working. And, while it is objectively absurd, there can be a feeling that you yourself aren't working very hard. When you have spent most of your life powering through work tasks at times when it is difficult for your brain to handle it, working only when your brain is ready doesn't *feel* like working hard. That feeling is just a feeling—it doesn't matter if you're more than 2x more productive. Consequently, if paradoxically, work-life balance can actually get *worse* with flexible work schedules. Your work time is much more efficient and much more tolerable, and so you end up doing more of it.\n\nAs long as you have enough, always trade money for quality of life. I made a math teacher's salary for 7 years, because I loved what I did. When I went into industry I quadrupled my salary. But there are trade-offs, and now I am in a position that makes a lot less than I could make elsewhere but that gives me things—security, mission, intellectual satisfaction—that I wasn't able to find elsewhere. Don't let other people make you feel bad for taking a (relatively) low paying job, as if your job isn't as important as theirs or you can't do valuable work or any other nonsense like that. Only *you* get to decide how to value the trade-offs you make in your career.\n\nAnd remember that we are all Haves, not Have Nots. That doesn't mean that we don't have challenges in life or that our struggles aren't legitimate. Rather, we—those of us who use our brains to make a living—have jobs many other people would give their right arm to have. We don't have to worry about black lung or silicosis or any number of other risks, and even our \"low paying\" jobs make us much more than most people will ever make. We don't count our blessings enough."
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.29478499999999,
      "arousal": 55.5555555,
      "dominance": 56.1791385,
      "text": "Inspiring read, thank you and I wish you the best down this road. I've never checked Bevy but I think it's finally the time I do."
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 55.668934,
      "arousal": 57.73809525,
      "dominance": 55.35714275,
      "text": "Game engine development is hard as hell so you really more than deserve it"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": " Congratulations!!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Good work!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Amazing!! Congratulations 🎉"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.0136054,
      "arousal": 56.6666664,
      "dominance": 67.4603176,
      "text": "Congrats, OP! I'm a front-end dev looking to dive into more low-level work, or at least something that is not releated to the first layer of Software of the web, web UI and building simple endpoints. But I'm unsure how to be valuable without direct experience on the field.\n\nI have 5 years of back-end experience with Ruby and Perl and Node, and in front-end, I mostly work with TypeScript. I also know CI, Docker, managing VPS, Linux, and have dabbled in Go and Rust projects.\n\nI’m confident I can learn quickly and be an asset to a company that does more than just web development, but finding someone willing to take a chance on me is tough.\n\nDo you have any advice?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great post and congratulations!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congratulations :)"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Congrats for the job and what's next?"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.979592,
      "arousal": 55.668934500000006,
      "dominance": 61.6213155,
      "text": "I'm tryna get like you my boy.\nCongrats man!"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "also your github activity makes me wanna kms"
    },
    {
      "post_title": "I landed my dream job making a Rust game engine. Now what?",
      "created_utc": 1725981012.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "can you get them to use bevy for csgo bc cs2 clearly sucks"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 97.959184,
      "arousal": 72.335601,
      "dominance": 75.056689,
      "text": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.5714286,
      "arousal": 61.9274376,
      "dominance": 60.9070296,
      "text": "In 2021, 87% of people who have used Rust in development work want to keep using it for 2022.\n\nTop 3 of 2021:\n- Rust: 87%\n- Clojure: 81% (-6%)\n- TypeScript: 72% (-15%)\n\nHere's the result from previous year:\n\nTop 3 of 2020:\n- Rust: 86%\n- TypeScript: 67% (-19%)\n- Python 66% (-20%)\n\n# Podium timeline\n\n- 2021: 86.98% (First place!)\n- 2020: 86.1% (First place!)\n- 2019: 83.5% (First place!)\n- 2018: 78.9% (First place!)\n- 2017: 73.1% (First place!)\n- 2016: 79.1% (First place!)\n- 2015: 73.8% (Third place, losing to Swift and C++)\n\nThis is the perfect opportunity to acknowledge and thank the huge collective effort made for the amazing language and community, Rust is my favorite language by far, and I wish to keep using it for a long time.\n\nThank you ;)"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I want to know who the 54 responses from North Korea are from."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Rust is now also 5th most wanted language by developers at 14.09% after Python 19.04%, Typescript 15.29%, JS 14.59%, Golang 14.54%."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does anyone know how long other languages' streaks at the top spot have been? I.e. is this an unprecedented popularity, or did C++ have this spot for 20 years, or...?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.5714285,
      "arousal": 73.0725625,
      "dominance": 63.435374,
      "text": "Sampling bias IMO: people who would hate rust are weeded out at the start from not even being able to put two feet up the learning curve, but don't complain because they blame themselves."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "I really want to like this language but as someone who is not very experienced in programming in general, I find Rust extremely hard to write. Does it get easier?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 84.693878,
      "dominance": 69.274376,
      "text": "Anyone else surprised to see C++ so far down the list?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "we only keep growing😎"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.455782,
      "arousal": 62.698413,
      "dominance": 74.376417,
      "text": "This a tremendous achievement for many levels for every Rust working group. Thank you for everyone's attention to ergonomics and error handling, as well as performance."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.50113350000001,
      "arousal": 71.82539650000001,
      "dominance": 63.208617000000004,
      "text": "Incredible! I'm also very happy for Julia being that high on the list, above Python."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "hooray! I wanted it!"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.43990933333333,
      "arousal": 68.745276,
      "dominance": 58.541194,
      "text": "I don't know what clojure is and at this point, I'm too scared to ask.\n\nI'll ask though, why is clojure so beloved, is it just that it's the good implementation of a lisp that people have been waiting for?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.571429,
      "arousal": 70.9183675,
      "dominance": 66.780045,
      "text": "This is my \"not at all surprised\" face  :-)\n\nCongrats (and a big thank you) to everyone involved in making this language a thing!"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does someone else get annoyed by the listing of \"HTML/CSS\" compared to programming languages? Markup languages to write documents and stylesheets, such as HTML, CSS, XML, Markdown, LateX should be listed separately. You don't write program logic with it."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.51322733333333,
      "arousal": 62.585034,
      "dominance": 68.06500366666667,
      "text": "The whole world should see and acknowledge Rust at this point. Some people like to create an illusion for themselves and don't like to believe that in at least a decade or so Rust will have replaced the clunky C/C++ to a considerable degree. Rust is rising and it won't stop rising. In Rust I believe and in Rust I trust."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.7233562,
      "arousal": 64.8979592,
      "dominance": 67.5510204,
      "text": "I think we need to stop celebrating this every time it happens. Yes, the fact that SO calls this metric \"loved\" is great for marketing, but I don't think this indicates anything other than survivorship bias. Folks are bouncing off the learning curve of our language, leading to the folks who actually push through the barrier being more likely to be the folks who enjoy using this language. It's fun to say we're the most \"loved\", but this indicates a serious problem with the language's onboarding that needs to be addressed -- not something that we should be celebrating"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "ok. 7 is next"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 97.959184,
      "arousal": 72.335601,
      "dominance": 75.056689,
      "text": "Incredible! Has any other programming language ever been as loved as Rust?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "Never thought I'd enjoy being so bad at something :)"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Genuine question: who participates in these surveys? I have never met or seen any developer who has ever participated, and I have worked with a lot of developers in the past six years."
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.356009,
      "arousal": 59.863946,
      "dominance": 64.965986,
      "text": "What are the employment rates tho? Is it getting higher?"
    },
    {
      "post_title": "Rust is the most loved language, SIX YEARS IN A ROW. StackOverflow Survey 2021 is out!",
      "created_utc": 1627931668.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.51927466666666,
      "arousal": 62.54724133333334,
      "dominance": 60.88435366666667,
      "text": "Most loved but hardly ever used and no robust libraries even after all this time. Cute fad."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What are the odds that Rust is going to have a real competitor?"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 71.7460318,
      "arousal": 55.555555600000005,
      "dominance": 59.682539600000005,
      "text": "By \"Real Competitor\" I mean: A language just like Rust with similar goals, but one that people actually prefer to Rust. So it would be a fast, low-level memory safe language with great tooling, great type system and other benefits that Rust offers. But it would need to be better than Rust to actually catch on\n\nThis language needs to offer real advantages over Rust to be considered. Of course since Rust has a huge ecosystem that is growing rapidly, it may take a long time. But I am talking on a timescale of 25+ years.\n\nCreating a new programming language to compete with Rust would be a massive undertaking and there would have to be some real reason to do it. Rust may be missing some features like higher-kinded types, named function arguments and such but to really catch on the language would need to offer some extremely important feature that Rust doesn't have, as well as offering all of Rust's benefits at the same time.\n\nIs there any such language currently in early development? Or perhaps, what would such a language have to look like?"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.22297833333333,
      "arousal": 64.66364333333333,
      "dominance": 67.72486766666667,
      "text": "Pretty high I'd say, we constantly learn and improve, so if Rust keeps being used there will be a point when it has accumulated so much baggage that a new language will be the simpler solution than retrofitting everything we learned onto Rust."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.99093,
      "arousal": 69.274376,
      "dominance": 78.117914,
      "text": "The competitors are languages with different goals.\n\nVery rarely do you see a language succeed if it has the same goals as an existing language. Maybe the big exception is C#, which is basically Java 2: Revenge of Java. Other languages generally succeed because they have new goals or niches.\n\nLikewise, one of the factors in Rust’s success is that it has different goals from C++."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.99886608333334,
      "arousal": 60.345805000000006,
      "dominance": 63.926682,
      "text": "I think what will make it hard for new languages is how much effort is going into the development of incumbent languages. They’re all rapidly evolving, gaining features and performance. \n\n- JS, getting new libraries like Temporal and perf of JS engines improves all the time\n- Python, every release improves performance, they’re getting an incredible cargo like dev experience made by astral.sh (fixes the biggest shortcoming)\n- Ruby got a JIT\n- Java, I actually cannot believe how much progress they’ve made since the days of Java 8 stagnation. \n- Go - still simple, still performant, every 6 monthly release brings some new goodies. But with generics now!\n- C#, I know a bit less about this, but I do know MS got serious about this since the release of Roslyn.\n\nNot getting into Swift and Kotlin, but they’re pretty good too. \n\nThe point is, it is very hard to replace any of these incumbents when they’ve all got great ecosystems, devs who know the language, jobs and importantly, they’re all actively getting better. The only languages with questionable governance are C and C++, which kinda tells you why they’re losing mind share to Zig and Rust. \n\nSo a new language has to create a new niche for itself, not simply serve an existing niche better. It needs to enable new capabilities for developers that adopt it. Mojo is trying to do that, and it’s anyone’s guess if their pitch (“like python, but performant because we take advantage of your hardware, including GPUs, to the fullest”) will resonate."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.05064255555556,
      "arousal": 58.07508177777778,
      "dominance": 60.98513466666667,
      "text": "You can bet they are being done\n\nSo there is only two options:\n\n- Rust follows C++ path where it slows downs and become complacent leaving room to that new lang to enter and share the pie\n\n- Rust keep pushing no matter what so the new shiny lang is not that shiny anymore in which case is more or less DoA (dead on arrival) since is clear it is not going to gain any important traction\n\nI am really happy of how Rust is doing as today, it is not perfect since i think the async and macros need to be reworked/improved a little and few other minor touches but in general i am not going anywhere\n\nNot to mention the \"gain\" factor, i am here and not keeping coding C++ because Rust is way superior so the jump to the pool is worth it. For example in my case Zig is not, prior to C23 Zig was nice and i looked at it but C23 became a reality and many of the nice features of Zig are not so big anymore, i like many QoL (quality of life) features that made my life easier but they dont justify at all the price to pay\n\nIf Rust plays their hand properly it is not going anywhere in the next 25-50 years"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.98577609090908,
      "arousal": 62.66749118181818,
      "dominance": 60.946196636363645,
      "text": ">A language just like Rust with similar goals, but one that people actually prefer to Rust. So it would be a fast, low-level memory safe language with great tooling, great type system and other benefits that Rust offers. But it would need to be better than Rust to actually catch on\n\nLanguages don't always win because they are better. Sometimes it is chance. The right people at the right time get interested in it and it gets adopded at big company that catapults its popularity. Or someone happens to use it to make a \"killer app\", framework, or library that becomes popular irrelevant to (or sometimes in spite of) the language it used, and brings the language with it. \n\nI would say that Rust's popularity was a slow and steady word-of-mouth type progression, and yeah primarily driven by being pretty well designed, with more modern PL theory ideas, but also feeling relatively familiar. \n\nA \"competitor\" to Rust could do the same but better, but it could also become popular by entirely different means and overtake Rust."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.387755,
      "arousal": 64.0816326,
      "dominance": 71.4512472,
      "text": "Take a look at Ada: https://ada-lang.io/. It has been around for a while but is experiencing a resurgence of interest with the increasing focus on software safety and security.\n\nAda is good for low-level systems programming. It is performant, has a strong type system, and has various features to enhance reliable programming (contracts, ranged scalar types, and a powerful module system).\n\nThe SPARK toolset operates on a subset of Ada and can statically verify the absence of arithmetic overflow, out-of-bounds access, contract and assertion failures, race conditions, and memory errors. Check it out!"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.71169414285716,
      "arousal": 60.15549085714286,
      "dominance": 60.349854,
      "text": "Zig is probably the \"new kid\" competitor to Rust. In a lot of ways, Rust + Zig are starting to be a new C vs. C++ dichotomy. That being said, this comparison is in some ways bad: Linux is only in C (not C++) \\*and\\* Rust. The reasons for Rust going into the kernel are all about memory safety, so Zig seems a very unlikely candidate for that. Moreover, Zig is not really that well used tbth compared to Rust, let alone compared to the big boys like JS or C/C++.\n\nIn general, the number of programming languages every made numbers in the thousands if not tens of thousands. The number of widely used programming languages, however, is probably less than a hundred in history, and probably less than 15 right now. Rust is probably on both of those lists right now. No other new language is on both.\n\nThat being said, there truly are no competitors in this space. Every lang makes every other lang better, and they bring in tons of new people. In rust's dev scene, for example, there are plenty of ex C or C++ people, but quite a lot of the compiler devs are actually people who may not have worked on compilers if not for Rust. That will be true for all new languages that succeed (I would argue that is so essential that it's basically a tautology -- a new language brings new fans to programming or at least to that programming niche)."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.22826933333333,
      "arousal": 62.69841266666666,
      "dominance": 64.436886,
      "text": "I'd guess that in the future, if/when lifetimes and borrowing become standards amongst more languages, I'd expect a Rust 'successor' to be focused on fixing the weird syntax and headaches that can arise from them. Id also really like automatic upcasting for integers/floats, f64 replacing f32 as the default, and function overloading. \n\nHowever, most of these are nitpicks at most, and none are strong enough to drive me away from Rust. I personally expect Rust to stick around for a pretty long time, and that any \"successor\" languages would be more about cleaning up weird syntax rather than completely rethinking the base concepts (think Kotlin to Java, rather than Rust to C++)."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.1473924,
      "arousal": 59.68253980000001,
      "dominance": 62.585033800000005,
      "text": "Almost certain. Programming languages are an active research area and people are constantly coming up with new things. At the same time, existing widely-adopted languages can only change so-much because they have an existing community, large codebases, etc... At some point, the PL people will have come up with enough new desirable stuff that cannot comfortably fit in rust that some new language implementing all the cool new things will start taking off.\n\nThis is how rust came about. C++ tried to solve memory safety issues with things like smart pointers. And they work, but they had to play nice with existing C++ codebases which limited what you could do. Rust was unburdened by existing codebases, users or a specification 100 miles long and so it could do things like have a borrow checker cheaply."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.7074832,
      "arousal": 55.691610000000004,
      "dominance": 65.7142856,
      "text": "At timescale of 25+ years I hope that some kind of marriage between Rust and [WUFFS](https://github.com/google/wuffs) should be possible.\n\nIt can replace Rust if it would be good enough.\n\nWhy couldn't Rust just simply adopt something like that?\n\nBecause, once again, to benefit from something like that fully, we need to rewrite the standard library (so there would be panicking and non-panicking access to `Vec`, e.g.)\n\n[Dependent typing](https://en.wikipedia.org/wiki/Dependent_type) not even remotely close to production, but, ironically enough, Rust opens the door to it: Rust's typesystem include full-blown dependent-type subsystem, complete with theorem provers and everything… but just for lifetimes.\n\nTo go further we need the same for other type parameters… and because the need is not as acute (runtime checks work good enough now) I don't expect anything in next few years… but 25 years down the road? Absolutely."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 60.997732,
      "dominance": 52.60771,
      "text": "Over the long term I'd say it's almost certain (99.99%) chance that this will happen.\n\nHowever, to me it is looking increasingly like Rust might be the dominant language of it's niche for the next 10-20 years (much like C++ was before it).\n\nIt's taken 15 years of development to get Rust to where it is. A competitor would likely take just as long to mature and there is none in sight currently (I suspect zig will continue to grow but will never surpass Rust in popularity)."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 61.111111,
      "dominance": 71.315193,
      "text": "I think the closest one could see would be Swift,  if Apple actually separates the language from Xcode."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.82993200000001,
      "arousal": 60.861678,
      "dominance": 67.39229040000001,
      "text": "I think Mojo will catch on, but it’s unclear how long that will take. Python compatibility and similar syntax will make it very easy for developers to try it out. They also have second mover advantage over rust and can learn from Rusts mistakes. This video is pretty insightful to see how ownership compares to rust: https://youtu.be/9ag0fPMmYPQ?si=17MOM0l8NTcbu4yD"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.792139,
      "arousal": 53.514739,
      "dominance": 60.33635666666667,
      "text": "I wouldn't rule out that some language that is more compatible with C++ but offers Rust style memory safety could become a competitor in the future. This could be some kind of C++ extention or a highly compatible new language. Sean Baxter's \"Safe C++\" could fall in this category, the other \"C++ successors\" not so much.\n\nWhat happens in the long run is very unpredictable but there could very easily be some kind of new technology (e.g. a memory management superior to ownership and borrowing or something entirely new not relevant yet.) that gives a competitor an upper edge over Rust."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.379441,
      "arousal": 60.69538933333333,
      "dominance": 62.244898,
      "text": "> Is there any such language currently in early development?\n\nI don't think it intends to be a direct competitor at all, but Mojo seems pretty interesting. I'm waiting for it to become more stable before taking time to learn it though."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.0566892,
      "arousal": 59.0400604,
      "dominance": 62.947845799999996,
      "text": "We started replacing Python code with Rust and we went back to Python for project efficiency sake. Testing, refactoring, PoC is wayyy more expensive in Rust, and there are not so much experienced engineers available. Same with Python, scripting is easy, coding really reusable module is not so easy actually. \n\nSo we have a bunch of key module with some rust code for speed, binded in Python so that they can be reused easily by less experienced people (scripts are not reused from project to project, key modules and key tools are).\n\nBut I tend to use a lot of rust tool that are amazing: just, ruff, uv, …\nBut having the best language is not the good metrics.\nYou want to have a language that both experienced and external dev can use easily, sometime in unreusable code but that is not important. What is important is that the feature are developped and made available to people needing them.\n\nAnd in this Python is king."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.60738571428571,
      "arousal": 54.324586857142855,
      "dominance": 62.163913,
      "text": "Have you heard about [Hylo](https://www.hylo-lang.org/) and its _Mutable Value Semantics_?\n\nMutable Value Semantics is an alternative to Borrow Checking, with slightly different trade-offs:\n\n - Arguably more ergonomic and terser.\n - But in exchange, cannot express some relations that Rust can.\n\nHylo requires _more_ unsafe than Rust, whenever you want to push the performance enveloppe, so it's arguably a slightly higher-level language in a sense.\n\nJust like Rust, though, it offers a clean separation between safe & unsafe code, so as long as you don't care how the sausage is made, you can just use a 3rd-party hash-map implementation (for example) from your own safe code.\n\nIt's unclear to me what niche Hylo would eventually occupy:\n\n - On the one hand, being more ergonomic than Rust, it has the chops to compete with C#/Go/Java when performance is required, without overbearing complexity.\n - On the other hand, its unsafe subset means it could theoretically be used for systems programming and eat into Rust's lunch.\n\nAnd of course, network effects being network effects, it could also just fizzle out or stay niche forever...\n\n... but at the very least I think that Mutable Value Semantics have demonstrated that there are real alternatives to Borrow Checking, and thus I expect that with time further alternatives, with different trade-offs, will emerge."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.2358275,
      "arousal": 66.89342400000001,
      "dominance": 70.2947845,
      "text": "Zig wins the award for best idea. So many people try to make a better C++, forgetting that C++ itself is a much maligned attempt at improving C.\n\nSomeone finally figured out, instead of improving on C++, how about improving on C?\n\nI think Rust will go the way of Scala. Yeah it's better, but languages live and die by n00bs. Rust is not a language for n00bs.\n\n\\-Sincerely,\n\n\\- a C++ programmer."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.14966,
      "arousal": 73.696145,
      "dominance": 42.063492,
      "text": "There's a number of ideas like Claim/Capture that will get you a number of steps closer to solving the borrow checker pain. That might kill any competition."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "High but it takes a lot of time for a competitor to mature, just like Rust has been slowly maturing. Rust has opened doors into fields like Linux and embedded programming that competitors likely won't be able to open without a substantial improvement over Rust."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "The C++ crowd is bound to make a stab at it. Listening to Bjarne makes me think that at least he is on the wrong path, thinking that abstractions on top of the language will make it safe. There are two paths for C++ to compete: Break compatibility or build a language on top of it (much like Herb Sutter does with cppfront.)"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.393990875,
      "arousal": 52.69274375,
      "dominance": 57.68140575,
      "text": "25+ years? I'd be shocked if it does not have a real competitor. In this era of LLVM it is easier to create front ends for new languages that get modern optimization passes, and as more people get interested in memory safety it only takes one person/team finding a way to make lifetimes or some similar idiom simpler to work with, and perhaps with fewer correct but invalid programs, to have a shot at Rust's place in the ecosystem.\n\nRust is a fantastic language, but being the first modern exploration of this design space it had to do a certain amount of exploration blind (I'm sure there are CS papers on a lot of the ideas, but a paper does not always mean the same thing as something working programmers can tolerate).\n\nHonestly if Rust is the endpoint of exploring this design space I'll be sort of bummed out. Is it possible we can't do better? Maybe, but there has not been enough ground up exploration of different ideas to know if this is any kind of real maxima or just a local one."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "languages compete now?"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Who would have predicted C++ would have a 'real competitor'?\n\n  \nI guess something with the same benefits as Rust but simpler would be my start. Or something even more airtight. Or with faster compile-times. Or better C interop."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.8480726,
      "arousal": 52.70975060000001,
      "dominance": 61.337868400000005,
      "text": "I think there could be a lot of answers to \"what would such a language look like,\" as there are a lot of competing demands in engineering.  I believe there is still a huge amount of room for improvement in the C family of languages that could provide for good alternatives to Rust in the future. What a lot of engineers want is not a C++ alternative but a C alternative, effectively a better C, and what that means for many people is different, so there is a lot of room in that space for solutions. Personally I want C with whole program optimization and addition of an `[[attribute]]` based theorem prover implementing things like refinement types, so that compilation can be fast and theorem proving can happen more slowly and incrementally without impacting the compilation (translation) too deeply. Fast compiles, slow verifications. With the theorem prover you can add whatever extra semantics to the language you personally want to make use of, eg if you want ownership types, add the appropriate attributes and the theorem prover will do its thing. I'd like that language to support parametric polymorphism for code generation, and namespaces and other features that C++ has, because I personally don't think the policy based design of C++ is a bad thing, mostly I want to avoid exceptions. Slow and fast are relative, and some people consider that side of C++ to kill compile times too much, but for me I expect rather slow automatic proof finding so even with monomorphization compiles would be fast as compared to verification. Some folks might want a C family language without any of those C++ features I want, but instead having a focus on rank-polymorphism and related semantics. Sky is the limit."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.172336,
      "arousal": 46.712018,
      "dominance": 59.750567,
      "text": "I’d say that Zig is already a competitor with a growing market share."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.11111125,
      "arousal": 60.03401375,
      "dominance": 62.21655325,
      "text": "Who cares honestly. It’s easy enough to learn a new language and popular libraries will be ported across and implemented to have functionally the same syntax like a lot of popular libraries and such do today. we shouldn’t be afraid of change. Though for mid term stability (studying, getting first job, starting a business) rust is unlikely to go anywhere. In 15 years time things might change but there will still be a significant period of overlap and relevancy. Mojo is an interesting bet that that is already pulling features from other languages, like their implementation of the borrow checker."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "FORTAN is still widely used in some fields like meteorology. It was developed in the 1950s, about 70 years ago.\n\nI think Rust will be with us for a very long time."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 64.512472,
      "dominance": 67.23356,
      "text": "I am trying!\n\nI think \\[dependent types\\](https://en.wikipedia.org/wiki/Dependent\\_type) have huge potential and am trying to integrate them into a Rust-like language in as ergonomic a way as possible. The incentive to migrate over is the stronger things you can prove about your code, something you will never be able to do with Rust.\n\n[https://charlielidbury.com/ochre](https://charlielidbury.com/ochre)"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.5124715,
      "arousal": 68.707483,
      "dominance": 60.430839000000006,
      "text": "I think there's Zig and the actual niche is for very-very well-typed, predictable language with fast compilation and a GC or something to make it easier for whatever people use Python for. It could be Gleam but it's probably not there yet"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.17363142857143,
      "arousal": 58.56818928571429,
      "dominance": 57.46679628571429,
      "text": "Module support in c++23, and memory saftey constructs added to c++ next are going to keep c++ relevant for a long time. \n\n\nAnd then theres zig, which is great and isn't even version 1 yet.\n\nThe only thing rust has going for it that makes it popular is menory safery and cargo. \n\nIf zig adds memory safety compiler checks and with zig build and its comp time and support for c headers, it could dwarf rust in adoption pretty quickly.\n\nZig already also is a build engine for c/c++.   You can xcompile c++ with zig, it ships with all the root fs's it needs for cross compiling out of the box.\n\nIts poised to be pretty amazing."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.582766,
      "arousal": 53.741497,
      "dominance": 71.882086,
      "text": "I think rust's main issues are some poor but trivial syntax choices (i just think making too many things implicit hurts readability, i prefer an option for explicit syntax) and the docs are really verbose while the reference is incredibly technical"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "25 out of 452"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 91.723356,
      "arousal": 63.1519275,
      "dominance": 64.739229,
      "text": "Isn't zig pretty much that? Systems programming language, very low level, with safety features built-in as well as no-exception friendly error reporting"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.5600908,
      "arousal": 57.98185960000001,
      "dominance": 63.424036,
      "text": "Eventually. Sure. But change in these levels takes a while.\n\nPeople are still using AS400s and Mainframes. People are obviously still using Java and C++. It will take a while before Rust reaches the levels of adoption.\n\nHardware and Operating systems will continue to improve, so it's a matter of time. In the long run it seems plausible based on the empirical evidence that there would be competition.\n\nRight now the bigger question is what it would take for Rust to get more adoption across the board."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust itself was built as a competitor. There's no reason to expect that Rust will have no competition in the future."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 69.727891,
      "dominance": 81.85941,
      "text": "100%, no language ever created will be what everyone wants, leading some brave souls creating similar, but different, languages, leading to competition."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.677437625,
      "arousal": 64.3849205,
      "dominance": 65.929705125,
      "text": "> ... but to really catch on the language would need to offer some extremely important feature that Rust doesn't have ... . \n\nThat missing, killer feature is a toy language, a framework of some sort, much like PHP is one very strong C framework (sincerelly, that's what it looks like), enabling C to run - anywhere (behind PHP), just by calling the script. That is, people need a general-purpose language of such kind built with Rust, that can do everything Python and PHP combined can do, without compiling anything .. with elegant syntax. Rust needs its own derrivate .. something like Raku. Or even better, already well and good standing. Deno. I don't know whether Deno fits in that category and what can you do with, but if it does, those who govern the direction of Rust dev. should embrace that one and push it all the way .."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Like a good REPL?"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well, have a look at Carbon, a project backed by Google.  https://github.com/carbon-language/carbon-lang.  It’s a difficult thing to do."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At this point, the only way a new programming language would displace C++ and Rust is if it was designed around safety like Rust, kept the performance of both languages, but was multi-paradigm like C++.\n\nBasically Rust that allows both functional programming and OOP with full-featured classes instead of just structs."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.42517,
      "arousal": 57.596372,
      "dominance": 66.978458,
      "text": "In software engineering, we cannot be certain of anything. Someone can start something when they think can make a language better than Rust or may be not. And in my opinion, there won't be another language. The reason is people don't trust new languages that easily when already existing languages are doing fine. Believe me a lot blood sweat and tears have went into making of Rust. C, C++ didn't had that. They were just simple single one person creations, from a little to no modifications were done up until early 2000s. In case of Rust a whole community of developers are refining it on a daily basis and nobody using rust expects the language development to be complete anytime soon."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.65306100000001,
      "arousal": 67.20521525000001,
      "dominance": 68.42403625,
      "text": "In the current state, rust is unlikely to have a competitor as creating a similar language with one or two basic features isn’t a great idea. But eventually yes, rust will have a competitor.\nLike when C was new, every one was happy as it solved issues with other languages and later people started complaining about C and wants a better experience (especially memory safety), therefore rust was born.\nI believe in the next ~40 years, we might get a real competitor to rust as by then we would have some more requirements out of scope for rust."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Try Koka, it is a functional programming language with algebraic effects that has the performance of C++. If you need lower level access,  you can write C interop code since it compiles to C.\n\nI would honestly use it more if it had a more mature standard library."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.5374152,
      "arousal": 55.034013800000004,
      "dominance": 51.3151926,
      "text": "Not sure this take makes sense, but my thinking is that the main „feature“ of rust over C is additional compile time checks that make it so certain bugs you can write in C don’t even compile. Now this happens to work by encoding a lot of information into the type system. But if you had arbitrary compile-time execution like Jai, perhaps you could build the same compile-time checks without encoding so much info into the type system. Also the compile time checks could perhaps be even more comprehensive, and domain specific."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.394558,
      "arousal": 45.9183675,
      "dominance": 56.2358275,
      "text": "Whatever will happen to Rust itself (even if it becomes awful due to decades of accumulated cruft for example and a new player will enter the market to phase it out), we will, on the general, have better programming languages."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.68707466666667,
      "arousal": 52.38095233333333,
      "dominance": 66.59108066666666,
      "text": "The odds are astronomical. Rust is a programming **language**. That means the technical aspect is secondary to the human communication aspect.\n\nThere are numerous reasons why people choose a particular form of communication, and not all are related to the qualities of the language itself.\n\nI foresee that a fork of Rust could easily take over. Why? Because there are some deep issues with Rust's community due to its politicization. That is off-putting to many developers who would be keen to use it based on its technical merit otherwise. In fact, a fork already exists."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.98185939999999,
      "arousal": 57.5510202,
      "dominance": 64.76190460000001,
      "text": "I’d say the features that a language would need to outcompete rust at its own game would be:\n\n- Non-tree shaped lifetime equivalent. It’ll be nice to write a linked list safely and easily again.\n- Cooler type systems. Dependent and linear types come to mind but there’s probably more.\n- Effect system baked in, unsafe {} but for everything. \n- Ecosystem stuff like fixing the orphan rule, proper reflection without macros, making a way of writing proc macros without using a third party rust parser, etc. etc.\n\nBasically, take all of the cool ideas that rust puts in little boxes (unsafe, lifetimes, how types go together), and get them out of the boxes.\n\nAnd do all that, while still being at least as amazing as rust is. I think it’s going to be a tall order :D\n\nedit: also, most of these might be possible to implement in rust as is. So, even harder for this theoretical new language."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Rust has no competitors from a technical point of view among existing languages. The balance of compromises Rust makes best reflects the current understanding of good software. However, in the future (5-10 years) there may be a new concept of programming, for example, effective integration of AI hints into the language, and accordingly a new language based on this approach."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.618292,
      "arousal": 65.457294,
      "dominance": 68.89644733333334,
      "text": "> one that people actually prefer to Rust\n\nGiven that Rust has been the \"most loved\" language in StackOverflow's annual survey every year since 2016, I find this to be a very high bar indeed."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very hight, a language with the same goals but better syntax (better or no macros), simpler use of lifetimes, wider std to remove a shit load of dependencies stronger type system (like new type or subtypes in ada) , ,..."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[https://www.modular.com/mojo](https://www.modular.com/mojo) Mojo is rising in popularity, at least in the AI community. I'm personally at the station waiting for the train to be a little bit more stable."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "odds are 100%\n\nat latest with arrival of quantum computers"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What you're asking is like asking if a better JavaScript could exist, but it needs to be pushed to PROD in 10 days.\n\nRust already has competitors like Zig, which IMO did the right thing by making C development viable.\n\nBut they're obviously not following the same path that Rust follows."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I feel like the rust people themselves will make another one just to shed baggage."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do you mean Zig?"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "15 TIMES THE STRING TYPE;\nFULLY GENERATED DISTANT MEMORY SYSTEMS;\n4 TIMES THE SYNTAX;\n\nNOW INTRODUCING DUST: \"IT JUST WORKS'"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.80385475,
      "arousal": 59.6088435,
      "dominance": 56.802721250000005,
      "text": "Sadly, in the marketplace the “real competitor” Rust seems to have lost to Go…. (Based on what I’ve seen about who uses which for what/what market space for which type of programming the language gets used for). \n\nIt’s Haskell all over again. Idealogical perfection/optimizing for correctness/etc turns out not to be what wins.\n\nI’m not saying it fits your requirements of course."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not exactly low-level. But mojo is sorta trying to do so"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I think a lot of people would say that Zig is that language. I wouldn’t, but i think many would."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the real competitors are C and C++ which have tons of lines of code already written and that at the end have done their job for decades ."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.900227,
      "arousal": 64.4557825,
      "dominance": 71.14512450000001,
      "text": "Give it a decade. People never fail to over-complicate good programming languages to the point that they collapse under their own weight."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.31980090322581,
      "arousal": 64.66973883870968,
      "dominance": 63.29090783870968,
      "text": "I had hoped Mojo would be this language.  Unfortunately, their adoption of the [Modular: MAX & Mojo Community License](https://www.modular.com/legal/max-mojo-license) I think will kill its chances of being a better rust (or a better python).  There will be many businesses that simply will not allow it to be used, even experimentally or as a proof-of-concept, due to the terms of the license even if the work being done isn't a \"competitive activity\".\n\nIt has all the ingredients to be a rust replacer.\n\nIt has something similar to lifetimes (now called origins I believe).  It used to be similar to lifetimes, except it tracks provenance, rather than the scope of how long a lifetime is valid.  They sort of turned lifetimes on their head and made their origins last as long as the last referent was still using it.  Rather than \"is this reference still alive so others can use it?\", mojo says \"this reference is still alive until no one else is using it\".  That change greatly simplifies things and makes it easier for newbies to understand.\n\nAlthough it doesn't have Affine (or Linear) types, you are not forced to implement Move types either.  Like C++, you can choose which types are Copy-able and which are Move-able.  Their own implementation of an ownership system handles these use cases.  By not forcing \\_everything\\_ to be moveable like rust, it puts less pressure on memory.  This also means it doesn't need \\`Pin\\` like rust does for async.  Speaking of which, they are designing async and coroutines/generators from the get-go.\n\nInstead of being compiled with llvm, it is compiled with MLIR, which is \\_also\\_ the brainchild of Chris Lattner (as is the mojo language itself).  MLIR is designed to be a compiler toolkit and makes it easier for hardware vendors to write even niche or obscure parts to compile to.  Supposedly, compile times are an important aspect for MLIR so it's supposed to generate artifacts faster.\n\nThanks to MLIR, SIMD and even GPUs are first class citizens for mojo.  Unlike rust which needs a crate for SIMD, it's built into mojo.  And you don't need CUDA or ROCm either.  It even has the concept of memory spaces to shuttle memory across CPU to GPU boundaries.\n\nBut I think \\_the\\_ killer feature that could have made it more popular than rust, is being a superset of python.  By piggy backing off a super popular and easy language like python, one can gradually learn the mojo superset.  I think this is the #1 limitation of rust.  Sure, probably the majority of people using python will never even try to learn the non-dynamic highly typed and memory aware aspects of mojo, but at least the option is there.  It remains to be seen if mojo actually will be able to become a 100% superset of python, but that is their goal.\n\nI have tried at 2 different workplaces to get others interested in rust.  I even offered some training, but there was very little interest by the other engineers to learn rust.  Most of them admired it from afar, but they simply have no desire or time to learn another language.  I got more interest when I offered python training, perhaps due to its virtual necessity for AI/DL uses.  Rust's reputation for being difficult and python's for being easy to learn was also a factor, I think.\n\nI stopped keeping track of mojo around September or so once they finalized their community license, so some of my information may be out of date.  I can understand why Modular made the license they did, but I think it will not enable widespread experimentation at work.  People might use it for hobbies, but due to their non-open-source license and anti-competitive activity clause (which is basically anything related to creating an AI Infra like Modular itself), many companies will flat out bar it from even being installed without approval."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Something that leverages LLVM MLIR is bound to challenge Rust, and every other systems-level language in terms of performance."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "For the problem spaces I'm interested in, Zig is already a very strong contender. But I haven't seriously looked into learning Zig in order to update any of my projects yet."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nobody gonna compete with fem boys"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.35374150000001,
      "arousal": 59.920635000000004,
      "dominance": 64.9659865,
      "text": "I think Rust will continue to fill in that niche of guaranteed memory safety if done the Rust way. It’s a free pass on security and delivers modern package manager C and C++ desperately needs but can’t due to technical restraints."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.14966,
      "arousal": 75.623583,
      "dominance": 82.539683,
      "text": "I think Carbon might have the potential because of its focus around C++ interop. It's got the power of Google behind it, too."
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.117914,
      "arousal": 55.102041,
      "dominance": 53.571428499999996,
      "text": "I feel like nowadays “competitors” don’t come along unless they do something new (or just not seen in a while). So i don’t forsee rust getting any really big competitors until borrow checkers get more popular and a large group of users get sick of it. But if I’m wrong I have my hopes for r/zig, once it gets a good package manager I see great things in its future"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zig??? idk rust is fairly new language"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.6031745,
      "arousal": 68.537415,
      "dominance": 70.2380955,
      "text": "in all honesty, from what I can see, is Mojo, allegedly has the power and performance of C with the memory management of Rust. \n\n[https://www.modular.com/mojo](https://www.modular.com/mojo)"
    },
    {
      "post_title": "What are the odds that Rust is going to have a real competitor?",
      "created_utc": 1740251759.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Maybe... Google's Carbon Lang."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I built the same software 3 times, then Rust showed me a better way"
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.88505146153847,
      "arousal": 59.715681153846155,
      "dominance": 64.93110046153846,
      "text": "The takeaway I'd get from this article is that the author just didn't know how bad OOP is for performance, especially when the OOP they're doing is a straight up textbook example of how [\"Clean\" Code [has] Horrible Performance](https://youtu.be/tD5NrevFtbU). I saw tons of people criticize the video I just linked for being unrealistic and showing a code example too small or simplistic to be of any relevance, and then I read articles like this where the developer codes with exactly the bad practices that are called out in mind. That C++ code looks like it was made by a Java developer. My first immediate reaction was \"Jesus Christ\" because this pointer fest is exactly the kind of stuff I'd be happy to _not_ do in C++ precisely because I would at least have the possibility of laying things out in memory next to each other and removing pointer indirections. In Java I just can't do that because anything more complicated than primitives (including generic types) has to be an object and therefore have at least one pointer indirection.\n\nI'm also quite confused by the choice of making the lookup method return a clone of the `Object`. I don't see why it can't be a reference, that seems like cloning unnecessarily. If I only refer to the code that's been shown in the article, it would basically just be a wrapper for `HashMap::get`:\n\n    // Gets the object from the cache or reads it from the file.\n    pub fn lookup(&self, object_number: u32) -> Option<&Object> {\n        self.lookup_table.get(&object_number)\n    }\n\nand at that point if lifetimes become an issue, looking up an object twice would certainly be cheaper than cloning an object that potentially points to a string or a vec that also has to be cloned (unless the hash function is extremely slow I guess).\nAnyways, point is, I'm kinda shocked to read an article where a C++ developer, out of all kinds of developers, is surprised that having less heap allocations is better for performance.\n\nIn that optic, it's indeed good that Rust showed a better way, but I'm quite sure it can be even better than that. I suggest watching [this conference talk from the creator of Zig on practical data oriented design](https://youtu.be/IroPQ150F6c), where he shows various strategies you can apply on your program to make it drastically faster - especially when it pertains to reducing memory bandwidth.\n\n^(Complete side note that doesn't have much to do with the article, but reading \"Rust’s enums were shiny and new to me\" makes me feel kinda weird knowing [C++ could've had it but Bjarne Stroustrup refused because he thought they were bad...](https://youtu.be/wo84LFzx5nI))"
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.553288,
      "arousal": 54.920634799999995,
      "dominance": 61.768707600000006,
      "text": "This is the dream, the implementation the languages nudges you toward is the fastest!\n\nCertainly when you're working with idiomatic code, the compiler optimizations can do their best.\n\nAlso this is a good example of why non-local memory access is beaten by highly local memory access, even if you end up copying data too much.  Moderns CPUs and caches do not like to wait for ram.  And a linked list, or linked-tree, is possibly one of the worst sins you can do to it, sadly."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.53911575000001,
      "arousal": 59.9064625,
      "dominance": 60.21825425,
      "text": "> Also, is something like Rust’s enums available in your favorite programming language?\n\nWe'll just ignore the \"favorite\" bit here on /r/Rust and pretend the question asks about _other_ languages, at which point I think a lot of people will chime in with the ML family, including Haskell, but I wanna point out that with a typechecker, Python has \"something like\" it.\n\nAs in, if you have some (data)classes `Foo` and `Bar` and some `baz: Foo | Bar`, then you can do structural pattern matching like\n\n    match baz:\n        case Foo(x, y, 1): …\n        case Bar(a, _): …\n\nand the typechecker will nag at you because there are unhandled cases (though it is kinda brittle and might accept a non-member type as the equivalent of `case default: …`). I don't know how common actually writing code like that in Python is, though.\n\nAnd apparently Java is getting ADTs as well.\n\nI suspect that ADTs are going through a transition similar to the one from \"FP nonsense\" to \"normal\" that lambdas were going through a decade or two ago."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": ">In fact, I’d bet that with all the same optimizations applied, the C++ code would be faster.\n\nUnlikely, or at least not by any significant margin. Rust and C++ both get compiled to machine code, often by the same backend (LLVM) and will both end up in the same ideal assembly if fully optimized."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.9795915,
      "arousal": 59.552154,
      "dominance": 58.446712000000005,
      "text": "\"How would you represent this file format in memory, knowing that most PDF documents are too large to fit into memory,\"\n\nWTF did anyone ever see a PDF file that does not fit into memory? Google tells me that even two decades ago a typical computer had 1GB of RAM."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.65759650000001,
      "arousal": 65.079365,
      "dominance": 72.44897950000001,
      "text": "As a non-programmer by trade, I love that Rust fairly quickly leads me to the problems I'm going to face. Then solving them means it's generally solved in a solution that will work virtually forever."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You should use new-types for things like object numbers. This increases type safety and makes the code easier to understand."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "1. Are large nested objects rare in PDFs? Because `Array(Vec<Object>)` means you're loading a whole object including all its children at the same time. Which seems to contradictory to the goal of processing data larger than RAM.\n2. I assume the \"cache\" isn't just a cache, but holds the authoritative version of all modified objects? Or did you add another `HashMap` to hold those?\n3. `lookup` takes an `&self`, but needs to update the cache. How do you handle that? Interior mutability?\n4. I wouldn't copy objects out of the cache in `lookup`. I'd return a reference, which the caller can choose to clone. Or does that conflict with the locking you use around the interior mutability?\n5. Are you sure copying is cheaper than returning an `Rc<Object>` from `lookup`?"
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">Circular references weren’t actually a problem for reasons that are outside the scope of this article.\n\n\nI really don't enjoy articles that cop out like this without even a brief explanation."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I bet, your code would even faster if you replace your default allocator by mimalloc which is trivial thing in Rust."
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.151927666666666,
      "arousal": 50.869236666666666,
      "dominance": 58.163265333333335,
      "text": "Your code could be way faster, if you got rid of the clones, and stopped using hash maps.\n\n\nIf I understood this correctly, the keys into the hashmaps are line numbers, so they always start at 0 and just linearly go up. There's no good reason to use a hash map in a situation like that, because the lookups may be \"constant time\", but the actual hashing is a very large constant.\n\n\nJust use arrays. Bucket the arrays if you actually run into problems with a single array being too large for the cache. Or, if you really have to use a hash map, use a hashing function that performs better on integers. The default one is versatile, but slow. "
    },
    {
      "post_title": "I built the same software 3 times, then Rust showed me a better way",
      "created_utc": 1753309624.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "Why not just port the Rust implementation to C++ it doesn't do anything that's hard to do. Just make the union yourself it's well supported by the language.\n\nHonestly I think you've written an extremely unidiomatic JSON \"like\" parser for C++ almost all of them use a union for example https://github.com/nlohmann/json/blob/develop/include/nlohmann/json.hpp#L427"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are you using Rust for web development?"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 68.06500383333334,
      "arousal": 53.741496500000004,
      "dominance": 61.65910816666667,
      "text": "I'm kinda of tired of Go. I still love the language, but I need a better type system. After spending some time working with Scala, I can't go back to the nulls everywhere. ADT and immutability is just too good.\n\nIn theory I could stay in Scala, but it's just too complex, slow, resource intensive, and kinda of a dying language.\n\nMy main worry with Rust is the verbosity. I'm not building a OS or driver, it's usually JSON APIs. A few ms here and there would not cause any problem.\n\n  \nAny tips or resources?"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes. Axum rust is lovely\n\n\nI mean, it sucks a little to \"manually\" implement openapi, but I'll still take it over fastapi shenanigans any day. "
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "yes, I love Rust for web backend"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "I'm not using it professionally for web development, sadly PHP pays my bills. But I've been playing with Rust Leptos (full-stack framework) recently, having a lot of fun with it."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263033333334,
      "arousal": 68.51851833333333,
      "dominance": 63.49206366666667,
      "text": "I use it, works pretty well.  And I can use my whole web server as a library inside a tauri app that runs on my phone.  So that's cool.\n\nWhat can be tricky is async streaming, and async stuff in general, like if you're running background async jobs.  Once it works its solid and fast, but knowledge is needed.\n\nFor regular stuff, fielding queries and returning json, its no more difficult than python or whatever."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.170068,
      "arousal": 61.337868,
      "dominance": 66.326531,
      "text": "Rust is definitely used in production web applications:\n\n- https://github.com/rust-lang/crates.io\n- https://github.com/cloudflare/pingora\n- https://github.com/rerun-io/rerun\n- https://github.com/modrinth/code\n\nI like axum + sqlx personally.\n\nEdit: realising I didn't directly answer your question. Sorry :)"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "axum is a great go-to!"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Yep, it's my full-time job.  I also use it for a lot of personal projects.\n\n\n**EDIT**:  Back end, specifically.  I haven't seen enough to convince me that WASM is the play for DOM interaction yet.  I don't do much front-end anyway, but when I do, I use Svelte"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "Yes web dev with rust is very rewarding these days. Axum is worth a look. Everything I build for fun these days ends up being based on Axum apis. Sometimes end up using alpine for front end and Axum for the back end but so many of my projects end up being built with Axum. Highly recommend checking it out."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "fullstack rust web developer. i am using actix web and askama templates"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Yes and love it"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I love [leptos](https://leptos.dev/)."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yeah I use axum + sqlx and it's great"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.028722666666674,
      "arousal": 61.866969000000005,
      "dominance": 56.19803466666667,
      "text": "Yes, but only because I am paranoid about performance and runtime safety and I hate garbage collectors. Well, BEAM is nice but if I am gonna use Elixir I might as well rip off the bandaid and use Rust. Rust also just jives with how my brain works when designing and programming."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.73998533333334,
      "arousal": 61.33786866666666,
      "dominance": 65.26832933333334,
      "text": "I think you'll be pleasantly surprised by the expressiveness of Rust. I definitely wouldn't call it verbose. Especially compared to Go. \n\nIf you like Scala, Kotlin might also be worth a look. It's not as nice as Rust, IMO, but it's nice, and it'll feel fairly familiar."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.6190476,
      "arousal": 52.154195,
      "dominance": 57.9365078,
      "text": "F# is also an option kinda similar to scala. \"More complete\" pattern matching, pipe operator and contrary to what everyone says even if F# feels like a second citizen in net it is usable today, you can interop with C# code without worrying about anything because you are in the same runtime like scala so garbage collector kicks when it has to, need a mobile app? You can use xamarin with F#, spa ? There are react bindings, and it is multi platform so you can make your deploys on AWS or windows machines in azure.\n\n\nThere were rough edges in the past but not something that needs your attention like fully visual window app building in visual studio (not code, the full ide)."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.928571500000004,
      "arousal": 45.946712000000005,
      "dominance": 56.6043085,
      "text": "> In theory I could stay in Scala, but it's just too complex, slow, resource intensive, and kinda of a dying language.\n\nInterestingly the whole lichess runs on Scala by literally a single guy\n\nhttps://www.youtube.com/watch?v=7VSVfQcaxFY and https://www.youtube.com/watch?v=hE2NZ0PM0EA (primeagen)"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.2312925,
      "arousal": 66.780045,
      "dominance": 66.66666675,
      "text": "Well this depends on what kind, if I want to do a poc -> python or js, move it to something that will get updates monthly -> go , something stable like a payment gateway or SFTP server which might get updates almost every 6months -> rust.\n\nIf you're doing it for yourself and fun do any. But if a client and money is involved think about the timelines and maintaining costs."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.7528345,
      "arousal": 52.55102049999999,
      "dominance": 60.9977325,
      "text": "I've built quite a few JSON APIs, if you need a non streamed response it's pretty simple. If you need streamed responses though you'll likely want to try messing around with async_stream and impl Stream<Item = T>"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’ve been using Rust and Axum for the backend of my app and have been loving it so far. It’s really fast. I’d like to give Dioxis a go for the frontend one of these days. The React ecosystem is just so convenient though. \n\nShameless plug - [MotoMemo](https://moto-memo.com)"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "scala-cli and scala-native might help you"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 53.968254,
      "dominance": 72.108844,
      "text": "I wouldn't see the speed of rust as an advantage, but I would see the stability of well made rust code as an advantage.\n\nRust is (to my understanding) less prone to suddenly break,and easier to fix if it does due to the wonderfull compiler"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "I built a complete REST API with authentication and all that stuff using rocket. Good experience"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Actix + svelte"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.01700675000001,
      "arousal": 61.281179,
      "dominance": 71.712018,
      "text": "currently working off and on on a web game, just under 40k lines so far. backend in axum and sqlx with postgres, frontend just with web-sys (I've never done frontend web dev before so I have no idea how to use react or any react-like rust crate nor do I care to learn). it is easy."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.21693133333333,
      "arousal": 64.399093,
      "dominance": 68.48072566666667,
      "text": "I’d say the good news is APIs are often fairly boilerplate in my experience and thus using AI autocomplete can be helpful as the patterns are recognizable and established. \n\nI’m more in cybersecurity personally. I recommend it mostly because it’s better for security, not the fastest to develop or because I love the syntax."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "I use Poem. Very easy to use."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Even with limitations, I still prefer Go. I use Scala for heavy data processing in some very specific situations (spark+kafka), but I understand your points. Dev tools is not great, metals is very heavy and sometime buggy, SBT kinda dated and the language sometimes looks like is always dying."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m using rust for backend work. It’s efficiently because macro and existing framework can generate schema and you don’t need code to much. You can check async-graphql for graphql or poem-openapi for openapi specs."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "Check out gleam, it's not rust but it feels sort of similar and is super easy to write web back ends in."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.95162522222222,
      "arousal": 57.96170322222221,
      "dominance": 60.330058055555554,
      "text": "I was trying to rewrite my company app to rust, it took me almost 2 years of my free time until I gave up, complexity our app had (and was going to have) was not suitable for rust for fast development. I decided to try golang, I fell in love with the language in 1 hour, rewrote our app in company time with chat gpt in less than month. Everyone in team loves the language, and it don't break my creativity, provide code safe mechanisms and so on.... It was the best idea I ever had. (App was previously in python, we had problems with performance, and complexity non well managed by duck typing - created a lot of bugs...)\n\n  \nTo answer what problem I had in rust:\n\n1. packages imports totally sucks in RUST comparing to go\n\n2. application required a lot of facade and adapter patterns, because it's multiplatform and multicloud solution - I had problem to wrap some libraries because some function are under private package.\n\n3. not enough brain capacity to learn and understand Rust in my team... (they are good developers but rust is not for them)\n\n4. Rapid development and rewrite of rust packages - incredible amount of outdated tutorials and documentation.\n\n5. Forwarding types and variables hell.\n\n6. Golang enables to create cyclic dependency inside of package - which is something you sometimes want and need  (I create simplified simulation software on the level of anylogic and I don't have so much time and budget to create so universal and abstract code to not have those dependencies). \n\n7. Incredibly weak IDE support, even rust rover was failing a lot.\n\n8. Incredible complexity of external packages - basically a lot of problem was created because some developers brute force non-usage of smart pointers, which on the end of the day creates more complexity.\n\nGolang way of coding really matched my type of thinking... I still continue in rust just in my free time. \n\nBut after doing golang style I'm more adapted to rust style (as previously from python and c++ ),  maybe with the passage of time, I could be able to write better rust backend code thanks to things I have learnt in golang."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 64.512472,
      "dominance": 68.93424,
      "text": "Yes, just a private hobby project though. Using [Leptos](https://leptos.dev/) so even doing the Frontend with rust. Two biggest gripes with Rust + Leptos are long compile times and rust analyzer/code completion is not on par with something like Resharper/Rider.\n\nHowever, compile times will improve once more with the next Leptos release."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.0498865,
      "arousal": 68.65079349999999,
      "dominance": 69.8979595,
      "text": "I haven’t seen anyone mention it - but dioxus is one of my favorite rust frameworks. you can do web, desktop, mobile, etc with it. \nhttps://dioxuslabs.com/\n\nI’m not sure if this was done by design, but it’s mainly a UI framework and if you want full stack capabilities, you would pair it with something like Axum/rocket/actix\n\nIt’s really fun to use in my opinion :D \n\nThe only downside is its not very mature but they’re doing a fantastic job on it"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It really isn't verbose"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "There is alot of good frameworks if you like the async stuff you can go with axum or actix if you dont there is Feather its relatively new but its simple kinda like express js"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.6938775,
      "arousal": 63.7188205,
      "dominance": 73.015873,
      "text": "I’m using it for a personal project. It’ll be a lot of fun once I figure out how to do database stuff. I’m finding it really challenging to set up database access in a way that doesn’t require a ton of repetitive code - I’m thinking about writing some procedural macros to do everything the way I want. Which is a freat rabbit hole of its own. "
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "I've done some JSON API development in Rust. I found the verbosity was almost entirely in type definitions for the JSON itself (and if you're using a database, also for data coming out of the database). This will be more verbose than an untyped language like JavaScript or Python, but if you're coming from another typed language like Go or Scala then you'll probably already be dealing with that.\n\nSo I'd say go for it."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’ve been experimenting with Leptos and Axum and because of Rust’s macros, these frameworks have been made among the easiest to work with. \n\nHowever! I’m still new to the language and ecosystem so if anybody knows how I can use sqlx with the leptos axum workspace starter template it’d be great. I add the dependency to the server package and write a server function to do some db operations. I don’t know how to call this server function from the frontend (say a button click) because app is a dependency for server and I can’t depend on server from app"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.75737,
      "arousal": 58.503401,
      "dominance": 63.151927,
      "text": "Yes we use rocket behind an api gateway and it's work like a charm !!"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "Rust for web is amazing. I would hate to go back."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Axum lovable"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Yes, I’m using it for both backend and front end work. dioxus, Actix, Axum, and Leptos are really good. I wasn’t able to get a handle on Yew. I’m currently working on a suite of web apps using strictly dioxus."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "Yes. I started the Rust web development journey by doing everything in Rust (compiled queries, compiled templates, etc), but with every feature, the feedback loop got very slow especially when making a small change. My past web development experience in Go, PHP didn't help either because their development experience is much faster as compared to Rust. However, this did not stop me from using Rust for web development, I still use Rust for writing APIs, but I also have to rely on some frontend framework to do the rest of work. Typescript is fine, but if you want more safety and like functional programming you can use elm."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes we are using Actix-web, we just put our first server into production. The performance is fantastic."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.312925,
      "arousal": 66.099773,
      "dominance": 46.712018,
      "text": "I am using not just Rust but WebAssembly Rust with Cloudflare workers. The experience has been challenging, to say the least. But after the initial hiccups and figuring out the platform, your productivity starts to increase. This is difficult to get to because the ecosystem is lacking in many aspects and there are things where you are just trying stuff but Rust expects to get your types straight. However, if it wasn't for the type strictness, I'd have gone insane already.\n\nAlso, use graphql. I really can't find a reason why you shouldn't. I use async-graphql and essentially you forget about the \"web server\" concept. For the front-end, Rust is simply not there yet. I've gone with the traditional React even though I dread everything about it.\n\nAnyway, for the courageous, my app is here: https://codeinput.com It is a merge conflict resolution. Still not quite production ready yet so things might break."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.12018133333333,
      "arousal": 61.37566133333333,
      "dominance": 69.00982599999999,
      "text": "I use rust a lot for backend / web APIs in personal stuff and a bit for work. Its great, honestly\n\nonce you nail down the patterns you are using its actually really quick/easy to iterate on,  because most web stuff doesn't usually end up requiring too much in the way of complex lifetime stuff.\n\nI specifically use it for aws lambda / serverless APIs, and its fantastic for that in particular because it has a super low cold start times. often in the <15ms sort of realm"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Full Stack Rust🦀 is so cool😎.\n\nThe fact that you can write a core module in Rust and use it in both front-end and back-end and having a static type checking over APIs is kinda interesting.\n\nIsn't it?\n\nAnd I love to Use Dioxus + Axum BTW!"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes..for backend: Axum or Actix."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 43.764172,
      "arousal": 42.743764,
      "dominance": 51.360544,
      "text": "Since you're coming from Go, have you seen [Borgo](https://github.com/borgo-lang/borgo)? It's like rusty Go"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.033258,
      "arousal": 48.37490566666667,
      "dominance": 59.14588033333333,
      "text": "I recently started a hobby project on a full stack rust website with leptos, axum and mariaDB (sea-orm / sqlx).\n\nThis is actually the first time I want to implement a website \"professionally\" and the goal of the project is mostly to dove more deeply into rust concepts and crates you usually don't use outside web development. So I may not be fully qualified to comment on this thread, but still I will.\n\nSo far I have a great experience with this stack.\nMy only major concern is that because of server side rendering the client code can not be clearly seperated from the server side code. This is problematic since the client code has to compile to wasm and the server code to regular x86 linux. So I have to work with a lot of conditional compilation and I haven't yet figured out a clean way to structure my code yet.\n\nAnyway this is no problem for your usecase anyways. Axum is a breeze and you can easily build json apis without any boilerplate."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Depends what you mean by web development. \n\nSPAs and crud apps: no\n\nReverse proxies that serve double digit percentage of global http traffic: yes"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wasm-pack allows me to use typescript but program it as rust"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.284202666666665,
      "arousal": 56.91609966666667,
      "dominance": 56.55706733333333,
      "text": "Yes, I do. But the experience is quite different from your typical dynamic language:\n\n1) **Compilation time is crazy** for big projects, sometimes it compiles for about an hour on one of my projects. This can have a significant impact on your CI/CD bill if you commit too often. So beware.\n\n2) **Rust is fast**. This means if you ever used let's say SQLite, DuckDB, Apache Spark etc. You won't need them anymore. Because you can simply take Apache Arrow and write directly into Parquet/Delta Lake.\n\n3) **Rust is a relatively young language**. Some libraries are immature and lacking functionality. For example - XML related functionality, like XPath/XQuery and so on.\n\n4) **Rust have pretty cool experimental crates**. For example - Rig, Spider.rs, MeiliSearch, and so on."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.845805,
      "arousal": 58.33333325,
      "dominance": 62.585034,
      "text": "I’m currently working on a social network project for a specific industry using Axum, sqlx, and Askama. I tried the same project with the same setup a year ago and struggled, but have spent way more of my time writing rust day to day since then. Now that I’ve stopped fighting against rust’s way of doing things it’s gotten a lot easier and I’m happy with my choice."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "We use Axum for everything and it’s great"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "i built a simple REST API with Rust for the sake of performance some time ago"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.19879077777779,
      "arousal": 56.46258511111111,
      "dominance": 62.118921666666665,
      "text": "Leptos is great for full stack but I've only used it for personal projects. Professionally I have been using Rust daily for general backend services (HTTP and otherwise), as well as some closed source WASM front ends for a few years now. I'd say for verbosity, it's *far less* verbose than Go if you're using a lot of crates and even light frameworks. In the case of building your classic REST API, one can choose to use some common crates like SQLx, Axum, thiserror, and utopia together. This will give you a very feature rich, easier to build, cleaner code version of my old Go counter parts, but you'll also be leveraging a ton of derive and proc macros which is the real magic behind some of those crates. If you're intending to avoid these things (debatable for learning, but in the long term you shouldn't) then yes, it will get very tedious and boilerplate-y.\n\nGo is nice because you can do so much and easily without a ton of magic/additional layers, it's wonderful in that regard. But if you're looking for a robust type system, say no more and just dive in. It may take you a bit to get over the hump that is understanding the borrow checker and what it expects of you, but I say postpone your decision to stick with it until you get over that hurdle.\n\nAfter that, you'll still run into snags here, dumping time into things that feel a bit unnecessary and annoying, but overall you'll spend far less time debugging and chasing down areas where you hacked things to get them to work with an aging TODO on them. I think this is part that people fail to recognize getting started with Rust. You're going to deal with a lot of \"issues\" up front that you can ignore or just don't deal with at all in other languages and this can be demoralizing if you're not used to the concepts that Rust was designed for. If you power through it, there's a good chance you'll enjoy the language, even for web stuff."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.6938775,
      "arousal": 55.3287985,
      "dominance": 57.936508,
      "text": "No, because it’s hard to develop.It spends most time and the director not allow me too using it."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yep Axum + Cargo Lambda + HTMX "
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "So many good tips. I'm saving this"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Built Audioscrape.com entirely in Rust and so far I don’t regret it."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use sycamore for frontend"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 21.655329,
      "arousal": 86.054422,
      "dominance": 41.723356,
      "text": "Yes and it's a nightmare"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "Over 10 years and I’m still not tired of Go. The only reason I would go for Rust or C++ is performance (including the GC). Cannot think of any other reason. Personal opinion, obviously"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.293273,
      "arousal": 60.0718065,
      "dominance": 64.39909300000001,
      "text": "YES! I just started rewriting an old PHP service/site with Rust. The stack is Poem for API and routing, Maud for HTML templating, SQLx for database querying, and HTMX for frontend control. If you need even more power on the frontend you could probably also tack on Alpine.js. The devex is absolutely wonderful, you stay entirely writing Rust the whole time, the page loads are sub 50ms, using HTMX boosting gives you SPA-style flickerless user experience. If the lack of hot reloads for HTML changes irks you, run a custom Maud fork with the hot-reload PR merged in. It's genuinely the most fun I've had programming in a long time!"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Learn wasm_bindgen"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.2108845,
      "arousal": 46.712018,
      "dominance": 64.56916100000001,
      "text": "yup its nice, ultra fast, type safe with great testing , also many crates/libs solve your issues"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hello, you can check out my article here on how to get started\nhttps://medium.com/@otukof/create-a-web-desktop-application-with-rust-c8449f661ecc\nThank you! "
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "I use Warp for my personal stuff, it's really easy to spin up a single-file HTML frontend and WebSocket backend, though I haven't done much past that."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Rocket + sea-orm is a really good choice for me to develop the backend side."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.265306,
      "arousal": 31.972789,
      "dominance": 50.113379,
      "text": "Yes, used quiet a few frameworks. Actix, rocket, axum, warp. Not a fan of warp, I do like axum and light weight actix."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.612245,
      "arousal": 67.120181,
      "dominance": 78.45805,
      "text": "Nothing wrong on using Rust. But if you want an strong typing system without Rust just go Typescript. The type system is basically identical in capabilities but it's a bit less verbose"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "Yeah it’s great. Also web is fairly easy in rust and established."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.56462575,
      "arousal": 60.9126985,
      "dominance": 60.31746025,
      "text": "I did convert a client of mine from firebase to custom backend and i used rust for it. For the most part in backend dev in rust you won't fight with a borrow checker but might happen here and there. I would suggest you create a demo of only 1 aspect of your idea and rate the experience your self"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "you could try [https://loco.rs](https://loco.rs)"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I like to use \\`async-graphql\\` and \\`async-graphql-axum\\` to create GraphQL backends, and love it! Highly recommend"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "I am a c++ developer and am generally annoyed by the \"why not rust\" question, but for web development I believe it is really nice."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use rust in the back end. Database, data management"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.26152683333333,
      "arousal": 57.7475435,
      "dominance": 59.353741500000005,
      "text": "Yes, we use Rust for basically all new backend development at this point. Across the board we saw response times improve, container image sizes plummet (20MB for a whole service is pretty average in our environment) as well as a huge drop in memory consumption.\n\nResponse times going down didn't matter much because they weren't that high to begin with, but memory usage going down? That means we can fit more services on a single server, and therefore can scale in our cluster from where it used to be. That's direct, measurable cost savings. \n\nDeveloper productivity was lower at first, but now after a few years it's on par or better than before. \n\nEvery time one of our developers (me included) has to do maintenance on a service we haven't ported to Rust yet, there's a lot of sighing and eye rolling. 🙂"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm using Axum, Maud, gnat/surreal, gnat/css-inline-scope, HTMX, ormlite, and it feels like the way the web is supposed to be!"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "These are the same reasons I ditched golang in 2019/2020 and never went back. \n\nI hop between C# (which is mostly analogous to Scala in your case, but not dying) and Rust, predominantly based on how much I care about performance and what libraries make my life easier."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "i am using rust for my personal project. the stack is rust + axum + htmx + alpine + tailwind + sqlite. its a SPA where the initial page request is SSR and then client side hydration takes over. its the exact same user experience you get from your usual js-frameworks like react, svelte, vue etc. but without all the js bloat around it. it works very well."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.9501135,
      "arousal": 52.9761905,
      "dominance": 59.6088435,
      "text": "I have written the back-end of my website with Hyper to make it dynamic and fast. The application reads a file to find the file corresponding to the requested resource and reads the requested file if it exists. I couldn't find a higher-level library to do it and don't want to compile my entire server every time I add a file (which would take long on my Raspberry Pi server), so hyper was the best library available.\n\nI use Rust mostly because it's efficient, which allows me to self-host the server basically for free. A garbage collected language like C# or JavaScript (Node/Deno) would be less efficient and a language like C or C++ would be more difficult to make safe."
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Axum"
    },
    {
      "post_title": "Are you using Rust for web development?",
      "created_utc": 1742682437.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "i don't see so many different from go to rust in type system ... what am i missing ?"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is there anyone who tried Zig but prefers Rust?"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 67.49811033333333,
      "arousal": 59.334845333333334,
      "dominance": 61.829176,
      "text": "I'm one of the many people I can find online who have programmed in Rust and Zig, but prefer Zig. I'm having a hard time finding anyone who ended up preferring Rust. I'm looking for a balanced perspective, so I want to hear some of your opinions if anyone's out there"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I prefer Rust. These are the things I dont like about Zig\n\n- anytype is just a fancy duck typing. I want to see what a function needs in its signature, not have to read the code to find out.\n\n- everything is public in a struct and you must rely on devs reading docs on what you shouldn’t touch.\n\n- unused variables is an error and not a warning. This is tedious when you are prototyping.\n\n- no string types \n\n- i don't want to reinvent interfaces\n\nThe next two are just preferences:\n\n- not a fan of camelCasing \n\n- not a fan of parens on if / for / while constructs"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.621315,
      "arousal": 58.843537,
      "dominance": 78.117914,
      "text": "Zig just feels *too* minimal for me. Don't get me wrong. I respect it for what it is. But what it is is a *very* basic low-level language, designed for situations where that's all you want/need. Rust is batteries-included. It has all the bells-and-whistles but still manages to be low-level, which positions it for much more general applications."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.53514750000001,
      "arousal": 56.887755,
      "dominance": 73.15759625,
      "text": "I implemented the basics of the websocket protocol according to the spec in zig to try it out: https://github.com/roberte777/zigsockets. I guess I tend to find the verbosity of Rust to be wonderful, as I always know what I have and that I’m doing things right. Zig doesn’t feel that way. Its compiler errors are also much worse. I did like that everything was a struct, and it has some nice functions for working with bytes. Allocator passing is interesting but also confusing if you do something advanced or have lots of layers. I tend to agree with what others have said about zigs anytype. \n\nThe only place I see zig being useful for me personally is if I have a strong need to interop with C. I think it is king in this area. It feels like a better C. However, as I never have this need, I prefer Rust for my own work."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.67294592307692,
      "arousal": 62.01814046153846,
      "dominance": 65.83813023076924,
      "text": "This constant comparison between Zig and Rust feels strange. These languages have overlapping, but yet different niches. From my point of view Rust is a general purpose programming language with strong systems programming capabilities, and Zig is a systems programming language with lots of features which are absolutely redundant for general purpose programming. So in my opinion they are not like the same type of thing to compare so generally. Zig outshines Rust in some aspects of systems programming in terms of precise control and transparency... which is really needed only in a small subset of programming tasks.\n\nSome other aspects I don't like in Zig:\n\n1. comptime trickery feels a bit like C++ templates with all that unrestricted power, but I'm not familiar with Zig enough to judge if this feature can lead to the same amount of problems\n2. \"Safe enough\" isn't enough for me, and if tests could prevent all the rest memory safety issues, even assembly could be considered as memory safe language\n3. With Rust I feel myself backed from all sides: from tooling to type system, so I can focus on solving the task I'm interested in, and don't have to worry about forgotten defers or some other manual resource management stuff\n4. The syntax of Zig feels a bit inconsistent, alien, and kinda \"made up\" for me, and I'm also not a huge fan of camel case, but it is a matter of personal taste\n5. The Rust way of programming with all its strict aliasing rules feels natural for me, and I don't fight the borrow checker, so the main reason why lots of people feel Zig more simple and \"fun\" doesn't work for me. Maybe, if I worked with some very low level stuff, I would prefer Zig, rather than dealing with the complexity of unsafe Rust, but I'm not sure"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.78478654545455,
      "arousal": 59.32282013636364,
      "dominance": 61.05442172727273,
      "text": "I fall into the “prefers rust” camp. I’ve thought about this off and on actually and I find it hard to quantify exactly why I don’t like zig more. I’ve been a C developer since 2017. Very often I see people praise zig as similar to C but with modern conveniences. I’ve never felt that way while writing zig. To me it feels more like a modern language with the inconveniences of C (manual memory management, nullness, raw pointers). \n\nZig has interesting features but it feels almost like a research project or someone experimenting with a language. Rust’s design feels more cohesive, thoughtful, and ergonomic to me.\n\nSome specific things about zig that made me enjoy it less:\n- the deliberateness of memory management is better than C, but having to pass around an allocator practically everywhere is cumbersome. It also causes confusion when using libraries about who owns the data. I spent a not insignificant amount of time debugging StringHashMap issues because I assumed it would allocate keys. It doesn’t. You initialize the struct with an allocator, but that is only used for certain internal operations, not all memory associated with the hash map. With Rust you don’t have to think about allocations, which is huge once you get used to it. \n- the syntax feels bloated to me. There are lots of symbols and patterns to remember. Import syntax, capture groups, pointers and slices, labels, anonymous struct literals, optionals, error unions, probably others I’m forgetting all have their own symbols and subtly different syntax to remember. It’s probably just a me thing, but they’re all similar to other languages but just different enough that it confuses me\n- probably because zig is so dedicated to ffi, it has to address null-ness and initialization of variables. Zig also adds its own features with optionals and errors. This results in having to deal with so many possibilities for the state of a variable. Is it an optional? Is it null? Is it undefined? Is it an error union? Rust’s Option and Result feel easier to use, more concise, and better thought out. Plus you get context with Rust’s result vs zig’s error\n- I don’t like anytype or zig’s implementation of polymorphism. It feels like something that was added later to the language and is hard to use and write. I thought Rust’s traits and preference for composition were limiting when I first started learning Rust. But I’ve come to appreciate the simplicity it brings. `Box<dyn …>` is weird but eventually makes sense. It’s also not that common. anytype and manual vtables are common in the std library. \n- minor thing but I just prefer snake case\n- cargo is so polished, adding dependencies is so easy. Mucking with build.zig isn’t hard but still an exercise (especially when documentation goes stale with a zig version bump)\n\nOverall, Rust feels like a more succinct language, with a nicer syntax, more ergonomic patterns, and compile-time memory management. I know the borrow checker and Rust’s memory model are a meme at this point but after writing Rust for awhile it feels really strange to use a modern language that requires manual memory management and uses null values."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.67044583333333,
      "arousal": 56.368102666666665,
      "dominance": 60.6387,
      "text": "Started learning Rust, than Zig was all the rage and paused Rust and switched to learning Zig, than came back to Rust.\n\nI like Rust better because type system and it is easy to follow \"put all of the complexity in the data types so that interactions between them are simple and stupid\" principle.\nAlso making safe parallel and concurrent programs in Rust is unmatched.\n\nZig is just way to level for me, and some of the things I did not like are verbose pointer syntax, anytype, no strings, errors not able to carry information and all programs are sync by default unless you set global flag.\n\nI have no use case for it and even if I would it is not stable yet so I would not tie any serious project to it."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.117914,
      "arousal": 63.945578,
      "dominance": 60.090703,
      "text": "I tried both, and I preferred Rust, because setting up zig was painful for me, and I couldn't figure out how to actually use dependencies in Zig, whereas in Rust I just use rustup to set up rust, and cargo is absolutely amazing.\n\nI know Zig is relatively young, so maybe I'll give it another shot in the future. When I fully switch to Linux."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.2215745,
      "arousal": 58.90832535714286,
      "dominance": 62.30968571428571,
      "text": ">  I'm looking for a balanced perspective\n\nOn what?\n\nLook, if you want a balanced perspective let's go ask one of the embittered C or C++ people who will gladly tell you how much they hate both languages and especially the people that like them. That's balance... from a certain point of view.\n\n> I'm having a hard time finding anyone who ended up preferring Rust\n\nAre you looking for validation of your own preference? Because that is *usually* the main motivator of these sorts of questions.\n\nRust and Zig have different goals and philosophies. Which a person prefers will likely come down to which camp they fall in. Both languages are \"good\" in the sense that they accomplish a lot of their design goals.\n\nIf you go and look at Zig's sales pitch, I think they do a really good job of explaining why you might want to use Zig. But their argument for why you might want to use Zig instead of Rust gives away exactly why some of us are going to prefer Rust; Rust is kind of a kitchen sink language AND it's pretty rigid about how it wants you to do things, which at least from my perspective is a big part of why it's really good when your highest ideal is writing production code in a large codebase."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.56689374999999,
      "arousal": 54.3650795,
      "dominance": 66.3265305,
      "text": "I gave Zig a shot, though I’m not sure you would agree that I “tried” it. I installed it and tried to learn through the Zig documentation. I found it much more difficult than Rust, despite Rust being considered the more difficult language. I think much of that is credit to The Book, which is remarkably good at getting a person comfortable with Rust’s concepts. \n\nI don’t have a C or C++ background. I suspect Zig would be easier for me if I did. It “feels” closer to C than Rust does."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.79365075,
      "arousal": 58.914399125,
      "dominance": 68.679138125,
      "text": "Some may contest this but Rust is a higher-level language than Zig. It gives you more abstractions that you can compose into larger applications. The restrictions and safeguards it adds are very useful when you’re building something so large even the builders won’t be able to keep every part in their head at some point. And generally you’re not sacrificing meaningful performance for that unlike GC’d languages. \n\nZig has powerful tools, some of which are superior to Rust, but it doesn’t offer the same level of guarantees for composability or scalability. The safety guardrails of Rust become a huge boon when composing a lot of things created by different people together. You don’t “feel” that when you’re making an isolated application and comparing the elegance of Zig’s comptime to the complexity of Rust proc macros, so it’s understandable why some people prefer Zig. \n\nBut one of the reasons I really prefer Rust is the ability to say “I made this thing that will be very difficult to misuse, even if it’s being used in ways I didn’t originally expect or intend”. You pay for that a bit in language complexity, but it’s not a bad trade.\n\nAll that said I think Zig is an important project and I want to see it mature and grow. Certain aspects of Rust make people very resistant to use it in place of C, but Zig has a strong position to be a candidate for modernization in those cases. \n\nIt’s maybe a cliche view, but the future I’m hoping for is where the C/C++ stack can left behind for the Zig/Rust stack."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.176871,
      "arousal": 64.1156465,
      "dominance": 67.517007,
      "text": "I tried Zig, completed all of Ziglings some time last year (I think version 13.0. Its a neat course btw!)\n\nZig feels less mature than Rust (for example, for some of the Ziglings, the advice was to read the stdlib source code as the documentation is incomplete). But with that aside, I still prefer using Rust - here are some examples:\n\n* No RAII so you must remember to manually defer.\n* No borrow checker so you must keep track of your own lifetimes.\n* In the average case, I'd prefer the readability of traits/generics over the power of comptime.\n\nI like the \"safety\" culture of Rust and having to think about things upfront - I feel it makes me *more* productive, not less."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.9863942,
      "arousal": 61.6326528,
      "dominance": 52.83446740000001,
      "text": "No RAII in Zig is a complete show stopper for me.  I'm also annoyed that there are no macros or code generation.  And lastly,  I think Zig is just ugly.  Rust has ugly parts too,  but not as ugly as Zig.  When Zig reaches 1.0, I'll probably do Advent of Code in it to really give it a better chance,  but for now it's a novelty language that I will look at occasionally with interest."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.89569175,
      "arousal": 56.547619,
      "dominance": 65.73129250000001,
      "text": "I looked at Zig, but it made so many strange decisions that I don't see myself learning it, at least not in its current state:\n\n* No RAII, it uses defer instead. This makes bugs far more likely, by not tying cleanup to the type.\n* No safe/unsafe split. It is just as bad as C or C++ here.\n* No life times.\n* No closures.\n\nThat said:\n\n* Explicit allocators are nice. Hopefully allocators get stabilised in Rust soon.\n* Comptime, while cool, are unfortunately incompatible with Hindley-Miller type inference (so we won't see this in Rust). And on the whole I would rather have Rust's rich type system.\n\nZig is still not at 1.0, so maybe they can improve things with breaking changes. But a lot of it seems to be intentional design decisions so it seems unlikely."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.58352233333333,
      "arousal": 64.512472,
      "dominance": 73.92290233333334,
      "text": "I used C and C++ before using Rust. I looked at Zig, and played with it for a weekend, but I am just unwilling to go back to an “unsafe by default” language. I spent 20 years tracking down use after free and buffer overflow bugs in large C and C++ programs. Zig does very little to prevent such bugs (ok, that’s a little unfair, but they are still much more likely than in Rust).\n\nI imagine many other people are in the same position — Zig’s major design decisions disagree with why we left C for Rust in the first place."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.320052,
      "arousal": 55.92808542857143,
      "dominance": 65.35471328571428,
      "text": "I wrote one fair-sized program in Zig, and I definitely prefer Rust. That said, there are some great features.\n\n1. Comptime is very nice to use. Within a week of writing zig I was doing fairly complicated stuff in comptime. That said, I think there are inherrent drawbacks (detailed below).\n2. The C interface is one of the best I've ever used (at least in design: in practice parts were in development). \n3. The language is pretty consistent and the features are orthogonal.\n\nBad things:\n\n1. Comptime means the compiler doesn't know about all the errors in your program. You frequently have to play whackamole where fixing one error will reveal several others to the compiler. I don't think this is fixable without getting rid of comptime.\n2. It's pretty easy to hit undefined behaviour if you're not careful. It's designed to help you write safe code, but it doesn't ensure it.\n3. It's a new language. Nothing is really finished (or was, a year ago), doccumentation is often patchy, and the ecosystem isn't there yet. \n\nI think if there was some way to fix 1, then it would be a great language - but for me, I found that writing Zig was often a process of getting dragged down these seemingly endless rabbit holes of bugs, where fixing one bug would reveal five others, and you never really had a clear feel for how much work you had left to do before a given feature was complete.\n\nAlso, pulling in C libraries without friction sounds great, until you discover that compiling your average C lib with the compiler options zig uses (-fsanitize, etc) is very often not going to compile, because of the amount of (usually harmless) undefined behavior lurking about in the ecosystem."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.6077095,
      "arousal": 52.6077095,
      "dominance": 61.904762000000005,
      "text": "I like Zig, but I find the use case extremely limited. Zig is not memory safe. Many of the C footguns still exist in Zig. Zig ecosystem is small etc\n\nThe use case for zig is something that doesn't need to be robust, but also needs to be very low level. I can see it for writing a compiler, sounds great, but I don't need to write a compiler"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.755102,
      "arousal": 65.079365,
      "dominance": 76.417234,
      "text": "I consider Andrew Kelley a friend. I still prefer Rust."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.5646255,
      "arousal": 62.0181405,
      "dominance": 74.3197275,
      "text": "It depends for what. If I'm handling complex data structures, heavily use multi threading or need powerful static verification, I prefer Rust. If I'm writing very low level code or something that is conceptually simple but needs to be reviewer friendly, I prefer Zig."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes because doing Rust for production systems. \n\nIf I'd be doing systems engineering that favors C exclusively and I couldn't get Rust to work there, then very probably I'd be a huge fan of Zig. But for me at least that's not the case, so I have literally no use for it. It's just a better C, and that's also why I don't use it."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.4542705,
      "arousal": 61.48904016666666,
      "dominance": 60.37414983333334,
      "text": "as others have pointed out coming from c/c++ background helps alot but I still prefer rust over the other low-level languages. when im using rust it just makes sense. its a pain to get things to compile if you don't know what you're doing or if you're just learning, but when it does compile things just work.   \n  \nsegfaults, use-after-frees, memory leaks, hard debugging at runtime, etc., all are significantly reduced if not gone altogether. *modern* c++ can attempt to do this with RAII, smart pointers, etc., but fundamentally the language is still c with a tons bloated nonsense. and ppl using OOP constantly when they don't have to is.... annoying\n\ndon't get me wrong, i love all the other languages and i think they will most likely not be replaced anytime soon, and most the of the digital infrastructure we have today would not exist without them. but i still think rust is just better for low-level imho\n\n*thats just a 16 year old's opinion don't listen to anything i say lol*"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.94784580000001,
      "arousal": 58.9342404,
      "dominance": 64.1723354,
      "text": "I wonder how long and in which context people have used both. I assume that most people didn't use both equally, and especially not both professionally (either only one professionally or none).\n\nI believe that working professionally on a language is the best (only?) way to make yourself an opinion as you will get drag more on projects you wouldn't have chosen for the language in the first place."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.14512450000001,
      "arousal": 62.698413,
      "dominance": 66.4965985,
      "text": "I think people who prefer zig are those who are looking for better comptime and more ergonomic C. Zig doesn’t seem very compelling to me as it doesn’t have the hard guarantees that lead to fearless concurrency."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Cool article just on this. https://matklad.github.io/2023/03/26/zig-and-rust.html"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zig is too minimal for me.\n\nI think Rust is to cpp what Zig is to C.\nThey aren't fighting in the same category imo."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.553288,
      "arousal": 60.204081599999995,
      "dominance": 66.8934242,
      "text": "Zig is a step backwards in systems programming languages.\n\n\nRust already paved the way to memory safety. Any language that came and will come after Rust and does not follow in its footsteps or provides a good alternative is not worth considering seriously.\n\n\nThat's my opinion. I know it's a very strong opinion, but that's how I see things."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Yes. Zig was nice but didn’t mesh well with how I think about code. I like to lean heavily into type safety and I couldn’t quite match that experience in Zig. To be fair, that would probably change with more Zig experience, but it didn’t “click” for me in the same way as Rust did. YMMV."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.705215599999995,
      "arousal": 56.2358277,
      "dominance": 57.16553280000001,
      "text": "Main issue with Zig at the moment is that the dev experience just isn’t good.\n\n- APIs changing all the time, rendering old articles useless. \n- Very limited documentation requiring one to read the std library to understand what to use and how.\n- Obfuscated types resulting from comptime making up for lack of interfaces makes discovering what the type signature should be difficult at times.\n- Cryptic errors that can be a nightmare to debug.\n- Poor tooling (lsp, package manager etc).\n\nThese just to name a few of my personal annoyances. However, the language is still not “ready” so I think it’s more on me to manage expectations.\n\nAlso, I will second what many have said about unused variables being an error - Andrew (the creator) has taken a strong stance on this and I just don’t get it.. in a language where you’re allowed to shoot yourself in the foot, making a point to disallow unused variables for the sake of not having it accidentally committed somewhere feels really backwards to me.\n\nAll that being said, I do like Zig’s simplicity. I just wish it did more to help with the dev experience - but maybe in time…"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think Zig and Rust are often compared, but they target different goals: Zig feels more low-level than Rust, similar to how C compares to C++."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.02947850000001,
      "arousal": 57.82312950000001,
      "dominance": 68.424036,
      "text": "To me zig feels compeltely gimmicky and pointless. Rust offers something useful.\n\nI'm not going to the zig subreddit tho and asking people why they are not using rust, because that's what I saw everywhere else."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "I tried zig, as I wanted to learn a more low level approach, and while I generally enjoyed it, it added some friction when coding. Rust does that too, but when rust does, I kinda see why. With zig, it's petty stuff like unused variables etc.\n\nBut lately I've been doing a lot of Odin, which is way more enjoyable IMO."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 50.4535145,
      "arousal": 46.712018,
      "dominance": 56.462585000000004,
      "text": "I come from C++ background. The decision to *not* implement RAII in Zig is a huge turn off for me.\n\nThat means no move semantics, no smart pointers, no effortless collection management (if you need to `deinit` a moderately complex collection item when you remove it, it's not *effortless* in my books), no ability to infer `deinit` from the fields.\n\nNo, `defer` doesn't cut in.\n\nZig tries to be a \"better C\", and that's Ok, but not something I need. Rust can be a \"better C++\", that's much more interesting."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.504913,
      "arousal": 54.618291799999994,
      "dominance": 59.9924414,
      "text": "I have tried Zig and i use Rust and my choice is Rust\n\nZig as a concept was fine and i had big hopes for it but C23 changed everything, i wasnt even expecting half of that. With it Zig is not as a big deal (really big improvements in C) and it still has many weakness of C\n\nRust is the future of system developing because it handles the real world issues we face, in the 80s memory safety was indeed a skill issue because code was small and could be single handed, not anymore. I at least need help and it is what Rust does, it ensures the https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines at compile time and even more, it takes from me a huge mental overload, plus with specific ASANs like Clippy, Miri and Kani (among others) i can raise the quality bar without effort\n\nZig biggest selling reason as today since i think they lost the C replacement is just to do hybrid codebases where C, C++ and Zig live together, the issue is that Zig is not C or C++ and i have run into few cases where it couldnt compile the C/C++ code, edge cases but it happened while GCC handle those just fine\n\nAnd not to mention that Zig docs are a mess, 2 weeks ago i tried again since they had a new release and the docs are outdated and makes no sense, it had nothing to do with the new version so at some point they become obsolete and no one cared or noted, i have lived this with CMake and no, there is no way i will experience the same again. The real issue is not useless docs, is just they lack any quality control of any sort and i cant trust a \"rookie\" tool to do serious stuff, Rust on the other hand is trust worthy, i feel safe using it"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.71957666666667,
      "arousal": 54.724112,
      "dominance": 66.09977333333333,
      "text": "Safety wise, it is like what Modula-2 already offered over C in 1978, or Object Pascal in 1986, but packaged in a curly brackets language.\n\nI don't like the @ all over the place, for that I would be using Objective-C.\n\nFinally the whole story with shipping only source based libraries and the @import approach into variables, brings JavaScript requires() memories, which I don't fancy.\n\nI will only bother with Zig if it becomes unavoidable to me.\n\nHowever since it is safer than C, maybe that is a plus for the industry anyway."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.0975054,
      "arousal": 54.376417000000004,
      "dominance": 61.1111112,
      "text": "I have never bothered trying Zig because it isn't memory safe. I know it's \"kinda mostly memory safe in practice\" but that's also true of modern C++.\n\nI just don't see the usecase for a new low-level language that doesn't have memory safety as its #1 requirement."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.5714285,
      "arousal": 73.0725625,
      "dominance": 63.435374,
      "text": "I would guess that anyone who prefers c++ over c will prefer Rust over Zig. \n\n\nAnd then also some people of the opposite camp will prefer Rust because they may hate c++ for some specific flaws that Rust has fixed."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Zig is just C with no fundamental improvements. Some people prefer just C."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If you think Zig is interchangeable with Rust, you most likely do not work at the enterprise level. Zig’s dependency downloader doesnt even support HTTP proxies. You literally have to spin up a web server to proxy Zig’s HTTP requests to your corporate proxy. It has a LONG way to go,"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.54142692307692,
      "arousal": 57.19518584615385,
      "dominance": 64.10256407692307,
      "text": "I think Zig and Rust are both decisively better than each other in their appropriate domain. \n\nThe subset of unsafe rust that is roughly equivalent to C is actually no such thing and has very subtly different semantics that will result in complex errors and impose a very high mental design burden on you. It depends on the surface of your unsafety. For me I was dealing with writing a rust DLL injected into a C++ program for the purposes of adding runtime instrumentation to this program. This isn’t a situation like writing your own embedded systems where your surface of unsafety is small and you can deal with them then build up your safe abstractions over them. No, every single thing you’re doing is fundamentally unsafe. \n\nYou need global mutable state, as your functions will be called from execution context you don’t always control directly (typically you’re hooking individual functions). For my final goals I needed to write an allocator that would play nicely with C++ (basically you want to hook Malloc so you can track all the C++ heap allocated objects). You’re dealing with and modifying raw pointers freely, and you often need to write custom naked function assembly routines whenever you’re dealing with hooking something the C++ compiler generated some weird calling convention for.\n\nThe lack of inheritance can be obnoxious when you are dealing with code that is directly modeled on inheritance. It doesn’t matter if inheritance is bad. It certainly isn’t bad when what you’re trying to do is manipulate polymorphic code. So you need to generate various completely distinct structures as the C++ program you’re interacting with blows up various objects into variants of different alignments and inheritances that each require their own unique structure. \n\nRust’s hostility to generic behavior is also obnoxious. You’ll often find yourself wanting to model generic behavior with enums and/or traits, the former of which is not much better than not having the behavior be generic at all. The lack of metaprogramming power of generics is notable. Because I didn’t want to learn proc macros at the time, I found myself simply lacking the expressive power of C++ MTP. Speaking of things rust randomly just lacks that is useful in these contexts: placement new.\n\nIf I was making a low level program that I controlled and didn’t have extensive requirements to interact with C++/C code regularly, in unsafe contexts, rust is my choice. In the kinds of context you would use zig I would even argue that it is often actually worse than C++."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "I appreciate how Rust’s RAII and borrow checker encode clear ownership and lifetime information directly into the type system, making programmer intent immediately obvious. In languages without RAII, resource management quickly becomes tedious and error-prone—you end up adding manual flags to guard against double-closes or use-after-close bugs, which not only clutters your API but also incurs unnecessary runtime overhead. Raw pointers, by contrast, tell you nothing about whether they own, borrow, or merely reference some data, how long that data will live, or whether it’s thread-safe. Idiomatic safe Rust forces you to declare ownership, borrowing, and lifetimes up front, resulting in code that’s both safe and self-documenting—and that, in turn, makes maintenance and reviews far simpler."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I like my async colorful and eventually resolved 😅"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "If there are features that are considered good in Zig we can get them into Rust\n\nC++ is grabbing at various good bits from Rust right now but it’ll end up Rust being the way everyone moves forward with, we don’t need Zig"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "I think it’s cool and has potential, but I really don’t like how unstable development is and the lack of documentation. For example, I tried updating a project from 0.13 to 0.14, but got a bunch of errors because some std methods were missing. Turns out they were completely moved/renamed with no mention in patch notes and no deprecation docs. I had to look through the std source code to find them.\n\nAlso I hate making vtables 😡"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.751323,
      "arousal": 65.49508666666667,
      "dominance": 65.23053666666667,
      "text": "I started dipping my toes into Nim when I did hit a wall with my Rust project. It was fun tbh. I implemented the same features way faster, but… tbh I still think Rust is superior, but for creating fast prototypes it‘s probably nice."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.2426304,
      "arousal": 59.773242700000004,
      "dominance": 68.3786848,
      "text": "I'm on the same boat as you. I code in both and like both very much. For different reasons however...  \n  \nI'm passionate about code correctness and that was what led me to try out and fall in love with Rust and its ownership rules plus the borrow checker at the end of 2022. Then I also fell in love with all the good features related to software engineering, like traits, generics, functional oriented patterns, etc.\n\nOn the other side this sometimes means too much mental overhead for simpler projects and that's when Zig's simpler syntax, yet powerful and very fine grained memory allocation patterns make sense to me. A bit like Go but with more control.\n\nThat being said, Zig is still unfinished and that's noticeable especially when it comes to good documentation, and perfect tooling or stuff like async code. All areas where Rust is top quality. This is basically why if I really had to pick one, I'd go with Rust. I think in about 5 years time or so Zig is going to be where Rust is since 2018/2021 completeness wise, thus making it 100% viable to me. Meanwhile I'll keep using it for some of my simpler projects, but preferring Rust in most cases."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.33916428571429,
      "arousal": 57.07806935714286,
      "dominance": 62.77129885714286,
      "text": "I tried Zig for a weekend, and I strongly preferred Rust. Of course a weekend isn't very long, so take all of this with a grain of salt. Also I \"paid my learning taxes\" a long time ago in Rust, so I don't feel a lot of the frustrations that drive people away. That said, when I tried Zig:\n\n- I missed destructors. `defer` is better than nothing, but it still feels easy to forget it or screw it up somehow and leak resources. Maintaining `deinit()` methods over time also seemed like it would be error-prone. Whenever you add a field that needs cleanup, you also need to add logic to your `deinit()` method, and there doesn't seem to be any static analysis that helps you notice if you forget. (I would love it for an experienced Ziguana to correct me here.) Similarly, if type `Foo` starts out not owning any resources, and then later it gains a `deinit()`, every other type that contains a `Foo` needs to be updated. Rust has some friction here too -- adding `Drop` to a type that didn't previously implement it can be backwards-incompatible -- but the type system puts most of the problems in your face instead of making them runtime bugs.\n- I missed move semantics. Imagine any function that creates a `Foo` object, does some fallible operation with it, and then inserts it into a container. If the first operations fails, we probably want to clean up the `Foo` before returning the error. But if something fails after insertion, we *must not* clean up the `Foo`, because the container owns it now. The `defer`/`errdefer` distinction is nice for common cases, but more complicated cases have to fall back to doing cleanup the old-fashioned C way, where each exit point has its own cleanup written and maintained by hand. Move semantics are able to handle complicated cases much more smoothly. (Sometimes [so smoothly it makes me nervous](https://youtu.be/OQTwvycftJU?t=1897).)\n- I use multithreading a lot in Rust, and it's one of Rust's greatest strengths. IIUC, the Zig multithreading story is similar to most other imperative languages: you just need to be careful and not make any mistakes. And note that Rust's multithreading story is [tightly intertwined with the borrow checker](https://youtu.be/IPmRDS0OSxM?t=4868).\n- I agree with @matklad's take [here](https://matklad.github.io/2023/03/26/zig-and-rust.html) about how Zig seems great for writing an application where you plan on scrutinizing every single allocation, but not great for writing library code where you want to design something fool-proof for lots of different callers you'll never meet. Personally I like writing library code. Applications in the real world also have [a tendency to grow and grow](https://en.wikipedia.org/wiki/Jamie_Zawinski#Zawinski's_Law), and eventually there are enough developers that some of them never meet each other, so I think solving \"library problems\" ultimately makes everything scale better."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "I like how coherent and nice comptime feels, but I'd rather have Rust ergonomics instead. Zig is too barebones to me."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.4829934,
      "arousal": 54.69387759999999,
      "dominance": 57.7777778,
      "text": "I tried to learn Zig in late 2023 and couldn't get into how opinionated it was. Maybe I'll come back to it in 2030 when it's had more time to cook and see if the lead dev has cooled it.\n\n\"No operator overloading, because a developer might use it in a way I don't like.\" Ok, so if I'm developing an algebraic type that features addition, subtraction, and multiplication I can either choose between a language that lets me write \"a+b*c\" and I get the operator precedence I want, or I have to write \"a.plus(b.mul(c))\" which is harder to parse.\n\nRust is opinionated about memory safety, but it has unsafe blocks to bypass the language's restrictions when you know you need to. So even in the places where Rust is most opinionated, there are usually workarounds available.\n\nZig's opinions have no workarounds. Tabs? No, you have to obey Andrew Kelley's opinions, and he refuses to compile tabs. Futzing around with refactoring code and you leave an unused variable during testing? Andrew Kelley hates that."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.66515500000001,
      "arousal": 65.23053666666667,
      "dominance": 74.829932,
      "text": "I choose Rust because of the borrow checker. I will not compromise on that.\n\nBut it doesn't mean I love everything about Rust, and there's much to love about Zig. I'm jealous of Zig's fast compile times, comptime ([crabtime](https://docs.rs/crabtime/latest/crabtime/) is nice tho), and superb C integration."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.659864,
      "arousal": 56.519274499999995,
      "dominance": 63.605442,
      "text": "Honestly I always thought these two where a kinda weird comparisons, they go for different things. Zig wants to be simple like C, Rust wants to be a better c++. And honestly if I want a better C, I'd probably go for Odin. Till Carbon comes out there is really nothing else in the C++/Rust space is there?"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zig is great but I prefer rust for me it’s the ecosystem of crates and cargo that can be leveraged far further than limited by any friction with the language"
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> I'm looking for a balanced perspective\n\nZig is not 1.0.  Thus there is no fair comparison.\n\nThe only truly balanced take is \"I reserve my judgement for when Zig reaches a stable 1.0\""
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I prefer Rust for the simple fact that it guarantees safety. Zig does not. The languages are not comparable."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.15797466666668,
      "arousal": 55.442176999999994,
      "dominance": 58.956916,
      "text": "I have not actually got the time to learn about and use Zig, but for me the main reason not to use it is stability. Rust had more than a decade to mature and there's still many things that could be better. I know many other languages like Go or frameworks like React had similar issues. My main goal is to be productive and using Leptos right now it has reconfirmed to me how much extra time and energy it costs having to deal with breaking changes, bugs and regressions on any regular basis.\n\nI might actually go and evaluate Zig in 5~10 years and maybe decide to prefer it then, but for now I stick with Rust and ensure that my overall Rust workflow gets smoother and better."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.99093,
      "arousal": 69.274376,
      "dominance": 78.117914,
      "text": "Zig is great. I just don't see how it can become a real alternative. Rust eco system is very mature, userbase is large, and most importantly, rust has really mature concurrency system. What zig needs is a foothold for certain usecases. Maybe it becomes the go to for embedded, where rust feels really annoying. But broadly, a language's success depends on what gaps it can get through or how well it's backed. Zig is waiting to find that for itself."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not me. I only like Turbo Pascal."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.201814,
      "arousal": 55.442177,
      "dominance": 62.698413,
      "text": "Rust for me is very much about the \"if it compiles it works\" philosophy. Zig does not have that. In my opinion, zig is a low level language competing with C, while Rust is more general purpose."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "From what I got from [trying one Advent of Code 2025 challenge in Zig](https://flirora.xyz/posts/aoc2024.html), I still prefer Rust. My main gripes about Zig are:\n\n* unused functions aren’t type-checked at all. Even C++ does this for functions that don’t use templates.\n* lack of RAII; I guess `defer` makes memory management a bit easier but I don’t want to have to step on eggshells to make sure that all resources are cleaned up when they need to be."
    },
    {
      "post_title": "Is there anyone who tried Zig but prefers Rust?",
      "created_utc": 1745980452.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 25.056689,
      "arousal": 68.820862,
      "dominance": 60.657596,
      "text": "not sure anyone mentioned this yet, but (kinda devil's advocate) how about compile times in Rust vs Zig? ain't that a reason to prefer Zig?"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "On the RustConf keynote | Rust Blog"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I encourage people to read JoshTriplett's follow-up statement here: https://www.reddit.com/r/rust/comments/13vbd9v/on_the_rustconf_keynote_rust_blog/jm6p26m/\n\nEDIT: There is also a minor statement from [Josh Gould](https://web.archive.org/web/https://twitter.com/_joshgould/status/1663594940197228544)."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "In addition to the Rust statement, I would like to explicitly apologize and take responsibility for my part in this. We need to be transparent about how things operate, both as an essential step to improving how we operate, and as an essential part of being accountable and responsible.\n\nI apologize for my own role in what led to the removal of a RustConf keynote speaker, at great harm to the speaker, the conference, and Rust.\n\nThe below is a full account of my own involvement in this and all the details I’m aware of. (I am not speaking for anyone else.) That includes mistakes and harm I’m personally responsible for that I’m aware of, followed by the steps I’m personally taking to avoid making such mistakes and prevent such harm in the future. I’m speaking for myself as an individual here; this is separate from any steps that groups or other individuals may take to avoid mistakes and prevent harm in the future.\n\nhttps://hackmd.io/p3VG_bK9TXOvtgh1oA2yZQ?view"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.41647766666667,
      "arousal": 63.94557833333334,
      "dominance": 53.061224333333335,
      "text": "Duplicating to top-level for visibility:\n\nAnd that’s even the bigger point here. We have people in the community who are experts in conferences, like skade, sage, or leah. And they absolutely have way more experience in this than the overall “Rust leadership”, and they should be empowered to decide what happens with our conferences.\n\nThe biggest failure of rust leadership here is that rust leadership is involved at all. Team’s business should be left to the corresponding team. Imo, the biggest thing to fix here is not the consensus protocol for leadership, and not even individual authority overstepping, but the fact that “core” gets to decide what’s pretty clear isn’t “core”’s business."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 54.648526,
      "arousal": 38.095238,
      "dominance": 56.462585,
      "text": "\"Leadership chat has been the top-level governance structure created   \nafter the previous Moderation Team resigned in late 2021. It’s made of   \nall leads of top-level teams, all members of the Core Team, all project   \ndirectors on the Rust Foundation board, and all current moderators.\"\n\nWait, does this mean that since *2021* Rust has been led by a glorified group \"chat\" with no formal rules?\n\nApologies if this is at all flippant in characterisation (and, to be clear, this is a genuine question), but seems to be what's said here."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "> Recognizing their outsized role in the situation, those individuals have opted to step back from top-level governance roles, including leadership chat and the upcoming leadership council.\n\nI want to thank those people that have steeped back for acknowledging mistakes."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "It feels strange that this isn't signed by any particular people, just a \"leadership chat\" that, even in the text of the article itself, they acknowledge is a problematic entity.\n\nIn the wake of all of this, I find my deepest frustration with Rust's leadership (in its myriad forms and teams and orgs) is the opacity, secrecy, obfuscation of responsibility, and lack of personal accountability for actions -- especially those with rather significant impact on others. This article didn't address that concern."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.3265305,
      "arousal": 47.6757365,
      "dominance": 58.106575500000005,
      "text": "How about in the interim make leadership chat in its current form publicly readable? That would help a lot in restoring confidence in interim governance.\n\nI'm aware of certain specific pragmatic issues (e.g. sensitive topics related to moderation) but I don't see why most of the communication with the proposed consensus model couldn't be done transparently.\n\nDoing things confidentially such as picking a keynote speaker is really just a habit. It's not a process you strictly have to keep confidential until it's been decided on. At least that is a kind of transparency I believe can be very beneficial to an org."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.126984,
      "arousal": 65.24943350000001,
      "dominance": 50.85034,
      "text": "> This left a lot of room for misunderstandings about when a decision had actually been made and when individuals were speaking for the project versus themselves.\n\nThis seems like a rather large flaw in a 'leadership team' that there is no clear owner of any specific decision.\n\nAnother issue I am seeing is that the leadership chat were under the impression that they could put pressure on RustConf organizers to move around, demote, or even uninvite speakers.\n\nThey are also not committing to a specific launch date, only a vague 'as soon as possible'. We can only hope for the best."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.746032,
      "arousal": 61.7913832,
      "dominance": 68.4807256,
      "text": "Very disappointed to see that the bulk of this response is \"old governance bad, new governance good\" when I know that the language in the governance proposal is so loose and so permissive on the side of the leadership being able to choose to keep their operations largely private and allow for individual members to make executive decisions.\n\nNot just two weeks ago I received strong pushback from the members of this \"leadership chat\" for suggesting that they there should be stronger language to keep most operations in public forums and they should setup public communication channels and record keeping *before* forming the new leadership and not leave it as an open question.\n\nSeeing those people insist \"we don't need that, we know we'll act in good faith\" while this was seemingly happening in the background makes me highly doubtful that there will be any effective change as result of these events. A single document is not going to change how rotten the leadership culture is in the Rust project."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.74570792857142,
      "arousal": 63.65403321428572,
      "dominance": 67.00680257142857,
      "text": "I'm happy for the relatively prompt response given the holiday weekend. Given the turnaround time involved to both understand the situation and react to it, a brief, fast post to acknowledge the situation is better than making the community endure a long period of silence in order to produce a more thorough post. However, I do hope that such a more thorough post is forthcoming; this is *not* me asking them to out people against their will, rather this is me asking for greater assurance of why the community should trust that this will not happen again. It's one thing to have the people responsible resign from leadership positions, but it's another thing entirely to put a working system in place that will be effective at preventing such a thing from recurring. I hope that such a more detailed post is forthcoming, and I hope that we as a community continue to demand greater transparency and openness.\n\nIn any case, this is a good first step, so long as it is not the *only* step. I do believe that the people involved are trying to do their best, and I commend that. The silver lining here is that perhaps this will accelerate the timeline for formally adopting the successor to the core team, since this has languished far too long in committee. Maybe there are good reasons for that; people are busy, this isn't their full-time job. But this situation has illustrated that we cannot continue to drag our feet."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.37490533333334,
      "arousal": 55.064248,
      "dominance": 48.941799,
      "text": "Leadership ***chat*** \\- If that characterization is remotely correct it speaks to a real failure in governance here, especially for a project as big and long-running as this.\n\nI don't think it's much to ask for some detail and planning around this transition away from a \"leadership chat\" to a formalized governance body. As long as this structure remains in place, the risk remains of this sort of thing happening again."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I'm sorry if I'm not following along super well, but the way this is written, it makes \"leadership chat\" sound like a pseudonym. I would advise.. sign the blog post with people's names or more concrete roles."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.9183675,
      "arousal": 58.46560866666667,
      "dominance": 57.82312916666667,
      "text": "That's a decent first response, and it's good to know there's been movements to make people accountable, at least internally.  \n\n\nThe community at large will definitely be waiting for a detailed report on what happened, current actions and future decisions, but as long as lessons were learnt and leadership can avoid hurting more people, the wait can be justified (but don't drag it for too long please).   \n\n\nThe community has really lost a lot with ThePhD deciding to (at least for the foreseeable future) stop with their work on compile-time reflections. Even if the feature is never implemented, it's such a trove of learning and researching opportunities for everyone. That's not even mentioning the racially charged comments about them on the bird-site and wherever else. The Project can't afford to keep making mistakes like this."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.47619,
      "arousal": 70.521542,
      "dominance": 87.07483,
      "text": "Very encouraging, all things considered. Thanks for acknowledging the core of the problem. That makes me more confident this episode will result in beneficial change. And thanks to the \"leadership chat\" for jumping on this."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "“Leadership chat” what the gosh darn heck\n\nThis seems like a promising response maybe but the description of the “leadership chat” makes the situation seem even more dysfunctional than it already did. What a mess. Really hope the new governance really does help get things back on a better footing."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If only the culture of great documentation transferred over to the leadership."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Looks like the mod team resigning has had continued repercussions. That seems to be the catalyst for a string of failures since then."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.47392283333333,
      "arousal": 63.510960000000004,
      "dominance": 71.46636416666666,
      "text": "As usual the powerful people in the rust project want all the privileges of their position and none of the balances (public accountability). \n\nIt’s very tiring reading yet another rust drama where everyone - from Reddit mods to various team members to people directly involved - go to pains to not name someone in case they get blowback on social media. Well I’m sorry but if you want to wield power in a public organisation then you have to be prepared to get criticism."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.399093,
      "arousal": 41.950113,
      "dominance": 56.462585,
      "text": "I'd think transparency is the crucial key to keep these issues from happening again."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.390023,
      "arousal": 45.69161,
      "dominance": 54.988662,
      "text": "Solid response hopefully the governance corrections can be made swiftly like within the month"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.67044633333333,
      "arousal": 60.58201066666666,
      "dominance": 65.04157233333333,
      "text": ">The fact is that **several individuals exercised poor judgment and poor communication**. Recognizing their outsized role in the situation, **those individuals have opted to step** back from top-level governance roles, including leadership chat and the upcoming leadership council.\n\nGood. Consequences are important to prevent further mistakes\n\n>We wish to close the post by reiterating our apology to JeanHeyd, but also the wider Rust community. You deserved better than you got from us.\n\nI can see an improvement in handling this compared to the last controversy about the trademark\n\nLet's hope this improvement continues"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.89180414285714,
      "arousal": 61.28927771428572,
      "dominance": 68.85325542857143,
      "text": "I appreciate the transparency and candour with which the Rust project leadership is addressing this regrettable situation. Mistakes were made, and it's heartening to see you acknowledging them and promising to correct them. It's a sign of growth, humility, and strength.  \nThat said, apologies only mean so much without substantive action to back them up. It seems like the team is taking steps towards institutional changes to prevent this from happening again, which is certainly encouraging. I particularly appreciate the emphasis on clear communication and decision-making procedures. These are critical elements in any organization, particularly in a complex, open-source project such as Rust.  \nImplementing a strict consensus rule could go a long way in avoiding any ambiguity in decision-making. This can create a safer, more inclusive, and more respectful environment for everyone involved. It is also crucial to ensure that individuals feel heard and that their input is valued.  \nHowever, changing structures isn't enough. The culture of an organisation plays a significant role in how people behave within it. An environment that enables or excuses poor judgment and communication needs addressing, perhaps with more training, clearer expectations around conduct, or better processes for holding people accountable.  \nThe individuals who made the initial decision may be stepping back, but it's also crucial to examine how such a decision came to be made in the first place. What pressures, misunderstandings, or biases led to this situation? Identifying and addressing these underlying issues will help prevent similar situations in the future.  \nI hope that this situation acts as a turning point for the Rust project leadership, ushering in an era of more inclusive, respectful, and transparent governance. Many in the community are likely looking to see how this unfolds, so I encourage you to keep communicating openly about your progress and any further changes you make. This will help to rebuild trust and strengthen the community."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 33.5034015,
      "arousal": 60.941043,
      "dominance": 43.877551,
      "text": "its great you admit your mistake but the damage it already done"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.17120175,
      "arousal": 57.87981875,
      "dominance": 54.818594000000004,
      "text": "I don't follow this stuff closely, so these may be stupid questions, but I'd appreciate it if someone who knows more could help me understand:\n\n1. This interim arrangement seems to have lasted a very long time (since 2021). Why is setting up a new governance structure taking so long? \n2. Currently, is there no one who is primarily (or solely) responsible for managing group organization, the communication process, and documenting official decisions? If you were meeting IRL, this would be the chairperson who called on people to speak, putting motions to a vote, and recorded the decisions in the official minutes.\n3. What is making having a bare bones process so hard? These are solved problems with off the shelf starting points and legal requirements that set a minimum baseline. Yet even that baseline doesn't appear to be met here.\n4. Would the new governance structure they are moving towards have actually prevented this and the various other issues that have come up in the past? Does it create a clear process with clear responsibilities? Will there be someone whose official job is handling the organizational tasks?"
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.14965985714286,
      "arousal": 55.928085571428575,
      "dominance": 63.070942571428574,
      "text": "My two cents as someone who’s not a contributor to anything in the Rust core world, but as the maintainer of a Rust library whose day job is entirely nonprofit work with volunteer leadership:\n\nNot to minimize the difficulty of cultural change, interpersonal conflict, etc. but the “technology” of how to do this stuff is not that hard. Look to any smallish nonprofit board and you’ll see the practices are pretty straightforward. All sorts of async communication can happen, but binding decisions are made in synchronous meetings with a quorum present, or (in unusual circumstances) by an asynchronous email vote or similar, again requiring a quorum. Meetings are minuted, not verbatim but as a synopsis, by a dedicated clerk or secretary. (This is less important for less formal working groups and very important for decision-making leadership groups). If there’s something sensitive that needs to be discussed and not minuted, the group votes to go into executive session. \n\nIf these (IMO very basic) practices were in place this situation literally couldn’t have happened; or if it did, it would be extremely clear what had gone wrong, in a way it has not been. \n\nAgain, I don’t mean to minimize the cultural and personal shifts that may be necessary in getting from the present to a better system. It’s just that it’s basically a solved problem, so it’s kind of baffling to see the organizational technologies that have existed for centuries simply not being used."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At least they apologized and that took courage."
    },
    {
      "post_title": "On the RustConf keynote | Rust Blog",
      "created_utc": 1685406597.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.97443836363637,
      "arousal": 58.451865727272725,
      "dominance": 64.31663554545455,
      "text": "What I've gotten out of all of this is that Rust is organizationally chaotic behind the scenes. That's true of most volunteer-driven technical projects, but it seems like a lot of money and resources are flowing into the Rust ecosystem, and it's time to get serious about a transparent, formalized, process for making decisions. Private chats on Zulip or whatever aint it.\n\nBut, I don't think everybody should throw themselves under the bus over it; all the resignations and walking away is just going to make it take longer to get those processes in place, probably.\n\nAnd, the people who are less inclined to take responsibility for their own part in this mess (and previous similar messes caused by backroom decision-making and lack of transparency) will be the ones who end up making all the decisions. I'm not suggesting the remaining folks aren't capable or have bad intentions; just that at least a few people with good intentions have felt the need to leave (not just in this brouhaha, but previous ones for some of the same reasons).\n\nAs an outsider, I see a lot of drama around aspects of the project that should be boring. There can be fireworks about technical decisions (within reason), but not about how people are treated."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What CAN'T you do with Rust?"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 70.1814055,
      "arousal": 57.8231295,
      "dominance": 68.367347,
      "text": "Not the things that are hard to do using it. Things that Rust isn't capable of doing."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You cannot write a program which will correctly evaluate whether an arbitrary other program will eventually terminate."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 47.789116,
      "arousal": 66.0997735,
      "dominance": 44.387755,
      "text": "It doesn't have an effect system, so you can't - for example - check at compile time that a function (and all its children) will never panic.\n\nIt doesn't support generators (or async generators).\n\nAs far as I know, it can't compile to CUDA like C++ can. So you can't get top tier performance out of NVIDIA cards for graphics & AI workloads."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't use it as a blanket."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.0408165,
      "arousal": 67.687075,
      "dominance": 52.324263,
      "text": "You cannot really write an efficient interpreter using tail-call or computed-goto dispatch. As long as the [`explicit-tail-calls` RFC](https://github.com/rust-lang/rust/issues/112788) is not accepted and implemented this won't change. Until then you simply have to hope that Rust and LLVM optimize your interpreter dispatch in a sane way which changes with every major LLVM update. I am writing this in pain.\n\n**edit**: There is a Wasm interpreter written in Rust that uses tail-calls, named Stitch. However, it requires LLVM to perform sibling-call optimizations which are not guaranteed and which are only performed when optimizations are enabled. Otherwise it will explode the stack at runtime. This is very fragile and the authors themselves do not recommend to use it in production. As of Rust 1.84, it no longer works with `--opt-level=1`."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.356009,
      "arousal": 59.863946,
      "dominance": 64.965986,
      "text": "Find gainful employment"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.71882075,
      "arousal": 56.32086175,
      "dominance": 63.20861675,
      "text": "Unlike Erlang, the language doesn't help you modify and update your code at *runtime*.\n\n(This capability is sometimes also called *hot swappable* code).\n\nNo, I'm not arguing Rust should, I just wanted to point at a language with very different priorities and approach to resilience.\n\nIt also comes with the overhead of a runtime system, garbage collection and is only capable of \"soft\" realtime whereas Rust could technically handle hard realtime."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A stable ABI, that is have dynamic libraries that you can use in other rust programs forever (you can easily work around it by using a C interface but you loose some of rusts features/ensurances on that boundary)."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Get an entry level job"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "You can not mix loops and match expressions to recreate the Duff's device. Not that you'd ever want to, LLVM will unroll your loops anyway and Duff's device is not faster with modern CPUs (unpredictable branch).\nhttps://en.m.wikipedia.org/wiki/Duff%27s_device\n\n\nRust doesn't have goto statement or computed goto so implementing a direct threaded interpreter or other unorthodox control flow would be difficult.\n\n\nMind you these are archaic programming techniques that don't have much value any more."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't have ergonomic intrusive lists."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can’t use it to dig a hole to bury poop or valuables"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Find a job"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Find a coworker for a code review."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Read a tutorial over the weekend and start coding on Monday. (I dislike golang that I use at work, but credit where it's due)."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Write games for the 6502?"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.698413,
      "arousal": 44.217687,
      "dominance": 63.378685,
      "text": "Decide whether I should start a blueberry farm or apple orchard."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Get a girlfriend"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is turing complete."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.312925,
      "arousal": 65.47619025,
      "dominance": 44.529478499999996,
      "text": "Future + async + stream is a lot of pain. Something that's literally 3 lines in python. 5 lines in golang, barelly more lines in C, ends up in a hell of options and results wrapped in pinned box future try stream with so much generic that you can't understand where the damn logic is coded and eventually you throw that garbage out because it just is unreadable"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Quickly use libraries written in other languages"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I need a pure rust pdf parser"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.29931933333334,
      "arousal": 61.90476166666667,
      "dominance": 52.79667466666666,
      "text": "Introspection is non-existent. Compare to dynamicaly typed languages (like Python), you can't pdb (pry) and do 'dir', 'super'.\n\nAlso, it's almost impossible to do python ducktyping magic (like creating fake modules in pytest for importing without creating files).\n\nThere are momemnts when Rust feels too stiff and tightlipped. Mostly I feel it around tests, where I can't replace some arbitrary object in one module/class with some mock replacement by using `with patch.patch:`."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Code in Rust after getting specifically hired for that skill. \"Most of our code base is in Python.\"\n\nMe: \"Why tf were my 5+ interviews all Rust-centric!?\" 0.o"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Do graphics (I totally don't just suck at it)"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "higher kinded types, recursion, algebraic effects"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't do quantum computing, oh [this](https://github.com/Renmusxd/RustQIP) exists? You can't do nothing then."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GOTO"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hot reloading your program, unless you use an embedded scripting language."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It can’t do dependent typing"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.9342404,
      "arousal": 52.01814040000001,
      "dominance": 59.7732426,
      "text": "Yeah, you CAN in theory do everything in any turing complete language (eg by writing a python interpreter). That said, you cannot do in a straightforward way:\n\n- Data structures like a DOM tree, where children have a back link to parent. (Same: doubly linked list)\n\n- Tasks where OO & polymorphism is useful. Working with ASTs to do procedural macros is horrible, because they try to kind of fake polymorphism, and it doesn’t work, and what would be trivial in other languages is just a mess. (So these are the original rust developers. And they try their best and cannot do it in rust).\n\n- tasks where you have many lists of references to subsets of the same mutable objects (without losing sanity).\n\n- exception handling\n\n- generators\n\n- compile just one source files\n\n- transparently run your program on GPU if available (like Mojo, Taichi, Numba)\n\n- refactor functions wherever you want (eg you cannot just move the code that deals with a variant of an enum into a function, as you cannot pass a variant as a parameter)\n\n- do higher order function stuff like in haskell\n\n- introspection\n\n- not getting pwned by supply chain attacks"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "It'll never love you back"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 64.512472,
      "dominance": 63.492063,
      "text": "it can’t eat you"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.0839,
      "arousal": 73.582766,
      "dominance": 75.170068,
      "text": "make me happy, well to be fair, nothing probably can, but Rust can definitely try"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Dom operations. Still need JS for that"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GUI, apparently. This is a major source of frustration for me and a road block for universally recommending Rust. And please don't recommend web or immediate-mode GUIs. I'm talking about Qt-style libraries."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.9863945,
      "arousal": 70.18140600000001,
      "dominance": 75.11337850000001,
      "text": "make people love you"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You cannot rewrite Perl 6 with Rust."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.1247165,
      "arousal": 52.891156499999994,
      "dominance": 68.764172,
      "text": "Write Rust for every architecture and part. C is king here."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You cannot use it as a perpetual energy generator."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.426304,
      "arousal": 68.253968,
      "dominance": 64.852608,
      "text": "Bring dinosaurs to life."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Be sane."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.283447,
      "arousal": 60.31746,
      "dominance": 71.768707,
      "text": "Have relations with a woman"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't do reflection means no complete mocking"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Compile time floating point math. For some reason. "
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.93877549999999,
      "arousal": 59.807256499999994,
      "dominance": 68.027211,
      "text": "Personally I can't to do bots with it, it's too hard :(  \nMaybe it's a good thing. I'm new to Rust, so maybe after more experience it will be possible for me, but it's anyway little bit scary in point of base for just a little bot."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.8163265,
      "arousal": 70.578231,
      "dominance": 62.41496600000001,
      "text": "Easily hire juniors from a very big talent pool (like it is possible with languages like TS and Python)"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There's lots of things I can't do with Rust 😄"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interop with cpp abstract classes."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I can’t use railway oriented programming "
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Threading. I mean I hear it can be done, but I can't lol"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.088435,
      "arousal": 52.494331,
      "dominance": 65.419501,
      "text": "Build reliable vehicle frames"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Get a job."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You can't use Zig inside Rust."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.6077095,
      "arousal": 52.6077095,
      "dominance": 61.904762000000005,
      "text": "Traditional Class inheritance  \nAccess raw memory in safe code  \nNo concept of null pointers  \nUninitialized variables  \nTrue variadic functions"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Inherit attributes from a base class"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "FrontEnd stuff like Reactjs still need ecosystem"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Code a React app 😎"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust cannot act like Squirrel! \n\nTo some extent at least…."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "Safe doubly linked list without Rc/Arc"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Trait specialization https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "AFAIK you cannot write a 16-bit DOS or Windows application in Rust."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.9365081,
      "arousal": 53.9569161,
      "dominance": 67.4376417,
      "text": "Make a struct where one field refers to another. A very, very common (and useful) pattern in other programing languages, but it is not allowed in Rust. For some good reasons, mind you, but it would be nice if there was a safe, sound, idiomatic mechanism.\n\nAnd yes, I know many of you say \"redesign your code to not need it\", but one does not always own one's code, especially in Rust, where even the simplest programs end up having 1,000,000 crate dependencies. It's easy to come up with use cases for which there is simply no workaround.\n\nThere are some pretty good community solutions! I like [self_cell](https://docs.rs/self_cell/latest/self_cell/) a lot, but it doesn't support async. [Ouroboros](https://docs.rs/ouroboros/latest/ouroboros/) does, but it feels like overkill. And new crates pop up all the time, with new ways of thinking about this challenging problem.\n\nBut, come on. We need a standard, idiomatic way to do this very, very common thing in Rust."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.133787,
      "arousal": 40.249433,
      "dominance": 54.875283,
      "text": "One interesting problem rust has with lacking null pointers is the workarounds required to make certain old school emulators. Had a long week, otherwise I'd look for the source, but I was reading all about how emulating the bus system on the NES was a particular challenge to overcome due to the borrow checker and pointer rules in Rust"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.115646,
      "arousal": 75.85034,
      "dominance": 66.099773,
      "text": "we did not found that any crate allowed to stream grpc (e.g. Google Speech API) via a 3rd party http proxy"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Refactor quickly?"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.85034,
      "arousal": 56.00907,
      "dominance": 65.759637,
      "text": "Pasta"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.6213155,
      "arousal": 48.129251999999994,
      "dominance": 58.3900225,
      "text": "You can't determine whether a type parameter `T` implements a given trait at compile time, and conditionally invoke a method of that trait on a value of the type if so. i.e. no type-based metaprogramming."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Get bitches"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.179138,
      "arousal": 57.596372,
      "dominance": 73.356009,
      "text": "It isn't capable of making me regret learning it."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "A lot of reflection and generally compile time evaluation stuff C++ can do via templates and/or constexpr"
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "encapsulate side effects as a first class citizen:\n\nEncode constant values with the type system in an ergonomic way.\n\nfunction currying."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check information flow security."
    },
    {
      "post_title": "What CAN'T you do with Rust?",
      "created_utc": 1737093666.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.54195,
      "arousal": 51.0770975,
      "dominance": 60.260771000000005,
      "text": "Have a middle-of-the-road opinion on Rust.\n\nYou are either a zealot or you think Rust is a ton of hot air. No in-between permitted."
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\""
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.5351475,
      "arousal": 62.8117915,
      "dominance": 66.55328800000001,
      "text": "We just released the first episode of 'Rust in Production' season 4 with Victor Ciura, Principal Engineer at Microsoft's Developer Division, about Rust at Microsoft.\nVictor had some great insights about bringing Rust into a company with billions of lines of C++ code:\n\n- They're rewriting security-critical parts of Hyper-V (which underpins Azure) in Rust\n- Contributed 32-bit architecture support to Tock OS for specialized security chips in Surface devices\n- Facing real challenges with build systems, interop with C++, and compliance requirements\n- Victor bluntly states: \"Debugging Rust on Windows will become really better... maybe that's because it really sucks right now\"\n\nHe also mentioned Microsoft internally refers to 2025 as \"the year of Rust at Microsoft\" with efforts to build proper tooling and infrastructure support.\n\nI love his perspective on the C++ and Rust communities: \"In order for Rust to succeed, C++ does not mean it has to die... let's spend more time on improving these bridges.\""
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Would love it if this means that Rust will gain first-class support in Visual Studio proper, especially integration with its debugging tools.  "
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Speaking of Rust in Azure, we just announced [the public preview of some new VM SKUs](https://techcommunity.microsoft.com/blog/azureconfidentialcomputingblog/announcing-preview-for-the-next-generation-of-azure-intel%C2%AE-tdx-confidential-vms/4404625), which run on [OpenHCL](https://github.com/microsoft/openvmm)!"
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 72.44898,
      "dominance": 68.253968,
      "text": "I binged this podcast over the last couple of weeks, just great stuff!"
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "And I am here trying to go through rustlings practices lol"
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The Azure SDK for Rust is virtually non-existent. It has alpha support for like ... maybe one or two services?"
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.6077095,
      "arousal": 52.6077095,
      "dominance": 61.904762000000005,
      "text": "Here's my thing with this...Isnt it unsafe to rewrite large sections of largely stable and battle-tested codebases in a totally unrelated language? It seems to me like you're much more likely to introduce new bugs in the sweeping changes to the code that you would need to make than you would patch by switching to a memory-safe language.\n\nI'd honestly much rather have companies write NEW stuff with Rust, and have them interoperate at the linker level, than to rewrite their existing infrastructure in Rust. The rewrite just seems incredibly likely to introduce instability in the code from just the sheer amount of surface area that it touches."
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If they're looking for a Rust dev, I'm here and available."
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "On windows..gdb is the best debugger I found for rust. All types seem to work. Lldb is just a pointer mess...the funniest thing is last time I checked, for macos, the gdb debugger wasnt yet fixed for apple silicon or something."
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Typescript should’ve been rewritted in Rust instead of Go, even Microsoft knows Rust is the way"
    },
    {
      "post_title": "Rust in Production: Microsoft rewriting Hyper-V components in Rust; calls 2025 \"the year of Rust at Microsoft\"",
      "created_utc": 1744912416.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.941043,
      "arousal": 60.94104299999999,
      "dominance": 58.8435375,
      "text": "Personally i like Rust, but M$ suck... Their systems are broken, security in Azure is bad they are like 6y behind (If you'll check AWS or Okta in comparison).\n\nTo be honest i think it's just wasting resources instead of getting better."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "What IDE for Rust do you choose?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 79.8752835,
      "arousal": 61.5079365,
      "dominance": 65.3061225,
      "text": "I used vscode + rust-analyzer for a year, everything went well, but its performance is not good enough for me. Then I have tried RustRover for a while, it is a memory monster.\n\nIs there any faster or lighter IDE for Rust?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use rust-analyzer with neovim."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed has been great so far."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover, when I have the choice."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rustrover works fine"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I actually stopped using Rust Analyzer because it takes such a long time to first check for things and then second, it takes such a long time to build on Tauri. If Rust Analyzer is on, it essentially rebuilds a bunch of different packages and if Rust Analyzer is off, then it only builds my package.\n\nIf anybody knows the solution for that, please let me know.\n\nBut I've been just going without any LSP tools and just compiling after I've written a bunch of code."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover. Anything JetBrains is amazing"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "There is also [Lapce](https://github.com/lapce/lapce) if you want a more vscode like editor."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "eMacs."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "I have left VSCode, since Jetbrains released free version of Webstorm and RustRover.\n\nI use Zed and RustRover for Rust though. Both are cool, much better than VSCode. FYI, I use Ubuntu, so experience is much smoother than Windows."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.48601633333334,
      "arousal": 49.659864,
      "dominance": 57.18064999999999,
      "text": "For all the fancy stuff, your options are essentially RustRover or rust-analyzer.\n\n\nI'm guessing your performance issues were due to rust-analyzer; it's an amazing tool, but Rust is inherently slow to compile and check, and it does tend to use a lot of memory.\n\n\n\nSo, I would expect you'd see similar performance with any other editor."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "GNU Emacs without rust-analyzer. Just pure compile-driven development (compilation mode is the GOAT) and own package to search docs (that parses HTML and builds Org files from it)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VSCode is great"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "VSCodium works pretty well."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "I use Emacs. It's not really fast or light though. It's good enough, but if you need the performance neovim is the way to go"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.28117950000001,
      "arousal": 64.9659865,
      "dominance": 67.517007,
      "text": "> Is there any faster or lighter IDE for Rust?\n\nSublime Text is pretty good in this regard."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If you have linux or mac, try Zed. Its built using Rust and is super fast"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I really like using Helix. It has special hotkeys that do things other IDEs don't have. Very helpful"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.1519275,
      "arousal": 48.866213,
      "dominance": 60.8843535,
      "text": "Custom helix fork."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.4081635,
      "arousal": 54.053288249999994,
      "dominance": 63.12358275,
      "text": "I love rustrover on my Mac Studio. It’s slightly slower on my m1 Mac book pro but still bangin. Maybe time to upgrade your machine?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "vscode. going to try out cursor/windsurf."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust rover, sometimes vscode.  \nVscode (rust analyzer) is better with some attributes. Rust rover doesn't seem to think rustfmt exists and so"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.2653065,
      "arousal": 52.72108849999999,
      "dominance": 54.5918365,
      "text": "rustrover is just perfect, everything out-of-the-box, no need spend time configuring things, unlike others like (neo)vim or vscode, it just works.\n\nfaster than others, for sure. i have a mediocre PC. maybe you have some weird custom configuration for the IDE?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim for every programming language"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "vscode, but i've been meaning to try zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use just sublime without LSP or anything"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.04837500000001,
      "arousal": 61.22449,
      "dominance": 68.97203333333333,
      "text": "If you are on linux or macos, zed is a pretty good option."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have you tried Zed IDE?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed with VSCode for debugging while Zed gets its own debugging implementation."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Gnome text editor"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sublime text with rust-analyzer and rust-enhanced is fast and featureful"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Clion +  Rust plugin. Their refactor, cargo feature toggle and debugger are so good."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix!"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.15117166666667,
      "arousal": 61.90476183333333,
      "dominance": 66.0241875,
      "text": "Zed.\n\n(Helix is excellent if you want to stay in the terminal.  But Helix can't quite keep up with rate of progress of something like Zed -- even though what is is is amazing.  Also, while minimally  relevant for Rust rn, Zed allows you to use regular code files as computational notebooks.  As somoeone who also uses Python to do data analysis sometimes that's huge -- and an achilles heel of terminal workflows (I used to be a big nvim & helix user) -- they don't play with general images nicely so plotting and data tend to be quite difficult.  Helix also doesn't have much integration with LLMs.  There's enough boilerplate and syntax in the world that having nice LLM integration is a meaningful get and Zed is very good at that.\n\nZed is also, to my surprise, very good for collaboration.)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "(doom) Emacs works just great ❤️"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust Rover (Windows OS)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix with Zellij"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Performance? Can you be more specific?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Vscode with Vim bindings"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.0,
      "arousal": 51.8820862,
      "dominance": 61.9501132,
      "text": "Been trying out rustrover for a bit and some of the 'apply suggestion' stuff is nice, but it has tonnes of junk/noise features that just get in the way, and crappy predictions that make it clear they don't test iterator chains much, and its not obvious how to turn all of the annoying hints and error guessing off which can be super aggravating when it decides to start spinning hints up on top of something I'm reading if I'm in a rush (also the vim plugin still has a lot of bugs too)\n\nI like idea from them but this is much more of an early beta phase feeling to it and like they dont have much of a variety of internal DX testing at the moment\n\nLikely back to either helix or nvim soon but thought I'd give it a shot since they claimed to be in a more 1.0-like state"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.655329,
      "arousal": 38.77551,
      "dominance": 57.596372,
      "text": "Vscode. The only thing that’s keep me away from Helix is lack of proper tree like file explorer. Working on Helix with workspaces with multiple elements is challenging for me. For small projects - Helix."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "RustRover, it’s just delightful. You can always play around with the config/vm options for performance if you want to, but really, any development machine shouldn’t have any issue with an IDE, and if your company is giving you a machine that struggles with it then it’s probably worth raising a fuss about it or leaving…"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Kate."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sublime text works quite well!"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I would chose zed it’s written in rust and it’s fast and fresh it’s available on linux and mac!"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust Rover from Jetbrain"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim, can debug too with DAP."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 51.473923,
      "dominance": 64.285714,
      "text": "I use the same vscode + rust-analyzer, but disable project auto-discovery in favor of manually specifying projects I'm currently working on in settings, \\` rust-analyzer.linkedProjects: \\[\\]\\`"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am using neovim for writing rust and vs code for debugging"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "Code composer with rust plugins. It's great and 100% free."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "I use rustrover. It's nice, I haven't tried much else"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover, but that's because I have a students license. If I had to pay, I would switch to vim+plugins instead."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nvim or rust-rover"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed. Its so fast and is also written in Rust"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rust rover, I like the integrated tests feature"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.8480725,
      "arousal": 66.7800455,
      "dominance": 52.3809525,
      "text": "vscode with rust-analyzer\n\n\nmy guilty pleasure "
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.14890433333333,
      "arousal": 50.49130766666667,
      "dominance": 55.21541933333333,
      "text": "Tried out zed on Windows.  Had to switch to a dark theme to properly see the terminal output in Powershell.  The theme kept switching back randomly.  I went back to VSCode, and I'll give zed a little more time to cook."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Vscode+devcontainer"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.8798185,
      "arousal": 67.403628,
      "dominance": 59.5238095,
      "text": "I've been using IDEA for like 10 years now so I just keep using it, Java to Kotlin to Rust.\n\nI used VS Code a while back for some embedded stuff, it confused me and I disliked it so I've never even tried rust-analyzer."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim + rustaceanvim + code companion. Beats vscode and clion. I occasionally use Zed."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.557823,
      "arousal": 38.435374,
      "dominance": 49.319728,
      "text": "Neovim and rustrover. Should just use vim motions in rustrover but this works for me so why slow down for 2 minutes"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.498866,
      "arousal": 50.793651,
      "dominance": 79.365079,
      "text": "rust-analyzer + nvim with optional rustaceanvim plugin for some goodies(easy debugging and etc.)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.28117950000001,
      "arousal": 64.9659865,
      "dominance": 67.517007,
      "text": "rustRover is getting pretty good"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.9750565,
      "arousal": 58.219955,
      "dominance": 66.950113,
      "text": "I have neve tried VScode myself, but I have noted that some people have experienced some tool as sluggish while others have felt it was quite responsive. Personally I use emacs and rust-analyzer and it works just fine."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VSCode with rust analyzer for me. On an m1 with 16gb it runs fine, I have multiple rust workspaces open. VS Code just has too many features with its extensions"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.283447,
      "arousal": 74.489796,
      "dominance": 74.489796,
      "text": "I use RustRover primarily, but am trying to start using Zed. I use Helix for quick edit jobs."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.936508,
      "arousal": 43.310658,
      "dominance": 53.854875,
      "text": "I used Helix for the better part of a year, and it wasn't bad at all.\n\nI would continue to use it if Rust were the only language I programmed in, or if the main repo I have to work in for my job were a bit less wonky. As-is, I have found neovim much more consistent in terms of getting it to work with C++. I don't currently write much Rust *for work* but I am not willing to use different editors for work/personal stuff."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "vim"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use Zed (built in Rust). It’s been fantastic."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Using Zed and it is great"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "cursor + rust analyser"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.2743765,
      "arousal": 69.8979595,
      "dominance": 52.6077095,
      "text": "You didn’t say what platform. But Zed is written in Rust, lightning fast, and is available for macOS and Linux. It’s got first class Rust support, and feels like a very lightweight editor. It’s got some interesting “AI” support which I don’t use, but also some interesting, thoughtful extensibility."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sublime Text or Zed?"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Zed or Neovim are both good options."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15872999999999,
      "arousal": 57.3696145,
      "dominance": 69.1043085,
      "text": "RustRover and IntelliJ Idea with Rust plugin. The latter is useful since I write Flutter app with Rust backend."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RustRover from JetBrains, or VSCode with plugins."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "For personal use, I always go with Rust Rover. The tooling is unmatched. \n\nWhen developing at work I use VSCode. But I don't like it nearly as much. Maybe it's the extension I'm using, but the debugger is a horrible experience.\n\nI also tried neovim, but to me the experience was the same as VSCode."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "zed is built in rust and very good for rust development.\nI guess you need rust-analyzer there as well but it doesn’t suck on performance"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 95.011338,
      "arousal": 87.528345,
      "dominance": 83.786848,
      "text": "vscode, notepad, mobile phone, android tablet for the win!\nAnything that isn't a service forcing paywalls"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.1927435,
      "arousal": 62.868481,
      "dominance": 56.802721000000005,
      "text": "Zed or Helix.  \n  \nHelix is amazing, but Zed is already fulfilling a lot of things Helix likely never will be able to.    \nAlmost everything Helix does is just better than the same anywhere else.  But, ultimately, it's a small terminal app and will always be rather minimalist.  (And even though it's a better vim-like than vim, the 'almost identical' syntax can still throw you off when switching between tools.  Or can for me.)  \n  \n(I used vim for a couple years, atom before it, and had a period trying vscode seriously \\[and as a fall back when I needed data notebooks.)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "emacs"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Nvim"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "For 10 years I used Geany as my primary text editor. But it didn't support LSPs, so I started using VScode and Lapce. Lapce went through some UI changes that at least on linux, render it near-unusable (in my experience)\n\nRecently, a developer has created an LSP plug-in for Geany. I've been using that for the past 2 weeks, and while it doesn't support all the fancy bells and whistles yet, it's nice to be using my Olde text editor again..\n\nDisclaimer: geany and the plug in have to be built from source because it's so new, and requires new features in the editor to even support the plugin. It might not be ready for most folks right now, but probably geany's next release."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "I use Rust Rover, and in as much as it is free these days, I don’t really get why anyone would use anything else. The debugger is a bit wonky, but it’s way better than vs code’s. Otherwise it’s a mature, full fledged, IDE designed for Rust."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Helix! 😂"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 49.092971,
      "arousal": 64.965986,
      "dominance": 55.328798,
      "text": "I haven’t found perfect one - tried lapce, helix, neovim. Currently on vs code (continue.dev extension) and sublime text. Try sublime text, may be it will hit your vibe."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VSCode looks like a traditional choice."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use rust rover 😢"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "vscode unfortunately has so many bells and whistles that make it not all that slim. i like doom emacs + rust-analyzer, seems to work much better for some reason."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "VS code + Rust analyser"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "No one mentioning rust rover? Been using it for a year, no reason to go elsewhere."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.727891,
      "arousal": 54.30839,
      "dominance": 54.195011,
      "text": "Is it really an IDE performance issue ? I mean VSCode is not known to be fast (especially if you have lots of extensions) but it’s usually rust-analyzer which is a bottle neck. Try it with neovim and see for yourself."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "neovim + rust analyzer"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "AstroNvim w/ rust analyzer"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.89342400000001,
      "arousal": 53.1746035,
      "dominance": 62.1882085,
      "text": "I used vscode, but every single time I opened 2 mid projects simultaneously, it froze my laptop to the point the only option would be reboot\n\nI switched to neovim and not looking back"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.6462585,
      "arousal": 51.473923,
      "dominance": 59.126984,
      "text": "I use Emacs. LSP and Rust compiler are slow regardless of IDE but you can improve performance by only using the features you need when you need them and setting cargo profiles/project config."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.977324,
      "arousal": 44.444444,
      "dominance": 59.52381,
      "text": "I just use vim. I have several terminals open. One handles  building so I can check my errors, one handles code I am writing, and another handles code I am referencing.\n\nThen I have a web browser open for looking things up and dealing with the git repo and tickets. I have a two monitor setup for now, looking to go to three later this year."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.46031766666667,
      "arousal": 49.924414333333324,
      "dominance": 65.68405133333333,
      "text": "all of code editor that includes neovim uses rust analyzer , which supports vscode firstclass. rust rover fork it but cant say they done enough than the community.  if you really want to speed up things stop using rust analyzer and just use treesitter for rust. but i doubt that you will enjoy it as you lose all the good stuff like intellisense etc. I suggest you buy better machine at least macbook pro m1 14 inch with 16 gb ram that is on sale right now."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.285714,
      "arousal": 53.968254,
      "dominance": 62.01814099999999,
      "text": "all code editor uses rust analyzer to speed up things you can configure rust analyzer and set it on settings.json rust-analyzer. cargo.targetDir to true \nit would build a separate target folder for rust analyzer which would speed up things as it has separate target folder avoiding rebuilding again if you pass in other params when running commands. also if you want to streamline your rust workflow better use cargo-runner which is a extension i built on top of rust analyzer and cargo to help you stream line your workflow in rust.  [Cargo Runner Vs code plugin:](https://github.com/codeitlikemiley/cargo-runner)"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "VSCode, rust analyzer, lldb for debugging, toml extension and crates extension for managing the cargo.toml file, and you are good to go (actually everyone)."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "zellij + helix (rust analyzer and helix-gpt) + gitui + bugstalker"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.52003016666667,
      "arousal": 53.09901716666667,
      "dominance": 66.26984116666667,
      "text": "RustRover provides a fluent and consistent experience for me. I use different languages so consistent key map is a key feature. The version control system and database in RustRover are very powerful. VS Code does these bad. Plus I don't like the taste of vscode.\n\nI would buy a very powerful machine to use RustRover."
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Neovim Is All You Need"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I use rust-analyzer with Zed"
    },
    {
      "post_title": "What IDE for Rust do you choose?",
      "created_utc": 1734926261.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703000000005,
      "arousal": 48.526077,
      "dominance": 56.0090705,
      "text": "I am a Windows user and I use alacritty terminal with neovim (LazyVim). VS code with rust analyzer takes more than 1 GB ram. I also used zed by building from its source code but sometimes it fuck up its lsp and I am currently not using it. Rust Rover is heavy and takes time to load so I didn't like it much.\n\nUsing neovim on native windows works fine and there are no changes in the config to install and use LazyVim other than the required programs/dependecies needed which is shown in their site."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust Trademark Policy Feedback Form"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.952381,
      "arousal": 48.29932,
      "dominance": 67.23356,
      "text": "Since we have members of the foundation reading this thread and gathering feedback, I'll be removing throwaway/noise comments here in order to make the useful comments more visible and easier to collect and engage with. Please continue to post your comments both here and in the form linked above.\n\nEDIT: Please also see [A Note on the Trademark Policy Draft](https://blog.rust-lang.org/inside-rust/2023/04/12/trademark-policy-draft-feedback.html) (discussion thread [here](https://www.reddit.com/r/rust/comments/12jz5v8/a_note_on_the_trademark_policy_draft_inside_rust/))."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.648526,
      "arousal": 58.86621316,
      "dominance": 66.33560096000001,
      "text": "EDIT: Thanks for the gold. I humbly request that people don't award this post further; I don't think it's a good look to be cheering on criticism of a policy proposal like this.\n\nI'm replicating my response in its entirety here. TL;DR up front: this document has specific problems, but also one big problem, which is that while I like and trust many individuals within the foundation, I do not trust the Foundation as an entity, because those people can be replaced. The Foundation cannot have this level of power, and it's concerning that you're seeking it.\n\nSpecific criticisms first.\n\n- The idea of referring to \"the Dungeness compiler for Rust\" makes about as much sense as the \"GNU Compiler for C\" or the \"PyPy compiler for Python\". PyPy is a Python compiler, GCC is a C compiler, and gcc-rs is a Rust compiler, not a \"compiler for Rust\". This requirement is frivolous and does not meaningfully improve clarity.\n\n- 4.3.1 appears to prohibit library names such as \"<format>-rust\", \"rust-<existing library>\", and \"<operation>-rust\". This strikes me as, among other things, completely incongruous with reality; off the top of my head, this would impose a serious burden on intellij-rust, rust-rocksdb, Steven Fackler's openssl-rust and rust-postgres, rust-libp2p, Stepan Koltsov's rust-protobuf, and probably dozens of other serious and well-respected projects, not to mention hundreds of smaller projects.\n\n- 4.3.1 also prohibits the normal naming scheme of cargo subcommands, which is transparently ridiculous. Others have mentioned this so I won't go into detail.\n\n- The prohibition on using \"rust\" or \"cargo\" as part of a domain name is ridiculous for a similar reason, as others have brought up in the Reddit thread. Many projects already do this. It also seems trivially easy to circumvent (e.g., by making the site nominally Puccinia- or logistics-themed), so I'm not sure why you would include such an obviously controversial statement.\n\nThere are other specific problems, but I don't want to quibble. What I do want to say is this: the Rust Foundation *must* be, first and foremost, oriented towards the Rust community. I fail to see how the majority of these rules do anything other than place restrictions on normal community activity. As just one example, many Mastodon servers have a :rust: custom emoji, which would violate these guidelines as many are recolored. How does prohibiting those advance community interests?\n\nThe Foundation is a threat to the Rust community as much as a boon. These kind of powers must be as limited as possible for the Foundation to achieve its goals, because frankly, the Foundation's entire staff could be replaced in five years, and I have no reason to trust that the people who would take over would respect your benign intent.\n\nThank you for presenting this to the community before committing to it. I sincerely hope that you do not choose to move forward without taking the community's concerns into account in a material and significant way. Doing so would demonstrate that you are merely paying lip service to the idea of community engagement, as we feared due to the makeup of the Foundation's donors."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.44274375,
      "arousal": 56.505102,
      "dominance": 64.44161,
      "text": "This seems very restrictive. \n> Can I use a modified version of the logo on social media?\n\n> In general, we prohibit the modification of the Rust logo for any purpose, except to scale it. This includes distortion, transparency, color-changes affiliated with for-profit brands or political ideologies. \n\n>  On the other hand, if you would like to change the colors of the Rust logo to communicate allegiance with a community movement, we simply ask that you run the proposed logo change by us by emailing the file to contact@rustfoundation.org with a description of the changes you’re proposing. In the future, we intend to publish new versions of the Rust logo to accord with community movements (ex: LGBTQIA+ Pride Month, Black Lives Matter, etc.). \n\nConsidering that the official logo is completely black (https://www.rust-lang.org//static/images/rust-logo-blk.svg) the logo of this subreddit is already violating the rules."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.45633178787879,
      "arousal": 63.10039148484849,
      "dominance": 54.12286151515151,
      "text": "As a point of comparison:\n\n* [https://www.oracle.com/legal/trademarks.html](https://www.oracle.com/legal/trademarks.html)\n* [https://www.python.org/psf/trademarks/](https://www.python.org/psf/trademarks/)\n* [https://rubyonrails.org/trademarks](https://rubyonrails.org/trademarks)\n* [https://isocpp.org/home/terms-of-use](https://isocpp.org/home/terms-of-use)\n\nEven *Oracle*'s trademark notice is simpler and less hair-splitting than this proposed policy.  I'd personally recommend following the footsteps of the PSF's approach, which has a much more reasonable approach to what is allowed vs. not allowed in terms of including the language name in other work:\n\n>The word \"Python\"  \n>  \n>Use of the word \"Python\" in the names of freely distributed products like IronPython, wxPython, Python Extensions, etc. -- Allowed when referring to use with or suitability for the Python programming language. For commercial products, contact the PSF for permission.  \n>  \n>Use of the word \"Python\" in company names -- Allowed only by prior written permission from the PSF.  \n>  \n>Use of the word \"Python\" when redistributing the Python programming language as part of a freely distributed application -- Allowed. If the standard version of the Python programming language is modified, this should be clearly indicated. For commercial distributions, contact the PSF for permission if your use is not covered by the nominative use rules described in the section \"Uses that Never Require Approval\" above.  \n>  \n>Use of the word \"Python\" in the names of user groups and conferences that are free to join or attend (Ex., \"Dallas Python Users Group\") -- Allowed if for the Python programming language. Other uses require permission.  \n>  \n>Use of the word \"Python\" in the name of books or publications like \"Python Journal\" and \"Python Cookbook\" -- Allowed if for the Python programming language.  \n>  \n>Use of the word \"Python\" on websites, brochures, documentation, and product packaging -- Allowed if referring to the Python programming language. Please follow the rules above about the use of the circle-R symbol.  \n>  \n>Use of the word \"Python\" in advertisements -- Allowed in most cases by the nominative use rules described in the section \"Uses that Never Require Approval\" above. Other uses in ads only with prior permission.  \n>  \n>Use of the word \"Python\" in email and informally -- Allowed without the circle-R symbol.  \n>  \n>Use of the word \"Python\" in academic papers, theses, and books -- Allowed without the circle-R symbol. Books should include the symbol.  \n>  \n>Use of the word \"Python\" in another trademark -- Not allowed without prior written permission from the PSF, except as described above."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "i am genuinely curious how policy that prohibits cargo subcommands on grounds of trademark infringement slipped through after 7 months of \"collaborative development\"."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.01058233333333,
      "arousal": 71.39077833333333,
      "dominance": 69.274376,
      "text": "Even though there is a statement at the start:\n\n> The Rust Foundation has no desire to engage in petty policing or frivolous lawsuits\n\nImo that is an empty promise. One person's frivility is another's just enforcement. And what if the desire changes.\n\nThe trademark policy has no mechanism by which it is amended or how announcements of how the policy is amended are to be done before changes. Not is there a covenant in the policy to restrict what the Rust foundation could do in the future."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.680272,
      "arousal": 59.750567000000004,
      "dominance": 65.9863945,
      "text": "The Rust Brasil logo is a modified version for the brazilian open community, with our flag colors, and it's been like that since 2015.\n\nWe also have smaller communities for different states, almost all with a modified and creative modification to ressemble the state traits.\n\nThe trademark policy should not attack these, those are public groups for people to help each other."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 56.87830700000001,
      "arousal": 43.80196533333333,
      "dominance": 55.25321233333333,
      "text": "> We will likely consider using the Marks as part of a domain name or subdomain an infringement of our Marks.\n\nFor \"Rust\" this is a bit restrictive but probably fine; for \"Cargo\" it seems like a real problem.\n\nIt looks like, for example, a cargo subcommand project couldn't make a website for documentation called cargo-foo.rs, or even cargo-foo.github.io.\n\nThe \"Cargo\" mark is all but ignored in the plain English summary and FAQ. The document's suggestion that crate names use \\*-rs instead of rust-\\* more or less reflects current practice, but there's absolute no suggestion about what cargo-\\* projects are supposed to do."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.9314059375,
      "arousal": 49.9291384375,
      "dominance": 59.07029475,
      "text": "> Can I use the word “Rust” in the name of one of my crates?\n>\n> The Project would like the word Rust in a crate name to imply ownership by the Project. You should generally use ‘-rs’ instead in this situation. Please see “Use of the marks in toolchains or other software for use with Rust” section.\n\nFor crate names specifically (as distinct from projects, where it *might* be reasonable), this contravenes [explicit longstanding policy](https://rust-lang.github.io/api-guidelines/naming.html) and common sense:\n\n> Crate names should not use `-rs` or `-rust` as a suffix or prefix. Every crate is Rust! It serves no purpose to remind users of this constantly.\n\n----\n\n> You can use the Rust name in book and article titles, and the Logo in illustrations within the work, as long as the use does not suggest that the Rust Foundation has published, endorsed, or agrees with your work. We require this to be stated up front (i.e. before the first paragraph or page of your work) in a clear and dedicated space. You may use the following language or a close variation of it:\n>\n> > Disclosure: The material in this {book/paper/blog/article} has not been reviewed, endorsed, or approved of by the Rust Foundation. For more information on the Rust Foundation Trademark Policy, click here. \n\nThis requirement is preposterous and plain nonsense. *No one* (that is, exactly zero people in the entire world) will take simple mention of “Rust” to imply any connection with the Rust Foundation. And requiring a link to the *trademark policy* of all things takes it beyond unreasonable to utterly absurd. All up, I find it hard to even contemplate good faith on the part of the lawyer that drafted or suggested drafting it. It’s an onerous requirement in most situations, with very obviously no legal support."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.031746,
      "arousal": 54.69387759999999,
      "dominance": 61.36054420000001,
      "text": "Sad to see so much restrictions under community driven development (i thought that was idea behind rust) but yea i hope it must be done like this because otherwise it just goes in wrong direction. (As I'm not legal expert i take into consideration that maybe I don't see enough to understand but explanation behind this doesn't make me feel safe)."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "If I understood it correctly, this policy would mean that if I would be a book author, I'd be able to write e.g. a \"Rust in Action\", but I'm not allowed to use [rust-in-action.com](https://rust-in-action.com).\n\nI would also be able to run \"Rust Linz\", but I would not be able to use [rust-linz.at](https://rust-linz.at), nor would I be able to create a Rust Linz logo based on the original."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.28506642857143,
      "arousal": 64.10754771428572,
      "dominance": 57.80693214285714,
      "text": "I’m sure this is not in bad faith and not actually intended to go after people in the community, but it’s been a communications disaster. It’s certainly a problem that the *examples* (writing a book or article and needing to explicitly state that the Rust Foundation has not reviewed it, restricting registering domain names or crates with rust in them, restrictions on use of the name in meetups or user groups) all sound like they’re targeting members of the Rust community, not bad-faith external actors trying to profit off it. \n\nLike I know that if I write an article and use “Rust” in the title nobody’s *actually* coming after me with lawyers if I don’t state that the Foundation hasn’t endorsed it up front, but… come on, this is just a terrible way to interact with people who are most likely the most active and dedicated members of the community (library maintainers, educators, and organizers).\n\nEdit: yes I’ve submitted this feedback via the form already."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.133030999999995,
      "arousal": 62.414966,
      "dominance": 59.18367333333333,
      "text": "Speaking as a member of both [rust-random](https://github.com/rust-random) and [RustCrypto](https://github.com/RustCrypto), this policy looks... to put it mildly, really restrictive and disruptive. There are other community-driven projects which use \"Rust\" as part of their name and modifications of the Rust logo. I understand the desire to clearly distinguish \"official\" projects from community-driven ones, but I believe that changing rules so late in the game will cause mostly harm.\n\nAs for the \"community movement\" clauses, personally I strongly dislike continuous and unnecessary US-centric politicization of the Rust project by its leadership. I am absolutely fine with whatever political views expressed by the Rust leadership in their private channels, but using Rust channels (logo, release notes, official twitter, etc.) is an abuse of authority in my opinion."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.188209,
      "arousal": 83.333333,
      "dominance": 73.582766,
      "text": "The trademark policy seems to be in direct contradiction with the Rust Foundation’s desire to grow the language through community engagement. Also this seems to set the stage for the Rust Foundation to start taking legal actions against members of the community who have been using the Rust logo. I think they need to differentiate between corporations that would use the logo without permission as a form of marketing, and u/NikosBiggestFans selling Rust merch on Etsy."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.33333330000001,
      "arousal": 46.6326532,
      "dominance": 58.07256219999999,
      "text": "I run [RustJobs.dev](https://RustJobs.dev), a job board that has helped hundreds of developers secure Rust-related employment opportunities.\n\nFeedback about our website has been overwhelmingly positive and we get a lot of encouragement from fellow Rust developers.\n\nI don't think our website design or marketing material causes any confusion as to whether we are affiliated with the Rust foundation.\n\nUnfortunately the proposed prohibition on using \"Rust\" as part of our domain name seems overly restrictive and raises a lot of concerns about the future of our site.  I think the \"RustJobs\" domain name is a straightforward and accurate representation of the value the website provides.\n\nIs it really going to benefit the community if Rust-related websites are not allowed to use Rust as part of their domain names?\n\nI genuinely hope these proposed guidelines will be revisited. It would be a pity if existing projects that benefit the community would disappear due to the restrictiveness of these new guidelines."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.2494332,
      "arousal": 59.0929706,
      "dominance": 61.8594102,
      "text": "[what i submitted]\n\ni don't like what this draft is trying to achieve. i don't think what is being tried to achieve is healthy for the project and the community.\n\ni understand that there are bad actors that could try to distribute malware under the Rust name or try to supersede the open Rust with a proprietary one.\nThese are legitimate concerns, but no legalese can prevent illicit behaviour, skirting the rules or just ignoring them; because if you're distributing malware, chances are you don't care about trademarks.\nI don't like the idea of preventing sales of products with the rust logo -- what is the point of that? Is the rust foundation planning on opening their own merch store?\nFanart, custom merch, books, websites, conferences or other tangentially related software are all part of the rust community and help proliferate the language. it's word-of-mouth. no one rustacean should have to worry about infringing some trademarks when expressing themselves about the Rust language.\n\nThe way long standing team and community members are surprised of this and the process behind it really makes me doubt in the benevolence of the Foundation and in their ability to help the Rust community at large by enforcing any trademarks.\n\nMy suggestion is to make the Rust trademark and logo public domain. You had your shot and you missed it."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.60846566666666,
      "arousal": 62.97556077777777,
      "dominance": 64.75182666666666,
      "text": "I started learning rust about half a year ago and the experience was amazing.  \nGreat community and great language, this however would be the first time where I have some serious doubts with how the project is going.\n\nAll these restrictions are either vague, or go far beyond what other languages are doing.  \nIt is once again not a question of whether the power will be abused, but when.   \nPeople come and go even in the rust programming community, and especially on a board of directors.  \nThe current people in charge might not abuse the power, but who will guarantee this? And who will guarantee that the next people will also restrict its usage?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 36.621315,
      "arousal": 72.44898,
      "dominance": 59.52381,
      "text": "Given the U.S. bent to the draft, I think it's also important to remind of this quote:\n\n> You [should] not examine legislation in the light of the benefits it will convey if properly administered, but in the light of the wrongs it would do and the harm it would cause if improperly administered\n>\n> -- Lyndon Johnson, former President of the U.S.\n\n...which is in the same vein as the debian-legal \"tentacles of evil\" test for licenses being considered for [DFSG](https://en.wikipedia.org/wiki/Debian_Free_Software_Guidelines#debian-legal_tests_for_DFSG_compliance) compliance. (i.e. How much does this license protect against the copyright holder getting bought out by a corporation determined to make existing users miserable?)"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "It is incredibly important that this draft be amended. The Rust Foundation should not require substantially more regulations for use of the term \"Rust\" than the Python Software Foundation requires for the term \"Python\"."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.12018166666667,
      "arousal": 56.72713533333333,
      "dominance": 61.904761666666666,
      "text": "So, as a rough outline for my own understanding: Additional ecosystem tooling *not* having \"Rust\" in it's name, and always upfront clearly describing itself as an unofficial or non-affiliated something-or-other should be in the clear?\n\nToo be more clear, I'm worried about accidentally running into parts like this:\n\n> You may use the Word Marks, but not the Logos, to truthfully describe the relationship between your software and ours. Our Marks should be used after a verb or preposition that describes the relationship between your software and ours.\n\nwhen for example just putting together a `README.md`. I'm currently working on some Rust tooling that needs to mention the language a lot, potentially.\n\nI guess one could put together a good description once and then use the trademark contact in the link to get \"clearance\", But that seems quite burdening on whoever is behind that email address, even more so if \"use unofficial a lot\" might do the trick just as well."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.79743,
      "arousal": 60.619803499999996,
      "dominance": 64.28571433333333,
      "text": "I have two major concerns:\n\n1. This trademark policy concerns itself with matters that are actually not the concern of a trademark policy. I hate the idea of people carrying weapons, but what has this to do with a trademark policy? Same with the parts about the health regulations and code of conduct. The Rust leadership has and still is misusing Rust and thereby the Rust community to enforce their political opinions. It doesn't matter that some opinions are mine as well (no weapons, code of conduct). It is intrusive and that is not ok.\n2. The drama around the Rust leadership just doesn't stop. It is infuriating. The Rust leadership keeps damaging the reputation of the language and the whole community. This trademark policy is so far off that it tells a lot about the self-conception of the creators. I'm glad this thing gets some traction, e.g. [https://www.youtube.com/watch?v=gutR\\_LNoZw0&t=3s](https://www.youtube.com/watch?v=gutR_LNoZw0&t=3s) , because the ongoing issues with the Rust leadership must be resolved."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.15570666666666,
      "arousal": 56.65154933333333,
      "dominance": 67.00680266666667,
      "text": "idk but it seems too restrictive. Is other programming language trademark policy similar to this? \n\n\nI simply don't like the idea that you can't place the Rust logo without putting a disclaimer on tutorial websites etc... Too much policing is dangerous. And, I think there is a rule for trademarks that they must be actively protected, or a mark can lose its meaning and face cancellation."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.654195,
      "arousal": 63.4920635,
      "dominance": 58.333333,
      "text": "This is the feedback I sent:\n\n>I get that this Rust trademark policy draft wants to protect Rust, but it seems to be doing it in a way that holds back the community. Instead of stopping people from doing anything that \"looks official,\" the policy should focus on what's actually official and keep that from being misused.  \n>  \n>If you're worried about the Rust Foundation being linked to unrelated stuff, why not make a unique logo for it and only have strict rules for that? It makes sense to limit how the Rust Foundation logo or name is used on books, courses, or websites, but doing the same for the Rust language itself doesn't seem right.  \n>  \n>As someone who wants to learn Rust but isn't a developer yet, this draft makes me hesitate. I was drawn to Rust because it's known for being driven by the community and super welcoming. But this draft gives off a different vibe—it makes me scared to create anything about Rust because I don't want to step on anyone's toes."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.74149633333334,
      "arousal": 67.989418,
      "dominance": 59.372638,
      "text": "I applaud the Feedback gathering for the Trademark Policy.   \n\n\nIn it's current form is absolutely a Buzzkiller, the wording in the document is a Witch Hunt that goes after several valuable Rustaceans and Rust projects.   \n\n\nAs other have said here, I imagine the Trademark should not differ too much from the likes of Python Foundation.   \n\n\nTurning the Rust word into \"The word that should not be said out loud\" a-la-Voldemort is insane.   \n\n\nThose heavy restrictions should be for the \"Rust Foundation\" usage, or impersonating by saying \"Official Rust library\".   \n\n\nAnd the Rust Foundation should have a separate logo for it, which could also have all those heavy restrictions of \"at-max you can resize the logo\"."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.968254,
      "arousal": 47.675737,
      "dominance": 55.8390025,
      "text": "Not a lawyer, but isn't the right to adapt (\"remix, transform, and build upon the material for any purpose, even commercially\") the Rust logo already granted by the [CC-BY](https://creativecommons.org/licenses/by/4.0/) license (as stated in [rust-lang/rust-artwork](https://github.com/rust-lang/rust-artwork))?\n\nIn addition to that, the CC-BY license explicitly states that \"the licensor *cannot revoke these freedoms* as long as you follow the license terms\". Doesn't the new policy draft contradict CC-BY?\n\nAlso, not being to use the word \"Rust\" within library names is plainly absurd. No other programming language does this.\n\nEDIT: u/ssokolow's reply below answers this."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.4665235263158,
      "arousal": 59.141902421052635,
      "dominance": 65.26435147368421,
      "text": "Below is an overview of what I submitted in the form. This focuses on the impact of the draft, as well as some flaws. This is how I feel, and I am open to being wrong.\n\n#### Harder to recommend hiring and maintaining Rust projects\n\nSmall and large companies when they make the change to Rust, they regard the hiring pool of developers as a major factor in their decision. Rust may have fewer developers than C++ or C, but the enthusiastic community surrounding the language is an indicator that Rust is here to stay and safe to onboard developers. When the community goes from die hard love, to memes and posts about how bad it's derailing, it's a bad signal to companies, and anyone wanting to take the risks associated with that.\n\n#### It stunts community growth and enthusiasm\n\nThere are countless of creators and enjoyers of the language that spawn new domains, groups, discord channels, and conferences all over the world. The fact that they *could* shut these down is a disaster. It's not that they won't (trust me, bro) shut it down, it's that it's explicitly written that they could. The comparisons with Nintendo are apt: they said they won't, and they did. Shocker. We don't want creators and those who educate about Rust be worried about getting sued because the size of a div. It's pretty absurd.\n\n#### Rust was built on being different, not the same\nLooking at how other languages, and open source projects went about using a restrictive trademark policy simply misses the point. Rust is a community that appealed to it being open and free to learn and create as they wish. Free to make a domain to teach Rust content. Free to host an event without approval. Free to have Rust groups with logos that are indicative of that group. Free to ...create a community.  \n\n#### Impersonating the Rust Foundation and the Rust Project\n\nFalsely stating an affiliation with the Rust Foundation and the Rust Project is a bad thing, and valid concern for protection. The Rust Foundation and the Rust Project may state their affiliation explicitly, thereby eliminating the need for an approval process. Conferences, events, discord groups, etc... that are stated to be affiliated, should be affiliated, and if not, they are in violation. This way it acts as a \"checkmark\" of validation, and any that are without the \"checkmark\" is assumed to be non-affiliated by it's omission.\n\n\n#### The Logo... Oh the Logo\n\nThis may be controversial but, there should be no restrictions on how the Rust community uses the logos. If a discord group wants to have a rainbow Rust logo, WHY do they need corporate approval? Seriously? Let the community be free to use the logos as they wish."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I really don't understand why the usage of Rust, Cargo and their logos need to be so complicated. Do other programming languages care about this that much? Tbh I fail to see a big problem in just making the trademarks public domain. You can easily find out if something is officially affiliated with the project or foundation anyway if you really care about that."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.828798125,
      "arousal": 62.1740365,
      "dominance": 60.714285625,
      "text": "Even though this was only a 'draft', publishing something so brash and out of touch with the community just convinced my employer to reclassify Rust a \"legal high risk\", right next to Oracle/Java. Is this really what the Rust Foundation wants? To become Oracle?\n\nThis single action has severely set back my efforts to convince my company to adopt Rust. And if anything even remotely similar to what was proposed is made official, a fork IS coming. There are zero software engineers left who will put up with a language that is not completely free to use, or controlled by a hyper-opinionated group with complete control over the language without anything stopping them from doing things like this.\n\nYou want to become Oracle? Okay, but then then get ready for an immediate move to Rust's version of OpenJDK, because people are fed up with authoritarian groups invading open software. And no, it doesn't really matter what the \"intension\" was/is, because the Rust Foundation can be a completely new group of people in a matter of months, and those people will not hold the same beliefs as the previous group.\n\nPlease reconsider these actions, and sympathize with those of us who have just had the rug pulled from under them while fighting for Rust in our workplaces since 1.0. You've lost a significant amount of trust from the community because of this. You've not lost us yet, but this was a big blow that will take years of careful PR to fix."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.899471,
      "arousal": 69.727891,
      "dominance": 65.948602,
      "text": "Whatever happened to the KISS principle.  Simpler is far better you just need sane base polices and can look to similar foundations for best practices.  This is trying to do too many things and will hamper the community in the process.  This should be scrapped with just taking boilerplate from the python foundation with tweaks and not only would it save a lot of effort it would be using a proven and simpler policy that has a proven track record."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Don't have much to add that hasn't already been said, but this seems really egregious as a usage standard (Section 7.2.1):\n> Don't use a trademark as a possessive. Instead, the following noun should be used in possessive form or the sentence reworded so there is no possessive.\n> Unacceptable: Cargo’s desktop interface is very clean.\n> Acceptable: The Cargo desktop's interface is very clean."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.866969000000005,
      "arousal": 66.40211666666666,
      "dominance": 64.51247166666667,
      "text": "I think the 'Trademark Policy Working Group, consisting of Rust Project leaders, Foundation staff and Legal Counsel' may not consist of members who understand how restrictive policies can destroy years of trust, community goodwill, or continued community support.\n\nConsider that many other projects have *not* needed to do what you'd *like* to. \n\nI sincerely hope that this was presented to the community indeed for feedback and overhauls, and not just to wean the community onto it by presenting it early and making minor revisions based on feedback that only matches the real goal, like many suspect."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.1311415,
      "arousal": 64.94708991666667,
      "dominance": 59.4387755,
      "text": "There’s one thing that no one seems to be mentioning.  From §5.3.1\n(emphasis mine):\n\n> We will consider requests to use the Marks [for events and\n> conferences] on a case by case basis, but at a minimum, would expect\n> events and conferences using the Marks to be non-profit-making,\n> focused on discussion of, and education on, Rust\n> software, **prohibit the carrying of firearms**, comply with local\n> health regulations, and have a robust Code of Conduct.\n\nOne might wonder, is Rust Foundation an organisation whose purpose\nis promotion and development of the Rust programming language and\nrelated software?  Or is it a US political organisation which fights\nfor gun control?\n\nNRA and Everytown should both have equal rights to use and educate on\nthe Rust language.  It’s on purpose that free software licenses allow\nuse of the software regardless of beliefs of the user.  I see no\nreason why the use of ‘Rust’ in event name should be any different.\n\nThis is also stupidly US-centeric.  Many countries have saner laws\naround gun control.  In many European countries it’s nearly impossible\nfor a regular person to get a gun permit.  In those places requirement\nfor a venue to prohibit carrying of firearms is mostly nonsensical."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.04475995652174,
      "arousal": 59.740708,
      "dominance": 63.55121765217392,
      "text": "Since everyone else is quoting and typing, I'll just weigh indirectly from the doc too. I don't have a law degree but I have enough of a legal background to weigh in, just as much as anyone else:\n\n>**Can I use the Rust logo as my Twitter Avatar?**  \n>  \n>We consider social media avatars on personal accounts to be fair use. On the other hand, using Rust trademarks in corporate social media bios/profile pictures is prohibited. \n\nYou don't decide what fair use is,policies like this do, and presenting anything else, even in a 'FAQ' is disingenuous and misrepresents your authority (or authoritox): [https://www.copyright.gov/help/faq/faq-fairuse.html](https://www.copyright.gov/help/faq/faq-fairuse.html)\n\n>Can I use a modified version of the logo on social media?In general, we prohibit the modification of the Rust logo for any purpose, except to scale it. This includes distortion,transparency, color-changes affiliated with for-profit brands or political ideologies. \n\nThat's great and all and I totally disagree, but our opinions don't matter. See link above on fair use. Good luck trying to sue anyone into oblivion for modifying your trademark under fair use. Because Parody can and will continue. Does the rust foundation have the funds to sue everyone that makes a reverse R logo and alludes to some politically incorrect R words to poke fun at you? What is setting this up as 'we prohibit' do? Go now and prohibit to the best of your abilities, OR change this to \"In general we request that modifications to the rust logo not be made without our consent\".Flies with honey, not vinegar, especially toothless strong arming vinegar.\n\n&#x200B;\n\n>You also cannot use our logo on your website in a way that suggests that your website is an official website or that we endorse your website. However, you can say you use and like the Rust software, that you participate in the Rust community, that you are providing an unmodified version of the Rust software, or that you wrote a manual describing how to develop software using Rust.\n\nSee this is what I really dislike about this document. Stop presenting fair use as you giving us permission. I realize this is written into terms and use often, but its still my feedback. Oh your trademark is on Rust, only in the context specifically tied to your trademark. so I am actually curious about your first case when it goes to court, as to how enforceable all your claims will be.I personally feel you're playing with fire a bit, and that's a shame. Because a bad case could really cripple enforce ability, and if what you are really trying to do is indeed protect the community, that would certainly hurt it.\n\n>Trademark law does not allow your use of names or trademarks that are too similar to ours. You therefore may not use an obvious variation of any of our Marks or any phonetic equivalent,foreign language equivalent, takeoff, or abbreviation for a similar or compatible product or service. We would consider the following too similar to one of our Marks:\n\nWhere is this going to be enforceable?! You trademarked rust in all languages or you are just hoping no one tries it? And in all countries? Did you do the due diligence to back that claim? Are the Korean terms for Rust trademarked too? This seems way too overbearing.\n\n&#x200B;\n\n>In this Policy we are not trying to limit the lawful use of the trademarks, but rather describe for you what we consider the parameters of lawful use to be.\n\nAh well luckily we have laws on the book and don't need your organization to do this. If you are in doubt meet with legal counsel and have them explain how these laws work. Because you do not get to make your interpretation of IP law the law. Honestly this whole paragraph is probably going to bite you in the butt.\n\n>Trademark law can be ambiguous, so we hope to provide enough clarity for you to understand whether we will consider your use non-infringing, licensed, or one that we might consider infringing without obtaining specific permission from us.\n\nWho puts hope in a trademark policy? And who admits to ambiguity in trademark? Are you implying your trademarks are ambiguous? Sure seems like it. You should revise this no matter what else imo.\n\n>2) preventing the misuse of the trademarks in ways that harm the community and Rust users.\n\n&#x200B;\n\n>It owns and manages the Rust trademarks, which cover the Rust programming language and software, as developed by the Rust Project teams (the “Project”). This document, (the \"Policy\")outlines the Rust Foundation’s policy for the use of the trademarks.\n\nYou do not own the community. You own trademarks, a very specific group of IP, and that's it. (2) is vague and highly open to interpretation. Who constitutes the community? Who does not? if this document is meant to be more than just dancing around how you own the IP you own and quietly acknowledging fair use (and possibly your limited grasp there of its use) then this is just absurdly vague.Elsewhere commenters are alluding to the organization changing leadership etc. Well, codify how you want these policies and best practices to work by clarifying your own values for us. Don't present yourself as community champions whilst simultaneously implying you get to dictate what the community is and is not. Mike made a Rust logo that's rotated 90 degrees has a mirror R in it and the color is changed for his crate mirror-rust. Its a silly crate that does silly syntax things. Is he excommunicated from the community for multiple violations that you can't possibly enforce in other ways.Bye Mike (Mike does not exist. Mirror Rust®is a trademark of nobody because come on.) .\n\n&#x200B;\n\nNOTE: THIS IS Part 1 of 2 (word count limit). The second part is a comment replying to this comment."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "i've seen discussion that there is a trademark working group that contains both project and foundation members and they are responsible for producing this policy. what is the membership of the group? is there a reason that isn't public? feels like a good start to help with transparency."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.95540466666667,
      "arousal": 63.340892,
      "dominance": 71.39077833333333,
      "text": "Weird move, if you want to brutally stop people’s will to learn Rust and promote the language, this is a very good start 🤔"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.45351475,
      "arousal": 58.53174583333333,
      "dominance": 63.60544225,
      "text": "> We will consider requests to use the Marks on a case by case basis, but at a minimum, would expect events and conferences using the Marks to be non-profit-making, focused on discussion of, and education on, Rust software, prohibit the carrying of firearms, comply with local health regulations, and have a robust Code of Conduct.\n\n\nThis seems rather strange to me. Why is a political policy making its way into the trademark document? Also what happens if some US state passes a law saying that events can't ban firearms on the premises (there may already be such a law in certain cities?) would Rust events no longer be allowed in such locations? This seems an odd thing to include. Why not just state \"Rust events should follow local laws regarding the carrying of firearms\".\n\nAlso \"code of conduct\" requirements is inserting it's way into things here as well. Would it be banned to say have a \"Republicans for Rust\" event? This is the type of exclusionary language that I've long criticized being pushed by some parts of the Rust community. The Rust community is large, and should be maximally inclusive.\n\n> In general, we prohibit the modification of the Rust logo for any purpose, except to scale it. This includes distortion, transparency, color-changes affiliated with for-profit brands or political ideologies. \n\n> On the other hand, if you would like to change the colors of the Rust logo to communicate allegiance with a community movement, we simply ask that you run the proposed logo change by us by emailing the file to contact@rustfoundation.org with a description of the changes you’re proposing.\n\nWhat's the difference between a \"political ideology\" and a \"community movement\"? Movements are generally political in nature, by definition. From Google:\n\n> movement:\n\n> 3\\. a group of people working together to advance their shared political, social, or artistic ideas.\n\"the labor movement\"\n\nwith the first analogy being \"political group\". Who's going to define what's a \"political ideology\" and what's a \"community movement\"? Rust Foundation's lawyers? Political ideologies usually start as community movements, throughout history."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not a lawyer.\n\nmy understanding is that the trademark owner can not be more restrictive than law already allows - that is the protection provided by the trademark.    \n\n\nI wouldn’t expect restrictions beyond that to be enforceable under the law.\n\nThis policy is written as though it were a license (it’s mentioned a few times)\n\nI like the EFF trademark usage policy. It incorporates references to trademark law and almost as a reminder."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Not to be too engineering minded but what is the list of problems the trademark policy is meant to solve?  Can the rust foundation folks post that here (or point me to where it already is?).  Why not just continue with the existing policy?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "what do we need a trademark policy for at all?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Clippy is registered by Microsoft\nhttps://en.wikipedia.org/wiki/Office_Assistant"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 38.945578,
      "arousal": 46.371882,
      "dominance": 48.5827665,
      "text": "Seeing a logo that symbolizes the community to go [from CC-BY](https://github.com/rust-lang/rust/issues/11562#issuecomment-50833809) (which allows one to \"remix, transform, and build upon the material\nfor any purpose, even commercially\") to be solely controlled by a single legal entity will be very sad.\n\nEDIT: Regarding why it's okay (in a legal sense) to restrict usage of CC-BY artworks by trademark policies, see [u/ssokolow's reply](https://old.reddit.com/r/rust/comments/12e7tdb/rust_trademark_policy_feedback_form/jftnzd9/) to my other comment. In short, copyright and trademark laws are independent."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.5238095,
      "arousal": 53.061224499999994,
      "dominance": 68.4807255,
      "text": "I've already criticized the policy, but I feel this concisely summarizes my real concern with this draft.\n\nI appreciate that the Rust Foundation is constructively discussing this policy with us before they implement anything. However, isn't the Rust Foundation supposed to be representative and supportive of the community and its values? How could our representatives and supporters not have created a first draft that is more in line with the community? If I ask for a blueprint of a small house with two bedrooms and a basement for a family, I do not expect the first draft to be of an underground bunker.\n\nMy concern is that the Rust Foundation is not actually representing or supporting the community that they claim to."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "Curious; why do we need a trademark policy at all?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "u/lkcl_ [suggested](https://libre-soc.org/irclog/%23libre-soc.2023-04-09.log.html#t2023-04-09T09:41:57) that Rust should be a Certification Mark, such that if your program passes the Conformance Test Suite (basically just rustc's tests), then it gets a license to the Rust mark. (I submitted this to the form since he won't)"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.41723350000001,
      "arousal": 58.219955,
      "dominance": 67.687075,
      "text": "I am huge fan of Rust but these new rules are so draconian they'll even make Oracle's lawyers blush. Please, for the sake of the community, scrap this proposal before you lose the hard earned goodwill of the many rustaceans who put countless hours supporting and promoting the language for free. Thanks."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Any TLDR, does this I have to rename my \\`rust-\\*\\` crates to \\`rs-\\*\\`?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "I'd like to see some new badge, like \"blessed by the Rust Foundation\" as a mark of crate quality, and a crate-review process driven by the Foundation with the help from community, rather than the \"r-word\" situation."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.67738609090908,
      "arousal": 63.78066381818182,
      "dominance": 62.42011945454545,
      "text": "Many other commenters have already fairly pointed out various terrible flaws in the Policy, but I’d like to address a more general issue in this whole ordeal. Am I wrong or we aren’t big enough to allow ourselves the burden of such petty corporate regulations?\n\nThere are already more than a few comparisons between Rust Foundation and Oracle but Rust isn’t Java and RF isn’t Oracle. By that I mean, Rust is an amazing language and I strongly believe that it has all chances to become one of the “big” languages, but we are not there yet. And Rust Foundation cannot get us there. The community can.\n\nI want to emphasise this last point — in the modern day and age, accessible tutorials, community-driven projects, community-managed info resources (e.g. Discords and etc.) are the only plausible way for a programming language to become a major part of the industry. Nothing else. Unless, of course, a corporate body has enough resources to lobby the tech, but I don’t think Rust Foundation is such a body.\n\nIt all reminds me of the recent D&D issue with OGL. People, as a collective, make things work. Stop damaging the communities.\n\nOne might argue that since the Policy draft was put up for community feedback, Rust Foundation are doing a good job. But that’s not true! Just look at all the other people angry about even the idea that someone can consider this to be a reasonable Policy. It’s still damaging, since people will start asking question whether all is fine with the Foundation or they live in some delusion where Rust is on a high enough level of adoption for them to start pulling stunts like this."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.31746025,
      "arousal": 48.015873,
      "dominance": 58.120748125,
      "text": "`\"Am I prohibited from registering my own trademark/a domain name/company name/trade name/product name/service name that includes the word “Rust” in reference to the language?`\n\n`The use of Rust Foundation trademarks is not permitted for use in any of these situations.\"`\n\nThis appears to make it very hard for a company or group to accurately describe or market their services relating to rust, and appears almost guaranteed to slow (especially commercial) adoption.\n\nIt seems like there ought to be a clear distinction between a company saying \n\n`\"We are Rust developers. We work with Rust amongst other great  technologies (see legal wording disclaimer - we are not associated with the excellent folk at the Rust foundation)\"` \n\nvs the more objectionable: \n\n`\"We are official Rust - give us all your monies whilst we provide you with malware and work to undermine the value of the brand by associating it with politically objectionable viewpoints\"` \n\nIt seems like both are effectively banned."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.95400085714286,
      "arousal": 56.83511528571428,
      "dominance": 60.51182357142857,
      "text": "Had a nice discussion with u/denschub over here: https://www.reddit.com/r/rust/comments/12lb0am/can_someone_explain_to_me_whats_happening_with/\n\nKinda made me realize something when he mentioned that we have to ask Rust for \"permission\" to use Rust and the R logo:\n\nhttps://www.reddit.com/r/rust/comments/12lb0am/can_someone_explain_to_me_whats_happening_with/\n\nThis got me thinking a little more. I expect another part of the reason for the harsh response is most people (including myself) thought the community owned the R in the gear icon, Rust, cargo, and all the stuff they trademarked under the Foundation.\n\nHaving to ask for permission makes us feel stolen from. Even if we never actually owned it. Apparently it was trademarked before anyways. \n\nKinda like being evicted from your property if you don't pay taxes on it.  You thought you owned the property.  You didn't even have a loan (eg. you have the MIT / Apache License).  But the land belonged to your country you live in (Rust Foundation Trademark).  And if you can't afford taxes or abide by law you can't live there.\n\nI don't like it.  I definitely feel stolen from and it hurts.  Even though Rust has the legal right / ownership, I hope they take us into account.  Even if they didn't actually steal anything, they still hurt many of us."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.217687,
      "arousal": 55.15873025,
      "dominance": 64.22902500000001,
      "text": "Here's the feedback that I submitted:\n\n> Many points within the Trademark Policy draft are obviously absurd to anybody that has had the most trivial interaction with the community. This absurdity pervades the document but - in the interest of being specific and terse - the logo modification policy is of particular note.\n\n> It is well-known that *many* projects and communities derived from the Rust community make use of edited forms of the logo, as well as using the name 'Rust', in order to link themselves to the language and winder community. Local meetup groups (such as my own, Rust Bristol) very frequently do this and it's long been held that these groups do not have official foundation backing and are largely autonomous in their operation.\n\n> There are two possible outcomes to this situation if the policy as-given is to be upheld.\n\n> - The first outcome is that these groups would come under the wing of the foundation, resulting in untold administrative complexity and cost for the foundation (currently, most community groups are maintained by volunteer labour).\n\n> - The second outcome is that these groups simply die, an enormous and harmful constriction to the wider community and to the Rust project more broadly.\n\n> In conclusion, these restrictions are not simply awkward, but are in fact an active liability for the project and endanger the stability of the vast amount of voluntary work performed by the community that the Rust project (and, indeed, the foundation) benefit from today. I highly recommend that these policies are revised and work is done by the foundation to first garner much-lacking respect from the wider Rust community before it attempts to mandate how and when we use the symbols and language we've been using for years."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.1678,
      "arousal": 69.954649,
      "dominance": 71.315193,
      "text": "How to kill a beautiful, wonderful, fantastic project promptly."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.2358275,
      "arousal": 54.818594,
      "dominance": 65.53288,
      "text": "I was taken aback by the stringent nature of the policy. I would like to convey my concerns regarding the impact this may have on the community and kindly urge the foundations leadership to reevaluate the proposal. It is evident that such measures have the potential to undermine the well-established trust within our community. I respectfully suggest that the leadership reconsiders their approach to prevent further harm."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.5173307142857,
      "arousal": 51.004211285714284,
      "dominance": 62.34207942857143,
      "text": "Seems like the foundation wants to position itself as an authority of all things Rust.\n\n>You can use the Rust name in book and article titles, and the Logo in illustrations within the work, as long as the use does not suggest that the Rust Foundation has published, endorsed, or agrees with your work\n\nIf this kind of language has to be included everywhere it'll lend an air of authority to the foundation which it isn't necessarily owed.\n\n5.3.1\n\n>We will consider requests to use the Marks on a case by case basis\n\nThis simply reeks of being a political tool for preventing people \"with the wrong opinions\" to engage with Rust in a wider context within the community.\n\nOn the whole, with this I'm fairly convinced that the political goal of the Rust Foundation as an institution is to exert control, and not, to benefit the community."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I only see the R image, cargo, and the ”rust” registered.  can anyone point me to the registration for Clippy?\n\n[https://tsdr.uspto.gov/#caseNumber=87796978&caseType=SERIAL\\_NO&searchType=statusSearch](https://tsdr.uspto.gov/#caseNumber=87796978&caseType=SERIAL_NO&searchType=statusSearch)\n\n[https://tsdr.uspto.gov/#caseNumber=87796977&caseType=SERIAL\\_NO&searchType=statusSearch](https://tsdr.uspto.gov/#caseNumber=87796977&caseType=SERIAL_NO&searchType=statusSearch)\n\n[https://tsdr.uspto.gov/#caseNumber=87796976&caseType=SERIAL\\_NO&searchType=statusSearch](https://tsdr.uspto.gov/#caseNumber=87796976&caseType=SERIAL_NO&searchType=statusSearch)"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.861678,
      "arousal": 50.793651,
      "dominance": 63.945578,
      "text": "If the foundation is concerned with 'Quality Control', they should make and use 'Rust Foundation' logo and trademark, and have all the rights and restrictions they want. Not on 'Rust' or 'Cargo' itself."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.0589572,
      "arousal": 65.87301599999999,
      "dominance": 70.3628118,
      "text": "I'll echo the same comments I made on the other thread here: who appointed this Rust foundation, and is there any check to this? I'm surprised to learn that core members were completely unaware until this was announced, despite it sounding like they were consulted along the way. \n\nWhy do we need a Rust Foundation? Why do they have the ability to enact these sweeping policies that seem to be against the very nature of open source development? How do they even have that power, considering they don't seem to be related to the team actually developing Rust? Keep my open source software free, please."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Here is my take on the Rust Foundation Trademark Policy Proposal\n\nhttps://jeremychone.com/rust-foundation-trademark-proposal"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703000000005,
      "arousal": 48.7528345,
      "dominance": 58.786848,
      "text": "The problem I see is not the trademark, rather the big problem is the incorrect wording which tries to encompass way too much.   \n\n\nTo clarify, for example, if the document *intends* to say that I can't start a website like **rustmyway.com** where I talk about programming in Rust, giving examples, etc. (or to do this in Medium or Substack) and at the same time I have ***in no way*** tried to impersonate neither the Rust Foundation or any official Rust website, then this would be way, way out of line.  \n\n\nBut, that is what it sounds like in the document. If that is what they aim for, then no, I would promote a fork because they have no right to control something like that.   \n\n\nIf instead the wording is just too vague, then they should just make it more precise, so that you don't receive such backlash.   \n\n\nI understand completely trying to protect the trademark itself, and impersonators should not be tolerated, but it cannot, in any way, try and encompass more than that."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.50113400000001,
      "arousal": 55.3287985,
      "dominance": 59.297052,
      "text": "Don't have the time to give a long form feedback right now, but the short of it is this is awful. It's completely unclear what, if any, problem this actually addresses and in its present form can not be read as anything but a direct attack on the rust community rather than existing in service of it."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 58.049887,
      "dominance": 66.099773,
      "text": "In case this stems from a misconception, I'd also like to present this article for consideration:\n\n[Trademark Law Does Not Require Companies To Tirelessly Censor the Internet - Electronic Frontier Foundation](https://www.eff.org/deeplinks/2013/11/trademark-law-does-not-require-companies-tirelessly-censor-internet)"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.6734694,
      "arousal": 69.25170080000001,
      "dominance": 56.213152,
      "text": "This feels like a disaster that will just create fear in the ecosystem.  I don't even like that someone took the time to even create this document, dreaming of all the power they could wield over people."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.063492,
      "arousal": 59.0136055,
      "dominance": 61.6213155,
      "text": "In my opinion, Rust is already centralized enough with its toolchains so standardized and crates.io. Rust should be driven by community, not by some governing body (which, in practical, couldn’t impress 100% of the community)."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This reeks of Oracle Java and I'm not okay with it. The foundation should have no say over the rust logo and if the Foundation takes it I believe we should create a new rust logo and submit it to the public domain."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.95011333333333,
      "arousal": 60.54421766666667,
      "dominance": 59.07029466666666,
      "text": "For me personally this invokes a lot of ambiguities and uncertainties of the Rust future growth. \n\nI still consider myself being Rust beginner and have already invested a lot of time. It is really joy-to-work-with language, but on the other hand the future is really not clear. Is that worth to invest in Rust? From the programming perspective, definitely yes. From the business perspective, not really sure.\n\nThis is just another way to shake the faith of widespread adoption. I think a lot of people feel the same way.\n\nListen to the community and dont do stupid things. If you lose the community then you lose everything."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.12471666666667,
      "arousal": 57.813681083333336,
      "dominance": 64.90929708333333,
      "text": "EDIT: in regards to the reply from rust-lang\n\n> We know the draft is not perfect, and we're committed to fixing any mistakes identified and considering the feedback we get.  \n\nthe draft was more bad then good, I would argue the entire thing was a mistake and urge, whoever, thought this would be remotely acceptable, to scrap it, and start anew. \n\nI suppose this could be considered \"demeaning\". however I consider it demeaning that, whoever thought this was a good idea, would think to treat the rust community like this.\n\n> We recognize that the process and communication around it could have been better. Notably, the wider project was insufficiently included in the process. We were responsible for that and apologize.\n\nNone of this is the issue, I think the process drafting the document and community out reach in opinions was fine, what was not fine was the contents.\n\n> We only ask that you treat everyone in this community, including the Rust Foundation team, respectfully when doing so.\n\nIt's hard to maintain respect for anyone who approved this draft. it feels like that whoever drafted this document had done so with intention of treating the community like dirt."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.004535,
      "arousal": 58.571428600000004,
      "dominance": 58.117913599999994,
      "text": "Maybe I'm not looking hard enough, but my question is: but why?  \n\n\nHas someone been abusing the Logo? what about the Rust name? Has it been accidentally associated with something to a point where a formal complaint was made? Has something actually terrible happened which has prompted this? Not once have I ever read an article or GitHub repo name that contained the word Rust and gone \"wow this was endorsed/and or created by the foundation\". Unless it's actually hosted at the foundation website, I bet many people simply assume it is NOT from the foundation by default."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.5238095,
      "arousal": 69.6145125,
      "dominance": 63.8321995,
      "text": "I'm not really good at legal stuff so I'm hoping someone can help with my concerns. If I want to use rust for the programming in a startup, should I avoid mentioning that it is made using rust to avoid trouble?"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.76644,
      "arousal": 59.90173866666667,
      "dominance": 73.88510933333333,
      "text": "My 2 cents:\n\n* I think it would be helpful to have some traceability on the restrictions, something like \"you may not X because trademark law Y\". This would help in getting suggestions as well as explaining why the Foundation needs to do this in the first place.\n* There should be an easy way to be permissive. Right now it's emailing, but maybe there could be a wiki or some other way of having a limited license which can easily be revoked. For most people this would be good enough."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.02721066666666,
      "arousal": 51.020408,
      "dominance": 62.69841266666666,
      "text": "I wonder if members of the foundation could provide some more explicit information about why such strict measures are required. One case is obvious - protection against ~~patent trolls~~ trademark trolls. But even with this case in mind, the policy looks too strict (however I can assume it will never be applied against regular developers and organizations that bring value to the ecosystem)."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "It's so controversial that there's a programmingcirclejerk post that's just a link to the policy https://www.reddit.com/r/programmingcirclejerk/comments/12l2893/the_project_would_like_the_word_rust_in_a_crate/"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is an excellent example of:\n\n\"Just because you can doesn't mean you should.\"\n\n[edit]\n\n>We would consider the following too similar to one of our Marks:\n>CARGO NET\n\nhttps://tmsearch.uspto.gov/bin/showfield?f=doc&state=4802:yqgj7u.5.4\n\n>CARGONET:  IC 045. US 100 101. G & S: Providing on-line databases to insurers, truckers, shippers and law enforcement agencies to aid in the identification and recovery of stolen goods. FIRST USE: 20090901. FIRST USE IN COMMERCE: 20090901"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.183673,
      "arousal": 58.049887,
      "dominance": 63.378685,
      "text": "What the fuck? Why are they trying to squander community goodwill so hard? For what possible reason is the Rust Foundation going so draconian on these redtrictions? A number of them are downright ridiculous."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.29818575,
      "arousal": 55.0453515,
      "dominance": 60.26077075,
      "text": "As an example of what a PR mess this has been and something to contemplate to prevent it from happening again down the road, [this question](https://www.reddit.com/r/rust/comments/12lb0am/can_someone_explain_to_me_whats_happening_with/) just got posted:\n\n> I am asking for actual information because I'm extremely curious how it could've changed so much. The foundation that's proposing a trademark policy where you can be sued if you use the name \"rust\" in your project, or a website, or have to okay by them any gathering that uses the word \"rust\" in their name, or have to ensure \"rust\" logo is not altered in any way and is specific percentage smaller than the rest of your image - this is not the Rust foundation I used to know. So I am genuinely trying to figure out at what point did it change, was there a specific event, a set of events, specific hiring decisions that took place, that altered the course of the foundation in such a dramatic fashion? Thank you for any insights."
    },
    {
      "post_title": "Rust Trademark Policy Feedback Form",
      "created_utc": 1680837086.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Matt Godbolt sold me on Rust (by showing me C++)"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "TIL \"godbolt.org\" is actually named after a guy and isn't just a cool-sounding website."
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "At first I was thinking, surely Quantity{-1} is a narrowing issue, even in C++. And that's certainly true, it won't compile. Surely direct initialization is the same, right? Of course not. This almost makes it worse than if it was always implicitly converted, not only a footgun, but a sneaky one"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.582766,
      "arousal": 53.741497,
      "dominance": 71.882086,
      "text": "Don't use constructors, destructors or exceptions... actuality just use it like C but with templates. And re-implement the stdlib with Result/Option.\n\n\nOr just use Rust."
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is `\"-100\".parse::()` some new rust syntax or are we still unable to post code samples with angle brackets on the web?"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.4036282,
      "arousal": 61.51927439999999,
      "dominance": 65.6462586,
      "text": "I would argue that rust is not so perfect at correct-by-construction either.\n\nThe author demonstrates using the newtype pattern to enforce argument types.  That is well and good, but it requires changing the entire implementation to use foo.0 all over the place, which is pretty ugly and a giant PITA for an existing codebase.  Or alternatively do kludgy things like wrapper each method and trait impl, or impl Deref and DerefMut for the newtype, which still doesn't cover all uses.\n\nIntuitively, one would like to just use `type mytype = basetype`.  Unfortunately such type aliases are not enforced by the compiler when used as fn parameters.  ie mytype and basetype are considered equivalent.\n\nWhat I would love to see is a keyword that has the same usage as 'type' but under the hood actually creates a real new type that is not equivalent to the basetype."
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.6787605,
      "arousal": 61.37566133333333,
      "dominance": 64.5880575,
      "text": "I love Rust, but it's getting real old reading about why Rust is good _because_ the other options are bad.\n\n\nStand on your own two feet and be proud. If we really have something good here (and we do) we shouldn't need to keep beating the same dang dead horse with all the C++ Bad talk."
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I tried something in C++, similar to Rust struct based solution - it didn't really require explicit constructor and threw errors as expected: [https://godbolt.org/z/f4rWG1hPd](https://godbolt.org/z/f4rWG1hPd)"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Both end states here are horrible. At-least with C++ you can build things like https://github.com/mariusbancila/moneycpp"
    },
    {
      "post_title": "Matt Godbolt sold me on Rust (by showing me C++)",
      "created_utc": 1746629103.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.70143633333333,
      "arousal": 55.17762666666666,
      "dominance": 54.875283333333336,
      "text": "Regardless of any opinions on the matter, the safety features and so forth of either of these or any other language, are going to be undermined by the over use of language models to accomplish programming tasks. Even now the code bases of the world are being inundated with it, little by little.\n And besides, C++ plus has stood the test of time, like any warrior it has its flaws, and those flows are known. It will take some time for the flaws of these newly born  youngsters to reveal themselves... but they absolutely will."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.253968,
      "arousal": 52.154195,
      "dominance": 62.358277,
      "text": "If you depend on large crates from which you use only a small number of code, please help test this new compiler/Cargo flag, to see if it can speed up your compilation times!"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "All my open source crates are mostly unused :'("
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is going to be great for the aws crates, definitely need to turn this on asap!"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great to see these improvements to compile times!"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "If rust's compilation speed increases a lot it'll be my main language by a longshot"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "In what cases would this make the compile time go up? All I can guess is that it's redoing some of the pre-codegen parts when it did codegen for some functions and now it needs to codegen other methods?"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This will be great for bevy!"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.6938775,
      "arousal": 55.3287985,
      "dominance": 57.936508,
      "text": "Definitely cool, but a bit too manual for something so hard to grasp (without benchmarking it) and that changes over time. Ideally cargo/rustc would detect that you might want it on (or off as it's no longer beneficial).\nHopefully we can see that in the future."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This looks exciting.  Im going to try sticking this on my AWS dependencies."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "I am probably missing something but wouldn't it be better to generate machine code lazily and cache already generated machine code?\nThis way one wouldn't need a configuration like this and instead always have the benefit of only generating those parts of the code that are actually in use.\n\nOr is this not possible for some reasons?"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This looks like something that should only be set in the top-level crate ? For example if SubDep is mostly-unused by DepA but mostly-used by DepB, I don't want DepA to set the hint ?"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.138322,
      "arousal": 66.780045,
      "dominance": 64.62585,
      "text": "For my egui word game application, with 467 dependencies  \ncargo build --release took 53.67s (nightly)  \ncargo +nightly -Zprofile-hint-mostly-unused build -r took 48.74s\n\nbuilt successfully"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.21315200000001,
      "arousal": 53.401360499999996,
      "dominance": 55.8390025,
      "text": "Pretty amazing stuff as far as Vulkano is concerned, got my release build to become as fast as the debug one (it was previously twice as slow). This may sound weird, but basically any small vulkano-based project is bottlenecked on the proc\\_macro2 -> quote -> syn -> serde\\_derive -> serde -> serde\\_json -> vulkano (build.rs) -> vulkano dependency chain and most of that dependency chain does not depend much on debug vs release, except vulkano which generates/compiles lots of code because Vulkan is big."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.82086166666666,
      "arousal": 45.011338,
      "dominance": 61.262282666666664,
      "text": "Do I understand this correctly: since the gain comes at the expense of the top-level crate's recompilation speed, this is probably not that useful for development (probably even best avoided for that, though I'm not sure how much it'd slow it down?), but mostly useful for e.g. cargo install"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.46258499999999,
      "arousal": 71.371882,
      "dominance": 75.56689349999999,
      "text": "Quick update (which should go into the blog post soon): the changes are currently in rust and cargo, but cargo nightly needs a manual sync into `rust-lang/rust` (currently in progress), so this won't actually work in a rustup-installed nightly of cargo for a day or two."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.28571466666666,
      "arousal": 54.119425666666665,
      "dominance": 56.424792000000004,
      "text": "Personally, I would rather have my compilation take a few seconds longer and have predictable, reliable code than speed it up by a few seconds to potentially face regressions. Predictability and reliability are some of the main reasons why I use Rust in the first place. Plus, though I’m admittedly not super experienced in the language, I don’t really find the compilation time that unreasonable as it is, especially since the incremental recompilations take much less time than the initial"
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Have you measured any potential runtime performance implications? Or binary size implications?\n\nThis is basically like slapping `#[inline(always)]`on every function of a crate. There must be some other consequences besides compile times."
    },
    {
      "post_title": "Call for Testing: Speeding up compilation with `hint-mostly-unused` | Inside Rust Blog",
      "created_utc": 1752594035.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.027211,
      "arousal": 61.63265320000001,
      "dominance": 64.6258504,
      "text": "> Also note that this only provides a performance win if you are building the dependency. If you're only rebuilding the top-level crate, this won't help.\n\nSo… its useless? Yea sure -40% compilation times *on first build* for *some specific crates*… Idk man i don’t see any value on this. They couldn’t even provide good examples for this feature, as all crates mentioned will be built just once (on first build)\n\nIt would be more reasonable to work on better dylib support (specifically what bevy or cargo-dynamic does) rather than pushing these kinds of wacky experiments"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "Free Review Copies of \"Asynchronous Programming in Rust\""
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 72.07105083333333,
      "arousal": 50.9826155,
      "dominance": 62.093726333333336,
      "text": "Packt has published \"Asynchronous Programming in Rust\"\n\nAs part of our marketing activities, we are offering free digital copies of the book in return for unbiased feedback in the form of a reader review.\n\nHere is what you will learn from the book:\n\n1. Explore the essence of asynchronous program flow and its significance\n2. Understand the difference between concurrency and parallelism\n3. Gain insights into how computers and operating systems handle concurrent tasks\n4. Uncover the mechanics of async/await\n5. Understand Rust's futures by implementing them yourself\n6. Implement green threads from scratch to thoroughly understand them\n\nIf you feel you might be interested in this opportunity please comment below on or before 21st February 2024  \n\n\nhttps://preview.redd.it/d4y94l8xehic1.jpg?width=1216&format=pjpg&auto=webp&s=5a9e32b13bb660f2279705fee4cf1800025734fb"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.826152666666665,
      "arousal": 43.121693333333326,
      "dominance": 55.25321233333333,
      "text": "1. Is Table of Contents published somewhere?\n2. How long is the book?\n3. When would you expect to receive the feedback?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hey I am interested in async programming in rust, thanks!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "Basically,if you give away all the requested copy for free to this thread, you run out of customers 😁"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes pls"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am writing embedded Linux, multi app production code where every application is asynchronous Rust. I would be very interested in this."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.301587,
      "arousal": 60.31746,
      "dominance": 70.748299,
      "text": "I am certainly interested in a copy given the 6 points listed in exchange for honest feedback"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is this thread the most commented (ever) on /r/rust?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.024943,
      "arousal": 64.172336,
      "dominance": 66.666667,
      "text": "let my_interest = Some(true); \n// I now own the value of interest"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Would love to review (:"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.3922905,
      "arousal": 54.4784585,
      "dominance": 61.3378685,
      "text": "I actually just bought this book haha. I've been wanting to deep dive I to async, so I hope it lives up to my expectations!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested. I can offer you feedback from a different perspective as a senior software engineer in a large company that works in async rust without tokio."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.303099333333336,
      "arousal": 49.05517799999999,
      "dominance": 57.558579,
      "text": "I found your book in the O'Reilly site. I will read it from there. As I can see it will be published in February 2024, so not much time to read and give feedback.\n\nIn any case congrats for your book and for the amazing PR that you are doing with this offer : D"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 96.2585035,
      "arousal": 65.70294799999999,
      "dominance": 76.303855,
      "text": "I am a budding Rust programmer. I would love to have a free copy of Asynchronous Programming in Rust."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "My understanding is that there are supposed to be significant changes to Rust async in the 2024 edition. This seems a little pre-mature."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.46636466666666,
      "arousal": 52.040816666666665,
      "dominance": 64.28571433333333,
      "text": "is this book a good read after the Official Rust book? I am a Rust beginner btw"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested "
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "So darn shady"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested too!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am interested!)"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "im interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "please include me in your for-review courtesy copy distribution. thank you."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.024943,
      "arousal": 64.172336,
      "dominance": 66.666667,
      "text": "Registering interest"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "me"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sign me up"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.55782350000001,
      "arousal": 48.469387999999995,
      "dominance": 61.6780045,
      "text": "I'm interested. I'm working through mara's book now and it looks like it would be a nice follow up."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interesting 😎"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As someone new to async rust, I'm really interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested, very much so"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes, interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested in learning more about async stuff"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Definitely interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm very interested."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.07709750000001,
      "arousal": 53.798186,
      "dominance": 65.419501,
      "text": "Count me in, will leave a honest review about this book!!!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested, using rust in production with millions of events being processed in certain applications"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested! Thanks!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested please, open to provide feedback on it."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hello, I'd be interested in giving this a go."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested. I would like to review and share feedback"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Interested, is the book also fitting for rust beginners?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.249433,
      "arousal": 70.29478449999999,
      "dominance": 59.0136055,
      "text": "Not gonna lie: I'd love this, but my company might be OK to buy it for me (in which case I'll delete this comment)."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Yes I would like to learn more about async rust."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'd like to read how it is :)"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Love packt, would love to help"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yes"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "just ordered it on Amazon 😭😬"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Definitely interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Also interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.306122,
      "arousal": 43.424036,
      "dominance": 54.535147,
      "text": "Definitely interested. Would be very beneficial for the work I’m doing at the moment. "
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m in!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very much yes."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Yes! I'd love to read it."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Is the target audience of your book someone who has (thoroughly) read the Rust Book (including the chapters on closures and multithreading), or someone who has read the (relevant sections of) Rust for Rustaceans?\n\nI've already ordered your book, so there's no point in sending me a review copy. Is there a way for non-review copy holders to submit reviews?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sign me up"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please, I am interested."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "I’m interested. \n\nQQ: Is there any previous feedback on the book you can share here, a peer review or something of that sort."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Im in"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested! Just started reading the sample"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very much interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "+1"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very much interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yes please. interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "I'm interested in reading it!\n\nIs there any docs somewhere detailing what topics are covered in the book?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes, please."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Definitely interested. When do you expect feedback though?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Here!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested for this!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested for this!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "❤️"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested :D"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Really interested on the book"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes pls"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 53.5714285,
      "arousal": 73.0725625,
      "dominance": 63.435374,
      "text": "I'm interested. I've not dealt with async Rust enough to understand why people hate it."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Most of my work is around async rust, would be a pleased to review..."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "Timely book, I am interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "+1"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Does it go into writing async for libraries ? There are some issues and pitfalls with that after all (eg Multi-Runtime compatibility)"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested! Thank you :)"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Looks very nice, I am interested in it indeed"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "yes pls"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm interested, is there a specific structure guideline in regards to the feedback?"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes, please!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I’d love to"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Interested it would be a good supplement to Rust for Rustaceans :D"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I would very much like a copy and am willing to provide feedback"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I’m very much interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am in"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm certainly interested in this"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'll take a copy."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "intrested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hi, I'd be interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.852608,
      "arousal": 47.278912,
      "dominance": 60.090703,
      "text": "I’d like a review copy, please. I have written a lot of async rust code but I think this book could deepen my understanding very much. Looking forward to reviewing it"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've been learning more and more Rust lately, would be great to get a copy! I'd be very interested in this opportunity  :)"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'll would be glad to have a copy."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes I’m interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Please count me in"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.24263,
      "arousal": 51.473923,
      "dominance": 64.285714,
      "text": "I need to build the real stuff whit async programming. So por favor, give it to meet too!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I am interested . Please send me a copy"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes, I'm interested! 🖐️😁"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Very interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please!, looking forward to reading it"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.39342425000001,
      "arousal": 57.8231295,
      "dominance": 66.298186,
      "text": "There is some free time coming up and I would love a copy of your book 😊"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Sure, mark me as interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "I'd love to review."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested in exploring rust over C#, so any literature is welcome."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes please!"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yes, please. I would like to provide with a feedback."
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "interested"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm willing and able, so yes please"
    },
    {
      "post_title": "Free Review Copies of \"Asynchronous Programming in Rust\"",
      "created_utc": 1707886096.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Im interested!"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 72.9591835,
      "arousal": 61.2811795,
      "dominance": 66.1564625,
      "text": "From their GitHub:\n\n> An Update on the Next Trait Solver\n> We are very close to switching from chalk to the next trait solver, which will be shared with rustc.\n> `chalk` is de-facto unmaintained, and sharing the code with the compiler will greatly improve trait solving accuracy and fix long-standing issues in rust-analyzer.\n> This will also let us enable more on-the-fly diagnostics (currently marked as experimental), and even significantly improve performance.\n>\n> However, in order to avoid regressions, we will suspend the weekly releases until the new solver is stabilized.\n> In the meanwhile, please test the pre-release versions (nightlies) and report any issues or improvements you notice, either on [GitHub Issues](https://github.com/rust-lang/rust-analyzer/issues), [GitHub Discussions](https://github.com/rust-lang/rust-analyzer/discussions/20426), or [Zulip](https://rust-lang.zulipchat.com/#narrow/channel/185405-t-compiler.2Frust-analyzer/topic/New.20Trait.20Solver.20feedback).\n\nhttps://github.com/rust-lang/rust-analyzer/releases/tag/2025-08-11\n\n---\n\nThe \"experimental\" diagnostics mentioned here are the ones that make r-a feel fast. \n\nIf you're used to other languages giving you warnings/errors as you type, you may have noticed r-a doesn't, which makes for an awkward and sluggish experience.  Currently it offloads the responsibility of most type-related checking to `cargo check`, which runs after saving by default.\n\nA while ago, r-a started implementing diagnostics for type mismatches in function calls and such.  So your editor lights up immediately as you type.  But these aren't enabled by default.  This change will bring more of those into the stable, enabled-by-default featureset.\n\nI have the following setup\n\n- Rust nightly / r-a nightly\n- Cranelift\n- macOS (26.0 beta)\n- Apple's new ld64 linker\n\nand it honestly feels like an entirely different experience than writing rust 2 years ago.  It's fast and responsive.  There's still a gap to TS and Go and such, but its closing rapidly, and the contributors and maintainers have moved the DX squarely into the \"whoa, this works really well\" zone.  Not to mention how hard this is with a language like Rust (traits, macros, lifetimes, are insanely hard to support)"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.250567,
      "arousal": 54.2800455,
      "dominance": 62.216553250000004,
      "text": "(I’m a rust-analyzer team member)\n\nThe trait solver is also used pretty heavily in autocomplete, especially for methods. I personally expect the new trait solver to help with editing latencies *tremendously*, especially on larger, trait-heavy projects. Our extremely-tentative, not-to-be-cited benchmarks showed nearly a 3x speed improvement over Chalk and we haven’t even implemented any parallelism yet! Note that as of today, that speed improvement isn’t on nightly due to memory usage concerns, but we’ll get there.\n\nThe reason that autocomplete uses the trait solver so heavily is that to offer completions for trait-based methods, rust-analyzer needs to check whether the method receiver implements a given trait, even non-imported traits. Checking all traits for a given method receiver, even factoring in orphan rules (which gave us a 2x speed improvement when I implemented it about a year and a half ago!), is `O(crates)`."
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.7324265,
      "arousal": 48.469387999999995,
      "dominance": 64.22902500000001,
      "text": "How much faster is cranelift for development? (compile time wise)"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How much more ram will it use for one medium size project after this? This is the main issue as of now - too much ram consumption and crashing due to OOM, bringing the whole system down with it. The performance can suffer if the ram usage can be reduced"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 86.734694,
      "arousal": 64.512472,
      "dominance": 68.93424,
      "text": "Will the new trait solver also improve the compiler, in terms of  performance or expressiveness?"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "But, as I remember integration with `chalk` had the same idea, to share code with compiler. But then what, `chalk` was never integrated to compiler?"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wahhhoooooooo. Yesssss."
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "> If you're used to other languages giving you warnings/errors as you type, you may have noticed r-a doesn't, which makes for an awkward and sluggish experience. Currently it offloads the responsibility of most type-related checking to cargo check, which runs after saving by default.\n\nI always got errors as I typed because I have autosave enabled. I didn't even realise that other people didn't get them."
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> Apple's new ld64 linker\n\nCan you say more? Is that different from the default linker used by (stable) rust? Or the default linker of latest Xcode toolchain? (If these two aren't the same thing to begin with.)"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "2.4Gb RAM 💥"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Awesome. Coming from web dev, the slowness of warnings and errors was one of the most annoying things to get used to."
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is it possible to try these without the project itself requiring \\`nightly\\` toolchain? If yes, how does one configure RA/cranelift to do this?"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.090703,
      "arousal": 58.61678,
      "dominance": 52.154195,
      "text": "Great news! Do you know if these new diagnostics are provided with the push or pull (textDocument/diagnostic) lsp methods?"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Exciting stuff!"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are there instructions on how to enable new trait solver in rust-analyzer?  \nIs it enough to just use latest nightly toolchain from rustup with rust-analyzer?"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "and here I remember racer around the time 1.0 launched"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Will this finally enable proper type inference on the level of Haskell, Scala etc? Like this:\n\n```rust\nfn foo() -> Vec<u8> {\n    let c = (42..69).collect();\n    println!(\"{}\", c[0]);\n    return c;\n}\n```"
    },
    {
      "post_title": "rust-analyzer weekly releases paused in anticipation of new trait solver (already available on nightly). The Rust dev experience is starting to get really good :)",
      "created_utc": 1755504320.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Yet it still can't remove-unused/organize all imports in a file 🤦‍♂️, it's been years"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 85.941043,
      "arousal": 67.120181,
      "dominance": 76.870748,
      "text": "Rust has exposed my lack of knowledge on how computers work."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 75.1602092173913,
      "arousal": 57.14778665217391,
      "dominance": 63.66952582608696,
      "text": "I've been a professional developer since about 2012. Most of the stuff I work on is web applications, and I believe I am pretty good at it given my experience and interactions with my peers. I love programing and it takes up most of my free time.\n\nFor the past few months I have been learning Rust from the ground up. Its a fun and exciting language and there is plenty to learn. But there are parts of the language I don't understand because I have never worked with any systems language... and its at times dreadful. There are things I run into that I understand the functionality and maybe a use case. But I don't understand why the rules exist; furthermore, creating a small example of why the code behaves the way it does and why the feature needs to exist is difficult.\n\nFor example, the difference between `Rc` and `Arc` and what makes one thread safe and the other not. What is thread safety anyways? Atomics? What are those? What is memory ordering? and down the rabbit hole I go.\n\nOr things like how is Rust written in rust? LLVM? bootstrapping a compiler??? \n\nA simple exploration into one of rusts features has exploded into a ton of new information.\n\nIt has dawned on me that everything / or at least most of what I know about software development is based on abstractions. And I'm not talking about library abstractions, i mean language level ones.\n\nThere really isn't a super specific point to this post, It just makes me feel so bad I don't understand these things. I wish I could go back in time to earlier in my development career and work with things closer to the metal. Its really fascinating and I wish someone would have pushed me in the right direction when I was learning.\n\nI've been working with Rust for about 6 months in my free time and I can write safe single threaded rust pretty easily, but I have yet to do any deep dive on async / multi threaded applications. And everything surrounding unsafe rust seems like an entirely different monster.\n\nI want a deep understanding of how Rust works and its taking a lot longer then I expected.\n\nWhen I get to a comfortable place with Rust, I will probably go do some things that most other developers do in College... like writing on compiler, or learning machine code. I do have a BS but its in web development... Nothing low level was ever taught. It got me into the industry fast and I have a nice comfortable job, but I want to learn more."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.82798842857143,
      "arousal": 51.101392999999995,
      "dominance": 58.16326528571428,
      "text": "I just watched video (https://www.youtube.com/watch?v=JcvP1Ck9lR4) on how ethernet works. The Ethernet. The stuff which is lower than MAC (media access control) level. I was washed away by amount of stuff between lowest level and the wire. Stacked Phys. Phy multiplexers, trees of Phys. There is a proverb \"Just when I thought I'd hit rock bottom, someone knocked from below.\", and it's the case here.\n\nThe second \"huh\" moment was when I realized there is a computer in the ¢30 digital thermometer chip, with a size less of a pea. There is always stuff underneath. Very complex stuff."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.77065114285713,
      "arousal": 66.58568171428571,
      "dominance": 69.5173307142857,
      "text": "I mean you should not feel bad about it, you have clearly been doing fine without that knowledge so far.\nAnd now that you are starting to learn it, it might just make you a better developer in general and that should be embraced and celebrated rather than be a cause of sadness, because you didn’t know these things before. It opened up a new world to you and that’s really great and it’s nice seeing that you have fun a new joy or at least interest in it"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.97467875,
      "arousal": 59.722222166666675,
      "dominance": 69.03817058333334,
      "text": "After 18 years in the industry I have to tell you, there is nothing you should feel bad about. You have to learn constantly. If you know you are missing some knowledge / information, learn it :) . I was lucky that I was forced to learn x86 assembly and C during my university studies. Absolutely invaluable knowledge, though I haven't done any ASM since university and I don't even want to.\n\nClose-minded people who don't realize they lack knowledge are hard to work with.\n\nAnd web apps are a different kettle of fish than a low-level systems stuff. I can't do anything in React."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 57.709751000000004,
      "arousal": 43.310658,
      "dominance": 59.297052,
      "text": "The rust compiler is written in rust, thanks to the compiler translating rust source code to machine code,\nso if you have an already compiled rust compiler(machine code) you can compile a new rust compiler to machine code"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.9149660625,
      "arousal": 58.7868480625,
      "dominance": 65.355725625,
      "text": "Maybe some useful references for some of the things you mentioned:\n\n* *Rust in action* introduces a lot of these low level things. May be a good first start :)\n* Regarding building a compiler there's a great book / guide you might find handy: [Crafting Interpreters by Robert Nystrom](https://craftinginterpreters.com/). As a good \"second read\" I can recommend *Language Implementation Patterns* by Parr and if you're also interested in seeing some bits from the historical side alongside the technical one, [Programming Language Pragmatics by Scott](https://www.cs.rochester.edu/~scott/pragmatics/) is very fun and touches on many things. Also r/ProgrammingLanguages\n* You might enjoy playing something like \"turing complete\" for the \\*very\\* low level details (don't think \"it's just a game\" or smth. I originally trained in EE / CE and the game teaches a bunch of the stuff you'd encounter in classes from that domain :) People are implementing real ISAs in it and it even has VHDL export). If you want more formal info: imo the books by tanenbaum on computer archictecture and OSs are good; but I recently also heard good things about *Computer Systems: A Programmer's perspective* by Bryant and O'Hallaron.\n* For concurrency there's [a great book by mara bos called rust atomics and locks](https://marabos.nl/atomics/). For a softer intro: I think my first \"real\" intro to concurency was raymond hettingers talk on the topic (which you can find on youtube). It's focused on python but may still be worth a watch :)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.29478449999999,
      "arousal": 51.984127,
      "dominance": 66.1564625,
      "text": "Read the book CODE by Charles Petzold. It opened up my mind at least . Come from similar experience as you are."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.94028716666666,
      "arousal": 59.599394999999994,
      "dominance": 66.345427,
      "text": "I’ve been working as a developer since 2007 (so 17 years now) and I’ve learned this field of knowledge has deep rabbit holes of knowledge in every direction:\n- low level memory and CPU stuff\n- distributed systems and their attributes\n- databases, especially when trying to do high availability\n- compilers and transpilers\n- type systems\n- high performance graphics programming (the math!)\n- all the networking stuff: DNS, HTTP, TCP/IP, UDP etc etc etc\n\nAnd I believe most of the things I’ve listed are mostly inherently complex. Then you also have accidental complexity, so things like:\n- the peculiarities of shell scripting\n- object relational mapping (OOP to RDBMS)\n- dependency management in some languages/ecosystems (Python 💀)\n- getting a grip on loosely typed languages: JavaScript\n- browsers’ implementation of certain features, or not even implementing them\n\nI’m “cursed” with an insatiable curiosity so keeping focus on just a few things is the challenging thing for me."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I remember trying to understand the simple concept of stack vs heap. I had never been exposed to it before and it took me some time to understand the implications, along with copy/clone difference etc..."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.748299,
      "arousal": 53.854875,
      "dominance": 59.977324,
      "text": "Get the two Hennessy and Patterson books: \"Computer Architecture, a Quantitative Approach\" and \"Computer Organization and Design - The Hardware Software Interface\".\n\nThere is some overlap in what these books cover, but they come from different directions. The former is a more abstract, more high-level view of how computers work, while the second goes into the gory details of how processors work."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 94.06651533333333,
      "arousal": 77.05971233333334,
      "dominance": 73.62055966666667,
      "text": "Sounds like a fun journey! Not just because of Rust, but the puzzle of getting a deeper understanding of computers can be exhilarating (god I sound like a nerd). Have fun, but be aware that there's always a deeper level. Hic sunt dracones."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.626548,
      "arousal": 58.88714446153846,
      "dominance": 63.23042030769231,
      "text": "A lot of what you talked about I learned from my Computer Systems/OS class in university, which was taught in C. \n\nAfter that, Rust came by pretty easily. Many of the bad hiccups and issues we ran into with things like memory management and thread safety suddenly started to click once I picked up rust.\n\nI recommend finding some OS or computer systems course, or just set of lectures and learn the fundamentals there. C and rust were primarily made for that stuff.\n\nAs for Arc/Rc, I would visit these concepts only after you learn about memory management and multithreading individually —> At a high level, the idea of reference counting, a cool and interesting way to manage heap allocated memory, also happens to solve a lot of issues with dealing with shared heap allocated memory across threads.\n\nfor the most part, having some kind of structured guidance in these topics will help a TON and you’ll have more confidence in terms of what you need to learn next"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.87868475,
      "arousal": 54.28004525,
      "dominance": 64.7675735,
      "text": "You might find [Computer Systems: A Programmer's Perspective](https://csapp.cs.cmu.edu/) useful. It gives you a walkthrough of computer systems and all of the examples are written in C and lab exercises to do to reinforce the concepts you learn."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.88167390909092,
      "arousal": 63.13131309090909,
      "dominance": 63.059163000000005,
      "text": "> It has dawned on me that everything / or at least most of what I know about software development is based on abstractions.  \n\nThis reminds me of my granddad (an electrician) asking me to explain to him how computers work. He has no idea, so I started to tell him how programs run on top of an OS (I think). He insisted that's not how computers _really_ work, so I told him how there's a processor, memory, persistent storage etc. He _still_ said that's not how computers work; I told him that we could talk about transistors and stuff, but that won't help him understand computers either because _the important thing is to know there's abstractions and what they do, not how every single abstraction is implemented_.\n\nMy point is that there is absolutely nothing wrong with not encountering a lot of details until now. And now that you _want_ to look a few layers deeper, I don't think you will have big problems understanding them. It _does_ take time, but it's not magical and as long as you want to learn it, that motivation should keep you going.\n\nWithout structure, here are some additional thoughts I had regarding your post:\n- _\"But I don't understand why the rules exist\"_ - it can be valuable to also learn/use a language that lets you do stuff \"the wrong way\", e.g. Java or Python for concurrency or C for memory management. Reproducing the errors can help you understand the solutions better.\n- _\"everything surrounding unsafe rust seems like an entirely different monster\"_ - unsafe is no joke. If an unsafe function has safety requirements that I understand (e.g. it's \"just\" unsafe because FFI) I feel comfortable doing that, but more complex stuff I simply avoid. I haven't had the need for more complex unsafe anyway.\n- _\"like writing a compiler\"_ - as most people will probably tell you, [Crafting Interpreters](https://craftinginterpreters.com/contents.html) is a great entry point for that!"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.4013605,
      "arousal": 63.321995,
      "dominance": 71.315193,
      "text": "Here's another fun rabbithole for you: https://faultlore.com/blah/tower-of-weakenings/"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 93.650794,
      "arousal": 58.390023,
      "dominance": 71.995465,
      "text": "CS61C, CSAPP, MIT6S081. All free and available online"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 44.217687,
      "arousal": 61.678005,
      "dominance": 52.267574,
      "text": "Don't worry about it, computers have gotten complex enough that nobody can know *everything*. The trick is to focus on the details which are relevant to *you*, and have a decent understanding of the abstraction level below it.\n\nEven assembly is just an abstraction - it's only *vaguely* related to what your CPU is *actually* doing. But that doesn't matter, because the CPU can only mangle it in a way which makes it indistinguishable from straight-up executing the assembly as you'd expect it to."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.53288,
      "arousal": 46.485261,
      "dominance": 60.884354,
      "text": "You may like Bret Victor's talk, \"The Future of Programming\" where he looks at the direction programming over the next fourty years.  The take aways at the end may speak to you.\n\nhttps://www.youtube.com/watch?v=8pTEmbeENF4"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "I feel for you as I come from the exact opposite.  \nI did an electronic engineering degree so learn all the low level stuff, then moved into software where I didn't know a lot of the higher level algorithm stuff and other CS fundamentals. Nothing wrong with it, especially as you seem willing to learn! That's the most important trait to have.  \n\n\nI recommend Ben Eater's YouTube videos if you want to learn about low level CPU stuff. He does in-depth videos on different logic circuits and builds his own small CPU's to really get into the lower level design of computers.  \nhttps://www.youtube.com/@BenEater/videos"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.90551783333333,
      "arousal": 58.786848166666665,
      "dominance": 65.79743016666667,
      "text": ">There really isn't a super specific point to this post, It just makes me feel so bad I don't understand these things\n\nI'm several years into my Rust journey and have delivered customer value throughout that time.  Even having a surface level understanding of the language, I was able to create meaningful applications and take advantage of the language's numerous advantages.  Where language mastery helps is in efficiency - you can do a thing, or you can do a thing well. Either way, though, you're getting stuff done.  And, regardless of which language you're using this side of assembly (and even then, there's HLA assembly), abstraction is inevitable and essential, so there's no reason to feel bad that you're being kept back from the hardware by your choice of programming language.\n\nKnowing what you don't know is the most critical step in your path forward.  For me, async was one of those things that I didn't even try to understand until recently - I was doing just fine as you say with single-threaded apps with the occasional use of channels or rayon for certain operations.  My borrowing and lifetime chops were shaky for a good while, though putting my core data into an ECS forced me to grow that understanding very quickly.\n\nAnd what did a greater mastery of the language net me?  Better performance, lower memory consumption, and the ability to better understand and work with others' code.  And without those things, I still feel confident that my Rust code was more stable and performant than if I were trying to write the same code in C# or TS.  I'm positive my time in Rust was more profitable than if I had buckled down and put the same energy into C++ mastery."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This reminds me that my OS professor during college decided to do away with the typical OS syllabus and teach Rust instead for exactly some of the reasons you're describing. Rust at this point, was in beta, but it was still a very memorable learning experience, and Rust has since become my favorite programming language. It has definitely been one of the more influential learning experiences throughout my dev journey. You can read more about the experiment here: https://rust-class.org/0/pages/using-rust-for-an-undergraduate-os-course.html!"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.21995480000001,
      "arousal": 61.473923,
      "dominance": 64.716553,
      "text": "The frustration I face on the daily is being surrounded by people like yourself that haven’t yet had this insight. So thank you for being ego free and realizing it. Learning is important. \n\nWhen people don’t know these things they make poor algorithmic/ code structure decisions because “well it works fine”. And we end up with electron apps that use 50% of a modern cpu and run like garbage."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.62055966666667,
      "arousal": 52.418745333333334,
      "dominance": 65.34391533333333,
      "text": "Many great resources in comments already and there is of course great https://teachyourselfcs.com/ with nice overview of topics. \n\nAlso, [one of the best places](https://www.youtube.com/watch?v=VcKjvwD930o&list=PL5Q2soXY2Zi-EImKxYYY1SZuGiOAOBKaf) to learn how all it works in hardware and overall systems architecture philosophy (not going down to solid state physics though but that's definitely overkill)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 60.090703,
      "dominance": 74.943311,
      "text": "Trust the process!"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Don't worry. Maybe 1% of engineers really understand thread safety and use it correctly consistently. 0.1% of those (if that) really understand memory ordering and use it correctly consistently."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.1201815,
      "arousal": 47.052154,
      "dominance": 61.394558,
      "text": "Unrelated to Rust, but related to learning about how computers work when coding:\n\nWhen I tried building a NES emulator, I only ever got around to emulating the CPU but it was so nice to actually understand how a CPU works, what a CPU register is, what an instruction is, how interrupts work, etc.\n\nIt sort of connected the dots for me between hardware and software and something clicked on how a jumble of silicon and wires can actually run code."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "soon you'll understand why we hate allocation"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.04459566666667,
      "arousal": 50.26455000000001,
      "dominance": 60.61980333333333,
      "text": "i doubt most computer engineers are great devs. no one truly understands an entire industry or academic field at depth."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.751323,
      "arousal": 55.064248,
      "dominance": 68.253968,
      "text": "Don't worry, a lot of close-to-the-metal developers feel the same when they need to work with CSS or databases?\nUse this bad feeling as motivation to keep learning. No matter how much you learn, it will never get better😜\nThe more we learn, the more we become aware of how much we don't know. So better embrace it."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.80359330769231,
      "arousal": 62.55014830769231,
      "dominance": 65.31484384615385,
      "text": "There is stuff that you learn to survive - skills to pay the bills as some people say. Web development is an amazing example: you are creating value by developing features, slow is a business concept so you need a good enough language to express your business rules: you don’t need a lot of low level knowledge unless you start to hit some memory leaks, thread contexts problems and stuff like this.\n\nBeing a python developer for 12 years now, I found that rust is very expressive but also allows you to have contact with some very important concepts and implementations, so this is the amazing part on my opinion.\n\nAt the end of the day, you’ll be a better developer overall because you know more about the internals.\n\nAnd of course, if you buy the Luca palmieri book (zero 2 prod with rust) you going to see how well rust is rounded for web development too.\n\nWin-win situation I would say haha"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.07180666666666,
      "arousal": 65.26832933333334,
      "dominance": 72.97807999999999,
      "text": "I may also suggest you to check C language if you want to learn low level software. Actually it is simple to learn and you can still work close to the hardware.\n\nLanguages like Rust and C++ comes on top and abstracts/enhances most of the concepts practiced already in C throughout the years.\n\nI’m a beginner in Rust too. Happy coding :)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Learning Rust has made me better as a programmer in every way. I write my main languages at a higher level now"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hey I don’t know how they make transistors single nanometers wide either"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.15419499999999,
      "arousal": 61.904761500000006,
      "dominance": 68.594104,
      "text": "Web applications are multiple layers away from this stuff. no wonder you never needed to know, multiple generations of developers created tools for you to NOT need that knowledge"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.4081635,
      "arousal": 52.267573999999996,
      "dominance": 66.8367345,
      "text": "Depending on how in the weeds you want to get, I'd recommend looking into the books from Randall Hyde. The \"Write Great Code\" series covers a lot of the underlying concepts behind computers, and then his books on Assembly would help teach concepts for working closer to the metal.\n\nIf you're wanting more rust specific stuff though, I've heard good things about Rust for Rustaceans 🙂"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.4671205,
      "arousal": 64.739229,
      "dominance": 67.1201815,
      "text": "You seem pretty self aware, and keen to learn, so I think you’ll be fine. Keep asking questions."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.32300322222221,
      "arousal": 52.670697777777775,
      "dominance": 62.988158,
      "text": "The rabbit hole goes deep. Most devs know 5% of programming and they usually laugh at Computer Science because they think it doesn't teach anything. They think they can learn any language in a week.\n\n\nYou can try Computer Science courses and C/C++, but it's endless and you don't need to know everything. Don't feel bad. It's a sign of intelligence to realize how big the world is.\n\n\nOperating Systems teaches thread safety and atomic, which also apply to webdev, because it's asynchronous. Sending a request to a server is like a thread. You're probably finding a lot of stuff that's surprisingly useful.\n\n\nCompilers more generally teaches how to parse a language, which is not necessarily programming, but even English grammar can be parsed, for speech detection or translation software.\n\n\nMachine code, digital logic, and computer architecture are taught in CS, but if you go deep then it becomes a different degree called Computer Engineering, which is a mix of programming and circuit design, a lot more C and assembly. We built circuit boards and programmed them."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.39909300000001,
      "arousal": 51.70068033333333,
      "dominance": 59.07029466666666,
      "text": "Don't feel bad, if you knew everything you'd get bored - at least I know I would. Lots of great responses with good resources to continue your journey in this thread. Thanks for sparking the discussion.\n\nI'll add that it might be interesting for you at some point to check out [https://os.phil-opp.com/](https://os.phil-opp.com/) \\- a blog dedicated to detailing how to start a simple OS in Rust. There are lots of details about dealing with low level concepts like dealing with no std, handling hardware interrupts, memory paging, allocator designs, types of multitasking, etc."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.41661509090909,
      "arousal": 54.751597545454544,
      "dominance": 66.58420945454546,
      "text": "If you like reading and learning about this stuff, I recommend https://lwn.net/Articles/250967/\n\nIt's essentially a textbook on memory architecture. You probably don't need to read it all, but the intro introduces many useful concepts and the chapters on cache management and coherence answer many of your questions about memory works at a system level. \n\nHowever, it's also critical to realize that Rust doesn't run on hardware. The code it generates does, sure, but there are massive degrees of freedom between Rust and the bare metal that the compiler exploits to optimize code. And that can lead to unexpected results if you're not careful about unsafe. \n\nThere's a series of posts from Ralf Jung that describes some of the unexpected outcomes possible with misuse of raw pointers. https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\n\nAll this is interesting and good stuff to know. The beauty of Rust though is that you can use safe Rust freely without knowing this stuff, secure in the knowledge that if it compiles, you won't run into these edge cases."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.9654195,
      "arousal": 54.634353625,
      "dominance": 62.5283445,
      "text": "> It has dawned on me that everything / or at least most of what I know about software development is based on abstractions. And I'm not talking about library abstractions, i mean language level ones.\n\nThis is indeed intentional and inherent to how computer systems are built and function. \n\nCheck this diagram out: [https://i.stack.imgur.com/AvG0R.jpg](https://i.stack.imgur.com/AvG0R.jpg)\n\nThis is what you learn early in a compE/compsci major program about how computer systems are designed before you dive deep in a part of a single layer for an entire college class. Each layer in the diagram has its own subfield within the computer science/computer engineering/physics research community. Each layer has its own level of complexity and quirks. You can spend a lifetime to learn it all and you still wouldn't be finished. You can see that as a beauty or a curse. The choice is yours :)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.32312937500001,
      "arousal": 58.347505625,
      "dominance": 58.801020375,
      "text": "I wouldn't feel bad. I've been working with Rust for years now, and I only learned about the difference between \\`Rc\\` and \\`Arc\\` a few months ago! Just focus on enjoying the things you DO know, and learn to enjoy THE PROCESS learning. If you were done learning, how boring would life be?! Take the time. Wonder about things. Enjoy it slowly, like how you enjoy eating! :)\n\nThat's my philosophy, anyway... \n\nAbout thread safety... I'm only now learning some details, so someone correct me if I'm wrong. Without it, it is possible for two threads to access the same piece of memory at the same time, and modify it at the same time. The final value of that piece of memory is whatever thread won that race, and modified that value last. To verify that that doesn't happen, you can use atomics, or you can use locks. Atomics verify that one thing happen one after the other by using some magic cpu calls, and it does it all without locking, which is real cool. Locks are an abstraction built on top of atomics and something called thread parking, and you can read more about it here: [https://marabos.nl/atomics/](https://marabos.nl/atomics/) Take the weekend to read through it... Go slowly... Enjoy! :)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Check out [Embedded Systems, in Pyjama!](https://www.youtube.com/playlist?list=PLFt5JBAXXlQow0PLTdqvaiIUMRa71VQHl)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.739229,
      "arousal": 55.6009068,
      "dominance": 63.356008800000005,
      "text": "This is the kind of stuff that is taught in computer science degrees as a foundation on which other knowledge is built. I know that you can get going quickly being self taught, particularly with high level languages, but to catch up on 3 or 4 years of computer science just takes time. Buy some textbooks, and dig away until you know this stuff."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.51322733333333,
      "arousal": 61.451247,
      "dominance": 67.15797400000001,
      "text": "When people ask me what place a traditional four year CS degree has in the world of highly targeted learning, this is what comes to mind.  \n\nNot saying it’s better.  Not saying it is cost effective, or within reach of everyone.\n\nBut all of the stuff you’re wondering about was covered.  1984 grad btw, so none of this is “new” in the way that say LLMs are new."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.13681050000001,
      "arousal": 54.32728649999999,
      "dominance": 66.60997716666667,
      "text": "A few years ago I was working alongside a data engineer with a CS PHD from Stanford and I asked him what kind of books he recommends to get a deeper understanding of how computers really work on the lowest level. I had my notes app open ready to write down a whole list of books... He thought about it for a second and said \"if you take away the research aspect of my PHD, everything I have learned can be summed up in a single book: Nand2Tetris\". I prefer the visual medium for my learning so I recently started viewing it on coursera and it's free but it's absolutely the missing foundational piece (at least for me) https://www.coursera.org/learn/build-a-computer"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "You should pause learning Rust for a while and learn C which won’t take extremely long. It makes learning rust easier because you can write a C program that does the things rust protects you from and see the value in it"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Been learning rust for about a week or so and i feel you, I don’t feel bad about tho, but i get the same feeling of not knowing many of the things rust does because I haven’t worked with low level languages before, at times it is kinda overwhelming i guess but i’ll keep trying"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.4217685,
      "arousal": 62.0181405,
      "dominance": 70.918367,
      "text": "Thisss. Exactly the same thing i am going through right now, as a web developer. It blows my mind when people explain, what exactly is going on inside, byte for byte. Brings to surface how much I dont know"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "now you understand when actual programmer say “ HTML is not a language” why they say it😇"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 88.662132,
      "arousal": 56.122449,
      "dominance": 62.698413,
      "text": "This is the beauty of learning systems level programming, you become such a better developer as a result of knowing everything that's abstracted in more accessible languages"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.0355255,
      "arousal": 57.747543666666665,
      "dominance": 57.690854,
      "text": "just a note on the last part: I never hacked on a compiler, or learned machine code, in my (generalist) CS degree. you may be holding your past self to an unreasonable standard, comparing to an ideal that few people actually live up to.\n\nand more generally: if \"back then\" was the best time to learn, now is the next best thing. I want to second all the folks saying saying to try C. it'll give you a crash course in low-level programming, and it sets the stage quite well for rust's innovations, which may feel more like arbitrary restrictions until you have a segfault"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.26757366666667,
      "arousal": 52.68329566666667,
      "dominance": 54.988662,
      "text": "Don't be sad for what you don't know, be thrilled! Can you even fathom how boring life would be if you did know everything already? 😄\n\nThere is nothing to be ashamed of. Enjoy your journey, that's all that matters. Rust is a great language for approaching the bare metal."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I still don't get 'lifetimes and try to avoid using them"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.451247,
      "arousal": 75.9070295,
      "dominance": 68.9342405,
      "text": "Love it or hate it, I learned a s-load of CS basics by studying [https://en.cppreference.com/w/](https://en.cppreference.com/w/)"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.88249854545455,
      "arousal": 57.32838590909091,
      "dominance": 63.60544209090909,
      "text": "It’s never too late.\n\nI’ve worked in the industry since 2000. I didn’t get a bachelors until 2015. In 2013 I took compilers, which was mind opening. I also took a high perfomance CPU architecture and Os class as part of an online masters I didn’t complete.\n\nThe moral here is not go to college. It’s that you can learn those things now. You probably weren’t ready to do that in 2012.\n\nI was an idiot until I was 28. I thought I knew everything. Only when i grew up and matured was I able to focus on learning, and acknowledge the shortcomings I had to direct my energy. \n\nJust learn the things they interest you now and don’t spend time wishing you did it before.\n\n“Yesterday is not out to recover, but tomorrow is ours to win or lose.”\n-President LBJ"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.22675725,
      "arousal": 58.786848,
      "dominance": 63.09523825,
      "text": "Don't feel bad. I'm pretty sure there are plenty of extremely competent Rust or C programmers that don't have the slightest idea how CPUs work in detail (stuff like [branch prediction](https://danluu.com/branch-prediction/) and the like, though Spectre and Meltdown have brought this particular thing to general attention).\n\nThe fact of the matter is : there's just way too much to know about computers; computer science and programming."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "To be fair, nobody really understands atomic orderings"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "What source you are utilising to learn rust ?"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 70.748299,
      "arousal": 53.854875,
      "dominance": 59.977324,
      "text": "From teach yourselfcs.com\n“There are 2 types of software engineer: those who understand computer science well enough to do challenging, innovative work, and those who just get by because they’re familiar with a few high level tools.”"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I think any rust dev should have learned C and also have taken a t least a shallow dive into functional langs. You’ll need to know that stuff anyhow when dealing with a sys language."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.55102049999999,
      "arousal": 61.054422,
      "dominance": 50.2267575,
      "text": "I agreed with most here. Stop beating yourself up. Rust is the continuation of DECADES of programming abstractions it's self. 6 months? If you are still lost in 2 years then there is likely a problem. Best advice, save yourself a ton of headaches and find a 'paid' mentor."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": ">Most of the stuff I work on is web applications\n\nyea, that fits."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.22902525,
      "arousal": 51.67233575,
      "dominance": 56.462585000000004,
      "text": "There’s not a rule anywhere that says you can’t go get a job working close to the metal. \n\nYou said you wish you could go back in time… if you like programming computers instead of scripting browsers you can switch out of web dev any time.  Only thing stopping you is you."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.76870729999999,
      "arousal": 61.51927440000001,
      "dominance": 67.5623582,
      "text": "Hey. If you want to feel a little better, with the kind of programming you were doing, you were probably better off not knowing how computers work.\n\nIt's a bunch of extra knowledge, and it gnaws at you. Hey, is this abstraction \\*truely\\* thread safe? How do they implement it? How hard can I push this framework before it falls over? What's the failure type when it does? How should I change my monitoring strategy?\n\nImagine learning to drive, and not knowing the difference between pre-synchromesh transmissions, post-synchromesh manual, automatic, CVT. Each effect the power and reliability and cost of a car, and how you drive it... but most people don't know and don't think about it. They just drive, it's fine.\n\nMany of the folks I've worked with in your cohort are blissfully unaware - and were more successful and productive because of it.\n\nSystems peeps built those abstractions and worried hard so you didn't have to. It's ok.\n\nThat being said, welcome!"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.67346950000001,
      "arousal": 59.3537415,
      "dominance": 68.53741450000001,
      "text": "Thread safety is something I learned in my undergraduate OS class. It might be worthwhile to take undergrad CS classes like that if they are made available online for people to self-study.\n\nThe concepts of thread safety are universal to all systems programming languages. Rust just provides a particularly elegant implementation of it."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.659013625,
      "arousal": 54.7902494375,
      "dominance": 65.78089575,
      "text": "I've got a suggestion that comes from a different perspective than most of the excellent suggestions offered so far. It's based on an accidental advantage that I had thanks strange circumstances and gets you down into the most fundamental levels of computing quickly. It allows you discover and directly experience CPU registers, bit-wise operations, hardware interrupts, memory access and management, peripheral interfaces, etc in ways that are fairly quick and manageable.\n\nI suggest that, somewhere along the way sooner rather than later, it would be very useful for you to do a few straightforward projects that are engaging, purposeful, and focused on a simple hardware platform. The goal here is to have a few fairly abstraction-free experiences directly manipulating hardware. \n\nA super low-friction way of doing that is by getting a SoC- or microcontroller-based project that supports a language that you are already familiar with (most likely microPython or C, although there are others out there if you dig a bit). There are so many options that any hobby you already have could probably benefit, from building drones and bots to guitar pedals and synths, to home automation controllers, along with tons of other choices. If you want to really stretch, you could go with a FULL diy keyboard project where you'll end up implementing a custom firmware (search QMK for an interesting rabbit hole).\n\nMake the project first using the familiar language you've chosen. Once you've completed it, I recommend making it a second time in assembly. (This is why a simple 8-bit processor is a better choice than a more complex platform to start.) The are lots of options and kits that are STM32/ATmega/ESP-based (think Arduino/RPi etc that can be bought online).\n\nTaking this approach allows you to first get a clear idea of how the item \"should\" work using modern development tools, while introducing you steadily to processor and peripheral components in a modestly familiar way. You'll want to choose a project that includes programmatic elements as a core part of the activity otherwise you might end up learning more circuit design than CPU hardware insights lol.\n\nMore than anything else, choose something that sounds fun and will hold your interest while you grind thru the murkier parts. It will transform the way you look at systems languages like Rust/C/C++/etc."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Just out of curiosity, what language or languages have you developed in?"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "Be curious on your journey :3"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.68405133333333,
      "arousal": 53.40136066666667,
      "dominance": 59.56160233333333,
      "text": "You'll find that the seniors and higher that seem to breeze through some or all of this stuff have a lot of experience - time invested in other words. Never stop learning, do hard things.\n\nI don't know what your learning style is, find what works and go."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.5124715,
      "arousal": 68.707483,
      "dominance": 60.430839000000006,
      "text": "The consequences of giving people python as their first language"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "lmao same just learned about logic gates 2 years into programming"
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "This is the first time you are reading the docs, these things are merely the basics."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "It's great to learn more, but don't feel bad about yourself. It's not like low-level programmers know anything about web apps."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.60430825,
      "arousal": 61.93310625,
      "dominance": 66.8367345,
      "text": "This is kind of fascinating. I started out doing C programming, and early in my career did embedded programming using an operating system called VxWorks with threads, semaphores, mutexes all as first class things we actually had to deal with ourselves.\n\nSo in a sense I am lucky I wasn't \"spoiled\" by more abstract higher level languages and I didn't have to deal with something with the learning curve of Rust.\n\nPerhaps a low level C programming tutorial with thread safety is out there somewhere, that you could try.\n\nAnyway thread safety just means that all the variables used in a function are on (or pointed to from) the thread's own stack, and aren't global where they could be modified by callers from other threads.\n\nAnd atomic operations can't be interrupted by the CPU switching from one thread to another, which is important if you want to be sure another thread doesn't change something you are using between one line of your code and another.\n\nOnce you have an idea of how threads work the problems this causes should become clear and their solutions should make sense.\n\nI even wonder if an understanding of how this stuff is solved in C (and therefore the deficiencies of these solutions) would help in fully grokking why Rust's solutions are so much better."
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "I am the other way around, coming from low level electronics like transistor, to the first time exposed to 8086\n\nmake me amaze that we can use higher level language to command low level transistor at will, in \"english\""
    },
    {
      "post_title": "Rust has exposed my lack of knowledge on how computers work.",
      "created_utc": 1707462325.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Frankly if you want to get that low level, it's worth learning C."
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 89.455782,
      "arousal": 62.698413,
      "dominance": 74.376417,
      "text": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 45.124717,
      "dominance": 56.689342,
      "text": "Please note that while they use Bevy, they made their own graphical engine."
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "They gave an hour long talk at a conference about their rendering techniques and it's fascinating.\n\nhttps://youtu.be/jusWW2pPnA0"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I can see whey they are nominated, the graphics and especially construction animations are very satisfying."
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.09070299999999,
      "arousal": 64.90929700000001,
      "dominance": 70.521542,
      "text": "I'm so proud of them <3 What a stunning game!"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.6145125,
      "arousal": 58.7301585,
      "dominance": 60.147391999999996,
      "text": "Congrats! BAFTA Game Awards are IMO the most legit award out there for the Games industry."
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Ana & Tom are lovely people. Well deserved!"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "Amazing. I hope they publish some of the graphics library too"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 89.455782,
      "arousal": 62.698413,
      "dominance": 74.376417,
      "text": "What was the technical achievement?"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.385488,
      "arousal": 58.503401,
      "dominance": 59.863946,
      "text": "Wish they’d port it to macos as well"
    },
    {
      "post_title": "Tiny Glade (made with Rust and Bevy) is a BAFTA nominee for Technical Achievement",
      "created_utc": 1742940717.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.61094885714286,
      "arousal": 62.034337428571426,
      "dominance": 64.02656314285714,
      "text": "Things i love about Tiny Glade:  nearly no motion sickness, no killing, no anxiety, calming relaxation, building fun, growing art, ease of use, beautiful results.  \n\nThings I want from tiny glade:  villagers with familiar photo faces, selectable tame dragons & creatures, a little improved menu for “clutter” control.  A screen i can hang on the wall like a landscape with my tiny peeps and tiny village doing tiny things all day long."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 66.92176875,
      "arousal": 51.729025,
      "dominance": 59.807256,
      "text": "When people talk about Rust, they usually focus on how fast it is. And sure, the performance is great.\n\nBut as someone who primarily works with Java, the main reason I like Rust has nothing to do with speed.\n\nFor me, it's about how Rust handles null pointers and system-level errors. Kotlin improves Java’s null safety, but it's still possible to shoot yourself in the foot. Rust, on the other hand, forces you to handle optional values and potential failures explicitly at compile time.\n\nThat change in mindset is what really sold me on Rust.\n\nWhat was it that made Rust click for you?"
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "the fact that null and errors/exceptions are both treated using enums\n\ngenerics were another reason, it never made sense for me to see, say, c++ code with a `template typename T` which didn't specify what T could and couldnt be. And it can't really do that either since traits aren't a thing in c++. Something as simple as `impl<T: Debug + Clone + Default>` makes it extremely clear what the type is supposed to be doing, and is easily translated into english (\"for each type T which is `Debug`able, `Clone`able and has a `Default`, implement...\")"
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.420257,
      "arousal": 59.59939533333333,
      "dominance": 67.64928166666667,
      "text": "If you really need result type just use arrow in kotlin and be done with it. I mean people will moan about adding a library on top of a language to bolt new patters but the library was designed from a scala shop that used cats/zio like development and wanted a similar experience on native android development.\n\n\nOn the other hand rust errors are way too good."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.53363566666667,
      "arousal": 57.9176115,
      "dominance": 67.25245650000001,
      "text": "Kotlin and Rust are the two languages that I’m most fluent in, and in my opinion Kotlin’s null handling is essentially as safe as Rust’s Option and more ergonomic to boot. With the exception of Java interop, of course. But then, Rust doesn’t interop with Java at all!\n\nWhere Kotlin falls on its face is the lack of a good Result type. Yes, there are some decent third-party alternatives, but because they were not contemplated by the language, using them is not very ergonomic."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.69463333333333,
      "arousal": 58.54119433333333,
      "dominance": 59.03250166666667,
      "text": "I am sick of the people who say, \"My language can do all that.\" the difference is that most people don't \"do all that\" in languages like C++. \n\nI find that rust forces me to be somewhat complete. It whines like a little baby if I don't handle all the possible outcomes. When I am serializing things to and from json it gets all whiny when I feed it incomplete, or ignored extras in the json. \n\nAnd on and on. Things like having extra fields in json really needs to ask the question, \"Well if you are ignoring them, why are they even there?\" \n\nRust isn't just safe because of all the memory stuff, but it is effectively a self contained culture of actually completing your code."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.15743442857142,
      "arousal": 55.328798285714285,
      "dominance": 62.42306442857143,
      "text": "> Kotlin improves Java’s null safety, but it's still possible to shoot yourself in the foot. Rust, on the other hand, forces you to handle optional values and potential failures explicitly at compile time.\n\nhttps://kotlinlang.org/docs/null-safety.html\n\nis pretty reasonable to me, and very similar to\n\nhttps://dart.dev/null-safety\n\n---\n\nedit:\n\ntldr is that both Kotlin and Dart default to [non-nullabale types](https://dart.dev/null-safety#null-safety-principles) and nullable ones (such as `String?`) are *opt-in*. If you opt into nullable types, then you're backed by the compiler and can't *accidentally* use `null`, it'll be a compile-time error.\n\n(disclaimer: I'm not a Kotline or Dart user myself, correct me if I'm wrong)\n\nGreat article from Bob Nystrom ([Crafting Interpreters](https://craftinginterpreters.com) 👍) on why Dart went with `Nullable` instead of `Option<T>`:\n\nhttps://medium.com/dartlang/why-nullable-types-7dd93c28c87a | [Web Archive](https://web.archive.org/web/20201207170337/https://medium.com/dartlang/why-nullable-types-7dd93c28c87a)\n\nLil clickbait:\n\n> A few weeks ago, we announced Dart null safety beta, a major productivity feature intended to help you avoid null errors. Speaking of null values, in the /r/dart_lang subreddit [a user recently asked](https://www.reddit.com/r/dartlang/comments/jruhji/why_does_nnbd_dart_still_have_null/gbwi364/):\n\n> >    But why do we even still have/want null values? Why not get rid of it completely? I’m currently also playing around with Rust and it doesn’t have null at all. So it seems to be possible to live without it.\n\n> I love this question. Why not get rid of null completely? This article is an expanded version of what I answered on that thread."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "I disagree. Kotlin fully addresses the problem and offers its own solution to the representation of missing values.\n\nKotlin's approach is just as safe as Rust's.\n\nFrom a practical standpoint, you could argue that Rust's approach is more verbose since it requires a lot of `unwrap()/map()/if let/match` to actually make use of options, while Kotlin uses the terser `?` operator."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "These kinds of types have been around for years in haskell, elm, etc.  But rust incorporates them into a language that is REALLY fast.  That's the breakthrough, for me."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 32.76644,
      "arousal": 61.337868,
      "dominance": 46.712018,
      "text": "Kotlin's real crime is lateinit, and yes I've seen it leading to crashes in production"
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I don't follow. I find null handling adequate in both Kotlin and Rust. In fact I find error types in Rust a bit annoying, you practically need `anyhow` to make the question mark work."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 64.8979592,
      "arousal": 50.4988664,
      "dominance": 60.3628116,
      "text": "\\> Rust, on the other hand, forces you to handle optional values and potential failures explicitly at compile time.\n\nOption returns either \\`Some()\\` or \\`None\\`, and \\`None\\` isn't equivalent to \\`null\\`. You can't dereference a \\`None\\`.\n\n\\> it's about how Rust handles null pointers and system-level errors\n\nIn unsafe Rust (accessing raw pointers or using libc functions that returns a pointer), in that case there's a \\`is\\_null()\\` method for the pointer. System level errors seems to mean something else entirely, which can't be detected at compile time."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.0521542,
      "arousal": 58.0045352,
      "dominance": 63.6961448,
      "text": "People kind of talk about performance, but what people never stop talking about is memory safety. Part of that is nullptr, among other things"
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You are confusing null values, which are used to represent the absence of any value whatsoever, with null pointers, which are pointers that for whatever reason point to address zero. There are no pointers in the JVM.\n\nWhat Kotlin is addressing is that handling null values in Java was a footgun. Kotlin and Rust are different beasts. Kotlin is more like a Soviet tractor, and Rust is more like a Ferrari. Different tools for different jobs."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.753590333333335,
      "arousal": 47.278911666666666,
      "dominance": 60.393046,
      "text": "Most of what I did before was C++.\n\n\nPackage manager, compiler warnings and errors. And rayon, wtf, why is it so easy to parallelize ?\n\n\nIt feels like it's made to be comfortable to work with. Feels like it has all the tools you need to write performant programs.\n\n\nI have only coded a little bioinformatics application so far with it, did the same with C++. Having been a working student for 2.5 years using only C++ I expected it to be much harder with a completely new language.\n\n\nWas a fucking walk in the park, it just works.\nAnd I spend way more time on C++ to still be slower by a slow margin.\n\n\n\"C++ is faster then Rust theoretically, but the performance gains have to be weighed against much greater development times. \"- conclusion in my thesis on comparison of both languages."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.345804875,
      "arousal": 64.654195125,
      "dominance": 59.778911625,
      "text": "Sorry, Rust isn't a silver bullet also, things that are very simple granted you have a GC become a nightmare in Rust because of the borrow checker. I tried to make a multi-user chat server in Rust with async and it was hard as fuck, and I reached a point it was impossible to not copy/clone stuff because sharing references across threads is hard as fuck to do right. I can do the same thing in an afternoon using Java or Go because the GC covers my back.\n\nIf you write web apps using someone's else framework, or do a game using Bevy, or a simple CLI app, sure, it is wonderful to use sequential Rust: no worries about async, no worries about lifetimes, life is good. If you need to do complex stuff, Rust is just too hard to being used correctly."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.65759599999999,
      "arousal": 56.273620666666666,
      "dominance": 64.62585033333333,
      "text": "I can't trust my colleagues and I might be controlling. In Rust if you give me a mutable reference I'm the only that has it, if it's immutable nobody else can change it. In C++ if I say my reference is const I'm only promising this to others, I don't get any promises about constness from the caller.\n\n\nAlso CoW."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.582766,
      "arousal": 53.741497,
      "dominance": 71.882086,
      "text": "I don't think that Rust handles null better than Kotlin, except for one thing: Rust can nest options, Kotlin can't nest nulls.\nOption<Option<T>> is possible, T?? isn't."
    },
    {
      "post_title": "Kotlin only treats the symptoms of null pointers, while Rust cures the disease. That’s one of the main reasons I prefer Rust.",
      "created_utc": 1752983311.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.5079365,
      "arousal": 64.1156465,
      "dominance": 62.5283445,
      "text": "I love Rust and Java. I can't stand Kotlin. It's the most pompous, useless, bloated language there is. I never could figure what real problem it solves. Maybe I've been doing Java for too long but NPEs aren't a problem worth changing language for. The type system is the same as Java's but with extra keywords. And classes have properties instead of fields, because uh, reasons?"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 94.897959,
      "arousal": 81.85941,
      "dominance": 77.097506,
      "text": "Working with Rust is super fun coming from C++"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 76.64399111111112,
      "arousal": 58.02469144444444,
      "dominance": 67.7752581111111,
      "text": "I'm a C++ developer and I recently got interested in Rust. I tried Rust about 3 years ago and I was not particularly interested in it back then. I recently wanted to make a lightweight clone of \\`neofetch\\` and I wanted to give it a try in Rust. The experience was really good. These are following things I loved coming from C++:\n\n1. The tooling is amazing. \\`cargo\\` is really good compared to \\`cmake\\` or other tools. I don't even think they're comparable that way but it felt good to use a good package manager + compiler. \\`rust-analyzer\\` for vscode felt like I was using an AI tool like copilot. It was genuinely faster to user \\`rust-analyzer\\` than to use copilot or other AI tools. Really showed how AI is nothing but fancy autocomplete for now and also how good tooling makes them redundant. The fact that the analyzer can work offline is a major plus.\n\n2. The library ecosystem and the accompanying documentation around it is amazing. Rust docs was amazing and having a consistent documentation source was a great plus.\n\n3. Writing Rust in the \"Rustonic\" (akin to Pythonic) way felt incredibly satisfying. I made a habit of first writing my code and then asking ChatGPT how I can write it in a Rustonic way and now I'm fairly comfortable following the rust idioms. It feels super satisfying and concise. I used to explore the C++ stl looking for some lesser known tricks and headers and it felt akin to that.\n\nI wrote a simple demo project to see how quickly I can come up something and I made a clone of \\`neofetch\\`. \n\nTry it out: \\`cargo install ashwin-fetch\\` (That's my name lol)"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "Move by default. No constructor bullshit. Algebraic data types. LSP and formatter right out of the box. Pattern matching. Variable shadowing. If-expression instead of if-statement. Ad-hoc polymorphism. Better error messages. Compile-time lifetime validation.\n\nI have to use C++ occasionally and I miss those features."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.03250166666667,
      "arousal": 50.680272,
      "dominance": 56.349206,
      "text": "> 3. Writing Rust in the \"Rustonic\" (akin to Pythonic) way felt incredibly satisfying. I made a habit of first writing my code and then asking ChatGPT how I can write it in a Rustonic way and now I'm fairly comfortable following the rust idioms. It feels super satisfying and concise. I used to explore the C++ stl looking for some lesser known tricks and headers and it felt akin to that.\n\nFWIW this is typically called writing \"idiomatic rust\" or \"rusty\" rather than \"rustonic\". Those keywords will help a lot if you're searching for ways to improve in that area."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Something that instantly popped to me reading your code: why don't you use `derive(Debug)`?"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.598639,
      "arousal": 44.78458,
      "dominance": 48.752834,
      "text": "> I made a habit of first writing my code and then asking ChatGPT how I can write it in a Rustonic way and now I'm fairly comfortable following the rust idioms.\n\nHave you used `cargo clippy`? It's the built-in linter. While you shouldn't do everything it says, it can serve in a similar role."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well, Rust was made by tired c++ dev, so.. it's exactly the intent"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "Yep absolutely hear you, Rust is the way I recon. What you learn from rust can be applied back to c++ too, be more efficient more stable code writers"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 24.036281,
      "arousal": 78.798186,
      "dominance": 57.256236,
      "text": "I usually hate those who praise Rust out of no reason in this sub. But mate, for ex-Cpp devs? That’s absolutely reasonable IMHO."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "'satisfying', i use the same wording, 'rust is very satisfying to write'. something about it's logical solidity."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.578231,
      "arousal": 64.965986,
      "dominance": 43.0839,
      "text": "going to the dentist is more satisfying than using c++"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[deleted]"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.603175,
      "arousal": 55.668934,
      "dominance": 57.709751,
      "text": "Going from C++ to Rust should be a very smooth transition too 😆"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.736961,
      "arousal": 56.689342,
      "dominance": 72.222222,
      "text": "Cargo was probably the main reason I chose Rust for a project a few years ago and still pick Rust for many projects now. I don't mind C++ and I use C for lots of things still, but just having a modern way to add dependencies is \\*massive\\* boon for Rust."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Post this in r/programmingcirclejerk or r/cpp and the upvote/downvote rate would be totally different"
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I actually dread having to use C++ because it has the packages I need after working in rust. I actually go back to rust for like a day or two to write a dumb program just to satisfy my cravings. I pray for the day rust has all the things I need. For reference I do mostly scientific computing."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 46.598639,
      "arousal": 44.78458,
      "dominance": 48.752834,
      "text": "> Writing Rust in the \"Rustonic\" (akin to Pythonic)\n\nI think that the accepted term is *rustic*.\n\n> I made a habit of first writing my code and then asking ChatGPT\n\nDon’t do that. Just `cargo clippy`."
    },
    {
      "post_title": "Working with Rust is super fun coming from C++",
      "created_utc": 1752533532.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "As a c++ developer and used rust for a while, it is very interesting to see those remarks.honestly rust is a good language but c++ is good as well."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rewriting Rust"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.1191506969697,
      "arousal": 59.61657403030303,
      "dominance": 66.23033045454545,
      "text": "> Now, there are issue threads like this, in which 25 smart, well meaning people spent 2 years and over 200 comments trying to figure out how to improve Mutex. And as far as I can tell, in the end they more or less gave up.\n\nThe author of the linked comment did extensive analysis on the synchronization primitives in various languages, then rewrote Rust's synchronization primitives like Mutex and RwLock on every major OS to use the underlying operating system primitives directly (like futex on Linux), making them faster and smaller and all-around better, and in the process, literally *wrote a book* on parallel programming in Rust (which is useful for non-Rust parallel programming as well): https://www.oreilly.com/library/view/rust-atomics-and/9781098119430/\n\n> Features like Coroutines. This RFC is 7 years old now.\n\nWe haven't been idling around for 7 years (either on that feature or in general). We've added asynchronous functions (which whole ecosystems and frameworks have arisen around), traits that can include asynchronous functions (which required *extensive* work), and many other features that are both useful in their own right and needed to get to more complex things like generators. Some of these features are also critical for being able to standardize things like `AsyncWrite` and `AsyncRead`. And we now have an implementation of generators available in nightly.\n\n(There's some debate about whether we *want* the complexity of fully general coroutines, or if we want to stop at generators.)\n\nSome features have progressed slower than others; for instance, we still have a lot of discussion ongoing for how to design the AsyncIterator trait (sometimes also referred to as Stream). There have absolutely been features that stalled out. But there's a *lot* of active work going on.\n\nI always find it amusing to see, simultaneously, people complaining that the language isn't moving fast enough and other people complaining that the language is moving too fast.\n\n> Function traits (effects)\n\nWe had a *huge* design exploration of these quite recently, right before RustConf this year. There's a challenging balance here between usability (fully general effect systems are *complicated*) and power (not having to write multiple different versions of functions for combinations of async/try/etc). We're enthusiastic about shipping a solution in this area, though. I don't know if we'll end up shipping an *extensible* effect system, but I think we're very likely to ship a system that allows you to write e.g. one function accepting a closure that works for every combination of async, try, and possibly const.\n\n> Compile-time Capabilities\n\nSandboxing against *malicious* crates is an out-of-scope problem. You can't do this at the language level; you need some combination of a verifier and runtime sandbox. WebAssembly components are a much more likely solution here. But there's lots of interest in having capabilities for other reasons, for things like \"what allocator should I use\" or \"what async runtime should I use\" or \"can I assume the platform is 64-bit\" or similar. And we do want sandboxing of things like proc macros, not because of malice but to allow accurate caching that knows everything the proc macro depends on - with a sandbox, you know (for instance) exactly what files the proc macro read, so you can avoid re-running it if those files haven't changed.\n\n> Rust doesn't have syntax to mark a struct field as being in a borrowed state. And we can't express the lifetime of y.\n\n> Lets just extend the borrow checker and fix that!\n\n> I don't know what the ideal syntax would be, but I'm sure we can come up with something.\n\nThis has never been a problem of syntax. It's a *remarkably* hard problem to make the borrow checker able to handle self-referential structures. We've had a couple of iterations of the borrow checker, each of which made it capable of understanding more and more things. At this point, I *think* the experts in this area have ideas of *how* to make the borrow checker understand self-referential structures, but it's still going to take a substantial amount of effort.\n\n> This syntax could also be adapted to support partial borrows\n\nWe've known how to do partial borrows for quite a while, and we already support partial borrows in closure captures. The main blocker for supporting partial borrows in public APIs has been how to expose that to the type system in a forwards-compatible way that supports maintaining stable semantic versioning:\n\nIf you have a struct with private fields, how can you say \"this method and that method can borrow from the struct at the same time\" without exposing details that might break if you add a new private field?\n\nRight now, leading candidates include some idea of named \"borrow groups\", so that you can define your own subsets of your struct without exposing what private fields those correspond to, and so that you can change the fields as long as you don't change which combinations of methods can hold borrows at the same time.\n\n> Comptime\n\nWe're actively working on this in many different ways. It's not trivial, but there are many things we can and will do better here.\n\nI recently wrote two RFCs in this area, to make macro_rules more powerful so you don't need proc macros as often.\n\nAnd we're already talking about how to go even further and do more programmatic parsing using something closer to Rust constant evaluation. That's a *very* hard problem, though, particularly if you want the same flexibility of macro_rules that lets you write a macro and use it in the same crate. (Proc macros, by contrast, require you to write a separate crate, for a variety of reasons.)\n\n> `impl<T: Copy> for Range<T>`.\n\nThis is already in progress. This is tied to a backwards-incompatible change to the range types, so it can only occur over an edition. (It would be possible to do it without that, but having Range implement both Iterator and Copy leads to some easy programming mistakes.)\n\n> Make if-let expressions support logical AND\n\nWe have an unstable feature for this already, and we're close to stabilizing it. We need to settle which one or both of two related features we want to ship, but otherwise, this is ready to go.\n\n> But if I have a pointer, rust insists that I write `(*myptr).x` or, worse: `(*(*myptr).p).y`.\n\nWe've had multiple syntax proposals to improve this, including a postfix dereference operator and an operator to navigate from \"pointer to struct\" to \"pointer to field of that struct\". We don't currently have someone championing one of those proposals, but many of us are fairly enthusiastic about seeing one of them happen.\n\nThat said, there's also a danger of spending too much language weirdness budget here to buy more ergonomics, versus having people continue using the less ergonomic but more straightforward raw-pointer syntaxes we currently have. It's an open question whether adding more language surface area here would on balance be a win or a loss.\n\n> Unfortunately, most of these changes would be incompatible with existing rust.\n\nOne of the wonderful things about Rust editions is that there's very little we *can't* change, if we have a sufficiently compelling design that people will want to adopt over an edition."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.834467,
      "arousal": 58.84353766666667,
      "dominance": 62.43386233333333,
      "text": "I'm not sure why they said the mutex improvements were stalled for years -- didn't the mutex implementation on linux switch to futex at some point? That seems like something that came out of the discussion he linked.\n\nSome of these proposed changes seem (very) nice to have, but I suspect the devil is in the details and actually implementing them would be quite hard to do"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.7777775,
      "arousal": 60.770975,
      "dominance": 70.61602416666666,
      "text": "A bunch of stuff is sort of held up while the type handling in the compiler gets some love. It was hard to understand, hard to work on, and most importantly, had known soundness bugs that were open for years. They seem to be making steady progress though.\n\nAs for a lot of other stuff, I don't mind it moving a bit slower now. Don't want it to become C++ with so much crap bolted on that there's 20 ways to do everything and everybody has their own code style.\n\nI do agree that Rust will probably be replaced by or evolve into something more polished. BUT I think that will take quite a while, and I also think it's kind of a moot point as I firmly believe Rust will be compatible with and trivial to port into that new language."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust++?"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.52532133333334,
      "arousal": 65.45729433333334,
      "dominance": 69.16099733333334,
      "text": "> Now, there are issue threads like this, in which 25 smart, well meaning people spent 2 years and over 200 comments trying to figure out how to improve Mutex. And as far as I can tell, in the end they more or less gave up.\n\nI don't know if this is a deliberate misinformation made by the author to give a sense that all efforts are in vain, but anyone who fully reads the [tracking issue](https://github.com/rust-lang/rust/issues/93740) will realize (mainly) Mara Bos and joboet has already made (and is still continuing making) enormous effort to improve the synchronization primitives significantly and reached most of the goal, which is probably the largest refactoring of std modules in recent years. The author completely erased their contribution here."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.33711300000001,
      "arousal": 69.61451266666667,
      "dominance": 45.275888,
      "text": "To be able to tell the compiler to not compile anything that does panic would be nice. Filtering for some methods like unwrap is feasible but there are a lot of other methods that could panic."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.50226775,
      "arousal": 59.580498500000004,
      "dominance": 65.6746035,
      "text": "The article:\n\n    // Why doesn't this work already via FnOnce?\n    let x: some_iter::Output = some_iter(); \n\nMeanwhile TWIR: https://github.com/rust-lang/rust/pull/129629.\n\n    trait Foo {\n        fn bar() -> impl Sized;\n    }\n    \n    fn is_send(_: impl Send) {}\n    \n    fn test<T>()\n    where\n        T: Foo,\n        T::bar(..): Send,\n    {\n        is_send(T::bar());\n    }\n\nThe [RFC](https://rust-lang.github.io/rfcs/3654-return-type-notation.html#where-rtn-can-be-used-for-now) mentions the `let x: some_iter::Output` (or `let x: some_iter(..)` usecase as a future possibility. \n\nSeeing that there is a progress in this area, maybe it's something that you can push forward and not \"feel powerless\"? :)"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.92998875,
      "arousal": 56.7743763125,
      "dominance": 63.903061125,
      "text": "I don't know if this was the intent of the author or not, but this whole article reads like, \"Stability is boring, these people don't know how to run a language. I bet I could do better myself, but I don't have the time.\" Which strikes me as incredibly naive.\n\nStability is an _express feature of Rust_ that we're after. By design, we want Rust to be incredibly stable and backwards-compatible for years or decades to come. This is seen as an incredibly desirable feature to have by many industries. Rust has been stable for 8 years, and that's seen as *young* by many. Only _just now_ are some industries currently using C or C++ starting to become interested in adopting Rust. If we give it up now, it will only confirm to these parties that Rust indeed is \"a toy\" and not suitable for their industry.\n\nI do agree that there's an inherent tension between this kind of stability and innovation. Sometimes new features _do_ get discussed to death if there isn't a consensus on a cohesive vision on how the feature will be maintained and \"fit in\" with the rest of the language in the future. That's a bummer sometimes, but that's the price you pay for that kind of stability. There's a tradeoff, and if that tradeoff doesn't make sense for what you're doing, then Rust might not be the right language for you.\n\nI don't think this is a good or bad thing. Languages that do move fast and break things in order to adopt new innovative features have a place too. Oftentimes these sorts of languages are the ones on the frontlines turning research ideas into practical ones that later, move-slow-and-stable languages learn from and potentially borrow from. Think of it as Rust \"taking one for the team\" by being a stable language that still does take ideas from programming language research newer than 1995.\n\nThat said, I don't want to belittle the innovation that Rust _has_ had post-1.0, and I think in general Rust has done a pretty good job of adopting new large features in a backwards-compatible way that is also forwards-stable. It just won't be the same kind of progress that a move-fast language might have."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 35.37415,
      "arousal": 79.591837,
      "dominance": 36.281179,
      "text": ">This sounds weird at first glance - but hear me out. See, there's lots of different \"traits\" that functions have. Things like:\n\n> - Does the function ever panic?\n>\n> ...\n>\n> - Is the function guaranteed to terminate\n\nI too would like to solve the halting problem."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "> I'd also change all the built in collection types to take an Allocator as a constructor argument. I personally don't like Rust's decision to use a global allocator. Explicit is better than implicit.\n\nI can't even begin to think about how annoying that would be in actual production code. And the author just complained about having to dereference raw pointers explicitly in the previous paragraph!"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.313492125,
      "arousal": 58.219954625,
      "dominance": 64.59750575,
      "text": "While I can totally understand where you come from, I rather take the current slow and careful evolution over a rushed and buggy one.\n\nThe `format_args_nl` macro is just catenating a newline to the format string, then calls `format_args` internally, and the reason it used to be implemented in the compiler was originally that proc macros could not return errors the way compiler code could back then, and there was a wish to produce good compiler errors for syntax errors in format strings or mismatches of arguments and format string. A few months ago, Mara Bos (IIRC) extended the compiler code for `format_args` to be able to pull those formats together (which improves performance in many cases). While this might be possible to implement as a proc macro, reaching the performance of the current code is a non-starter, and so while the motivation has changed, the macro is still implemented in the compiler.\n\nAlso I'm with you on `if let` chains. We use them in clippy and they're a big ux win. Per the [tracking issue](https://github.com/rust-lang/rust/issues/53667), the remaining open question is about interaction with `match`es. So we'll very likely get there within the next year.\n\nRegarding capabilities, there is the [Dacquiri](https://docs.rs/dacquiri/latest/dacquiri/) framework that already seems to do what you envision.\n\nI suggested having a write-only reference type back in 2016 that would have been safe to use (unlike `MaybeUninit`). Perhaps we'll get one in a future version of Rust, but I'm reasonably happy to have `MaybeUninit` in the meantime.\n\nRegarding purity, I have written an approximative condition check in clippy (originally for the `must_use_candidate` lint), which gave me an appreciation how hard it is to correctly implement such a thing and what corner cases a correct check would have to handle (e.g. would cloning an `Arc` constitute a side effect? Technically it is, because it could overflow the refcount, but that's highly unlikely and probably not too helpful)."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.693878,
      "arousal": 61.564626,
      "dominance": 72.675737,
      "text": "Surely the reason that large new features have slowed down is mainly that the easier ones have been implemented, so the backlog of good ideas is left with more and more difficult tasks."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Great post Joseph.\n\nRe supply chain, while not built into the Lang/cargo there is cackle which takes a shot at it https://github.com/cackle-rs/cackle"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "A language like Rust shouldn’t turn out new features like a factory. The maintainers should carefully consider a large number of experimental features and community feedback before moving a full set of related features into the stable release."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.036848125,
      "arousal": 49.702381124999995,
      "dominance": 58.574262875,
      "text": "On a one hand, I have very similar feelings. Part of me misses the times around 2015 when rust was moving so fast and we got big new features every 6 weeks. It was quite exciting.\n\nA subpart of this part of me thinks it might be related with the fact that early Rust builders, who were very active, left the project over time for various reason - due to burnout, Mozilla moves, some dramas, and crypto (I'm biased here), to name some.\n\nAnother part of me thinks it's actually good. Rust is already complex. Many big new features add even more complexity. At some point, it might cross the line, just like, in my opinion of course, C++ did and C# is doing. The current language suits ~99% of my needs if not more."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.5827666,
      "arousal": 60.74829939999999,
      "dominance": 58.390022699999996,
      "text": "I actually agree with the author's conclusion but not most of the reasoning.\n\nA lot of the post is just a wish list of language features. They also describe frustration/disappointment that the language isn't still adding features as quickly as it once did, and offer an hypothesis that the *management* of the Rust language isn't scaling well (which leads to slower feature development).\n\nI *do* actually feel like Rust is a first-gen \"product\" akin to the first iPhone. I really like that comparison and it resonates with me. It's not an *insult*- it's actually pretty high praise. However, I *don't* feel that way because of the cadence of features being added to Rust. I honestly don't really want Rust to be this giant kitchen-sink of a language that supports every single trendy programming feature natively.\n\nThe reason I think Rust feels like a first-gen product is because its fundamental innovation (lifetimes and borrow checking) was so novel that it was hard to guess what patterns programmers would discover and to design APIs (because you can't just ~~steal~~ *be inspired by* some other language's approach without adapting it to make sense with Rust). Some APIs didn't age especially well (deprecated Error stuff, mutex poisoning is *mostly* considered to be a mistake by many, etc).\n\nAnother reason it feels like a gen1 product is that the Rust team made the pragmatic decision to stabilize features before they were truly 100% complete (the \"minimum viable product\", a.k.a. MVP, approach). But, by doing so, you can often find that different language features don't always work together, and it makes Rust feel either incomplete and/or experimental--like they're just trying out stuff and hoping it'll eventually work. This is most obvious with features like `impl Trait` in return position and `async fn` taking a very long time to work with trait methods (and AFAIK, they **still** aren't 100% complete). It makes the language feel inconsistent and very \"rough around the edges\".\n\nRust is awesome, but I definitely think it's the iPhone 1 of its programming language niche/generation. I think and hope that whatever ends up being Rust 2.0 has a more cohesive vision and design from the get-go so that everything in the language works with everything else and *feels* consistent and purposeful. But, *if* there ever is a language that is the second generation standard bearer, I have no doubt that it wouldn't be possible without Rust coming first and going through its growing pains. That's just the price of real innovation."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.92517028571428,
      "arousal": 55.928085714285714,
      "dominance": 57.11046314285715,
      "text": "> In the rust compiler we essentially implement two languages: Rust and the Rust Macro language. (Well, arguably there's 3 - because proc macros). The Rust programming language is lovely. But the rust macro languages are horrible.\n>\n> But, if you already know rust, why not just use rust itself instead of sticking another language in there? This is the genius behind Zig's comptime. The compiler gets a little interpreter tacked on that can run parts of your code at compile time. Functions, parameters, if statements and loops can all be marked as compile-time code. Any non-comptime code in your block is emitted into the program itself.\n\n\nThis is done by Mojo as well; compile-time macros are just written in Mojo syntax. I would love to have this feature in Rust.\n\n\nOne compile-time feature that would be very helpful is simply performing basic arithmetic. There are plenty of crates that do nasty hacks with macros to simulate this, but it would make, e.g., linear algebra library code much simpler to read and write if we could do calculations at compile time."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 69.3310655,
      "arousal": 52.664399,
      "dominance": 61.6780045,
      "text": "A capability system for potentially dangerous operations sounds super cool, but just isn't possible to enforce at the language level (at least not in a reliable way).\n\n You could check if functions from the standard library are used but a sufficiently motivated threat actor will just perform the syscalls by hand, sidestepping your fancy capabilities. The need for an unsafe capability to do that wouldn't be much of an issue in practice, there are plenty of legit reasons to want unsafe so the user would likely just blindly accept it. Any library that does FFI would be able to circumvent it with ease.\n\nIf you want to achieve such a system you'd need a heavily sandboxed runtime to manage the capabilities, but that comes with overhead that is not compatible with Rust's design constraints. Alternatively the OS could be responsible for managing capabilities, my opinion this is a better choice since they also control the dangerous operations. See [seL4](https://sel4.systems/About/) for example, it's a fascinating microkernel that takes this concept to the next level."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "this guy wants rust to be Based Nu Ocaml, and he's so fucking right for it"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 90.17384733333334,
      "arousal": 65.07936533333333,
      "dominance": 72.29780799999999,
      "text": "Joseph, I've forked the Rust compiler and I have been working on some of the issues you mentioned in your article. Once it's a bit more polished I plan to release it as a alternative toolchain (that you can install with rustup).\n\nSend me a message if you'd like to chat a bit, I'd love to get some feedback/suggestions.\n\nIf you use discord, my nickname is `houtamelo` - feel free to add me.\nOtherwise, I have a public e-mail: houtamelo@pm.me."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "This is how I feel when I remember that proposal of so called deref_patterns has been accepted some 4 years ago and there still isn't even an unstable feature to try them."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.83446699999999,
      "arousal": 62.92517,
      "dominance": 66.836735,
      "text": "I would rather argue, that rust does not need all that man new features.\n\nLook what happens with golang. THe new additions clutter up the syntax, and stray from the idea of idiomatic coding, without providing any real benefit...."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "Its moving slower because its matured a lot and you have a lot of people depending on it - I've heard from a lot of people that rust just isn't stable and dependable (from a language perspective - not an actual finished app or crate)."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.106576,
      "arousal": 67.346939,
      "dominance": 69.614512,
      "text": "I always like when people think about the language itself. Rust isn't perfect. There's a lot of feature that will come in the future."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 61.22449,
      "arousal": 59.467119999999994,
      "dominance": 57.766439500000004,
      "text": "Weird, is he trying to mentally shoe-horn traits into some kind of equivalence with things like the IO monad? (Confused by the use of the effect terminology)"
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.9614512,
      "arousal": 67.3469384,
      "dominance": 70.5668934,
      "text": "This screams the need for a Kotlin equivalent for Rust for those that want much faster evolution and don’t mind a little risk.\n\nKotlin has been a great success because it gave those in charge of Java progress a wake up slap and now Java is better for it too.\n\nRust could then import changes that have been a success."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.44898,
      "arousal": 54.761905,
      "dominance": 68.253968,
      "text": "thought this was satire..."
    },
    {
      "post_title": "Rewriting Rust",
      "created_utc": 1727327169.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 73.35600925,
      "arousal": 63.024376625,
      "dominance": 63.577097375,
      "text": "It sounds like the author should focus more on writing code with the language that's there today and spend less time in the weeds on all of the features that are works in progress and unstable. Sure, over time the language will improve and it'd be nice if some of the stuff being worked on was already finished today, but if you just tune that stuff out and use the language that's there, you can be pleasantly surprised when features you've been waiting for are released instead of getting anxious about stuff that's taking forever or stalled."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Is Rust faster than Fortran and C++? A case study with scientific applications."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "selftext",
      "sentiment": "positive",
      "pleasure": 64.69387739999999,
      "arousal": 36.3265304,
      "dominance": 55.873015800000005,
      "text": "Hi everyone! 👋\n\nOver the past year, I’ve been working on something interesting: We’ve ported the NAS Parallel Benchmarks (NPB) to Rust.\n\nIf you're not familiar with NPB, it's a widely used benchmark suite originally developed in Fortran by NASA’s Numerical Aerodynamic Simulation Program, to compare languages and frameworks for parallelism.\n\nThe NPB-Rust allow us to compare Rust's performance against languages like Fortran and C++ using complex scientific applications derived from physics and computational fluid dynamics as benchmarks.\n\nThe **results** show that Rust’s sequential version is 1.23% slower than Fortran and 5.59% faster than C++, while Rust with Rayon was slower than both Fortran and C++ with OpenMP.\n\nIf you're interested in checking out more of our results, the following links lead to the pre-print paper and the GitHub repository, respectively *(The image used in this post is taken from our pre*\\-*print paper)*:\n\n🧠 NPB-Rust pre-print paper: [https://arxiv.org/abs/2502.15536](https://arxiv.org/abs/2502.15536)\n\n🔗 NPB-Rust GitHub: [https://github.com/GMAP/NPB-Rust](https://github.com/GMAP/NPB-Rust)\n\n...\n\nI'm a member of GMAP (Parallel Application Modeling Group) at PUCRS (Pontifical Catholic University of Rio Grande do Su), where we focus on research related to high-performance computing. The NPB-Rust project is still in progress.\n\n[Partial result of our pre-print paper.](https://preview.redd.it/20e4cl5f7uue1.png?width=735&format=png&auto=webp&s=030fab5f8281acc6b4e299d2c0cdccf328023c85)"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 58.956916,
      "arousal": 28.344671,
      "dominance": 50.680272,
      "text": "I’m assuming the bump at half way is because you are using hyperthreads? If so, I’d be interested to know how rayon is dealing with that better than openmp. Not really related to your paper, just an observation to see if anyone has insights from that crate."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.018140599999995,
      "arousal": 54.739229,
      "dominance": 58.6848072,
      "text": "Thank you very much for your post!\n\nMy professor just accepted my proposal for my bachelor’s thesis on parallel programming in Rust with a focus on benchmarks. My idea is to write small programs myself and measure execution time, scaling, and system resource usage.\n\nmy ideas so far:\n\n* Matrix multiplication\n* Web server (to test I/O-bound task)\n* Differential equation\n* Partial differential equations (heat equation)\n\nNot sure yet if my ideas are good.\n\nI think I should also include at least one professional benchmarking suite like yours.\n\n>🧠 NPB-Rust pre-print paper: [https://arxiv.org/abs/2502.15536](https://arxiv.org/abs/2502.15536)\n\nthanks\n\nNew research is always great to cite, thank you."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.675737,
      "arousal": 58.503401499999995,
      "dominance": 61.6780045,
      "text": "I'm just linking /u/reflexpr-sarah- (faer, pulp, etc) who is working on a custom threading library and can probably elaborate on where it outperforms over rayon. Also if you are not aware, there is a [Rust scientific computing conference](https://scientificcomputing.rs/2025/) which may interest you."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "From a glance I can see the code uses many slice accesses, which may be checked at runtime. How is the situation if you use unsafe to bypass all the checks (which mirrors how C++ works)?"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "I'm not sure it's really appropriate to compare static scheduling in C++ to dynamic work-stealing scheduling in Rust and call it a comparison of C++ and Rust.\n\nThe counter-argument, I assume, is that you're comparing the two most popular shared-memory parallel libraries in each, but they're two completely different approaches to parallelism that are better/worse at different kinds of workloads. It should be expected that a dynamic work-stealing scheduler will be out-performed by a well-balanced static schedule because there's some inherent overhead and no upside (and I think NPB is all regular applications?). The bump you see from hyper-threading is essentially just imbalancing the schedule by making the hardware heterogeneous.\n\nI think you should make an effort to include apples to apples comparisons. Cilk/Intel TBB are some mature work-stealing schedulers in C++. In Rust, I think the best comparison to omp parallel-for would be manual threading?"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 85.941043,
      "arousal": 67.120181,
      "dominance": 76.870748,
      "text": "> The results show that Rust’s sequential version is 1.23% slower than Fortran and 5.59% faster than C++, while Rust with Rayon was slower than both Fortran and C++ with OpenMP\n\nAFAIK Rayon uses LIFO stealing system where it'll randomly steal from any-worker (who's pool isn't locked), when it checks.\n\nOpenMP is slightly smarter as it doesn't do a random (or psuedo-random) \"_do you work I can steal? do you have work I steal?_\") it instead remembers what workers it was able to steal from and tries to steal from them again. The job tracking is slightly different (to my knowledge) as OpenMP just has per-thread slabs of `(bool, *void)` representing `(completed, *const Work)`, which it can update with a single atomic op, while rayon uses a more complicated locking & channel based scheme."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 65.873016,
      "arousal": 42.5170065,
      "dominance": 56.3492065,
      "text": "Awesome work! Great to see Rust for scientific computing.\n\nMy only complaint about the paper are that Fig.5 is difficult to interpret (please do not put bar charts on a log scale). Also, Fig.6 would be cool to see as a speedup graph instead"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 43.537414999999996,
      "arousal": 58.673469499999996,
      "dominance": 49.546485000000004,
      "text": "Kinda sus that the execution time goes up for C++ and Fortran bitwern 20 and 24 threads while rust stays at the same level"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 63.038548666666664,
      "arousal": 54.497354666666666,
      "dominance": 59.674981,
      "text": "There is a rayon fork some time ago that let you swap the parallel library with chili https://www.reddit.com/r/rust/comments/1jk6fzt/i_forked_rayon_to_use_rayonstyle_api_with/\n\nCurious how this compare with the rest of benchmark"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 83.9002265,
      "arousal": 69.50113400000001,
      "dominance": 71.031746,
      "text": "While the spike after 20 threads is the most prominent thing here, I'm also really curious about that drop right at 40 threads. Would love to see more of this graph."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.87981866666667,
      "arousal": 65.23053666666668,
      "dominance": 71.01284933333334,
      "text": "It makes me very happy to see that people are so interested in scientific computing with Rust. I've always thought that it's a perfect  use case for Rust that gets underappreciated."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How do I get a job like this? Sounds so interesting!"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.365079,
      "arousal": 66.439909,
      "dominance": 70.975057,
      "text": "Any idea why the sequential was slightly slower than Fortran?"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I was reading the post, remembering how much it felt like a presentation I saw at ERAD/RS (local HPC conference in Brazil, can’t remember the year), when r/suddenlycaralho."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.60317466666667,
      "arousal": 44.557823000000006,
      "dominance": 63.07634166666667,
      "text": "Thanks for providing both safe, and unsafe rust benchmarks, its an interesting paper. Seems like what you've found is that both OpenMP and Rayon could do with some tweakables for workloads like this\n\nI've been planning to port some test scientific code to Rust to give it a fair shout in the area, possibly in GPUland. I use C++ currently, but its less for performance reasons and more because of the expressiveness of C++'s template system - which lets you do a lot of crazy things that are literally impossible in most languages, like matrix notation that doesn't make you want to die\n\nI have a feeling that things like variadics might be more the bottleneck, but I'm not sure, so it'll be interesting to see what a complex project might look like. Getting good performance out of C style languages in my experience is like getting blood out of a stone (contrary to common wisdom - they're not great for HPC, there's just nothing better)\n\nMaybe we'll all end up writing futhark or something"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "I'm curious how [paralight](https://docs.rs/paralight/) (spoiler: author here) performs on these benchmarks. Rayon's work stealing strategy isn't necessarily optimal (as I discovered in [this blog post](https://gendignoux.com/blog/2024/11/18/rust-rayon-optimized.html)), may introduce non-negligible overhead and doesn't apply tricks such as CPU pinning. But the only way to know is to benchmark on your workload :)"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 72.60015133333333,
      "arousal": 51.058201,
      "dominance": 59.25925933333334,
      "text": "was the benchmark machine translated to rust? loading it in a IDE lights up clippy like a christmas tree"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.0408165,
      "arousal": 64.22902500000001,
      "dominance": 73.29932,
      "text": "I made a differential equation library which in testing showed about a 10% speed advantage for solving ordinary differential equations with the DOP853 algorithm. So I’d say yes. Or at least its a lot easier to be quick"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 98.866213,
      "arousal": 73.015873,
      "dominance": 80.612245,
      "text": "Did you try other multithreading options than rayon as well? Would love to see how otger options compare."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I believe it's a matter of Rayon being slower than OpenMP"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.947846,
      "arousal": 70.861678,
      "dominance": 49.319728,
      "text": "you might want to try thread pinning (kernel level iirc) or core affinity, with the rust version: https://docs.rs/core_affinity/latest/core_affinity/ in order to make sure that the rust threads aren't switching register contexts needlessly. afaik rayon doesn't do pinning, but I could be wrong.\n\n[edit] this _might_ explain the hyperthreading cliff because rust is always trading off cpu affinity… maybe. "
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 71.28684824999999,
      "arousal": 54.393423999999996,
      "dominance": 59.438775500000006,
      "text": "I’ve done a similar study in https://github.com/ParRes/Kernels/tree/main/RUST (other subdirectories contain Fortran and C++). The PRK are in some cases distilled out of NPB because the project initiators wanted to spend less time porting and more time studying computers (one has worked on NPB at NASA for many years). \n\nHappy to discuss more."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.931973,
      "arousal": 61.678005,
      "dominance": 62.585034,
      "text": "On the graph, in sequential, rust is **FASTER** than  both Fortran and C++!!!  \nI hope for you, you have not already send this for review."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "strange to announce that rust is slower while the graph shows the opposite... Here  Fortran is clearly the slowest."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 62.074830000000006,
      "arousal": 63.208616500000005,
      "dominance": 56.632653000000005,
      "text": "Interesting but doesn't really mean things to me until we hit MPI parallelism. \n\nTrue replacement is data center parallelism, which means further than shared memory."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "In general I find these \"is language X faster than language Y\" and you're not just comparing compile times pretty sus.\n\nLanguages make certain constructs easier or more difficult to express, but those constructs should compile to nearly the same byte code. Once you deviate from pure algorithmic implementation and are using complex libraries, then you're testy one library to another."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 59.6938775,
      "arousal": 42.85714299999999,
      "dominance": 51.5873015,
      "text": "Great to see this benchmark! Two things I've noticed:\n- the uncertainty on the rust measurements seems to be significantly smaller than on the others, is that because of a smaller spread or because of more runs? I assume the former one. If so, is this understood?\n- the uncertainty in Table II is way too precise. When you say it's 2.53+- 0.21, this means you're sure that if you were to repeat the runs many times, it will, in 2/3 of the cases (assuming std error) be in exactly this with. Are you sure about this?\nAlso, in general, one digit uncertainty is sufficient, especially in such a \"simple\" case (this isn't a scientific measurement where years went into measuring this one number)\n\n(Wrong significant digits happens aḷl the time with papers)"
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.632653,
      "arousal": 55.555555500000004,
      "dominance": 67.743764,
      "text": "I assume we're talking *safe* Rust? That would be an important data point. It's harder to convince people of Rust in terms of performance if that means giving up it's main selling point."
    },
    {
      "post_title": "Is Rust faster than Fortran and C++? A case study with scientific applications.",
      "created_utc": 1744652656.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.59977325,
      "arousal": 59.552154,
      "dominance": 63.265306,
      "text": "Happy to see some Rust in science, but this kind of cross-language benchmark does not mean anything. Of course, you need to demonstrate that your new implementation has similar performance, but this says nothing as a comparison between languages. All three languages compile to assembly, so with enough effort you could make them generate exactly the same program (well, ABI questions aside). If you wanted to make an actual comparison, you should instead ask questions like: does Rust make it easier to write performant code? Does it reduce debug time? Are you avoiding memory leaks? Etc. Of course, you cannot do that comparison just when rewriting existing software."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "title",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "What language is rust written in? Like Python is written in C."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust was, at some point, written in OCaml but is self-hosting since many, many years now, which means it is written in Rust.\n\nThis is not a secret though, just have a look at the compiler here: https://github.com/rust-lang/rust"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is now fully written in rust!"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "The very first prototypes were written in ocaml. The current version is written in rust. They use the current version to compile the next version."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is written in rust. Well, _technically_ rust uses llvm so the backend is C++. The front end is completely in rust though."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Initially ocaml. But the rust compiler and libraries have long been written in rust"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.91836700000001,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "Python isn't written in C.\n\n\"The\" interpreter is written in C. Many python interpreters exist and not all of them are written in C.\n\nTheoretically you could write one in python as well."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust was originally written in OCaml. However, the compiler was ported to Rust, in a process called bootstrapping."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 84.013605,
      "arousal": 66.666667,
      "dominance": 68.027211,
      "text": "It’s written in English you are all silly"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I'm very new to Rust. I've been learning for a week now. The question I asked is very basic, but I don't know anything yet. Thank you to everyone who answered with patience."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "First compiler was written in Ocaml."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "FYI not all Python implementations are written in C. Indeed, there's an implementation of Python written in Rust!"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Plus it depends on LLVM which isn't written in Rust."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "rust compiled itself"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://www.reddit.com/r/rust/comments/a1j8cv/how_is_rust_built_in_rust/"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Rust is written in Rust 🫡"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 31.972789,
      "arousal": 65.986395,
      "dominance": 32.426304,
      "text": "Aramaic. The borrowing rules were given to Moses on a lost tablet discovered in 2006"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As of now, Rust is written in Rust."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "First Compiler was written in Ocalm"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Thinks it's written in C and Rust."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "but if rust is written in rust, then what is rust written in. say that 10 times fast"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 81.06576,
      "arousal": 61.111111,
      "dominance": 71.882086,
      "text": "You need to learn about compilers. \n\nA language is not \"written\" in any other language. \n\n  \nYou can implement a compiler from a language to another in any programming language you want. Rust probably has multiple compilers."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 60.204082,
      "arousal": 52.60771,
      "dominance": 52.494331,
      "text": "There are some interesting videos and resources out there on how you write a compiler that builds your compiler.\n\nThe super basic concept ist: you start in something else (assembly, etc) and incrementaly add functionality, every time compiling with the previous version.\n\nOnce you have a version 1 of your compiler, every new version gets compiled with the old version"
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "As u/oT0m0To points out it written in Rust, by now. One additional information: In the future this might depend on the compiler one is using. For example, you will have some C in [gccrs](https://github.com/Rust-GCC/gccrs), always.\n\nCompilation of Rust will probably always be in Rust. The bindings and alternative `std` capabilities might have some C or whatever in them."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 51.814059,
      "arousal": 56.689342499999995,
      "dominance": 55.272109,
      "text": "None, if we talk about the Python sense, maybe you could argue Machine Code. The Compiler is written in Rust."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "You know that you can just open rustc repo and take a look?\n\nOriginal rustc was written in OCaml. Then in Rust."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Well, C must have been written in something, right?."
    },
    {
      "post_title": "What language is rust written in? Like Python is written in C.",
      "created_utc": 1740847567.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "In python, rust is written in python"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Limbo: A complete rewrite of SQLite in Rust"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 76.6893422,
      "arousal": 57.006802400000005,
      "dominance": 66.0770976,
      "text": "disclosure: I work here. I am happy to answer any questions\n\n---\n\nWe started with libSQL (MIT), a fork of SQLite. libSQL added server mode and replication, written in Rust. Now we are rewriting SQLite in in a memory safe language. Limbo is designed to be fully asynchronous and is WASM first\n\n\nannouncement post: https://turso.tech/blog/introducing-limbo-a-complete-rewrite-of-sqlite-in-rust"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Hmm the extensibility potential via traits is very cool. I might have to mess around and see if I can get replication working using the wal trait :)"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.93424,
      "arousal": 65.986395,
      "dominance": 61.451247,
      "text": "I'm curious, I've heard that the SQLite test suite is one of the most extensive test suites in all of open source. Is it feasible to run parts of it/all of it on your code with suitable C bindings?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "But will it support SQLite's most important aspect, the code of ethics? :D"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Any plans on adding real types?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "In terms of feature parity, where does Limbo stand? Fully compliant or do we have to wait longer ?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice! Are you seeing any benefits using iouring?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "How does the performance compare to raw sqlite statically compiled (using C) and some common sqlite bindings for rust?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Wow, honestly, this takes the \"rewrite it in rust\" really far"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "I've always appreciated and based a lot of confidence in SQLite on its incredible testing suite(s). Are there are plans to emulate or port these across?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 48.29932,
      "arousal": 49.433107,
      "dominance": 53.628118,
      "text": "Does WASM work by storing pages on IndexedDb similar to https://github.com/jlongster/absurd-sql ?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Whoa! I’ve been wanting to do this for years!\nFirst of all congrats!\n\nI guess an OPFS VFS is in the works? Since the prequisite is async IO it should be much easier :O"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "can it use sqlite's test suite? This must be the litmus test of all sqlite wannabe's."
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 68.4807255,
      "arousal": 47.39229,
      "dominance": 57.48299299999999,
      "text": "If you support STRICT tables from the jump I’m on board. If you add proper datetime types—that would be icing on the cake."
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 80.15873,
      "arousal": 43.764172,
      "dominance": 65.873016,
      "text": "Since it is written in Rust, are there any plans to provide a type-safe Rust API and call the database directly instead of writing SQL?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Are issues mentioned in section 3 of [https://sqlite.org/whyc.html](https://sqlite.org/whyc.html) no longer applicable in RUST?"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Can I contribute code ? I have been studying Database internals and Rust for quite a while"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 74.263039,
      "arousal": 49.659864,
      "dominance": 63.265306,
      "text": "Nice.  Would be really cool to see DuckDb rustified as well.  Feels that it would fit like a fist in the eye."
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "[removed]"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 77.28647000000001,
      "arousal": 51.719576499999995,
      "dominance": 63.58654583333333,
      "text": "The point seems to be memory-safe Rust, and async, and possibly (sometimes already) faster.\n\nIt seems like a lot of work, so is it intended to have no unsafe regions in Rust? Then it seems valuable. If not, even with one or few, it seems like all bets are off in Rust, then why bother? I'm thinking how do you then migrate? It seems to me you can start with Rust, and for all not-yet implemented code, you can call SQLite or libSQL code, already tested. It seem pointless to have any unsafe Rust code, since you might have the already tested C code. Knowing fully memory-save would mean dropping all those, for fewer features.\n\n  \nAre there any any tools to convert C to Rust, for at least \"unsafe\" Rust code? That might also do. It seems such code wouldn't be any better (or worse) Rust code than C, but a steppingstone to then make it safe Rust code. I doubt any converter manages to make safe Rust code?!"
    },
    {
      "post_title": "Limbo: A complete rewrite of SQLite in Rust",
      "created_utc": 1733851246.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 45.918367,
      "arousal": 70.068027,
      "dominance": 51.247166,
      "text": "python bindings when?"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "title",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 52.947845666666666,
      "arousal": 55.06424766666667,
      "dominance": 53.628118,
      "text": "I wonder what are the reasons for moving from C#. Is it simply performance or something else? It's not like C# is Python/Ruby level slow."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Who wants to rewrite in Rust the Excel VBA interpreter?"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "RIIR is now basically an architecture pattern"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 67.91383233333333,
      "arousal": 52.607709666666665,
      "dominance": 64.70143633333333,
      "text": "Personal opinion. With Rust they can move some of the code from cloud to client using WASM. If you can move some of the office core functionality to client, you can save on computation cost, but more importantly you can reduce the need for stateful session, or at least reduce the foorprint of it."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Funny that they first decide to rewrite in rust, second hire a principal architect. "
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 79.8752835,
      "arousal": 61.5079365,
      "dominance": 65.3061225,
      "text": "Maybe a good move, but most of the GC langs are rebuilding with more performance and memory safety. Golang is the pioneer low-level, concurrency, cross compilation.  C# and Java are trying to catch up with AOT and Java new Threading models."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "negative",
      "pleasure": 33.446712,
      "arousal": 73.24263,
      "dominance": 47.732426,
      "text": "My buddy told me stories on how they make Rust “work” at MSFT.\n\nThink of that meme for Typescript developers and the “any” type (just slap it on whenever things are getting tough).\n\nNow apply that to Rust. He said it boils down to C++ with different syntax."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 82.76644,
      "arousal": 63.605442,
      "dominance": 69.727891,
      "text": "i purchased 365 pro plus lifetime 5tb 5 devices mac/pc from this website:\n\nw w w dot software-heaven dot company dot site\n\nits been working fine for 9 months, never had an issue however i just saw info these are not an actual product, so, how comes i have one and it works?\n\n\n\ntyia."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Now reverse  a linked list in rust"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 87.868481,
      "arousal": 68.367347,
      "dominance": 62.358277,
      "text": "yeah java is pretty much deprecated at this point"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "Prague, Czech Republic?"
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 66.91609980000001,
      "arousal": 49.5918364,
      "dominance": 66.553288,
      "text": "The Windows/Office group was always loyal to C/C++. They never liked .NET, so they were slow to adopt and integrate it. It was an internal battle for years. Steve Ballard came from the Windows/Office side and was loyal to it. Padel changed the culture somewhat. This makes sense to me from a cultural point of view."
    },
    {
      "post_title": "Microsoft is hiring for a new team, responsible for migrating C# code to Rust on Microsoft 365.",
      "created_utc": 1706618292.0,
      "unit_type": "comment",
      "sentiment": "positive",
      "pleasure": 78.798186,
      "arousal": 53.968254,
      "dominance": 72.108844,
      "text": "Maybe it could be interesting for Microsoft 365 teams too, F#, via Fable compiler, can be compiled into several target languages, including Rust (in alpha).  \n[https://jkone27-3876.medium.com/compile-f-to-rust-22cf5aa9021](https://jkone27-3876.medium.com/compile-f-to-rust-22cf5aa9021)\n\nthe advantage could be having HM type inference and auto typings while achieving near-native performance/rust performance with a bit of a higher level language?  \n\n\n[https://fable.io/docs/getting-started/rust.html](https://fable.io/docs/getting-started/rust.html)\n\nthe advantage could be having HM type inference and auto typings while achieving near-native performance/rust performance with a bit of a higher level language.  \nsrc level lang?"
    },
    {
      "post_title": "Major Indonesian Bank (CIMB Niaga) Transition from Java to Rust Yields 486x Boost in Memory Efficiency",
      "created_utc": 1731067550.0,
      "unit_type": "title",
      "sentiment": "positive",
      "pleasure": 75.056689,
      "arousal": 61.451247,
      "dominance": 57.936508,
      "text": "Major Indonesian Bank (CIMB Niaga) Transition from Java to Rust Yields 486x Boost in Memory Efficiency"
    },
    {
      "post_title": "Major Indonesian Bank (CIMB Niaga) Transition from Java to Rust Yields 486x Boost in Memory Efficiency",
      "created_utc": 1731067550.0,
      "unit_type": "selftext",
      "sentiment": "empty",
      "pleasure": 0.0,
      "arousal": 0.0,
      "dominance": 0.0,
      "text": "https://preview.redd.it/uy20rtbh4ozd1.png?width=720&format=png&auto=webp&s=0796477c0ef179f9ae87def23cdbd7ab0e5b66e8\n\nRead more at:\n\n[https://medium.com/cimb-niaga-engineering/delivering-superior-banking-experiences-bc7ca491eae5](https://medium.com/cimb-niaga-engineering/delivering-superior-banking-experiences-bc7ca491eae5)"
    }
  ]
}